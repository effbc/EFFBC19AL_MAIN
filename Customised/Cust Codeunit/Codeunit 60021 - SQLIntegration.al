codeunit 60021 SQLIntegration
{
    // version SQL INTEGRATION,Rev01

    // SchLine

    Permissions = TableData "Sales Invoice Header" = rimd,
                  TableData "Change Log Entry" = rimd;

    trigger OnRun();
    var
        CreationProdOrderfromOMS: Codeunit "Create Prod. Order from Sale";
        PlannedQuantity: Integer;
        SaleDesc: Text[30];
        PlanDate: Date;
        RPOExisted: Integer;
        Product: Text[60];
        TenderHeader: Record "Tender Header";
        ProdOrder: Record "Production Order";
        WeekStart: Text[1000];
        WeekEnd: Text[1000];
        ProdOrderLine: Record "Prod. Order Line";
        Description: Text[120];
    begin

        //Stenicil_Alerts('ECPCBDS01742');
        // Stencil_Mail_Alerts('a');

        PRMRefresh;
        // CashflowAuthMail;
        /*
        vendor.RESET;
        vendor.SETFILTER("No.",'%1|%2','V01096','V02943');
        IF vendor.FINDSET THEN
        REPEAT
          TestCodeUnit.SetVendorRec(vendor);
          IF NOT TestCodeUnit.RUN THEN;
        UNTIL vendor.NEXT=0;
        */

    end;

    var
        Quotes: Label '''';
        Text50001: Label 'NEW';
        Text50002: Label 'OLD';
        SQLQuery: Text[1000];
        SalesHeader: Record "Sales Header";
        SalesLine: Record "Sales Line";
        UpdateWebHead: Text;
        RowCount: Integer;
        "Production Order": Record "Production Order";
        NewStatus: Option;
        NewOrderType: Option ItemOrder,ProjectOrder;
        DeleteQuery: Text;
        IndentHeader: Record "Indent Header";
        itemTable: Record Item;
        ConnectionOpen: Integer;
        NoOfRowsAffected: Integer;
        test: Text[30];
        "--Rev01": Integer;
        //>> ORACLE UPG
        /*  SQLConnection: Automation "'{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8:'{00000514-0000-0010-8000-00AA006D2EA4}':''{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8'.Connection";
         RecordSet: Automation "'{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8:'{00000535-0000-0010-8000-00AA006D2EA4}':''{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8'.Recordset"; */
        //<< ORACLE UPG
        Day: Integer;
        Month: Integer;
        Year: Integer;
        User: Code[10];
        usersetup: Record "User Setup";
        GLSetup: Record "General Ledger Setup";
        x: Integer;
        SaleLineGRec: Record "Sales Line";
        Status: Text;
        SQLQuery1: Text;
        SQLQuery2: Text;
        SQLQuery3: Text;
        RowCountNew: Integer;
        OrderTypeDesc: Code[15];
        PeriodNum: Integer;
        AccountYear: Integer;
        //>> ORACLE UPG
        /* RecordSet1: Automation "'{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8:'{00000535-0000-0010-8000-00AA006D2EA4}':''{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8'.Recordset";
        RecordSet2: Automation "'{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8:'{00000535-0000-0010-8000-00AA006D2EA4}':''{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8'.Recordset"; */
        //<< ORACLE UPG
        AdvPaymentDate: Date;

        RowCount2: Integer;
        RowCount1: Integer;
        To_Be_Paid_Adv_Amt: Decimal;
        vendor: Record Vendor;
        //TestCodeUnit: Codeunit "Test  (Analysis View Entry )";
        CurrencyFactor: Decimal;
        Item_no: Text;
        PBH: Record "Production BOM Header";
        PBL: Record "Production BOM Line";
        Bom_cnt: Integer;
        PCB: Record PCB;
        STENCIL_CONFIGURED_NO: Text;
        Configured_pcb: Text;
        Mail_From: Text[250];
        Mail_To: Text[250];
        //  Mail: Codeunit "SMTP Mail";
        Subject: Text[250];
        Body: Text[1024];
        Configured_status: Text;
        Configured_pcb_count: Integer;
        RPO: Record "Production Order";
        RPOLine: Record "Prod. Order Line";
        OtherDeductions: Decimal;
        RCMDeductions: Decimal;
        SAL_INV: Record "Sales Invoice Header";
        payment: Record "Payment Terms";
        reurn_due_days: Integer;
        payment_Realization_Date: Date;


    procedure SaleOrderCreationinOMS(SaleHeader: Record "Sales Header") Success: Boolean;
    var
        CreationQuery: Text;
        CustomerId: Integer;
        OrderPeriod: Integer;
        OrderValue: BigInteger;
        WeekStart: Text;
        WeekEnd: Text;
        SalesPerson: Text[30];
        Installation: Integer;
        RDSO: Integer;
        CustomerDate: Text[30];
        SaleDesc: Text[30];
        OrderId: Text[30];
        CompletionDate: Text[30];
        CustomerOrder: Text[70];
        CallletterReq: Text[30];
        Callletterrece: Text[30];
        CallletterExpir: Text[30];
        ChangeLog: Record "Change Log Entry";
        Preval: Text[250];
        fieldNo: Integer;
        PresVal: Text[250];
        DDate: Date;
        OrderStatus: Integer;
        TrackingQuery: Text[1000];
        Schedule: Record Schedule2;
        Inspection: Boolean;
        SchLine: Text[100];
        Qunt: Decimal;
        TrckPerson: Text[30];
        Extension: Text[30];
        InnerQuery: Text[1000];
        OrdStatus: Integer;
        InnStatus: Decimal;
        SheNo: Integer;
        NewQty: Decimal;
        STATUS1: Text;
        CUSTOMER_ID1: Text;
        CUST_NAME1: Text;
        ORDER_VALUE1: Text;
        EXPECTED_WEEK_START_DATE1: Text;
        SALE_DESC1: Text;
        EXPECTED_WEEK_END_DATE1: Text;
        ENTRY_PERSON1: Text;
        INSTALLATION1: Text;
        RDSO1: Text;
        CUSTOMER_EXPECTING_DATE1: Text;
        CUSTOMER_ORDER_NO1: Text;
        CAL_LETTER_EXT_FLAG1: Text;
        CAL_LETTER_RECV1: Text;
        CAL_LETTER_EXPIR_DATE1: Text;
        CAL_LETTER_REC_DATE1: Text;
        ORDER_COMPLETION_PERIOD1: Text;
        ORDER_ID1: Text;
        T1: Text;
        T2: Text;
        T3: Text;
        T4: Text;
        T5: Text;
        temp1: Text;
        //>> ORACLE UPG
        /*  RecordSetx: Automation "'{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8:'{00000535-0000-0010-8000-00AA006D2EA4}':''{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8'.Recordset";
         RecordSety: Automation "'{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8:'{00000535-0000-0010-8000-00AA006D2EA4}':''{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8'.Recordset";
         RecordSet1: Automation "'{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8:'{00000535-0000-0010-8000-00AA006D2EA4}':''{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8'.Recordset";
         RecordSet2: Automation "'{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8:'{00000535-0000-0010-8000-00AA006D2EA4}':''{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8'.Recordset"; */
        //<< ORACLE UPG
        NewOrderID: Integer;
        RowCount1: Integer;
        QtyDiff: Decimal;
        RowCount2: Integer;
        ItmLQ: Decimal;
        Schedule2: Record Schedule2;
        schdlQty: Decimal;
        SchdlInsrct: Decimal;
        schdlOMSQty: Decimal;
        QTYTEMP: Decimal;
        RecCountx: Integer;
        LINESCOUNT: Decimal;
        TempLQ: Decimal;
        ChangeLogNew: Record "Change Log Entry";
        CallletterStatus: Integer;
    begin
        // MESSAGE('sql intgrtn');           //Added By Pranavi on 06-08-2015
        // usersetup.RESET;
        // usersetup.SETFILTER(usersetup."User ID", USERID);
        // IF usersetup.FINDFIRST THEN
        //     User := usersetup."Current UserId";
        // // User:='10RD010';                //Commented by Pranavi on 06-08-2015

        // //>> ORACLE UPG
        // /* IF ISCLEAR(SQLConnection) THEN
        //     CREATE(SQLConnection, FALSE, TRUE);//Rev01

        // IF ISCLEAR(RecordSet) THEN
        //     CREATE(RecordSet, FALSE, TRUE);//Rev01

        // IF ISCLEAR(RecordSet1) THEN
        //     CREATE(RecordSet1, FALSE, TRUE);//Rev01

        // IF ISCLEAR(RecordSet2) THEN
        //     CREATE(RecordSet2, FALSE, TRUE);//Rev01

        // IF ISCLEAR(RecordSetx) THEN
        //     CREATE(RecordSetx, FALSE, TRUE);//Rev01

        // IF ISCLEAR(RecordSety) THEN
        //     CREATE(RecordSety, FALSE, TRUE);//Rev01 */
        // //<< ORACLE UPG

        // RowCount := 0;
        // NewOrderID := 0;
        // //>> ORACLE UPG
        // /*  IF ConnectionOpen <> 1 THEN BEGIN
        //      SQLConnection.ConnectionString := 'DSN=omserp;UID=omsuser;PASSWORD=management;SERVER=oracle_80;';
        //      SQLConnection.Open;
        //      SQLConnection.BeginTrans;
        //      ConnectionOpen := 1;
        //  END; */

        // IF SaleHeader."Document Type" = SaleHeader."Document Type"::Order THEN BEGIN
        //     SQLQuery := 'select to_char(ORDER_ID)ORDER_ID,to_char(ORDER_TRACKING_STATUS)ODS,' +
        //               ' to_char(LAST_MODIFY_DATE,''' + 'dd-mon-yy' + ''')Ls,' +
        //               ' ENTRY_PERSON,to_char(EXPECTED_WEEK_START_DATE,''' + 'dd-mon-yy' + ''')exps,to_char(ORDER_PRIORITY)OP,' +
        //               ' to_char(STATUS)st,REMARKS,to_char(CAL_LETTER_EXP_DATE,''' + 'dd-mon-yy' + '''), ' +
        //               ' to_char(CUSTOMER_EXPECTING_DATE' +
        //               ',''' + 'dd-mon-yy' + ''')cs,to_char(ORDER_VALUE)Ov,to_char(ORDER_COMPLETION_DATE,''' + 'dd-mon-yy' + ''') ' +
        //               ' from OMS_ORDER_MASTER_MAIN1 where sale_desc = ''' + SaleHeader."No." + ''' order by order_id';
        //     OrderStatus := 8;

        // END
        // ELSE BEGIN
        //     SQLQuery := 'select  to_char(ORDER_ID)ORDER_ID ' +
        //               ' from OMS_ORDER_MASTER_MAIN1 where BLANKET_DESC= ''' + SaleHeader."No." + '''';
        //     IF COPYSTR(SaleHeader."No.", 5, 3) = 'EXP' THEN
        //         OrderStatus := 6
        //     ELSE
        //         OrderStatus := 8;
        // END;

        // RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        // RowCount := 0;
        // IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //     RecordSet.MoveFirst;
        // WHILE NOT RecordSet.EOF DO BEGIN
        //     IF RowCount = 0 THEN BEGIN
        //         OrderId := FORMAT(RecordSet.Fields.Item('ORDER_ID').Value);
        //     END;
        //     RowCount := RowCount + 1;
        //     RecordSet.MoveNext;
        // END;


        // BEGIN

        //     CustomerCreationinOMS(SaleHeader."Bill-to Customer No.");
        //     WeekStart := FORMAT(SaleHeader."Expecting Week", 0, '<Day>-<Month Text,3>-<Year4>');
        //     IF (SaleHeader."Document Type" = SaleHeader."Document Type"::Order) THEN BEGIN
        //         IF FORMAT(TODAY) = FORMAT(TODAY, 0, '<Day,2>-<Month,2>-<Year>') THEN BEGIN
        //             SQLQuery := 'select to_char(Customer_id)Customer_id,to_char((next_day(sysdate,''' + 'MONDAY' + ''')-7), ' +
        //                       '''' + 'DD-MM-YY' + ''')WeekStart, ' +
        //                       ' to_char((next_day(sysdate,''' + 'MONDAY' + ''')-7)+7,''' + 'DD-MON-YY' + ''')WeekEnd ' +
        //                       ',to_char((next_day(sysdate,''' + 'MONDAY' + ''')-7)+7,''' + 'DD-MON-YY' + ''')WeekSt ' +
        //                       'from OMS_CUSTOMER_MASTER1 where ERP_CUSTOMER_ID like ''' + SaleHeader."Bill-to Customer No." + '''';
        //         END
        //         ELSE BEGIN
        //             SQLQuery := 'select to_char(Customer_id)Customer_id,to_char((next_day(sysdate,''' + 'MONDAY' + ''')-7), ' +
        //                       '''' + 'mm-dd-YY' + ''')WeekStart, ' +
        //                       ' to_char((next_day(sysdate,''' + 'MONDAY' + ''')-7)+7,''' + 'DD-MON-YY' + ''')WeekEnd ' +
        //                       ',to_char((next_day(sysdate,''' + 'MONDAY' + ''')-7)+7,''' + 'DD-MON-YY' + ''')WeekSt ' +
        //                       'from OMS_CUSTOMER_MASTER1 where ERP_CUSTOMER_ID like ''' + SaleHeader."Bill-to Customer No." + '''';
        //         END;
        //     END
        //     ELSE BEGIN
        //         IF FORMAT(TODAY) = FORMAT(TODAY, 0, '<Day,2>-<Month,2>-<Year>') THEN BEGIN
        //             SQLQuery := 'select to_char(Customer_id)Customer_id,to_char((next_day(''' + WeekStart + ''',''' + 'MONDAY' + ''')-7), ' +
        //                 '''' + 'DD-MM-YY' + ''')WeekStart, ' +
        //                 ' to_char((next_day(''' + WeekStart + ''',''' + 'MONDAY' + ''')-7)+7,''' + 'DD-MON-YY' + ''')WeekEnd ' +
        //                 ',to_char((next_day(''' + WeekStart + ''',''' + 'MONDAY' + ''')-7)+7,''' + 'mmddyy' + ''')WeekSt ' +
        //                 'from OMS_CUSTOMER_MASTER1 where ERP_CUSTOMER_ID like ''' + SaleHeader."Bill-to Customer No." + '''';
        //         END
        //         ELSE BEGIN
        //             SQLQuery := 'select to_char(Customer_id)Customer_id,to_char((next_day(''' + WeekStart + ''',''' + 'MONDAY' + ''')-7), ' +
        //                 '''' + 'MM-DD-YY' + ''')WeekStart, ' +
        //                 ' to_char((next_day(''' + WeekStart + ''',''' + 'MONDAY' + ''')-7)+7,''' + 'DD-MON-YY' + ''')WeekEnd ' +
        //                 ',to_char((next_day(''' + WeekStart + ''',''' + 'MONDAY' + ''')-7)+7,''' + 'mmddyy' + ''')WeekSt ' +
        //                 'from OMS_CUSTOMER_MASTER1 where ERP_CUSTOMER_ID like ''' + SaleHeader."Bill-to Customer No." + '''';

        //         END;
        //     END;
        //     RecordSet := SQLConnection.Execute(SQLQuery, RowCount);

        //     IF RowCount = 0 THEN
        //         ERROR('Plan Pending Orders does not exist');

        //     IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //         RecordSet.MoveFirst;

        //     WHILE NOT RecordSet.EOF DO BEGIN
        //         EVALUATE(CustomerId, FORMAT(RecordSet.Fields.Item('Customer_id').Value));
        //         CustomerOrder := SaleHeader."Customer OrderNo.";
        //         WeekStart := FORMAT(RecordSet.Fields.Item('WeekStart').Value);
        //         SalesPerson := SaleHeader."Salesperson Code";
        //         OrderValue := ROUND(SaleHeader."Sale Order Total Amount", 1, '=');
        //         WeekEnd := FORMAT(RecordSet.Fields.Item('WeekEnd').Value);
        //         Installation := 0;
        //         CASE SaleHeader.Installation OF
        //             SaleHeader.Installation::RlyInstallation:
        //                 Installation := 2;
        //             SaleHeader.Installation::EffInstallation:
        //                 Installation := 1;
        //             SaleHeader.Installation::"RLY&EFF":
        //                 Installation := 1;
        //         END;
        //         RDSO := 0;
        //         IF SaleHeader."RDSO Inspection Req" = SaleHeader."RDSO Inspection Req"::YES THEN BEGIN
        //             RDSO := 1;
        //         END;
        //         OrderPeriod := ROUND(SaleHeader."Order Completion Period", 1);
        //         //MESSAGE(FORMAT(EVALUATE(DDate,FORMAT(RecordSet.Fields.Item('WeekStart').Value))));
        //         EVALUATE(DDate, FORMAT(RecordSet.Fields.Item('WeekStart').Value));
        //         WeekStart := FORMAT(DMY2DATE(DATE2DMY(DDate, 1), DATE2DMY(DDate, 2), DATE2DMY(DDate, 3)), 0, '<Day>-<Month Text,3>-<Year4>');
        //         DDate := CALCDATE(FORMAT(OrderPeriod) + 'D', DDate);
        //         //MESSAGE(FORMAT(DDate));
        //         CompletionDate := FORMAT(DDate, 0, '<Day>-<Month Text,3>-<Year4>');
        //         CustomerDate := FORMAT(SaleHeader."Requested Delivery Date", 0, '<Day>-<Month Text,3>-<Year4>');
        //         IF CustomerDate = '' THEN
        //             CustomerDate := CompletionDate;
        //         IF (SaleHeader."RDSO Inspection Req" = SaleHeader."RDSO Inspection Req"::YES) AND
        //            (SaleHeader."Document Type" = SaleHeader."Document Type"::Order) THEN BEGIN
        //             IF SaleHeader."Call letters Status" = SaleHeader."Call letters Status"::Received THEN BEGIN
        //                 Callletterrece := FORMAT(SaleHeader.CallLetterRecivedDate, 0, '<Day>-<Month Text,3>-<Year4>');
        //                 CallletterExpir := FORMAT(SaleHeader.CallLetterExpireDate, 0, '<Day>-<Month Text,3>-<Year4>');
        //                 RDSO := 1;
        //             END
        //             ELSE BEGIN
        //                 CallletterReq := FORMAT(SaleHeader."Call Letter Exp.Date", 0, '<Day>-<Month Text,3>-<Year4>');
        //                 RDSO := 1;
        //             END;
        //         END;
        //         SaleDesc := SaleHeader."No.";
        //         RecordSet.MoveNext;
        //     END;

        //     CreationQuery := '';
        //     IF (SaleHeader."RDSO Inspection Req" = SaleHeader."RDSO Inspection Req"::NA) OR
        //        (SaleHeader."Document Type" = SaleHeader."Document Type"::"Blanket Order") THEN BEGIN
        //         IF (SaleHeader."Document Type" = SaleHeader."Document Type"::"Blanket Order") THEN BEGIN
        //             /*IF SaleHeader."Call letters Status" = SaleHeader."Call letters Status"::NA THEN
        //               BEGIN

        //               END
        //             ELSE IF SaleHeader."Call letters Status" = SaleHeader."Call letters Status"::Received THEN
        //               BEGIN

        //               END
        //               ELSE IF SaleHeader."Call letters Status" = SaleHeader."Call letters Status"::Pending THEN
        //               BEGIN

        //               END*/
        //             CreationQuery := 'insert into OMS_ORDER_MASTER_MAIN1(ORDER_ID, STATUS, CUSTOMER_ID,CUST_NAME, ORDER_ENTRY_DATE,' +
        //             'ORDER_COMPLETION_PERIOD, ORDER_VALUE, EXPECTED_WEEK_START_DATE, EXPECTED_WEEK_END_DATE, ORDER_PRIORITY,' +
        //             'ENTRY_PERSON, INSTALLATION, RDSO, LAST_MODIFY_DATE, ORDER_TRACKING_STATUS , CUSTOMER_EXPECTING_DATE,BLANKET_DESC ' +
        //             ',ORDER_COMPLETION_DATE,TRACKING_PERSON_ID, CAL_LETTER_EXT_FLAG' +
        //             ') values((select Max(order_id)+1 from OMS_ORDER_MASTER_MAIN1),' + FORMAT(OrderStatus) + ',' + FORMAT(CustomerId) + ',''' + FORMAT(SaleHeader."Sell-to Customer Name") + ''',sysdate,' +
        //             '' + FORMAT(OrderPeriod) + ',' + FORMAT(OrderValue) + ',''' + FORMAT(WeekStart) + ''',''' + FORMAT(WeekEnd) + ''',1,''' + SalesPerson + ''',' +
        //             '' + FORMAT(Installation) + ',' + FORMAT(RDSO) + ',sysdate,6,''' + CompletionDate + ''',''' + SaleDesc + ''',''' + CompletionDate + ''',' +
        //             '''' + User + ''',0)';
        //             //MESSAGE(CreationQuery+'1');
        //         END
        //         ELSE
        //             CreationQuery := 'insert into OMS_ORDER_MASTER_MAIN1(ORDER_ID, STATUS, CUSTOMER_ID,CUST_NAME, ORDER_ENTRY_DATE,' +
        //             'ORDER_COMPLETION_PERIOD, ORDER_VALUE, EXPECTED_WEEK_START_DATE, EXPECTED_WEEK_END_DATE, ORDER_PRIORITY,' +
        //             'ENTRY_PERSON, INSTALLATION, RDSO, LAST_MODIFY_DATE, ORDER_TRACKING_STATUS, CUSTOMER_EXPECTING_DATE ,SALE_DESC ' +
        //             ',ORDER_COMPLETION_DATE,CUSTOMER_ORDER_NO,RELEASE_DATE,TRACKING_PERSON_ID, CAL_LETTER_EXT_FLAG) values(' +
        //             '(select Max(order_id)+1 from OMS_ORDER_MASTER_MAIN1),' +
        //             '' + FORMAT(OrderStatus) + ',' + FORMAT(CustomerId) + ',''' + FORMAT(SaleHeader."Sell-to Customer Name") + ''',sysdate,' + FORMAT(OrderPeriod) + ',' + FORMAT(OrderValue) + ',' +
        //             '''' + FORMAT(WeekStart) + ''',''' + FORMAT(WeekEnd) + ''',1,''' + SalesPerson + ''',' + FORMAT(Installation) + ',' + FORMAT(RDSO) + '' +
        //             ',sysdate,6,''' + CustomerDate + ''',''' + SaleDesc + ''',''' + CompletionDate + ''',''' + CustomerOrder + ''',sysdate,' +
        //             '''' + User + ''',0)';
        //         // MESSAGE(CreationQuery+'2');
        //     END
        //     ELSE BEGIN
        //         IF SaleHeader."Call letters Status" = SaleHeader."Call letters Status"::Received THEN BEGIN
        //             CreationQuery := 'insert into OMS_ORDER_MASTER_MAIN1(ORDER_ID, STATUS, CUSTOMER_ID,CUST_NAME, ORDER_ENTRY_DATE,' +
        //             'ORDER_COMPLETION_PERIOD, ORDER_VALUE, EXPECTED_WEEK_START_DATE, EXPECTED_WEEK_END_DATE, ORDER_PRIORITY,' +
        //             'ENTRY_PERSON, INSTALLATION, RDSO, LAST_MODIFY_DATE, ORDER_TRACKING_STATUS, CUSTOMER_EXPECTING_DATE ,SALE_DESC ' +
        //             ',ORDER_COMPLETION_DATE,CUSTOMER_ORDER_NO,RELEASE_DATE,CAL_LETTER_RECV, CAL_LETTER_EXPIR_DATE, CAL_LETTER_REC_DATE  ' +
        //             ',TRACKING_PERSON_ID, CAL_LETTER_EXT_FLAG) values((select Max(order_id)+1 from OMS_ORDER_MASTER_MAIN1),' +
        //             '' + FORMAT(OrderStatus) + ',' + FORMAT(CustomerId) + ',''' + FORMAT(SaleHeader."Sell-to Customer Name") + ''',sysdate, ' +
        //             '' + FORMAT(OrderPeriod) + ',' + FORMAT(OrderValue) + ',''' + FORMAT(WeekStart) + ''',''' + FORMAT(WeekEnd) + ''',1,''' + SalesPerson + ''',' +
        //             '' + FORMAT(Installation) + ',1,sysdate,6,''' + CustomerDate + ''',''' + SaleDesc + ''',''' + CompletionDate + ''',' +
        //             '''' + CustomerOrder + ''',sysdate,1,''' + CallletterExpir + ''',''' + Callletterrece + ''',''' + User + ''',0)';
        //             //MESSAGE(CreationQuery+'3');
        //         END
        //         ELSE
        //             IF SaleHeader."Call letters Status" = SaleHeader."Call letters Status"::NA THEN BEGIN
        //                 CreationQuery := 'insert into OMS_ORDER_MASTER_MAIN1(ORDER_ID, STATUS, CUSTOMER_ID,CUST_NAME, ORDER_ENTRY_DATE,' +
        //                 'ORDER_COMPLETION_PERIOD, ORDER_VALUE, EXPECTED_WEEK_START_DATE, EXPECTED_WEEK_END_DATE, ORDER_PRIORITY,' +
        //                 'ENTRY_PERSON, INSTALLATION, RDSO, LAST_MODIFY_DATE, ORDER_TRACKING_STATUS, CUSTOMER_EXPECTING_DATE ,SALE_DESC ' +
        //                 ',ORDER_COMPLETION_DATE,CUSTOMER_ORDER_NO,RELEASE_DATE,CAL_LETTER_RECV, CAL_LETTER_EXPIR_DATE, CAL_LETTER_REC_DATE  ' +
        //                 ',TRACKING_PERSON_ID, CAL_LETTER_EXT_FLAG) values((select Max(order_id)+1 from OMS_ORDER_MASTER_MAIN1),' +
        //                 '' + FORMAT(OrderStatus) + ',' + FORMAT(CustomerId) + ',''' + FORMAT(SaleHeader."Sell-to Customer Name") + ''',sysdate, ' +
        //                 '' + FORMAT(OrderPeriod) + ',' + FORMAT(OrderValue) + ',''' + FORMAT(WeekStart) + ''',''' + FORMAT(WeekEnd) + ''',1,''' + SalesPerson + ''',' +
        //                 '' + FORMAT(Installation) + ',1,sysdate,6,''' + CustomerDate + ''',''' + SaleDesc + ''',''' + CompletionDate + ''',' +
        //                 '''' + CustomerOrder + ''',sysdate,3,''' + CallletterExpir + ''',''' + Callletterrece + ''',''' + User + ''',0)';
        //                 //MESSAGE(CreationQuery+'3');
        //             END
        //             ELSE
        //                 IF SaleHeader."Call letters Status" = SaleHeader."Call letters Status"::Pending THEN BEGIN
        //                     CreationQuery := 'insert into OMS_ORDER_MASTER_MAIN1(ORDER_ID, STATUS, CUSTOMER_ID,CUST_NAME, ORDER_ENTRY_DATE,' +
        //                     'ORDER_COMPLETION_PERIOD, ORDER_VALUE, EXPECTED_WEEK_START_DATE, EXPECTED_WEEK_END_DATE, ORDER_PRIORITY,' +
        //                     'ENTRY_PERSON, INSTALLATION, RDSO, LAST_MODIFY_DATE, ORDER_TRACKING_STATUS, CUSTOMER_EXPECTING_DATE ,SALE_DESC ' +
        //                     ',ORDER_COMPLETION_DATE,CUSTOMER_ORDER_NO,RELEASE_DATE,CAL_LETTER_RECV, CAL_LETTER_EXPIR_DATE, CAL_LETTER_REC_DATE  ' +
        //                     ',TRACKING_PERSON_ID, CAL_LETTER_EXT_FLAG) values((select Max(order_id)+1 from OMS_ORDER_MASTER_MAIN1),' +
        //                     '' + FORMA + FORMAT(CustomerId) + ',''' + FORMAT(SaleHeader."Sell-to Customer Name") + ''',sysdate, ' +
        //                     '' + FORMAT(OrderPeriod) + ',' + FORMAT(OrderValue) + ',''' + FORMAT(WeekStart) + ''',''' + FORMAT(WeekEnd) + ''',1,''' + SalesPerson + ''',' +
        //                     '' + FORMAT(Installation) + ',1,sysdate,6,''' + CustomerDate + ''',''' + SaleDesc + ''',''' + CompletionDate + ''',' +
        //                     '''' + CustomerOrder + ''',sysdate,2,''' + CallletterExpir + ''',''' + Callletterrece + ''',''' + User + ''',0)';
        //                     //MESSAGE(CreationQuery+'3');
        //                 END
        //                 ELSE BEGIN

        //                     CreationQuery := 'insert into OMS_ORDER_MASTER_MAIN1(ORDER_ID, STATUS, CUSTOMER_ID,CUST_NAME, ORDER_ENTRY_DATE,' +
        //                     'ORDER_COMPLETION_PERIOD, ORDER_VALUE, EXPECTED_WEEK_START_DATE, EXPECTED_WEEK_END_DATE, ORDER_PRIORITY,' +
        //                     'ENTRY_PERSON, INSTALLATION, RDSO, LAST_MODIFY_DATE, ORDER_TRACKING_STATUS, CUSTOMER_EXPECTING_DATE ,SALE_DESC ' +
        //                     ',ORDER_COMPLETION_DATE,CUSTOMER_ORDER_NO,RELEASE_DATE,CAL_LETTER_EXP_DATE,TRACKING_PERSON_ID, CAL_LETTER_EXT_FLAG ' +
        //                     ') values((select Max(order_id)+1 from OMS_ORDER_MASTER_MAIN1),' + FORMAT(OrderStatus) + ',' + FORMAT(CustomerId) + ',''' + FORMAT(SaleHeader."Sell-to Customer Name") + ''',sysdate, ' +
        //                     '' + FORMAT(OrderPeriod) + ',' + FORMAT(OrderValue) + ',''' + FORMAT(WeekStart) + ''',''' + FORMAT(WeekEnd) + ''',1,''' + SalesPerson + ''',' +
        //                     '' + FORMAT(Installation) + ',1,sysdate,6,''' + CustomerDate + ''',''' + SaleDesc + ''',''' + CompletionDate + ''',' +
        //                     '''' + CustomerOrder + ''',sysdate,''' + CallletterReq + ''',''' + User + ''',0)';


        //                 END;
        //     END;
        //     IF CreationQuery <> '' THEN
        //         SQLConnection.Execute(CreationQuery);
        //     SQLConnection.CommitTrans;
        //     SQLConnection.BeginTrans;

        //     //*************************** Sales Line Table insertion ***************************************

        //     IF (SaleHeader."Document Type" = SaleHeader."Document Type"::Order) THEN BEGIN
        //         SQLQuery := 'select to_char(ORDER_ID) Order_id from OMS_ORDER_MASTER_MAIN1 where sale_desc =''' + SaleHeader."No." + '''';
        //     END
        //     ELSE
        //         SQLQuery := 'select to_char(ORDER_ID) Order_id from OMS_ORDER_MASTER_MAIN1 where BLANKET_DESC =''' + SaleHeader."No." + '''';
        //     RecordSet := SQLConnection.Execute(SQLQuery, RowCount);

        //     IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //         RecordSet.MoveFirst;

        //     WHILE NOT RecordSet.EOF DO BEGIN
        //         OrderId := FORMAT(RecordSet.Fields.Item('Order_id').Value);
        //         RecordSet.MoveNext;
        //     END;
        //     IF FORMAT(SaleHeader."Work Order Number") <> '' THEN BEGIN
        //         CreationQuery := 'Update OMS_ORDER_MASTER_MAIN1 set WORK_DESCRIPTION=''' + FORMAT(SaleHeader."Work Order Number") + '''' +
        //                          ' where OrdeR_id =' + OrderId + '';
        //         IF CreationQuery <> '' THEN
        //             SQLConnection.Execute(CreationQuery);
        //     END;
        //     IF FORMAT(SaleHeader.Consignee) <> '' THEN BEGIN
        //         CreationQuery := 'Update OMS_ORDER_MASTER_MAIN1 set STATION_NAMES=''' + FORMAT(SaleHeader.Consignee) + '''' +
        //                          ' where OrdeR_id =' + OrderId + '';
        //         IF CreationQuery <> '' THEN
        //             SQLConnection.Execute(CreationQuery);
        //     END;

        //     SalesLine.SETRANGE(SalesLine."Document No.", SaleHeader."No.");
        //     IF SalesLine.FINDSET THEN BEGIN
        //                                   REPEAT
        //                                       IF SalesLine."No." <> '' THEN BEGIN
        //                                           Inspection := FALSE;
        //                                           IF SalesLine."RDSO Inspection Required" = TRUE THEN BEGIN
        //                                               Inspection := TRUE;
        //                                           END;
        //                                           IF FORMAT(SalesLine.Type) = 'G/L Account' THEN BEGIN
        //                                               CreationQuery := ' Select * from OMS_PRODUCT_MASTER1 where item_no like ''' + SalesLine."No." + ''' ';
        //                                               RecordSet := SQLConnection.Execute(CreationQuery, RowCount);
        //                                               IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                                                   RecordSet.MoveFirst;
        //                                               RowCount := 0;
        //                                               WHILE NOT RecordSet.EOF DO BEGIN
        //                                                   RowCount := RowCount + 1;
        //                                                   RecordSet.MoveNext;
        //                                               END;
        //                                               IF RowCount <= 0 THEN BEGIN
        //                                                   CreationQuery := ' insert into OMS_PRODUCT_MASTER1 (PRODUCT_ID, ITEM_NO, DESCRIPTION) values ' +
        //                                                                  ' ((select Max(PRODUCT_ID)+1 from OMS_PRODUCT_MASTER1),''' + SalesLine."No." + ''',' +
        //                                                                  ' ''' + SalesLine.Description + ''')';
        //                                                   IF CreationQuery <> '' THEN
        //                                                       SQLConnection.Execute(CreationQuery);
        //                                                   SQLConnection.CommitTrans;
        //                                                   SQLConnection.BeginTrans;
        //                                               END;
        //                                           END;
        //                                           AdditemtoOrder(
        //                                                           SalesLine."No.", OrderId, SalesLine.Quantity, Inspection,
        //                                                           FORMAT(SalesLine."Line No."), ' ', FORMAT(SalesLine.Type)
        //                                                         );

        //                                           Schedule.SETRANGE(Schedule."Document No.", SaleHeader."No.");
        //                                           Schedule.SETRANGE(Schedule."Document Line No.", SalesLine."Line No.");
        //                                           IF Schedule.FINDSET THEN    // Schedule items insertion
        //                                           BEGIN
        //                                               REPEAT
        //                                                   IF (Schedule."No." <> SalesLine."No.") THEN BEGIN
        //                                                       IF FORMAT(Schedule.Type) = 'G/L Account' THEN BEGIN
        //                                                           CreationQuery := ' Select * from OMS_PRODUCT_MASTER1 where item_no like ''' + Schedule."No." + ''' ';
        //                                                           RecordSet := SQLConnection.Execute(CreationQuery, RowCount);
        //                                                           IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                                                               RecordSet.MoveFirst;
        //                                                           RowCount := 0;
        //                                                           WHILE NOT RecordSet.EOF DO BEGIN
        //                                                               RowCount := RowCount + 1;
        //                                                               RecordSet.MoveNext;
        //                                                           END;
        //                                                           IF RowCount <= 0 THEN BEGIN
        //                                                               CreationQuery := ' insert into OMS_PRODUCT_MASTER1 (PRODUCT_ID, ITEM_NO, DESCRIPTION) values ' +
        //                                                                              ' ((select Max(PRODUCT_ID)+1 from OMS_PRODUCT_MASTER1),''' + Schedule."No." + ''',' +
        //                                                                              ' ''' + Schedule.Description + ''')';
        //                                                               IF CreationQuery <> '' THEN
        //                                                                   SQLConnection.Execute(CreationQuery);
        //                                                               SQLConnection.CommitTrans;
        //                                                               SQLConnection.BeginTrans;
        //                                                           END;
        //                                                       END;
        //                                                       AdditemtoOrder(
        //                                                                       Schedule."No.", OrderId, Schedule.Quantity, Inspection,
        //                                                                       FORMAT(Schedule."Document Line No."), FORMAT(Schedule."Line No."),
        //                                                                       FORMAT(Schedule.Type)
        //                                                                     );
        //                                                   END;
        //                                               UNTIL Schedule.NEXT = 0
        //                                           END;
        //                                       END;
        //                                   UNTIL SalesLine.NEXT = 0
        //     END;
        //     ChangeLog.RESET;
        //     ChangeLog.SETRANGE(ChangeLog."Primary Key Field 2 Value", SaleHeader."No.");
        //     IF ChangeLog.FINDFIRST THEN BEGIN
        //         ChangeLog.DELETEALL(TRUE); //anil
        //     END;
        //     //comment specified by naga raju
        //     IF GUIALLOWED THEN
        //         MESSAGE(SaleDesc + ' order successfully created in OMS');
        // END  // No Sale Order - End
        // ELSE // Sale Order Existed - Begin
        // BEGIN
        //     TrackingQuery := '';
        //     Callletterrece := '';
        //     WeekStart := '';
        //     SchLine := '';
        //     fieldNo := 0;
        //     OrdStatus := OrderStatus;
        //     IF OrdStatus < 8 THEN
        //         Status := 'BLANKET_DESC'
        //     ELSE
        //         IF OrdStatus = 8 THEN
        //             Status := 'SALE_DESC';

        //     SQLQuery := 'select  to_char(ORDER_ID)ORDER_ID,to_char(ORDER_TRACKING_STATUS)ODS, ' +
        //               ' to_char(LAST_MODIFY_DATE,''' + 'dd-mon-yy' + ''')Ls,' +
        //               'ENTRY_PERSON,to_char(EXPECTED_WEEK_START_DATE,''' + 'dd-mon-yy' + ''')exps,to_char(ORDER_PRIORITY)OP,' +
        //               'to_char(STATUS)st,NVL(to_char(REMARKS),'' '')re, ' +
        //               ' NVL(to_char(CAL_LETTER_EXP_DATE,''' + 'dd-mon-yy' + '''),'' '')cExp,' +
        //               'to_char(CUSTOMER_EXPECTING_DATE,''' + 'dd-mon-yy' + ''')cs, ' +
        //               ' to_char(EXPECTED_WEEK_END_DATE,''' + 'dd-mon-yy' + ''')expe' +
        //               ',to_char(ORDER_VALUE)Ov,NVL(to_char(ORDER_COMPLETION_DATE,''' + 'dd-mon-yy' + '''),'' '')Orcd,' +
        //               'NVL(to_char(TRACKING_PERSON_ID),'' '')trk,NVL(to_char(CAL_LETTER_EXT_FLAG),''0'')Exten ' +
        //               ' from OMS_ORDER_MASTER_MAIN1 where ' + Status + ' = ''' + SaleHeader."No." + ''' order by Order_id ';

        //     RecordSet := SQLConnection.Execute(SQLQuery, RowCount);

        //     IF RowCount = 0 THEN
        //         ERROR('Order does not exist in OMS');

        //     IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //         RecordSet.MoveFirst;
        //     RowCount := 0;
        //     WHILE NOT RecordSet.EOF DO BEGIN
        //         IF RowCount = 0 THEN BEGIN
        //             OrderId := FORMAT(RecordSet.Fields.Item('ORDER_ID').Value);
        //             // MESSAGE(OrderId);
        //             IF FORMAT(RecordSet.Fields.Item('ODS').Value) <> '' THEN
        //                 EVALUATE(CustomerId, FORMAT(RecordSet.Fields.Item('ODS').Value))
        //             ELSE
        //                 CustomerId := 0;
        //             CustomerOrder := FORMAT(RecordSet.Fields.Item('Ls').Value);
        //             WeekStart := FORMAT(RecordSet.Fields.Item('exps').Value);
        //             SalesPerson := FORMAT(RecordSet.Fields.Item('ENTRY_PERSON').Value);
        //             IF FORMAT(RecordSet.Fields.Item('Ov').Value) <> '' THEN
        //                 EVALUATE(OrderValue, FORMAT(RecordSet.Fields.Item('Ov').Value))
        //             ELSE
        //                 OrderValue := 0;
        //             IF FORMAT(RecordSet.Fields.Item('OP').Value) <> '' THEN
        //                 EVALUATE(Installation, FORMAT(RecordSet.Fields.Item('OP').Value))
        //             ELSE
        //                 Installation := 0;
        //             IF FORMAT(RecordSet.Fields.Item('St').Value) <> '' THEN
        //                 EVALUATE(RDSO, FORMAT(RecordSet.Fields.Item('St').Value))
        //             ELSE
        //                 RDSO := 0;
        //             IF FORMAT(RecordSet.Fields.Item('St').Value) <> '' THEN
        //                 EVALUATE(OrdStatus, FORMAT(RecordSet.Fields.Item('St').Value))
        //             ELSE
        //                 OrdStatus := 0;
        //             IF FORMAT(RecordSet.Fields.Item('Orcd').Value) <> ' ' THEN
        //                 CompletionDate := FORMAT(RecordSet.Fields.Item('Orcd').Value)
        //             ELSE
        //                 CompletionDate := ' ';
        //             CustomerDate := FORMAT(RecordSet.Fields.Item('cs').Value);
        //             IF FORMAT(RecordSet.Fields.Item('re').Value) <> '' THEN
        //                 WeekEnd := FORMAT(RecordSet.Fields.Item('re').Value)
        //             ELSE
        //                 WeekEnd := ' ';
        //             IF CompletionDate = ' ' THEN
        //                 CompletionDate := CustomerDate;
        //             IF FORMAT(RecordSet.Fields.Item('trk').Value) <> '' THEN
        //                 TrckPerson := FORMAT(RecordSet.Fields.Item('trk').Value)
        //             ELSE
        //                 TrckPerson := SalesPerson;
        //             IF FORMAT(RecordSet.Fields.Item('Exten').Value) <> '' THEN
        //                 Extension := FORMAT(RecordSet.Fields.Item('Exten').Value)
        //             ELSE
        //                 Extension := '0';
        //             // Order Tracking Query

        //             IF (FORMAT(RecordSet.Fields.Item('cExp').Value) = ' ') AND (FORMAT(RecordSet.Fields.Item('re').Value) = ' ') THEN
        //                 TrackingQuery := 'insert into OMS_ORDER_TRACKING_MAIN1(TRANS_ID,Order_Id,MODIFICATION_TYPE,MODIFICATION_DATE,' +
        //                       'ENTRY_EMPLOYEE_ID,PREV_EXPECT_WEEK_START,PREV_EXPECT_WEEK_END,PREV_ORDER_PRIORITY,PREV_QTY,Product_ID,PREV_STATUS' +
        //                       ',PREV_CUST_DATE,OLD_ORDER_VALUE,PREV_ORDER_COMPLETION_DATE,PREV_TRACKING_PERSON_ID, CAL_LETTER_EXT_FLAG) values(' +
        //                       '(select Max(TRANS_ID)+1 from OMS_ORDER_TRACKING_MAIN1 ),' +
        //                       '' + OrderId + ',' + FORMAT(CustomerId) + ',''' + CustomerOrder + ''',''' + SalesPerson + ''',''' + WeekStart + ''',' +
        //                       '''' + FORMAT(RecordSet.Fields.Item('expe').Value) + ''',' +
        //                       '' + FORMAT(Installation) + ',0,0,' + FORMAT(RDSO) + ',''' + CustomerDate + ''',' +
        //                       '''' + FORMAT(RecordSet.Fields.Item('Ov').Value) + ''',''' + CompletionDate + ''',''' + TrckPerson + ''',' + Extension + ') '
        //             ELSE
        //                 IF (FORMAT(RecordSet.Fields.Item('cExp').Value) <> ' ') AND (WeekEnd <> ' ') THEN
        //                     TrackingQuery := 'insert into OMS_ORDER_TRACKING_MAIN1(TRANS_ID,Order_Id,MODIFICATION_TYPE,MODIFICATION_DATE,' +
        //                     'ENTRY_EMPLOYEE_ID,PREV_EXPECT_WEEK_START,PREV_EXPECT_WEEK_END,PREV_ORDER_PRIORITY,PREV_QTY,Product_ID,PREV_STATUS' +
        //                     ',PREV_CAL_LETTER_EXP_DATE,REMARKS,PREV_CUST_DATE,OLD_ORDER_VALUE,PREV_ORDER_COMPLETION_DATE' +
        //                     ',PREV_TRACKING_PERSON_ID, CAL_LETTER_EXT_FLAG) values((select Max(TRANS_ID)+1 from OMS_ORDER_TRACKING_MAIN1 ),' +
        //                     '' + OrderId + ',' + FORMAT(CustomerId) + ',''' + CustomerOrder + ''',''' + SalesPerson + ''',''' + WeekStart + ''',' +
        //                      '''' + FORMAT(RecordSet.Fields.Item('expe').Value) + ''',' +
        //                     '' + FORMAT(Installation) + ',0,0,' + FORMAT(RDSO) + ',''' + FORMAT(RecordSet.Fields.Item('cExp').Value) + ''',' +
        //                     '''' + WeekEnd + ''',''' + CustomerDate + ''',''' + FORMAT(RecordSet.Fields.Item('Ov').Value) + ''',''' + CompletionDate + '''' +
        //                     ',''' + TrckPerson + ''',' + Extension + ') '
        //                 ELSE
        //                     IF (FORMAT(RecordSet.Fields.Item('cExp').Value) <> ' ') AND (FORMAT(RecordSet.Fields.Item('re').Value) = '') THEN
        //                         TrackingQuery := 'insert into OMS_ORDER_TRACKING_MAIN1(TRANS_ID,Order_Id,MODIFICATION_TYPE,MODIFICATION_DATE,' +
        //                         'ENTRY_EMPLOYEE_ID,PREV_EXPECT_WEEK_START,PREV_EXPECT_WEEK_END,PREV_ORDER_PRIORITY,PREV_QTY,Product_ID,PREV_STATUS' +
        //                          ',PREV_CAL_LETTER_EXP_DATE,PREV_CUST_DATE,OLD_ORDER_VALUE,PREV_ORDER_COMPLETION_DATE' +
        //                         ',PREV_TRACKING_PERSON_ID, CAL_LETTER_EXT_FLAG) values((select Max(TRANS_ID)+1 from OMS_ORDER_TRACKING_MAIN1 ),' +
        //                         '' + OrderId + ',' + FORMAT(CustomerId) + ',''' + CustomerOrder + ''',''' + SalesPerson + ''',''' + WeekStart + ''',' +
        //                         '''' + FORMAT(RecordSet.Fields.Item('expe').Value) + ''',' +
        //                         '' + FORMAT(Installation) + ',0,0,' + FORMAT(RDSO) + ',''' + FORMAT(RecordSet.Fields.Item('cExp').Value) + ''',' +
        //                         '''' + CustomerDate + ''',''' + FORMAT(RecordSet.Fields.Item('Ov').Value) + ''',''' + CompletionDate + ''',' +
        //                         '''' + TrckPerson + ''',' + Extension + ') '
        //                     ELSE
        //                         TrackingQuery := 'insert into OMS_ORDER_TRACKING_MAIN1(TRANS_ID,Order_Id,MODIFICATION_TYPE,MODIFICATION_DATE,' +
        //                           'ENTRY_EMPLOYEE_ID,PREV_EXPECT_WEEK_START,PREV_EXPECT_WEEK_END,PREV_ORDER_PRIORITY,PREV_QTY,Product_ID,PREV_STATUS' +
        //                           ',REMARKS,PREV_CUST_DATE,OLD_ORDER_VALUE,PREV_ORDER_COMPLETION_DATE,PREV_TRACKING_PERSON_ID' +
        //                           ', CAL_LETTER_EXT_FLAG) values((select Max(TRANS_ID)+1 from OMS_ORDER_TRACKING_MAIN1 ),' +
        //                           '' + OrderId + ',' + FORMAT(CustomerId) + ',''' + CustomerOrder + ''',''' + SalesPerson + ''',''' + WeekStart + ''',' +
        //                           '''' + FORMAT(RecordSet.Fields.Item('expe').Value) + ''',' +
        //                           '' + FORMAT(Installation) + ',0,0,' + FORMAT(RDSO) + ',' +
        //                           '''' + WeekEnd + ''',''' + CustomerDate + ''',''' + FORMAT(RecordSet.Fields.Item('Ov').Value) + ''',''' + CompletionDate + '''' +
        //                           ',''' + TrckPerson + ''',' + Extension + ')';
        //         END;
        //         SQLConnection.Execute(TrackingQuery);   //Added by pranavi on 06-08-2015 to insert tracking lines
        //         RowCount := RowCount + 1;
        //         RecordSet.MoveNext;
        //     END;
        //     //RecordSet.Close;
        //     //Added by Pranavi on 06-Dec-2016 for solving lines not inserted for order in oms
        //     SalesLinesInsertion(SaleHeader);
        //     //End by Pranavi on 06-Dec-2016
        //     ChangeLog.RESET;
        //     ChangeLog.SETRANGE(ChangeLog."Primary Key Field 2 Value", SaleHeader."No.");
        //     //ChangeLog.SETCURRENTKEY("Table No.","Primary Key Field 2 Value","Primary Key Field 3 Value","Date and Time");
        //     ChangeLog.SETCURRENTKEY("Table No.", "Date and Time");
        //     ChangeLog.ASCENDING(TRUE);
        //     IF ChangeLog.FINDSET THEN BEGIN                                                    // Change Log Modifications Case Loop
        //                                   REPEAT
        //                                       WeekStart := '';
        //                                       WeekStart := 'Update OMS_ORDER_MASTER_MAIN1 set ';
        //                                       Preval := FORMAT(ChangeLog."Old Value");
        //                                       PresVal := FORMAT(ChangeLog."New Value");
        //                                       // MESSAGE(WeekStart);
        //                                       CASE ChangeLog."Field No." OF
        //                                           3:
        //                                               BEGIN                                             // New Schedule item Insertion or Deletion
        //                                                                                                 //  MESSAGE('Schedule item deletion and Insertion');
        //                                                   IF (ChangeLog."Type of Change" = ChangeLog."Type of Change"::Deletion) THEN BEGIN
        //                                                       IF (ChangeLog."Table No." = 60095) THEN BEGIN
        //                                                           //swathi
        //                                                           IF OrdStatus < 8 THEN
        //                                                               Status := 'BLANKET_DESC'
        //                                                           ELSE
        //                                                               IF OrdStatus = 8 THEN
        //                                                                   Status := 'SALE_DESC';

        //                                                           IF OrdStatus <= 8 THEN BEGIN
        //                                                               WeekStart := 'Delete from OMS_ORDER_PRODUCTS_MAIN ' +
        //                                                                          ' where ERPLineNo =''' + FORMAT(ChangeLog."Primary Key Field 3 Value") + '''' +
        //                                                                          ' and SHEDULELINENO= ''' + FORMAT(ChangeLog."Old Value") + '''  and ' +
        //                                                                          ' OrdeR_id in(select Distinct ORDER_id from OMS_ORDER_MASTER_MAIN1 where ' + Status + ' like ' +
        //                                                                          ' ''' + FORMAT(ChangeLog."Primary Key Field 2 Value") + ''')';
        //                                                               IF WeekStart <> '' THEN
        //                                                                   SQLConnection.Execute(WeekStart);

        //                                                               fieldNo := 5;
        //                                                           END ELSE BEGIN
        //                                                               InnerQuery := ' insert into OMS_ORDER_ITEM_MODIFICATIONS( TRANS_ID, ORDER_ID, PRODUCT_ID,' +
        //                                                                         ' ERPLINENO,SHEDULELINENO,QTY_CHANGE ) values( (select nvl(Max(TRANS_ID),0)+1 from ' +
        //                                                                         ' OMS_ORDER_ITEM_MODIFICATIONS),' + OrderId + ',(select PRODUCT_ID from ' +
        //                                                                         ' OMS_ORDER_PRODUCTS_MAIN where  ERPLineNo =' + FORMAT(ChangeLog."Primary Key Field 3 Value") + '' +
        //                                                                         ' and SHEDULELINENO=' + FORMAT(ChangeLog."Old Value") + '  and ordeR_id =' + OrderId + '), ' +
        //                                                                         ' ' + FORMAT(ChangeLog."Primary Key Field 3 Value") + ',' + FORMAT(ChangeLog."Old Value") + ', ' +
        //                                                                         ' 0 )';
        //                                                               // MESSAGE(InnerQuery);
        //                                                               IF InnerQuery <> '' THEN
        //                                                                   SQLConnection.Execute(InnerQuery);
        //                                                           END;
        //                                                           UpdateWebHead := 'insert into OMS_MESSAGE_SYSTEM(TRANS_ID,ORDER_ID,MODIFICATION_DATE,PRODUCT_DETAILS' +
        //                                                                    ',MODIFICATION,MODIFICATION_TYPE, PREV_VALUE) Values ' +
        //                                                                    '((select max(TRANS_ID)+1 from OMS_MESSAGE_SYSTEM),' + OrderId + '' +
        //                                                                    ',sysdate,''Product Deleted'',1,5,' +
        //                                                                    '(select DEscription from OMS_PRODUCT_MASTER1 where PRODUCT_ID =(select Max(Product_id) from ' +
        //                                                                    ' OMS_ORDER_PRODUCTS_MAIN where ERPLineNo =' + FORMAT(ChangeLog."Primary Key Field 3 Value") + '' +
        //                                                                    ' and SHEDULELINENO=' + FORMAT(ChangeLog."Old Value") + '  and ordeR_id =' + OrderId + ')) )';
        //                                                           // MESSAGE(InnerQuery);
        //                                                           SQLConnection.Execute(UpdateWebHead);
        //                                                           UpdateWebHead := 'update OMS_ORDER_MASTER_MAIN1 set MODIFICATION=1 where OrdER_ID =' + OrderId + '';
        //                                                           SQLConnection.Execute(UpdateWebHead);

        //                                                       END;
        //                                                   END ELSE
        //                                                       IF (ChangeLog."Type of Change" = ChangeLog."Type of Change"::Insertion) THEN BEGIN
        //                                                           IF (ChangeLog."Table No." = 60095) THEN BEGIN
        //                                                               IF OrdStatus <= 8 THEN BEGIN
        //                                                                   Schedule.SETRANGE(Schedule."Document No.", ChangeLog."Primary Key Field 2 Value");
        //                                                                   EVALUATE(fieldNo, ChangeLog."Primary Key Field 3 Value");         // Schedule item Insertion
        //                                                                   Schedule.SETRANGE(Schedule."Document Line No.", fieldNo);
        //                                                                   EVALUATE(fieldNo, ChangeLog."New Value");
        //                                                                   Schedule.SETRANGE(Schedule."Line No.", fieldNo);
        //                                                                   IF Schedule.FINDSET THEN BEGIN
        //                                                                                                REPEAT
        //                                                                                                    IF Schedule."No." <> '' THEN BEGIN
        //                                                                                                        IF FORMAT(Schedule.Type) = 'G/L Account' THEN BEGIN
        //                                                                                                            CreationQuery := ' Select * from OMS_PRODUCT_MASTER1 where item_no like ''' + Schedule."No." + ''' ';
        //                                                                                                            RecordSet := SQLConnection.Execute(CreationQuery, RowCount);
        //                                                                                                            IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                                                                                                                RecordSet.MoveFirst;
        //                                                                                                            RowCount := 0;
        //                                                                                                            WHILE NOT RecordSet.EOF DO BEGIN
        //                                                                                                                RowCount := RowCount + 1;
        //                                                                                                                RecordSet.MoveNext;
        //                                                                                                            END;
        //                                                                                                            IF RowCount <= 0 THEN BEGIN
        //                                                                                                                CreationQuery := ' insert into OMS_PRODUCT_MASTER1 (PRODUCT_ID, ITEM_NO, DESCRIPTION) values ' +
        //                                                                                                                               ' ((select Max(PRODUCT_ID)+1 from OMS_PRODUCT_MASTER1),''' + Schedule."No." + ''',' +
        //                                                                                                                               ' ''' + Schedule.Description + ''')';
        //                                                                                                                IF CreationQuery <> '' THEN
        //                                                                                                                    SQLConnection.Execute(CreationQuery);
        //                                                                                                                SQLConnection.CommitTrans;
        //                                                                                                                SQLConnection.BeginTrans;
        //                                                                                                            END;
        //                                                                                                        END;
        //                                                                                                        AdditemtoOrder(Schedule."No.", OrderId, Schedule.Quantity, Schedule."RDSO Required"
        //                                                                                                                        , FORMAT(ChangeLog."Primary Key Field 3 Value"), FORMAT(ChangeLog."New Value"),
        //                                                                                                                         FORMAT(Schedule.Type));
        //                                                                                                    END;
        //                                                                                                UNTIL Schedule.NEXT = 0
        //                                                                   END;
        //                                                               END ELSE BEGIN
        //                                                                   Schedule.SETRANGE(Schedule."Document No.", ChangeLog."Primary Key Field 2 Value");
        //                                                                   EVALUATE(fieldNo, ChangeLog."Primary Key Field 3 Value");         // Schedule item Insertion
        //                                                                   Schedule.SETRANGE(Schedule."Document Line No.", fieldNo);
        //                                                                   EVALUATE(fieldNo, ChangeLog."New Value");
        //                                                                   Schedule.SETRANGE(Schedule."Line No.", fieldNo);
        //                                                                   IF Schedule.FINDSET THEN BEGIN
        //                                                                                                REPEAT
        //                                                                                                    IF Schedule."No." <> '' THEN BEGIN
        //                                                                                                        InnerQuery := ' insert into OMS_ORDER_ITEM_MODIFICATIONS( TRANS_ID, ORDER_ID, PRODUCT_ID,' +
        //                                                                                                              ' ERPLINENO,SHEDULELINENO,ITEM_CHANGE,QTY_CHANGE ) values( (select nvl(Max(TRANS_ID),0)+1 from ' +
        //                                                                                                              ' OMS_ORDER_ITEM_MODIFICATIONS),' + OrderId + ',(select PRODUCT_ID from ' +
        //                                                                                                              ' OMS_ORDER_PRODUCTS_MAIN where  ERPLineNo =' + FORMAT(ChangeLog."Primary Key Field 3 Value") + '' +
        //                                                                                                              ' and SHEDULELINENO=' + FORMAT(Schedule."Line No.") + '  and ordeR_id =' + OrderId + '), ' +
        //                                                                                                              ' ' + FORMAT(ChangeLog."Primary Key Field 3 Value") + ',' + FORMAT(Schedule."Line No.") + ', ' +
        //                                                                                                              ' ''' + FORMAT(Schedule."No.") + ''', ' +
        //                                                                                                              ' round(to_number(replace(''' + FORMAT(Schedule.Quantity) + ''',''' + ',' + ''',''' + '' + ''')))) ';
        //                                                                                                        //MESSAGE(InnerQuery);
        //                                                                                                        IF InnerQuery <> '' THEN
        //                                                                                                            SQLConnection.Execute(InnerQuery);
        //                                                                                                        UpdateWebHead := 'insert into OMS_MESSAGE_SYSTEM(TRANS_ID,ORDER_ID,MODIFICATION_DATE,PRODUCT_DETAILS' +
        //                                                                                                             ',MODIFICATION,MODIFICATION_TYPE, PRESENT_VALUE) Values ' +
        //                                                                                                             '((select max(TRANS_ID)+1 from OMS_MESSAGE_SYSTEM),' + OrderId + '' +
        //                                                                                                             ',sysdate,''Product Added'',1,5,''' + FORMAT(Schedule."No.") + ''')';
        //                                                                                                        SQLConnection.Execute(UpdateWebHead);
        //                                                                                                        UpdateWebHead := 'update OMS_ORDER_MASTER_MAIN1 set MODIFICATION=1 where OrdER_ID =' + OrderId + '';
        //                                                                                                        SQLConnection.Execute(UpdateWebHead);

        //                                                                                                    END;
        //                                                                                                UNTIL Schedule.NEXT = 0
        //                                                                   END;
        //                                                               END;
        //                                                           END;

        //                                                       END;

        //                                               END;
        //                                           4, 68:
        //                                               BEGIN                                       // New Sales line item deletion or Insertion or Customer Details Changeing

        //                                                   IF (ChangeLog."Table No." = 36) AND (FORMAT(ChangeLog."New Value") <> '')
        //                                                   AND (ChangeLog."Type of Change" = ChangeLog."Type of Change"::Modification) THEN BEGIN
        //                                                       fieldNo := 17;
        //                                                       CustomerCreationinOMS(PresVal);
        //                                                       WeekStart := WeekStart + ' Customer_id=(Select Customer_id from OMS_CUSTOMER_MASTER1 where ' +
        //                                                      'ERP_CUSTOMER_ID=''' + PresVal + ''') where  ';
        //                                                       // MESSAGE(WeekStart);
        //                                                   END;

        //                                                   IF (ChangeLog."Type of Change" = ChangeLog."Type of Change"::Deletion) THEN BEGIN
        //                                                       IF (ChangeLog."Table No." = 37) THEN BEGIN
        //                                                           //swathi
        //                                                           IF OrdStatus < 8 THEN
        //                                                               Status := 'BLANKET_DESC'
        //                                                           ELSE
        //                                                               IF OrdStatus = 8 THEN
        //                                                                   Status := 'SALE_DESC';

        //                                                           IF OrdStatus <= 8 THEN BEGIN
        //                                                               WeekStart := 'Delete from OMS_ORDER_PRODUCTS_MAIN ' +
        //                                                                     'where ERPLineNo =''' + FORMAT(ChangeLog."Primary Key Field 3 Value") + ''' and SHEDULELINENO is NULL and ' +
        //                                                                     ' OrdeR_id in(select Distinct ORDER_id from OMS_ORDER_MASTER_MAIN1 where ' + Status + ' like ' +
        //                                                                     ' ''' + FORMAT(ChangeLog."Primary Key Field 2 Value") + ''')';

        //                                                               IF WeekStart <> '' THEN
        //                                                                   SQLConnection.Execute(WeekStart);

        //                                                               fieldNo := 5;
        //                                                               // MESSAGE(WeekStart);
        //                                                           END ELSE BEGIN
        //                                                               InnerQuery := ' insert into OMS_ORDER_ITEM_MODIFICATIONS( TRANS_ID, ORDER_ID, PRODUCT_ID,' +
        //                                                                    ' ERPLINENO,QTY_CHANGE ) values( (select nvl(Max(TRANS_ID),0)+1 from ' +
        //                                                                    ' OMS_ORDER_ITEM_MODIFICATIONS),' + OrderId + ',(select PRODUCT_ID from ' +
        //                                                                    ' OMS_ORDER_PRODUCTS_MAIN where  ERPLineNo =' + FORMAT(ChangeLog."Primary Key Field 3 Value") + '' +
        //                                                                    ' and SHEDULELINENO is NULL  and ordeR_id =' + OrderId + '), ' +
        //                                                                    ' ' + FORMAT(ChangeLog."Primary Key Field 3 Value") + ', ' +
        //                                                                    ' 0 )';
        //                                                               //   MESSAGE(InnerQuery);
        //                                                               IF InnerQuery <> '' THEN
        //                                                                   SQLConnection.Execute(InnerQuery);

        //                                                           END;
        //                                                           UpdateWebHead := 'insert into OMS_MESSAGE_SYSTEM(TRANS_ID,ORDER_ID,MODIFICATION_DATE,PRODUCT_DETAILS' +
        //                                                                   ',MODIFICATION,MODIFICATION_TYPE, PREV_VALUE) Values ' +
        //                                                                   '((select max(TRANS_ID)+1 from OMS_MESSAGE_SYSTEM),' + OrderId + '' +
        //                                                                   ',sysdate,''Product Deleted'',1,5,' +
        //                                                                   '(select DEscription from OMS_PRODUCT_MASTER1 where PRODUCT_ID =(select Max(Product_id) from ' +
        //                                                                   ' OMS_ORDER_PRODUCTS_MAIN where ERPLineNo =' + FORMAT(ChangeLog."Primary Key Field 3 Value") + '' +
        //                                                                   ' and SHEDULELINENO is NULL  and ordeR_id =' + OrderId + ')) )';
        //                                                           //MESSAGE(UpdateWebHead);
        //                                                           SQLConnection.Execute(UpdateWebHead);
        //                                                           UpdateWebHead := 'update OMS_ORDER_MASTER_MAIN1 set MODIFICATION=1 where OrdER_ID =' + OrderId + '';
        //                                                           SQLConnection.Execute(UpdateWebHead);


        //                                                       END;
        //                                                   END ELSE
        //                                                       IF (ChangeLog."Type of Change" = ChangeLog."Type of Change"::Insertion) THEN BEGIN
        //                                                           IF (ChangeLog."Table No." = 37) AND (ChangeLog."Field No." = 4) THEN BEGIN

        //                                                               IF OrdStatus <= 8 THEN BEGIN
        //                                                                   EVALUATE(fieldNo, ChangeLog."New Value");
        //                                                                   SalesLine.SETRANGE(SalesLine."Document No.", ChangeLog."Primary Key Field 2 Value");
        //                                                                   SalesLine.SETRANGE(SalesLine."Line No.", fieldNo);
        //                                                                   IF SalesLine.FINDSET THEN BEGIN
        //                                                                                                 REPEAT
        //                                                                                                     IF SalesLine."No." <> '' THEN BEGIN
        //                                                                                                         IF FORMAT(SalesLine.Type) = 'G/L Account' THEN BEGIN
        //                                                                                                             CreationQuery := ' Select * from OMS_PRODUCT_MASTER1 where item_no like ''' + SalesLine."No." + ''' ';
        //                                                                                                             RecordSet := SQLConnection.Execute(CreationQuery, RowCount);
        //                                                                                                             IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                                                                                                                 RecordSet.MoveFirst;
        //                                                                                                             RowCount := 0;
        //                                                                                                             WHILE NOT RecordSet.EOF DO BEGIN
        //                                                                                                                 RowCount := RowCount + 1;
        //                                                                                                                 RecordSet.MoveNext;
        //                                                                                                             END;
        //                                                                                                             IF RowCount <= 0 THEN BEGIN
        //                                                                                                                 CreationQuery := ' insert into OMS_PRODUCT_MASTER1 (PRODUCT_ID, ITEM_NO, DESCRIPTION) values ' +
        //                                                                                                                                ' ((select Max(PRODUCT_ID)+1 from OMS_PRODUCT_MASTER1),''' + SalesLine."No." + ''',' +
        //                                                                                                                                ' ''' + SalesLine.Description + ''')';
        //                                                                                                                 IF CreationQuery <> '' THEN
        //                                                                                                                     SQLConnection.Execute(CreationQuery);
        //                                                                                                                 SQLConnection.CommitTrans;
        //                                                                                                                 SQLConnection.BeginTrans;
        //                                                                                                             END;
        //                                                                                                         END;
        //                                                                                                         // MESSAGE(SalesLine."No." + ' INSERTION');
        //                                                                                                         AdditemtoOrder(SalesLine."No.", OrderId, SalesLine.Quantity, SalesLine."RDSO Inspection Required"
        //                                                                                                                         , FORMAT(SalesLine."Line No."), ' ', FORMAT(SalesLine.Type));
        //                                                                                                         // MESSAGE('Item Inserted' );
        //                                                                                                     END;
        //                                                                                                 UNTIL SalesLine.NEXT = 0
        //                                                                   END;
        //                                                               END ELSE BEGIN
        //                                                                   EVALUATE(fieldNo, ChangeLog."New Value");
        //                                                                   SalesLine.SETRANGE(SalesLine."Document No.", ChangeLog."Primary Key Field 2 Value");
        //                                                                   SalesLine.SETRANGE(SalesLine."Line No.", fieldNo);
        //                                                                   IF SalesLine.FINDSET THEN BEGIN
        //                                                                                                 REPEAT
        //                                                                                                     IF SalesLine."No." <> '' THEN BEGIN
        //                                                                                                         InnerQuery := ' insert into OMS_ORDER_ITEM_MODIFICATIONS( TRANS_ID, ORDER_ID, PRODUCT_ID,' +
        //                                                                                                               ' ERPLINENO,ITEM_CHANGE,QTY_CHANGE ) values( (select nvl(Max(TRANS_ID),0)+1 from ' +
        //                                                                                                               ' OMS_ORDER_ITEM_MODIFICATIONS),' + OrderId + ',(select PRODUCT_ID from ' +
        //                                                                                                               ' OMS_ORDER_PRODUCTS_MAIN where  ERPLineNo =' + FORMAT(SalesLine."Line No.") + '' +
        //                                                                                                               ' and SHEDULELINENO is NULL and ordeR_id =' + OrderId + '), ' +
        //                                                                                                               ' ' + FORMAT(SalesLine."Line No.") + ', ' +
        //                                                                                                               ' ''' + FORMAT(SalesLine."No.") + ''', ' +
        //                                                                                                               ' round(to_number(replace(''' + FORMAT(SalesLine.Quantity) + ''',''' + ',' + ''',''' + '' + ''')))) ';
        //                                                                                                         IF InnerQuery <> '' THEN
        //                                                                                                             SQLConnection.Execute(InnerQuery);
        //                                                                                                         UpdateWebHead := 'insert into OMS_MESSAGE_SYSTEM(TRANS_ID,ORDER_ID,MODIFICATION_DATE,PRODUCT_DETAILS' +
        //                                                                                                              ',MODIFICATION,MODIFICATION_TYPE, PRESENT_VALUE) Values ' +
        //                                                                                                              '((select max(TRANS_ID)+1 from OMS_MESSAGE_SYSTEM),' + OrderId + '' +
        //                                                                                                              ',sysdate,''Product Added'',1,5,''' + FORMAT(SalesLine."No.") + ''')';
        //                                                                                                         SQLConnection.Execute(UpdateWebHead);
        //                                                                                                         UpdateWebHead := 'update OMS_ORDER_MASTER_MAIN1 set MODIFICATION=1 where OrdER_ID =' + OrderId + '';
        //                                                                                                         SQLConnection.Execute(UpdateWebHead);

        //                                                                                                     END;
        //                                                                                                 UNTIL SalesLine.NEXT = 0
        //                                                                   END;

        //                                                               END;
        //                                                           END;
        //                                                       END;

        //                                               END;
        //                                           5:
        //                                               BEGIN
        //                                                   // MESSAGE('Schedule item Modification');
        //                                                   IF (ChangeLog."Table No." = 60095) THEN                               // Schedule item Details Modification
        //                                                   BEGIN
        //                                                       SaleDesc := '';
        //                                                       IF (ChangeLog."Type of Change" = ChangeLog."Type of Change"::Modification) THEN BEGIN
        //                                                           //swathi
        //                                                           IF OrdStatus < 8 THEN
        //                                                               Status := 'BLANKET_DESC'
        //                                                           ELSE
        //                                                               IF OrdStatus = 8 THEN
        //                                                                   Status := 'SALE_DESC';

        //                                                           //   IF OrdStatus<=8 THEN

        //                                                           BEGIN
        //                                                               EVALUATE(fieldNo, ChangeLog."Primary Key Field 3 Value");
        //                                                               SchLine := COPYSTR(ChangeLog."Primary Key", STRPOS(ChangeLog."Primary Key",
        //                                                               ChangeLog."Primary Key Field 3 Value"), STRLEN(ChangeLog."Primary Key"));
        //                                                               SchLine := COPYSTR(SchLine, ROUND(STRPOS(SchLine, '=') + 3), STRLEN(SchLine));
        //                                                               SchLine := COPYSTR(SchLine, 1, STRLEN(SchLine) - 1);
        //                                                               SchLine := ChangeLog."Primary Key Field 3 Value";// added by vijaya on 05-02-2018 for schedule line checking
        //                                                               Schedule.SETRANGE(Schedule."Document No.", ChangeLog."Primary Key Field 2 Value");
        //                                                               Schedule.SETRANGE(Schedule."Document Line No.", fieldNo);
        //                                                               EVALUATE(SheNo, SchLine);
        //                                                               Schedule.SETRANGE(Schedule."Line No.", SheNo);
        //                                                               IF Schedule.FINDSET THEN BEGIN
        //                                                                                            REPEAT
        //                                                                                                /*IF (FORMAT(Schedule.Type)='G/L Account') THEN
        //                                                                                                BEGIN */  //commented by Pranavi on 23-Dec-2015
        //                                                                                                CreationQuery := ' Select * from OMS_PRODUCT_MASTER1 where item_no like ''' + Schedule."No." + ''' ';
        //                                                                                                RecordSet := SQLConnection.Execute(CreationQuery, RowCount);
        //                                                                                                IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                                                                                                    RecordSet.MoveFirst;
        //                                                                                                RowCount := 0;
        //                                                                                                WHILE NOT RecordSet.EOF DO BEGIN
        //                                                                                                    RowCount := RowCount + 1;
        //                                                                                                    RecordSet.MoveNext;
        //                                                                                                END;
        //                                                                                                IF RowCount <= 0 THEN BEGIN
        //                                                                                                    CreationQuery := ' insert into OMS_PRODUCT_MASTER1 (PRODUCT_ID, ITEM_NO, DESCRIPTION) values ' +
        //                                                                                                                   ' ((select Max(PRODUCT_ID)+1 from OMS_PRODUCT_MASTER1),''' + Schedule."No." + ''',' +
        //                                                                                                                   ' ''' + Schedule.Description + ''')';
        //                                                                                                    IF CreationQuery <> '' THEN
        //                                                                                                        SQLConnection.Execute(CreationQuery);
        //                                                                                                    SQLConnection.CommitTrans;
        //                                                                                                    SQLConnection.BeginTrans;
        //                                                                                                END;
        //                                                                                                //END; //commented by Pranavi on 23-Dec-2015
        //                                                                                                WeekStart := 'select to_char(ORDER_ID)ORDERID from OMS_ORDER_PRODUCTS_MAIN ' +
        //                                                                                                           ' where ERPLineNo =''' + FORMAT(ChangeLog."Primary Key Field 3 Value") + '''' +
        //                                                                                                           ' and SHEDULELINENO=''' + FORMAT(SheNo) + '''  ' +
        //                                                                                                           ' and ORDER_ID in (select Distinct ORDER_ID from OMS_ORDER_MASTER_MAIN1 ' +
        //                                                                                                           ' where ' + Status + ' =''' + FORMAT(ChangeLog."Primary Key Field 2 Value") + ''') ';
        //                                                                                                RecordSet := SQLConnection.Execute(WeekStart, RowCount);
        //                                                                                                IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                                                                                                    RecordSet.MoveFirst;
        //                                                                                                RowCount := 0;
        //                                                                                                WHILE NOT RecordSet.EOF DO BEGIN
        //                                                                                                    RowCount := RowCount + 1;
        //                                                                                                    RecordSet.MoveNext;
        //                                                                                                END;
        //                                                                                                IF RowCount <= 0 THEN BEGIN
        //                                                                                                    AdditemtoOrder(Schedule."No.", OrderId, Schedule.Quantity, Schedule."RDSO Required"
        //                                                                                                                 , FORMAT(Schedule."Document Line No."), FORMAT(Schedule."Line No."),
        //                                                                                                                  FORMAT(Schedule.Type));
        //                                                                                                    WeekStart := WeekStart + ' and ';
        //                                                                                                END ELSE BEGIN
        //                                                                                                    WeekStart := ' Update OMS_ORDER_PRODUCTS_MAIN set ' +
        //                                                                                                              ' PRODUCT_ID=(select PRODUCT_ID from OMS_PRODUCT_MASTER1 where item_no = ' +
        //                                                                                                              ' ''' + FORMAT(ChangeLog."New Value") + ''') ' +
        //                                                                                                              ' where ERPLineNo =''' + FORMAT(ChangeLog."Primary Key Field 3 Value") + '''' +
        //                                                                                                              ' and SHEDULELINENO= ''' + FORMAT(SheNo) + '''  and ORDER_ID in(' +
        //                                                                                                              ' select distinct ORDER_ID from OMS_ORDER_MASTER_MAIN1 where ' + Status + ' =' +
        //                                                                                                              ' ''' + FORMAT(ChangeLog."Primary Key Field 2 Value") + ''')';
        //                                                                                                    //MESSAGE(WeekStart);                            //pranavi
        //                                                                                                    IF WeekStart <> '' THEN
        //                                                                                                        SQLConnection.Execute(WeekStart);

        //                                                                                                    WeekStart := '';
        //                                                                                                    fieldNo := 5;
        //                                                                                                END;
        //                                                                                            UNTIL Schedule.NEXT = 0
        //                                                               END;
        //                                                           END;
        //                                                           /* END ELSE
        //                                                            BEGIN
        //                                                                InnerQuery:=' insert into OMS_ORDER_ITEM_MODIFICATIONS( TRANS_ID, ORDER_ID, PRODUCT_ID,'+
        //                                                                            ' ERPLINENO,SHEDULELINENO,ITEM_CHANGE ) values( (select nvl(Max(TRANS_ID),0)+1 from '+
        //                                                                            ' OMS_ORDER_ITEM_MODIFICATIONS),'+OrderId+',(select PRODUCT_ID from '+
        //                                                                            ' OMS_ORDER_PRODUCTS_MAIN where  ERPLineNo ='+FORMAT(ChangeLog."Primary Key Field 3 Value")+''+
        //                                                                            ' and SHEDULELINENO='+FORMAT(fieldNo)+'  and ordeR_id ='+OrderId+'), '+
        //                                                                            ' '+FORMAT(ChangeLog."Primary Key Field 3 Value")+','+FORMAT(fieldNo)+', '+
        //                                                                            ' '''+FORMAT(ChangeLog."New Value")+''' )' ;
        //                                                               IF InnerQuery<>'' THEN
        //                                                                  SQLConnection.Execute(InnerQuery);
        //                                                            // MESSAGE(InnerQuery);  */
        //                                                       END;

        //                                                       IF (Preval <> '') AND (PresVal <> '') THEN BEGIN
        //                                                           UpdateWebHead := 'insert into OMS_MESSAGE_SYSTEM(TRANS_ID,ORDER_ID,MODIFICATION_DATE,PRODUCT_DETAILS' +
        //                                                              ',MODIFICATION,MODIFICATION_TYPE, PREV_VALUE, PRESENT_VALUE) Values ' +
        //                                                              '((select max(TRANS_ID)+1 from OMS_MESSAGE_SYSTEM),' + OrderId + '' +
        //                                                              ',sysdate,''Product'',1,5,''' + Preval + ''',''' + PresVal + ''')';
        //                                                       END ELSE
        //                                                           IF (PresVal <> '') THEN BEGIN
        //                                                               UpdateWebHead := 'insert into OMS_MESSAGE_SYSTEM(TRANS_ID,ORDER_ID,MODIFICATION_DATE,PRODUCT_DETAILS' +
        //                                                                  ',MODIFICATION,MODIFICATION_TYPE,  PRESENT_VALUE) Values ' +
        //                                                                  '((select max(TRANS_ID)+1 from OMS_MESSAGE_SYSTEM),' + OrderId + '' +
        //                                                                  ',sysdate,''Product'',1,5,''' + PresVal + ''')';
        //                                                           END;
        //                                                       SQLConnection.Execute(UpdateWebHead);
        //                                                       UpdateWebHead := 'update OMS_ORDER_MASTER_MAIN1 set MODIFICATION=1 where OrdER_ID =' + OrderId + '';
        //                                                       SQLConnection.Execute(UpdateWebHead);


        //                                                   END;
        //                                               END;
        //                                           6:
        //                                               BEGIN                                                               //Sale Line item Details Modification
        //                                                                                                                   // MESSAGE('Sale line Modifications');
        //                                                   IF (ChangeLog."Table No." = 37) AND (ChangeLog."Type of Change" = ChangeLog."Type of Change"::Modification) AND
        //                                                       (ChangeLog."New Value" <> '') THEN BEGIN
        //                                                       //  IF OrdStatus<=8 THEN
        //                                                       BEGIN
        //                                                           EVALUATE(OrderPeriod, ChangeLog."Primary Key Field 3 Value");
        //                                                           SalesLine.SETRANGE(SalesLine."Document No.", ChangeLog."Primary Key Field 2 Value");
        //                                                           SalesLine.SETRANGE(SalesLine."Line No.", OrderPeriod);
        //                                                           IF SalesLine.FINDSET THEN BEGIN
        //                                                                                         REPEAT
        //                                                                                             IF FORMAT(SalesLine.Type) = 'G/L Account' THEN BEGIN
        //                                                                                                 CreationQuery := ' Select * from OMS_PRODUCT_MASTER1 where item_no like ''' + SalesLine."No." + ''' ';
        //                                                                                                 RecordSet := SQLConnection.Execute(CreationQuery, RowCount);
        //                                                                                                 IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                                                                                                     RecordSet.MoveFirst;
        //                                                                                                 RowCount := 0;
        //                                                                                                 WHILE NOT RecordSet.EOF DO BEGIN
        //                                                                                                     RowCount := RowCount + 1;
        //                                                                                                     RecordSet.MoveNext;
        //                                                                                                 END;
        //                                                                                                 IF RowCount <= 0 THEN BEGIN
        //                                                                                                     CreationQuery := ' insert into OMS_PRODUCT_MASTER1 (PRODUCT_ID, ITEM_NO, DESCRIPTION) values ' +
        //                                                                                                                    ' ((select Max(PRODUCT_ID)+1 from OMS_PRODUCT_MASTER1),''' + SalesLine."No." + ''',' +
        //                                                                                                                    ' ''' + SalesLine.Description + ''')';
        //                                                                                                     IF CreationQuery <> '' THEN
        //                                                                                                         SQLConnection.Execute(CreationQuery);
        //                                                                                                     //MESSAGE(CreationQuery);
        //                                                                                                     SQLConnection.CommitTrans;
        //                                                                                                     SQLConnection.BeginTrans;
        //                                                                                                 END;
        //                                                                                             END ELSE BEGIN
        //                                                                                                 CreationQuery := ' Select * from OMS_PRODUCT_MASTER1 where item_no like ''' + SalesLine."No." + ''' ';
        //                                                                                                 RecordSet := SQLConnection.Execute(CreationQuery, RowCount);
        //                                                                                                 IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                                                                                                     RecordSet.MoveFirst;
        //                                                                                                 RowCount := 0;
        //                                                                                                 WHILE NOT RecordSet.EOF DO BEGIN
        //                                                                                                     RowCount := RowCount + 1;
        //                                                                                                     RecordSet.MoveNext;
        //                                                                                                 END;
        //                                                                                                 IF RowCount <= 0 THEN BEGIN
        //                                                                                                     ItemCreationinOMS(SalesLine."No.", SalesLine.Description, SalesLine."Description 2", FORMAT(SalesLine.Type));
        //                                                                                                 END;
        //                                                                                                 //added by pranavi on 19-Dec-2015 to solve null value updating error
        //                                                                                                 CreationQuery := ' Select * from OMS_PRODUCT_MASTER1 where item_no like ''' + ChangeLog."New Value" + ''' ';
        //                                                                                                 RecordSet := SQLConnection.Execute(CreationQuery, RowCount);
        //                                                                                                 IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                                                                                                     RecordSet.MoveFirst;
        //                                                                                                 RowCount := 0;
        //                                                                                                 WHILE NOT RecordSet.EOF DO BEGIN
        //                                                                                                     RowCount := RowCount + 1;
        //                                                                                                     RecordSet.MoveNext;
        //                                                                                                 END;
        //                                                                                                 IF RowCount <= 0 THEN BEGIN
        //                                                                                                     IF itemTable.GET(ChangeLog."New Value") THEN BEGIN
        //                                                                                                         ItemCreationinOMS(ChangeLog."New Value", itemTable.Description, itemTable."Description 2", FORMAT(SalesLine.Type));
        //                                                                                                     END;
        //                                                                                                 END;
        //                                                                                                 //pranavi
        //                                                                                             END;
        //                                                                                             IF OrdStatus < 8 THEN
        //                                                                                                 Status := 'BLANKET_DESC'
        //                                                                                             ELSE
        //                                                                                                 IF OrdStatus = 8 THEN
        //                                                                                                     Status := 'SALE_DESC';

        //                                                                                             WeekStart := 'select to_char(ORDER_ID)ORDERID from OMS_ORDER_PRODUCTS_MAIN ' +
        //                                                                                                        ' where ERPLineNo =''' + FORMAT(ChangeLog."Primary Key Field 3 Value") + '''' +
        //                                                                                                        ' and SHEDULELINENO is NULL and ORDER_ID in (select Distinct ORDER_ID from OMS_ORDER_MASTER_MAIN1 ' +
        //                                                                                                        ' where ' + Status + ' =''' + FORMAT(ChangeLog."Primary Key Field 2 Value") + ''') ';
        //                                                                                             RecordSet := SQLConnection.Execute(WeekStart, RowCount);
        //                                                                                             IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                                                                                                 RecordSet.MoveFirst;
        //                                                                                             RowCount := 0;
        //                                                                                             WHILE NOT RecordSet.EOF DO BEGIN
        //                                                                                                 RowCount := RowCount + 1;
        //                                                                                                 RecordSet.MoveNext;
        //                                                                                             END;
        //                                                                                             IF RowCount <= 0 THEN BEGIN
        //                                                                                                 AdditemtoOrder(SalesLine."No.", OrderId, SalesLine.Quantity, SalesLine."RDSO Inspection Required"
        //                                                                                                                 , FORMAT(SalesLine."Line No."), ' ', FORMAT(SalesLine.Type));
        //                                                                                                 WeekStart := WeekStart + ' and ';
        //                                                                                             END ELSE BEGIN
        //                                                                                                 WeekStart := 'Update OMS_ORDER_PRODUCTS_MAIN set ' +
        //                                                                                                         ' PRODUCT_ID=(select PRODUCT_ID from OMS_PRODUCT_MASTER1 where item_no = ' +
        //                                                                                                         '''' + FORMAT(ChangeLog."New Value") + ''') ' +
        //                                                                                                         ' where ERPLineNo =''' + FORMAT(ChangeLog."Primary Key Field 3 Value") + '''' +
        //                                                                                                         ' and SHEDULELINENO is NULL and ORDER_ID in (select Distinct ORDER_ID from OMS_ORDER_MASTER_MAIN1 ' +
        //                                                                                                         ' where ' + Status + ' =''' + FORMAT(ChangeLog."Primary Key Field 2 Value") + ''') ';
        //                                                                                                 //MESSAGE(WeekStart);
        //                                                                                                 //MESSAGE(FORMAT(ChangeLog."Entry No."));
        //                                                                                                 IF WeekStart <> '' THEN
        //                                                                                                     SQLConnection.Execute(WeekStart);
        //                                                                                                 WeekStart := '';
        //                                                                                                 fieldNo := 5;
        //                                                                                             END;
        //                                                                                         UNTIL SalesLine.NEXT = 0
        //                                                           END;
        //                                                           /*END ELSE
        //                                                           BEGIN
        //                                                              InnerQuery:=' insert into OMS_ORDER_ITEM_MODIFICATIONS( TRANS_ID, ORDER_ID, PRODUCT_ID,'+
        //                                                                           ' ERPLINENO, ITEM_CHANGE ) values( (select nvl(Max(TRANS_ID),0)+1 from '+
        //                                                                           ' OMS_ORDER_ITEM_MODIFICATIONS),'+OrderId+',(select PRODUCT_ID from '+
        //                                                                           ' OMS_ORDER_PRODUCTS_MAIN where  ERPLineNo ='+FORMAT(ChangeLog."Primary Key Field 3 Value")+''+
        //                                                                           ' and SHEDULELINENO is null  and ordeR_id ='+OrderId+'), '+
        //                                                                           ' '+FORMAT(ChangeLog."Primary Key Field 3 Value")+', '+
        //                                                                           ' '''+FORMAT(ChangeLog."New Value")+''' )' ;
        //                                                               IF InnerQuery<>'' THEN
        //                                                                  SQLConnection.Execute(InnerQuery);
        //                                                              // MESSAGE(InnerQuery); */

        //                                                       END;
        //                                                       IF (Preval <> '') AND (PresVal <> '') THEN BEGIN
        //                                                           UpdateWebHead := 'insert into OMS_MESSAGE_SYSTEM(TRANS_ID,ORDER_ID,MODIFICATION_DATE,PRODUCT_DETAILS' +
        //                                                             ',MODIFICATION,MODIFICATION_TYPE, PREV_VALUE, PRESENT_VALUE) Values ' +
        //                                                             '((select max(TRANS_ID)+1 from OMS_MESSAGE_SYSTEM),' + OrderId + '' +
        //                                                             ',sysdate,''Product'',1,5,''' + Preval + ''',''' + PresVal + ''')';
        //                                                       END ELSE
        //                                                           IF (PresVal <> '') THEN BEGIN
        //                                                               UpdateWebHead := 'insert into OMS_MESSAGE_SYSTEM(TRANS_ID,ORDER_ID,MODIFICATION_DATE,PRODUCT_DETAILS' +
        //                                                                  ',MODIFICATION,MODIFICATION_TYPE,  PRESENT_VALUE) Values ' +
        //                                                                  '((select max(TRANS_ID)+1 from OMS_MESSAGE_SYSTEM),' + OrderId + '' +
        //                                                                  ',sysdate,''Product'',1,5,''' + PresVal + ''')';
        //                                                           END;
        //                                                       SQLConnection.Execute(UpdateWebHead);
        //                                                       UpdateWebHead := 'update OMS_ORDER_MASTER_MAIN1 set MODIFICATION=1 where OrdER_ID =' + OrderId + '';
        //                                                       SQLConnection.Execute(UpdateWebHead);

        //                                                   END;
        //                                               END;
        //                                           7:
        //                                               BEGIN                                                                // Schedule items Quantity Changed
        //                                                   IF (ChangeLog."Table No." = 60095)
        //                                                   AND (ChangeLog."Type of Change" = ChangeLog."Type of Change"::Modification) THEN BEGIN
        //                                                       // PRANAVI
        //                                                       ChangeLogNew.RESET;
        //                                                       ChangeLogNew.SETRANGE(ChangeLogNew."Table No.", 37);
        //                                                       ChangeLogNew.SETRANGE(ChangeLogNew."Primary Key Field 2 Value", ChangeLog."Primary Key Field 2 Value");
        //                                                       ChangeLogNew.SETRANGE(ChangeLogNew."Primary Key Field 3 Value", ChangeLog."Primary Key Field 3 Value");
        //                                                       ChangeLogNew.SETRANGE(ChangeLogNew."Field No.", 15);
        //                                                       ChangeLogNew.SETRANGE(ChangeLogNew."Type of Change", ChangeLogNew."Type of Change"::Modification);
        //                                                       IF NOT ChangeLogNew.FINDFIRST THEN BEGIN     //Pranavi
        //                                                           SchLine := COPYSTR(ChangeLog."Primary Key", STRPOS(ChangeLog."Primary Key",
        //                                                           ChangeLog."Primary Key Field 3 Value"), STRLEN(ChangeLog."Primary Key"));
        //                                                           SchLine := COPYSTR(SchLine, ROUND(STRPOS(SchLine, '=') + 3), STRLEN(SchLine));
        //                                                           SchLine := COPYSTR(SchLine, 1, STRLEN(SchLine) - 1);

        //                                                           EVALUATE(SheNo, SchLine);
        //                                                           //swathi
        //                                                           IF OrdStatus < 8 THEN
        //                                                               Status := 'BLANKET_DESC'
        //                                                           ELSE
        //                                                               IF OrdStatus = 8 THEN
        //                                                                   Status := 'SALE_DESC';

        //                                                           CreationQuery := ' Select to_char(ORDER_ID) AS od,to_char(PRODUCT_ID) AS pd,to_char(LATEST_QTY) AS LQ,(select to_char( ' +
        //                                                                          ' status) from OMS_ORDER_MASTER_MAIN1 where ordeR_id=a.ordeR_id) AS sts,(select to_char(sum(Latest_Qty)' +
        //                                                                          ') from OMS_ORDER_PRODUCTS_MAIN where Product_id=a.ProducT_id and ERPLineNo =a.ERPLineNo and' +
        //                                                                          ' SHEDULELINENO=' + FORMAT(SheNo) + ' and OrdER_id in(select Order_id from OMS_ORDER_MASTER_MAIN1' +
        //                                                                          ' where ' +
        //                                                                          ' ' + Status + ' =''' + FORMAT(ChangeLog."Primary Key Field 2 Value") + ''' and ORDER_TRACKING_STATUS<>3 ' +
        //                                                                          ' )) AS LQT from OMS_ORDER_PRODUCTS_MAIN a ' +
        //                                                                          ' where  LATEST_QTY<>0 and ERPLineNo =' + FORMAT(ChangeLog."Primary Key Field 3 Value") + '' +
        //                                                                          ' and SHEDULELINENO=' + FORMAT(SheNo) + ' and OrdER_id in(select Order_id from OMS_ORDER_MASTER_MAIN1' +
        //                                                                          ' where ' +
        //                                                                          ' ' + Status + ' =''' + FORMAT(ChangeLog."Primary Key Field 2 Value") + ''' and ORDER_TRACKING_STATUS<>3)' +
        //                                                                          ' ORder by ORDER_id';
        //                                                           // MESSAGE(CreationQuery);
        //                                                           //Added by Pranavi on 12-12-15
        //                                                           RowCount := 0;
        //                                                           Qunt := 0;
        //                                                           RowCountNew := 0;
        //                                                           /*
        //                                                           RecordSet := SQLConnection.Execute(CreationQuery,RowCount);
        //                                                           IF NOT((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                                                             RecordSet.MoveFirst;
        //                                                           WHILE NOT RecordSet.EOF DO
        //                                                           BEGIN
        //                                                             RowCountNew:=RowCountNew+1;
        //                                                             RecordSet.MoveNext;
        //                                                           END;
        //                                                           */
        //                                                           //end by pranavi
        //                                                           RecordSet := SQLConnection.Execute(CreationQuery, RowCount);
        //                                                           IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                                                               RecordSet.MoveFirst;
        //                                                           /*
        //                                                           RowCount:=0; Qunt:=0;
        //                                                           //pranavi
        //                                                           WHILE NOT RecordSet.EOF DO
        //                                                           BEGIN
        //                                                              EVALUATE(InnStatus,FORMAT(RecordSet.Fields.Item('sts').Value));
        //                                                              IF (Qunt=0) THEN
        //                                                              BEGIN
        //                                                                 IF InnStatus<=9 THEN
        //                                                                 BEGIN
        //                                                                  //  MESSAGE('Item in Child or Master');
        //                                                                    EVALUATE(Qunt,FORMAT(RecordSet.Fields.Item('LQ').Value));
        //                                                                    EVALUATE(NewQty,FORMAT(FORMAT(ChangeLog."New Value")));
        //                                                                    EVALUATE(x,FORMAT(FORMAT(ChangeLog."Old Value")));
        //                                                                    //x:=InnStatus - x;    //This line added for latest quantinty calculation-swathi
        //                                                                    //InnStatus:= InnStatus - Qunt;
        //                                                                    EVALUATE( Qunt,FORMAT(RecordSet.Fields.Item('Od').Value));
        //                                                                    IF RowCountNew = 1 THEN
        //                                                                    BEGIN
        //                                                                     WeekStart:=  ' Update OMS_ORDER_PRODUCTS_MAIN set '+
        //                                                                           ' QTY = '+
        //                                                                           ' round(to_number(replace('''+FORMAT(NewQty)+''','''+','+''','''+''+'''))) '+
        //                                                                           ' ,LATEST_QTY= '+
        //                                                                           ' round(to_number(replace('''+FORMAT(NewQty)+''','''+','+''','''+''+'''))) '+
        //                                                                           ' where ERPLineNo ='+FORMAT(ChangeLog."Primary Key Field 3 Value")+''+
        //                                                                           ' and SHEDULELINENO = '+FORMAT(SheNo)+' and ORDER_ID= '+FORMAT(RecordSet.Fields.Item('Od').Value)+'' ;
        //                                                                     SQLConnection.Execute(WeekStart);
        //                                                                    END ELSE
        //                                                                    BEGIN
        //                                                                     WeekStart:=  ' Update OMS_ORDER_PRODUCTS_MAIN set '+
        //                                                                           ' QTY = '+
        //                                                                           ' round(to_number(replace('''+FORMAT(NewQty)+''','''+','+''','''+''+'''))) '+
        //                                                                           ' where ERPLineNo ='+FORMAT(ChangeLog."Primary Key Field 3 Value")+''+
        //                                                                           ' and SHEDULELINENO = '+FORMAT(SheNo)+' and ORDER_ID= '+FORMAT(RecordSet.Fields.Item('Od').Value)+'' ;
        //                                                                     SQLConnection.Execute(WeekStart);
        //                                                                     IF NewQty > x THEN
        //                                                                     BEGIN
        //                                                                      IF NewOrderID = 0 THEN
        //                                                                      BEGIN
        //                                                                       CreationQuery := 'Select Max(order_id)+1 AS NewOrderID from OMS_ORDER_MASTER_MAIN1';
        //                                                                       RecordSet1 := SQLConnection.Execute(CreationQuery,RowCount1);
        //                                                                       IF NOT((RecordSet1.BOF) OR (RecordSet1.EOF)) THEN
        //                                                                         RecordSet1.MoveFirst;
        //                                                                       NewOrderID := RecordSet1.Fields.Item('NewOrderID').Value;
        //                                                                       CreationQuery:=' Select * from  OMS_ORDER_MASTER_MAIN1 where order_id = (select Max(order_id) from OMS_ORDER_MASTER_MAIN1 where '+Status+' ='''+FORMAT(ChangeLog."Primary Key Field 2 Value")+''')';
        //                                                                       RecordSet1 := SQLConnection.Execute(CreationQuery,RowCount1);
        //                                                                       IF NOT((RecordSet1.BOF) OR (RecordSet1.EOF)) THEN
        //                                                                         RecordSet1.MoveFirst;
        //                                                                       //New Child Order Insertion
        //                                                                       CreationQuery := 'insert into OMS_ORDER_MASTER_MAIN1(ORDER_ID, STATUS, CUSTOMER_ID,CUST_NAME, ORDER_ENTRY_DATE, '+
        //                                                                             'ORDER_COMPLETION_PERIOD, ORDER_VALUE, EXPECTED_WEEK_START_DATE, EXPECTED_WEEK_END_DATE, ORDER_PRIORITY, '+
        //                                                                             'ENTRY_PERSON, INSTALLATION, RDSO, LAST_MODIFY_DATE, ORDER_TRACKING_STATUS, CUSTOMER_EXPECTING_DATE , '+Status+
        //                                                                             ',ORDER_COMPLETION_DATE,CUSTOMER_ORDER_NO,RELEASE_DATE,TRACKING_PERSON_ID, CAL_LETTER_EXT_FLAG,CAL_LETTER_RECV, '+
        //                                                                             'CAL_LETTER_EXPIR_DATE, CAL_LETTER_REC_DATE,OLD_ORDER_ID) values (select Max(order_id)+1 from OMS_ORDER_MASTER_MAIN1), '+
        //                                                                             FORMAT(RecordSet1.Fields.Item('STATUS').Value)+','+FORMAT(RecordSet1.Fields.Item('CUSTOMER_ID').Value)+', '''+
        //                                                                             FORMAT(RecordSet1.Fields.Item('CUST_NAME').Value)+''', sysdate, '+FORMAT(RecordSet1.Fields.Item('ORDER_COMPLETION_PERIOD').Value)+', '+
        //                                                                             FORMAT(RecordSet1.Fields.Item('ORDER_VALUE').Value)+', '''+FORMAT(RecordSet1.Fields.Item('EXPECTED_WEEK_START_DATE').Value)+''', '''+
        //                                                                             FORMAT(RecordSet1.Fields.Item('EXPECTED_WEEK_END_DATE').Value)+''', 1, '''+FORMAT(RecordSet1.Fields.Item('ENTRY_PERSON').Value)+''', '+
        //                                                                             FORMAT(RecordSet1.Fields.Item('INSTALLATION').Value)+','+FORMAT(RecordSet1.Fields.Item('RDSO').Value)+', sysdate,6,'''+
        //                                                                             FORMAT(RecordSet1.Fields.Item('CUSTOMER_EXPECTING_DATE').Value)+''','''+FORMAT(RecordSet1.Fields.Item(''''+Status+'''').Value)+''','''+
        //                                                                             FORMAT(RecordSet1.Fields.Item('ORDER_COMPLETION_DATE').Value)+''','''+FORMAT(RecordSet1.Fields.Item('CUSTOMER_ORDER_NO').Value)+''',sysdate,'+
        //                                                                             ''''+User+''', +'+FORMAT(RecordSet1.Fields.Item('CAL_LETTER_EXT_FLAG').Value)+', '+FORMAT(RecordSet1.Fields.Item('CAL_LETTER_RECV').Value)+', '+
        //                                                                             FORMAT(RecordSet1.Fields.Item('CAL_LETTER_EXPIR_DATE').Value)+', '+FORMAT(RecordSet1.Fields.Item('CAL_LETTER_REC_DATE').Value)+', '+FORMAT(RecordSet1.Fields.Item('ORDER_ID').Value)+' )';
        //                                                                       SQLConnection.Execute(CreationQuery);
        //                                                                      END;
        //                                                                      //New Child Order Lines Insertion
        //                                                                      CreationQuery := 'Insert into OMS_ORDER_PRODUCTS_MAIN(ORDER_ID,PRODUCT_ID, QTY, LATEST_QTY, INSPECTION,ERPLINENO) '+
        //                                                                                       ' values('+FORMAT(NewOrderID)+', (select MAX(Product_id) from OMS_PRODUCT_MASTER1 where item_no ='''+FORMAT(RecordSet.Fields.Item('PD').Value)+'''), '+
        //                                                                                       ''+FORMAT(NewQty)+', '+FORMAT(NewQty-x)+', '+FORMAT(RecordSet.Fields.Item('Insp').Value)+', '+FORMAT(RecordSet.Fields.Item('ERPLinNo').Value)+')';
        //                                                                      SQLConnection.Execute(CreationQuery);
        //                                                                     END
        //                                                                     ELSE IF NewQty < x THEN
        //                                                                     BEGIN
        //                                                                       QtyDiff := 0;
        //                                                                       QtyDiff := x - NewQty;
        //                                                                       CreationQuery:= 'Select ORDER_ID,PRODUCT_ID,QTY, LATEST_QTY, ERPLINENO '+
        //                                                                                       '(select old_order_id from OMS_ORDER_MASTER_MAIN1 a where a.order_id=b.order_id) old_id '+
        //                                                                                       'FROM OMS_ORDER_PRODUCTS_MAIN  b Where ORDER_ID IN( '+
        //                                                                                       'Select ORDER_ID from OMS_ORDER_MASTER_MAIN1 where '+Status+'= '+FORMAT(ChangeLog."Primary Key Field 2 Value")+') '+
        //                                                                                       'and ERPLINENO = 10000 and SHEDULELINENO is null ORDER BY ORDER_ID DESC ';
        //                                                                       RecordSet2:=SQLConnection.Execute(CreationQuery,RowCount2);
        //                                                                       IF NOT((RecordSet2.BOF) OR (RecordSet2.EOF)) THEN
        //                                                                         RecordSet2.MoveFirst;
        //                                                                       WHILE (NOT RecordSet2.EOF) AND (QtyDiff > 0) DO
        //                                                                       BEGIN
        //                                                                         ItmLQ:=0;
        //                                                                         EVALUATE(ItmLQ,RecordSet2.Fields.Item('LATEST_QTY').Value);
        //                                                                         IF  ItmLQ > QtyDiff THEN
        //                                                                         BEGIN
        //                                                                           CreationQuery := 'Update OMS_ORDER_PRODUCTS_MAIN Set LATEST_QTY = LATEST_QTY - '+FORMAT(QtyDiff)+' where ORDER_ID = '+
        //                                                                                            FORMAT(RecordSet2.Fields.Item('ORDER_ID').Value)+' and PRODUCT_ID = '+FORMAT(RecordSet2.Fields.Item('PRODUCT_ID').Value)+
        //                                                                                            ' and ERPLINENO = '+FORMAT(RecordSet2.Fields.Item('ERPLINENO').Value)+' and SHEDULELINENO is null ';
        //                                                                           SQLConnection.Execute(CreationQuery);
        //                                                                           QtyDiff := 0;
        //                                                                         END ELSE
        //                                                                         BEGIN
        //                                                                           CreationQuery := 'Delete from OMS_ORDER_PRODUCTS_MAIN where ORDER_ID = '+
        //                                                                                            FORMAT(RecordSet2.Fields.Item('ORDER_ID').Value)+' and PRODUCT_ID = '+FORMAT(RecordSet2.Fields.Item('PRODUCT_ID').Value)+
        //                                                                                            ' and ERPLINENO = '+FORMAT(RecordSet2.Fields.Item('ERPLINENO').Value)+' and SHEDULELINENO is null ';
        //                                                                           SQLConnection.Execute(CreationQuery);
        //                                                                           QtyDiff-=ItmLQ;
        //                                                                         END;
        //                                                                       END;
        //                                                                     END;
        //                                                                    END;
        //                                                                   WeekStart:='';
        //                                                                   IF FORMAT(RecordSet.Fields.Item('Od').Value)<>OrderId THEN
        //                                                                     Qunt:=2
        //                                                                   ELSE  Qunt:=1;
        //                                                                 END;
        //                                                              END;
        //                                                              RowCount:=RowCount+1;
        //                                                              EVALUATE(InnStatus,FORMAT(RecordSet.Fields.Item('LQ').Value));
        //                                                              RecordSet.MoveNext;
        //                                                           END;
        //                                                           //pranavi
        //                                                           */
        //                                                           WHILE NOT RecordSet.EOF DO BEGIN
        //                                                               EVALUATE(InnStatus, FORMAT(RecordSet.Fields.Item('sts').Value));
        //                                                               IF (Qunt = 0) THEN BEGIN
        //                                                                   IF InnStatus <= 8 THEN BEGIN
        //                                                                       //   MESSAGE('Item in Child or Master');
        //                                                                       EVALUATE(Qunt, FORMAT(RecordSet.Fields.Item('LQ').Value));
        //                                                                       //   MESSAGE(FORMAT(ChangeLog."Entry No."));
        //                                                                       //  MESSAGE(FORMAT(RecordSet.Fields.Item('LQ').Value));
        //                                                                       EVALUATE(InnStatus, FORMAT(FORMAT(ChangeLog."New Value")));
        //                                                                       InnStatus := InnStatus - Qunt;
        //                                                                       // MESSAGE(FORMAT(InnStatus));
        //                                                                       EVALUATE(Qunt, FORMAT(RecordSet.Fields.Item('Od').Value));
        //                                                                       WeekStart := ' Update OMS_ORDER_PRODUCTS_MAIN set ' +
        //                                                                              ' QTY = QTY+ ' +
        //                                                                              ' round(to_number(replace(''' + FORMAT(InnStatus) + ''',''' + ',' + ''',''' + '' + '''))) ' +
        //                                                                              ' ,LATEST_QTY=LATEST_QTY+ ' +
        //                                                                              ' round(to_number(replace(''' + FORMAT(InnStatus) + ''',''' + ',' + ''',''' + '' + '''))) ' +
        //                                                                              ' where ERPLineNo =' + FORMAT(ChangeLog."Primary Key Field 3 Value") + '' +
        //                                                                              ' and SHEDULELINENO=' + FORMAT(SheNo) + ' and ORDER_ID= ' + FORMAT(RecordSet.Fields.Item('Od').Value) + '';
        //                                                                       IF WeekStart <> '' THEN
        //                                                                           SQLConnection.Execute(WeekStart);
        //                                                                       // MESSAGE(WeekStart);
        //                                                                       WeekStart := '';
        //                                                                       IF FORMAT(RecordSet.Fields.Item('Od').Value) <> OrderId THEN
        //                                                                           Qunt := 2
        //                                                                       ELSE
        //                                                                           Qunt := 1;
        //                                                                   END;
        //                                                               END;
        //                                                               RowCount := RowCount + 1;
        //                                                               EVALUATE(InnStatus, FORMAT(RecordSet.Fields.Item('LQ').Value));
        //                                                               RecordSet.MoveNext;
        //                                                           END;
        //                                                           IF (RowCount = 1) AND (Qunt = 1) THEN BEGIN
        //                                                               // MESSAGE('Item in Master');
        //                                                               IF OrdStatus <= 8 THEN BEGIN
        //                                                                   WeekStart := ' Update OMS_ORDER_PRODUCTS_MAIN set ' +
        //                                                                                ' QTY = ' +
        //                                                                                ' round(to_number(replace(''' + FORMAT(ChangeLog."New Value") + ''',''' + ',' + ''',''' + '' + '''))) ' +
        //                                                                                ' ,LATEST_QTY= ' +
        //                                                                                ' round(to_number(replace(''' + FORMAT(ChangeLog."New Value") + ''',''' + ',' + ''',''' + '' + '''))) ' +
        //                                                                                ' where ERPLineNo =' + FORMAT(ChangeLog."Primary Key Field 3 Value") + '' +
        //                                                                                ' and SHEDULELINENO=' + FORMAT(SheNo) + ' and OrdER_id =' + OrderId + '';
        //                                                                   IF WeekStart <> '' THEN
        //                                                                       SQLConnection.Execute(WeekStart);
        //                                                                   // MESSAGE(WeekStart);
        //                                                                   WeekStart := '';

        //                                                               END ELSE BEGIN
        //                                                                   InnerQuery := ' insert into OMS_ORDER_ITEM_MODIFICATIONS( TRANS_ID, ORDER_ID, PRODUCT_ID,' +
        //                                                                            ' ERPLINENO,SHEDULELINENO, QTY_CHANGE ) values( (select nvl(Max(TRANS_ID),0)+1 from ' +
        //                                                                            ' OMS_ORDER_ITEM_MODIFICATIONS),' + OrderId + ',(select PRODUCT_ID from ' +
        //                                                                            ' OMS_ORDER_PRODUCTS_MAIN where  ERPLineNo =' + FORMAT(ChangeLog."Primary Key Field 3 Value") + '' +
        //                                                                            ' and SHEDULELINENO=' + FORMAT(SheNo) + ' and ordeR_id =' + OrderId + '), ' +
        //                                                                            ' ' + FORMAT(ChangeLog."Primary Key Field 3 Value") + ',' + FORMAT(SheNo) + ',' +
        //                                                                            ' round(to_number(replace(''' + FORMAT(ChangeLog."New Value") + ''',''' + ',' + ''',''' + '' + ''')))) ';
        //                                                                   //MESSAGE(InnerQuery);
        //                                                                   IF InnerQuery <> '' THEN
        //                                                                       SQLConnection.Execute(InnerQuery);
        //                                                                   UpdateWebHead := 'update OMS_ORDER_MASTER_MAIN1 set MODIFICATION=1 where OrdER_ID =' + OrderId + '';
        //                                                                   SQLConnection.Execute(UpdateWebHead);
        //                                                               END;
        //                                                           END ELSE
        //                                                               IF (RowCount = 1) AND (Qunt = 0) THEN BEGIN
        //                                                                   // MESSAGE(' Item was Dispatched');
        //                                                                   EVALUATE(fieldNo, ChangeLog."Primary Key Field 3 Value");
        //                                                                   SchLine := COPYSTR(ChangeLog."Primary Key", STRPOS(ChangeLog."Primary Key",
        //                                                                   ChangeLog."Primary Key Field 3 Value"), STRLEN(ChangeLog."Primary Key"));
        //                                                                   SchLine := COPYSTR(SchLine, ROUND(STRPOS(SchLine, '=') + 3), STRLEN(SchLine));
        //                                                                   SchLine := COPYSTR(SchLine, 1, STRLEN(SchLine) - 1);
        //                                                                   Schedule.SETRANGE(Schedule."Document No.", ChangeLog."Primary Key Field 2 Value");
        //                                                                   Schedule.SETRANGE(Schedule."Document Line No.", fieldNo);
        //                                                                   EVALUATE(fieldNo, SchLine);
        //                                                                   Schedule.SETRANGE(Schedule."Line No.", fieldNo);
        //                                                                   IF Schedule.FINDSET THEN BEGIN
        //                                                                                                REPEAT
        //                                                                                                    EVALUATE(Qunt, FORMAT(FORMAT(ChangeLog."New Value")));
        //                                                                                                    InnStatus := Qunt - InnStatus;
        //                                                                                                    AdditemtoOrder(Schedule."No.", OrderId, InnStatus, FALSE
        //                                                                                                                    , FORMAT(Schedule."Document Line No."), FORMAT(Schedule."Line No."), FORMAT(Schedule.Type));
        //                                                                                                UNTIL Schedule.NEXT = 0
        //                                                                   END;
        //                                                                   WeekStart := '';
        //                                                               END ELSE
        //                                                                   IF (RowCount = 0) THEN BEGIN
        //                                                                       // MESSAGE('Not in Any Where');
        //                                                                       IF OrdStatus <= 8 THEN BEGIN
        //                                                                           EVALUATE(fieldNo, ChangeLog."Primary Key Field 3 Value");
        //                                                                           SchLine := COPYSTR(ChangeLog."Primary Key", STRPOS(ChangeLog."Primary Key",
        //                                                                           ChangeLog."Primary Key Field 3 Value"), STRLEN(ChangeLog."Primary Key"));
        //                                                                           SchLine := COPYSTR(SchLine, ROUND(STRPOS(SchLine, '=') + 3), STRLEN(SchLine));
        //                                                                           SchLine := COPYSTR(SchLine, 1, STRLEN(SchLine) - 1);
        //                                                                           Schedule.SETRANGE(Schedule."Document No.", ChangeLog."Primary Key Field 2 Value");
        //                                                                           Schedule.SETRANGE(Schedule."Document Line No.", fieldNo);
        //                                                                           EVALUATE(fieldNo, SchLine);
        //                                                                           Schedule.SETRANGE(Schedule."Line No.", fieldNo);
        //                                                                           IF Schedule.FINDSET THEN BEGIN
        //                                                                                                        REPEAT
        //                                                                                                            AdditemtoOrder(Schedule."No.", OrderId, Schedule.Quantity, FALSE
        //                                                                                                                         , FORMAT(Schedule."Document Line No."), FORMAT(Schedule."Line No."), FORMAT(Schedule.Type));
        //                                                                                                        UNTIL Schedule.NEXT = 0
        //                                                                           END;
        //                                                                           WeekStart := '';
        //                                                                       END ELSE BEGIN
        //                                                                           InnerQuery := ' insert into OMS_ORDER_ITEM_MODIFICATIONS( TRANS_ID, ORDER_ID, PRODUCT_ID,' +
        //                                                                                    ' ERPLINENO,SHEDULELINENO, QTY_CHANGE ) values( (select nvl(Max(TRANS_ID),0)+1 from ' +
        //                                                                                    ' OMS_ORDER_ITEM_MODIFICATIONS),' + OrderId + ',(select PRODUCT_ID from ' +
        //                                                                                    ' OMS_ORDER_PRODUCTS_MAIN where  ERPLineNo =' + FORMAT(ChangeLog."Primary Key Field 3 Value") + '' +
        //                                                                                    ' and SHEDULELINENO=' + FORMAT(SheNo) + '  and ordeR_id =' + OrderId + '), ' +
        //                                                                                    ' ' + FORMAT(ChangeLog."Primary Key Field 3 Value") + ',' + FORMAT(SheNo) + ' ' +
        //                                                                                    ' ,round(to_number(replace(''' + FORMAT(ChangeLog."New Value") + ''',''' + ',' + ''',''' + '' + ''')))) ';
        //                                                                           //MESSAGE(InnerQuery);
        //                                                                           IF InnerQuery <> '' THEN
        //                                                                               SQLConnection.Execute(InnerQuery);
        //                                                                           UpdateWebHead := 'update OMS_ORDER_MASTER_MAIN1 set MODIFICATION=1 where OrdER_ID =' + OrderId + '';
        //                                                                           SQLConnection.Execute(UpdateWebHead);
        //                                                                       END;

        //                                                                   END;


        //                                                           IF (Preval <> '') AND (PresVal <> '') THEN BEGIN
        //                                                               UpdateWebHead := 'insert into OMS_MESSAGE_SYSTEM(TRANS_ID,ORDER_ID,MODIFICATION_DATE,PRODUCT_DETAILS' +
        //                                                                  ',MODIFICATION,MODIFICATION_TYPE, PREV_VALUE, PRESENT_VALUE) Values ' +
        //                                                                  '((select max(TRANS_ID)+1 from OMS_MESSAGE_SYSTEM),' + OrderId + '' +
        //                                                                  ',sysdate,(select Description from OMS_PRODUCT_MASTER1 where PRODUCT_ID =(select MAx(PRODUCT_ID) from' +
        //                                                                  ' OMS_ORDER_PRODUCTS_MAIN where  ERPLineNo =' + FORMAT(ChangeLog."Primary Key Field 3 Value") + '' +
        //                                                                  ' and SHEDULELINENO=' + FORMAT(SheNo) + '   and ordeR_id =' + OrderId + ')), ' +
        //                                                                  '1,5,''' + Preval + ''',''' + PresVal + ''')';
        //                                                           END ELSE
        //                                                               IF (PresVal <> '') THEN BEGIN
        //                                                                   UpdateWebHead := 'insert into OMS_MESSAGE_SYSTEM(TRANS_ID,ORDER_ID,MODIFICATION_DATE,PRODUCT_DETAILS' +
        //                                                                     ',MODIFICATION,MODIFICATION_TYPE,  PRESENT_VALUE) Values ' +
        //                                                                     '((select max(TRANS_ID)+1 from OMS_MESSAGE_SYSTEM),' + OrderId + '' +
        //                                                                      ',sysdate,(select Description from OMS_PRODUCT_MASTER1 where PRODUCT_ID =(select MAx(PRODUCT_ID) from' +
        //                                                                      ' OMS_ORDER_PRODUCTS_MAIN where  ERPLineNo =' + FORMAT(ChangeLog."Primary Key Field 3 Value") + '' +
        //                                                                      ' and SHEDULELINENO=' + FORMAT(SheNo) + '  and ordeR_id =' + OrderId + ')), ' +
        //                                                                      '1,5,''' + PresVal + ''')';
        //                                                               END;
        //                                                           //MESSAGE(UpdateWebHead);
        //                                                           SQLConnection.Execute(UpdateWebHead);
        //                                                       END;  // Pranavi ChangeLogNew_End
        //                                                   END;
        //                                                   fieldNo := 0;
        //                                                   // MESSAGE(WeekStart+' Checking');
        //                                                   //  MESSAGE(FORMAT(fieldNo));


        //                                               END;
        //                                           8:
        //                                               BEGIN
        //                                                   IF (ChangeLog."Table No." = 60095) THEN                               // Schedule RDSO req Changing
        //                                                   BEGIN
        //                                                       SchLine := COPYSTR(ChangeLog."Primary Key", STRPOS(ChangeLog."Primary Key",
        //                                                       ChangeLog."Primary Key Field 3 Value"), STRLEN(ChangeLog."Primary Key"));
        //                                                       SchLine := COPYSTR(SchLine, ROUND(STRPOS(SchLine, '=') + 3), STRLEN(SchLine));
        //                                                       SchLine := COPYSTR(SchLine, 1, STRLEN(SchLine) - 1);
        //                                                       EVALUATE(fieldNo, SchLine);
        //                                                       CreationQuery := ' Select * from OMS_ORDER_PRODUCTS_MAIN  ' +
        //                                                                    ' where ERPLineNo =' + FORMAT(ChangeLog."Primary Key Field 3 Value") + '' +
        //                                                                    ' and SHEDULELINENO=' + FORMAT(fieldNo) + '  and OrdeR_id =' + OrderId;
        //                                                       RecordSet := SQLConnection.Execute(CreationQuery, RowCount);
        //                                                       IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                                                           RecordSet.MoveFirst;
        //                                                       RowCount := 0;
        //                                                       WHILE NOT RecordSet.EOF DO BEGIN
        //                                                           RowCount := RowCount + 1;
        //                                                           RecordSet.MoveNext;
        //                                                       END;
        //                                                       IF RowCount <= 0 THEN BEGIN
        //                                                           EVALUATE(fieldNo, ChangeLog."Primary Key Field 3 Value");
        //                                                           SchLine := COPYSTR(ChangeLog."Primary Key", STRPOS(ChangeLog."Primary Key",
        //                                                           ChangeLog."Primary Key Field 3 Value"), STRLEN(ChangeLog."Primary Key"));
        //                                                           SchLine := COPYSTR(SchLine, ROUND(STRPOS(SchLine, '=') + 3), STRLEN(SchLine));
        //                                                           SchLine := COPYSTR(SchLine, 1, STRLEN(SchLine) - 1);
        //                                                           Schedule.SETRANGE(Schedule."Document No.", ChangeLog."Primary Key Field 2 Value");
        //                                                           Schedule.SETRANGE(Schedule."Document Line No.", fieldNo);
        //                                                           EVALUATE(fieldNo, SchLine);
        //                                                           Schedule.SETRANGE(Schedule."Line No.", fieldNo);
        //                                                           IF Schedule.FINDSET THEN BEGIN
        //                                                                                        REPEAT
        //                                                                                            AdditemtoOrder(Schedule."No.", OrderId, Schedule.Quantity, FALSE
        //                                                                                                          , FORMAT(Schedule."Document Line No."), FORMAT(Schedule."Line No."), FORMAT(Schedule.Type));
        //                                                                                        UNTIL Schedule.NEXT = 0
        //                                                           END;
        //                                                       END ELSE BEGIN
        //                                                           IF (FORMAT(ChangeLog."New Value") = 'Yes') THEN BEGIN
        //                                                               WeekStart := 'Update OMS_ORDER_PRODUCTS_MAIN set ' +
        //                                                                      ' INSPECTION=1  ' +
        //                                                                      ' where ERPLineNo =' + FORMAT(ChangeLog."Primary Key Field 3 Value") + '' +
        //                                                                      ' and SHEDULELINENO=' + FORMAT(fieldNo) + ' and ';
        //                                                           END ELSE BEGIN
        //                                                               WeekStart := ' Update OMS_ORDER_PRODUCTS_MAIN set ' +
        //                                                                      ' INSPECTION=0   ' +
        //                                                                      ' where ERPLineNo =' + FORMAT(ChangeLog."Primary Key Field 3 Value") + '' +
        //                                                                      ' and SHEDULELINENO=' + FORMAT(fieldNo) + ' and ';
        //                                                           END;
        //                                                           fieldNo := 5;
        //                                                       END;
        //                                                   END;
        //                                               END;
        //                                           15:
        //                                               BEGIN                                                                 // Sale Line items Quantity Modify
        //                                                   IF (ChangeLog."Table No." = 37) AND ((Preval <> '0') OR (Preval <> ''))
        //                                                   AND (ChangeLog."Type of Change" = ChangeLog."Type of Change"::Modification) THEN BEGIN
        //                                                       //swathi
        //                                                       IF OrdStatus < 8 THEN
        //                                                           Status := 'BLANKET_DESC'
        //                                                       ELSE
        //                                                           IF OrdStatus = 8 THEN
        //                                                               Status := 'SALE_DESC';
        //                                                       CreationQuery := ' Select to_char(ORDER_ID) AS od,to_char(PRODUCT_ID) AS pd,to_char(LATEST_QTY) AS LQ,to_char(INSPECTION) as Insp, ' +
        //                                                                      'to_char(ERPLINENO) as ERPLinNo,(select to_char( ' +
        //                                                                      ' status) from OMS_ORDER_MASTER_MAIN1 where ordeR_id=a.ordeR_id) sts,(select to_char(sum(Latest_Qty)' +
        //                                                                      ') from OMS_ORDER_PRODUCTS_MAIN where Product_id=a.ProducT_id and ERPLineNo =a.ERPLineNo and' +
        //                                                                      ' SHEDULELINENO is NULL and OrdER_id in(select Order_id from OMS_ORDER_MASTER_MAIN1 where' +
        //                                                                      ' ' + Status + ' =''' + FORMAT(ChangeLog."Primary Key Field 2 Value") + ''' and ORDER_TRACKING_STATUS<>3 ' +
        //                                                                      ' )) AS LQT from OMS_ORDER_PRODUCTS_MAIN a ' +
        //                                                                      ' where  LATEST_QTY<>0 and ERPLineNo =' + FORMAT(ChangeLog."Primary Key Field 3 Value") + '' +
        //                                                                      ' and SHEDULELINENO is NULL and OrdER_id in(select Order_id from OMS_ORDER_MASTER_MAIN1 where ' +
        //                                                                      ' ' + Status + '  =''' + FORMAT(ChangeLog."Primary Key Field 2 Value") + ''' and ORDER_TRACKING_STATUS<>3)' +
        //                                                                      ' ORder by ORDER_id';
        //                                                       // MESSAGE(CreationQuery);
        //                                                       RowCount := 0;
        //                                                       Qunt := 0;
        //                                                       RowCountNew := 0;
        //                                                       //Added by Pranavi on 12-12-15
        //                                                       RecordSet := SQLConnection.Execute(CreationQuery, RowCount);
        //                                                       IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                                                           RecordSet.MoveFirst;
        //                                                       WHILE NOT RecordSet.EOF DO BEGIN
        //                                                           RowCountNew := RowCountNew + 1;
        //                                                           RecordSet.MoveNext;
        //                                                       END;
        //                                                       //end by pranavi
        //                                                       RecordSet := SQLConnection.Execute(CreationQuery, RowCount);
        //                                                       IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                                                           RecordSet.MoveFirst;

        //                                                       //pranavi
        //                                                       WHILE NOT RecordSet.EOF DO BEGIN
        //                                                           EVALUATE(InnStatus, FORMAT(RecordSet.Fields.Item('sts').Value));
        //                                                           IF (Qunt = 0) THEN BEGIN
        //                                                               IF InnStatus <= 9 THEN BEGIN
        //                                                                   //  MESSAGE('Item in Child or Master');
        //                                                                   EVALUATE(Qunt, FORMAT(RecordSet.Fields.Item('LQ').Value));
        //                                                                   EVALUATE(NewQty, FORMAT(FORMAT(ChangeLog."New Value")));
        //                                                                   EVALUATE(x, FORMAT(FORMAT(ChangeLog."Old Value")));
        //                                                                   //x:=InnStatus - x;    //This line added for latest quantinty calculation-swathi
        //                                                                   //InnStatus:= InnStatus - Qunt;
        //                                                                   EVALUATE(Qunt, FORMAT(RecordSet.Fields.Item('Od').Value));
        //                                                                   IF RowCountNew = 1 THEN BEGIN
        //                                                                       WeekStart := ' Update OMS_ORDER_PRODUCTS_MAIN set ' +
        //                                                                             ' QTY = ' +
        //                                                                             ' round(to_number(replace(''' + FORMAT(NewQty) + ''',''' + ',' + ''',''' + '' + '''))) ' +
        //                                                                             ' ,LATEST_QTY= ' +
        //                                                                             ' round(to_number(replace(''' + FORMAT(NewQty) + ''',''' + ',' + ''',''' + '' + '''))) ' +
        //                                                                             ' where ERPLineNo =' + FORMAT(ChangeLog."Primary Key Field 3 Value") + '' +
        //                                                                             ' and SHEDULELINENO is NULL and ORDER_ID= ' + FORMAT(RecordSet.Fields.Item('Od').Value) + '';
        //                                                                       SQLConnection.Execute(WeekStart);
        //                                                                       CreationQuery := 'Select to_char(ORDER_ID) as ORDER_ID, to_char(PRODUCT_ID) AS PD, QTY, LATEST_QTY, INSPECTION as Insp, to_char(ERPLINENO) as ERPLINENO, to_char(SHEDULELINENO) as SHEDULELINENO ' +
        //                                                                                        'from OMS_ORDER_PRODUCTS_MAIN where ORDER_ID=' + FORMAT(RecordSet.Fields.Item('od').Value) +
        //                                                                                        ' AND ERPLINENO=' + FORMAT(RecordSet.Fields.Item('ERPLinNo').Value) + ' AND SHEDULELINENO is NOT null';
        //                                                                       // MESSAGE(CreationQuery);
        //                                                                       RecordSet2 := SQLConnection.Execute(CreationQuery, RowCount2);
        //                                                                       IF NOT ((RecordSet2.BOF) OR (RecordSet2.EOF)) THEN
        //                                                                           RecordSet2.MoveFirst;
        //                                                                       WHILE (NOT RecordSet2.EOF) DO BEGIN
        //                                                                           schdlQty := 0;
        //                                                                           SchdlInsrct := 0;
        //                                                                           schdlOMSQty := 0;
        //                                                                           Schedule2.RESET;
        //                                                                           Schedule2.SETRANGE(Schedule2."Document No.", ChangeLog."Primary Key Field 2 Value");
        //                                                                           Schedule2.SETFILTER(Schedule2."Document Line No.", FORMAT(RecordSet2.Fields.Item('ERPLINENO').Value));
        //                                                                           Schedule2.SETFILTER(Schedule2."Line No.", FORMAT(RecordSet2.Fields.Item('SHEDULELINENO').Value));
        //                                                                           IF Schedule2.FINDFIRST THEN BEGIN
        //                                                                               schdlQty := Schedule2.Quantity;
        //                                                                           END;
        //                                                                           CreationQuery := ' Update OMS_ORDER_PRODUCTS_MAIN Set QTY = round(to_number(replace(''' + FORMAT(schdlQty) + ''',''' + ',' + ''',''' + '' + '''))) ,' +
        //                                                                                            ' LATEST_QTY= round(to_number(replace(''' + FORMAT(schdlQty) + ''',''' + ',' + ''',''' + '' + '''))) where SHEDULELINENO = ' +
        //                                                                                            FORMAT(RecordSet2.Fields.Item('SHEDULELINENO').Value) + ' and ORDER_ID = ' + FORMAT(RecordSet2.Fields.Item('ORDER_ID').Value) +
        //                                                                                            ' and ERPLINENO = ' + FORMAT(RecordSet2.Fields.Item('ERPLINENO').Value);
        //                                                                           //MESSAGE(CreationQuery);
        //                                                                           SQLConnection.Execute(CreationQuery);
        //                                                                           RecordSet2.MoveNext;
        //                                                                       END;
        //                                                                   END ELSE BEGIN
        //                                                                       WeekStart := ' Update OMS_ORDER_PRODUCTS_MAIN set ' +
        //                                                                             ' QTY = ' +
        //                                                                             ' round(to_number(replace(''' + FORMAT(NewQty) + ''',''' + ',' + ''',''' + '' + '''))) ' +
        //                                                                             ' where ERPLineNo =' + FORMAT(ChangeLog."Primary Key Field 3 Value") + '' +
        //                                                                             ' and SHEDULELINENO is NULL and ORDER_ID= ' + FORMAT(RecordSet.Fields.Item('Od').Value) + '';
        //                                                                       SQLConnection.Execute(WeekStart);
        //                                                                       IF NewQty > x THEN BEGIN
        //                                                                           IF NewOrderID = 0 THEN BEGIN
        //                                                                               CreationQuery := 'Select Max(order_id)+1 AS NewOrderID from OMS_ORDER_MASTER_MAIN1';
        //                                                                               RecordSet1 := SQLConnection.Execute(CreationQuery, RowCount1);
        //                                                                               IF NOT ((RecordSet1.BOF) OR (RecordSet1.EOF)) THEN
        //                                                                                   RecordSet1.MoveFirst;
        //                                                                               NewOrderID := RecordSet1.Fields.Item('NewOrderID').Value;
        //                                                                               CreationQuery := 'Select STATUS, to_char(CUSTOMER_ID) as CUSTOMER_ID, CUST_NAME,ORDER_COMPLETION_PERIOD,' +
        //                                                                               ' ORDER_COMPLETION_DATE, to_char(ORDER_VALUE) as ORDER_VALUE, ' +
        //                                                                               ' EXPECTED_WEEK_START_DATE, ' + Status + ', ' +
        //                                                                               ' EXPECTED_WEEK_END_DATE, ENTRY_PERSON, INSTALLATION,RDSO, ' +
        //                                                                               ' CUSTOMER_EXPECTING_DATE, CUSTOMER_ORDER_NO, ' +
        //                                                                               ' CAL_LETTER_EXT_FLAG, CAL_LETTER_RECV, CAL_LETTER_EXPIR_DATE, ' +
        //                                                                               ' CAL_LETTER_REC_DATE,to_char(ORDER_ID) as ORDER_ID from ' +
        //                                                                               ' OMS_ORDER_MASTER_MAIN1 where order_id = (select Max(order_id) from OMS_ORDER_MASTER_MAIN1 where ' + Status + ' =''' + FORMAT(ChangeLog."Primary Key Field 2 Value") + ''') ';
        //                                                                               RecordSetx := SQLConnection.Execute(CreationQuery, RowCount1);
        //                                                                               IF NOT ((RecordSetx.BOF) OR (RecordSetx.EOF)) THEN
        //                                                                                   RecordSetx.MoveFirst;
        //                                                                               // MESSAGE(CreationQuery);
        //                                                                               //New Child Order Insertion
        //                                                                               STATUS1 := FORMAT(RecordSetx.Fields.Item('STATUS').Value);
        //                                                                               CUSTOMER_ID1 := FORMAT(RecordSetx.Fields.Item('CUSTOMER_ID').Value);
        //                                                                               CUST_NAME1 := FORMAT(RecordSetx.Fields.Item('CUST_NAME').Value);
        //                                                                               ORDER_VALUE1 := FORMAT(RecordSetx.Fields.Item('ORDER_VALUE').Value);
        //                                                                               EXPECTED_WEEK_START_DATE1 := FORMAT(RecordSetx.Fields.Item('EXPECTED_WEEK_START_DATE').Value);
        //                                                                               SALE_DESC1 := FORMAT(RecordSetx.Fields.Item('' + Status + '').Value);
        //                                                                               EXPECTED_WEEK_END_DATE1 := FORMAT(RecordSetx.Fields.Item('EXPECTED_WEEK_END_DATE').Value);
        //                                                                               ENTRY_PERSON1 := FORMAT(RecordSetx.Fields.Item('ENTRY_PERSON').Value);
        //                                                                               INSTALLATION1 := FORMAT(RecordSetx.Fields.Item('INSTALLATION').Value);
        //                                                                               RDSO1 := FORMAT(RecordSetx.Fields.Item('RDSO').Value);
        //                                                                               CUSTOMER_ORDER_NO1 := FORMAT(RecordSetx.Fields.Item('CUSTOMER_ORDER_NO').Value);
        //                                                                               CUSTOMER_EXPECTING_DATE1 := FORMAT(RecordSetx.Fields.Item('CUSTOMER_EXPECTING_DATE').Value);
        //                                                                               CAL_LETTER_EXT_FLAG1 := FORMAT(RecordSetx.Fields.Item('CAL_LETTER_EXT_FLAG').Value);
        //                                                                               CAL_LETTER_RECV1 := FORMAT(RecordSetx.Fields.Item('CAL_LETTER_RECV').Value);
        //                                                                               CAL_LETTER_EXPIR_DATE1 := FORMAT(RecordSetx.Fields.Item('CAL_LETTER_EXPIR_DATE').Value);
        //                                                                               CAL_LETTER_REC_DATE1 := FORMAT(RecordSetx.Fields.Item('CAL_LETTER_REC_DATE').Value);
        //                                                                               ORDER_COMPLETION_PERIOD1 := FORMAT(RecordSetx.Fields.Item('ORDER_COMPLETION_PERIOD').Value);
        //                                                                               ORDER_ID1 := FORMAT(RecordSetx.Fields.Item('ORDER_ID').Value);
        //                                                                               WHILE (NOT RecordSetx.EOF) DO BEGIN
        //                                                                                   CreationQuery := 'Insert into OMS_ORDER_MASTER_MAIN1(ORDER_ID, STATUS, CUSTOMER_ID,CUST_NAME, ORDER_ENTRY_DATE, ' +
        //                                                                                        'ORDER_COMPLETION_PERIOD, ORDER_VALUE, EXPECTED_WEEK_START_DATE, EXPECTED_WEEK_END_DATE, ORDER_PRIORITY, ' +
        //                                                                                        'ENTRY_PERSON, INSTALLATION, RDSO, LAST_MODIFY_DATE, ORDER_TRACKING_STATUS, CUSTOMER_EXPECTING_DATE , ' + Status +
        //                                                                                        ',ORDER_COMPLETION_DATE,CUSTOMER_ORDER_NO,RELEASE_DATE,TRACKING_PERSON_ID, CAL_LETTER_EXT_FLAG,CAL_LETTER_RECV, ' +
        //                                                                                        'CAL_LETTER_EXPIR_DATE, CAL_LETTER_REC_DATE,OLD_ORDER_ID) values ((select Max(order_id)+1 from OMS_ORDER_MASTER_MAIN1), ' +
        //                                                                                        FORMAT(RecordSetx.Fields.Item('STATUS').Value) + ',' + FORMAT(RecordSetx.Fields.Item('CUSTOMER_ID').Value) + ', ''' +
        //                                                                                        FORMAT(RecordSetx.Fields.Item('CUST_NAME').Value) + ''', sysdate, ' + FORMAT(RecordSetx.Fields.Item('ORDER_COMPLETION_PERIOD').Value) + ', ' +
        //                                                                                        FORMAT(RecordSetx.Fields.Item('ORDER_VALUE').Value) + ', to_date(''' + COPYSTR(FORMAT(RecordSetx.Fields.Item('EXPECTED_WEEK_START_DATE').Value), 1, 8) + ''',''dd/mm/yy''), to_date(''' +
        //                                                                                        COPYSTR(FORMAT(RecordSetx.Fields.Item('EXPECTED_WEEK_END_DATE').Value), 1, 8) + ''',''dd/mm/yy''), 1, ''' + FORMAT(RecordSetx.Fields.Item('ENTRY_PERSON').Value) + ''', ' +
        //                                                                                        FORMAT(RecordSetx.Fields.Item('INSTALLATION').Value) + ',' + FORMAT(RecordSetx.Fields.Item('RDSO').Value) + ', sysdate,6,to_date(''' +
        //                                                                                        COPYSTR(FORMAT(RecordSetx.Fields.Item('CUSTOMER_EXPECTING_DATE').Value), 1, 8) + ''',''dd/mm/yy''),''' + FORMAT(RecordSetx.Fields.Item('' + Status + '').Value) + ''',to_date(''' +
        //                                                                                        COPYSTR(FORMAT(RecordSetx.Fields.Item('ORDER_COMPLETION_DATE').Value), 1, 8) + ''',''dd/mm/yy''),''' + FORMAT(RecordSetx.Fields.Item('CUSTOMER_ORDER_NO').Value) + ''',sysdate,' +
        //                                                                                        '''' + User + ''', ' + FORMAT(RecordSetx.Fields.Item('CAL_LETTER_EXT_FLAG').Value) + ', ''' + FORMAT(RecordSetx.Fields.Item('CAL_LETTER_RECV').Value) + ''', to_date(''' +
        //                                                                                        COPYSTR(FORMAT(RecordSetx.Fields.Item('CAL_LETTER_EXPIR_DATE').Value), 1, 8) + ''',''dd/mm/yy''),to_date(''' + COPYSTR(FORMAT(RecordSetx.Fields.Item('CAL_LETTER_REC_DATE').Value), 1, 8) + ''',''dd/mm/yy''),' +
        //                                                                                        FORMAT(RecordSetx.Fields.Item('ORDER_ID').Value) + ')';
        //                                                                                   // MESSAGE(CreationQuery);
        //                                                                                   SQLConnection.Execute(CreationQuery);
        //                                                                                   RecordSetx.MoveNext;
        //                                                                               END;
        //                                                                           END;
        //                                                                           //New Child Order Lines Insertion
        //                                                                           CreationQuery := 'Insert into OMS_ORDER_PRODUCTS_MAIN(ORDER_ID,PRODUCT_ID, QTY, LATEST_QTY, INSPECTION,ERPLINENO) ' +
        //                                                                                            ' values(round(to_number(replace(''' + FORMAT(NewOrderID) + ''',''' + ',' + ''',''' + '' + '''))), ' + FORMAT(RecordSet.Fields.Item('PD').Value) + ', ' +
        //                                                                                            'round(to_number(replace(''' + FORMAT(NewQty) + ''',''' + ',' + ''',''' + '' + '''))), round(to_number(replace(''' + FORMAT(NewQty - x) + ''',''' + ',' + ''',''' + '' + '''))), ' +
        //                                                                                            FORMAT(RecordSet.Fields.Item('Insp').Value) + ', ' + FORMAT(RecordSet.Fields.Item('ERPLinNo').Value) + ')';
        //                                                                           // MESSAGE(CreationQuery);
        //                                                                           SQLConnection.Execute(CreationQuery);
        //                                                                           CreationQuery := 'Select to_char(ORDER_ID) as ORDER_ID, to_char(PRODUCT_ID) AS PD, QTY, LATEST_QTY, INSPECTION as Insp, to_char(ERPLINENO) as ERPLINENO, to_char(SHEDULELINENO) as SHEDULELINENO ' +
        //                                                                                            'from OMS_ORDER_PRODUCTS_MAIN where ORDER_ID=' + FORMAT(RecordSet.Fields.Item('od').Value) +
        //                                                                                            ' AND ERPLINENO=' + FORMAT(RecordSet.Fields.Item('ERPLinNo').Value) + ' AND SHEDULELINENO is NOT null';
        //                                                                           //MESSAGE(CreationQuery);
        //                                                                           RecordSet2 := SQLConnection.Execute(CreationQuery, RowCount2);
        //                                                                           IF NOT ((RecordSet2.BOF) OR (RecordSet2.EOF)) THEN
        //                                                                               RecordSet2.MoveFirst;
        //                                                                           WHILE (NOT RecordSet2.EOF) DO BEGIN
        //                                                                               Schedule2.RESET;
        //                                                                               Schedule2.SETRANGE(Schedule2."Document No.", ChangeLog."Primary Key Field 2 Value");
        //                                                                               Schedule2.SETFILTER(Schedule2."Document Line No.", FORMAT(RecordSet2.Fields.Item('ERPLINENO').Value));
        //                                                                               Schedule2.SETFILTER(Schedule2."Line No.", FORMAT(RecordSet2.Fields.Item('SHEDULELINENO').Value));
        //                                                                               IF Schedule2.FINDFIRST THEN BEGIN
        //                                                                                   schdlQty := Schedule2.Quantity;
        //                                                                               END;
        //                                                                               schdlOMSQty := RecordSet2.Fields.Item('QTY').Value;
        //                                                                               SchdlInsrct := schdlQty - schdlOMSQty;
        //                                                                               CreationQuery := 'Insert into OMS_ORDER_PRODUCTS_MAIN(ORDER_ID,PRODUCT_ID, SHEDULELINENO, QTY, LATEST_QTY, INSPECTION,ERPLINENO) ' +
        //                                                                                                ' values(round(to_number(replace(''' + FORMAT(NewOrderID) + ''',''' + ',' + ''',''' + '' + '''))), ' + FORMAT(RecordSet2.Fields.Item('PD').Value) + ', ' +
        //                                                                                                FORMAT(RecordSet2.Fields.Item('SHEDULELINENO').Value) + ', round(to_number(replace(''' + FORMAT(schdlQty) + ''',''' + ',' + ''',''' + '' + ''')))' +
        //                                                                                                ', round(to_number(replace(''' + FORMAT(SchdlInsrct) + ''',''' + ',' + ''',''' + '' + '''))), ' + FORMAT(RecordSet2.Fields.Item('Insp').Value) + ', ' + FORMAT(RecordSet2.Fields.Item('ERPLINENO').Value) + ')';
        //                                                                               //MESSAGE(CreationQuery);
        //                                                                               SQLConnection.Execute(CreationQuery);
        //                                                                               RecordSet2.MoveNext;
        //                                                                           END;
        //                                                                       END
        //                                                                       ELSE
        //                                                                           IF NewQty < x THEN BEGIN
        //                                                                               QtyDiff := 0;
        //                                                                               QtyDiff := x - NewQty;
        //                                                                               CreationQuery := 'Select to_char(ORDER_ID) as ORDER_ID,to_char(PRODUCT_ID) as  PRODUCT_ID,QTY, LATEST_QTY, to_char(ERPLINENO) as ERPLINENO, ' +
        //                                                                                               '(select to_char(old_order_id) from OMS_ORDER_MASTER_MAIN1 a where a.order_id=b.order_id) old_id ' +
        //                                                                                               'FROM OMS_ORDER_PRODUCTS_MAIN  b Where ORDER_ID IN( ' +
        //                                                                                               'Select ORDER_ID from OMS_ORDER_MASTER_MAIN1 where ' + Status + '= ''' + FORMAT(ChangeLog."Primary Key Field 2 Value") + ''' ) ' +
        //                                                                                               'and ERPLINENO = ' + FORMAT(RecordSet.Fields.Item('ERPLinNo').Value) + ' and SHEDULELINENO is null ORDER BY ORDER_ID DESC ';
        //                                                                               // MESSAGE(CreationQuery);
        //                                                                               RecordSet2 := SQLConnection.Execute(CreationQuery, RowCount2);
        //                                                                               IF NOT ((RecordSet2.BOF) OR (RecordSet2.EOF)) THEN
        //                                                                                   RecordSet2.MoveFirst;
        //                                                                               WHILE (NOT RecordSet2.EOF) AND (QtyDiff > 0) DO BEGIN
        //                                                                                   ItmLQ := 0;
        //                                                                                   ItmLQ := RecordSet2.Fields.Item('LATEST_QTY').Value;
        //                                                                                   IF ItmLQ > QtyDiff THEN BEGIN
        //                                                                                       CreationQuery := 'Update OMS_ORDER_PRODUCTS_MAIN Set LATEST_QTY = LATEST_QTY - round(to_number(replace(''' + FORMAT(QtyDiff) + ''',''' + ',' + ''',''' + '' + '''))) where ORDER_ID = ' +
        //                                                                                                        FORMAT(RecordSet2.Fields.Item('ORDER_ID').Value) + ' and PRODUCT_ID = ' + FORMAT(RecordSet2.Fields.Item('PRODUCT_ID').Value) +
        //                                                                                                        ' and ERPLINENO = ' + FORMAT(RecordSet2.Fields.Item('ERPLINENO').Value) + ' and SHEDULELINENO is null ';
        //                                                                                       // MESSAGE(CreationQuery);
        //                                                                                       SQLConnection.Execute(CreationQuery);
        //                                                                                       QtyDiff := 0;
        //                                                                                       /*
        //                                                                                       CreationQuery := 'Select to_char(ORDER_ID) as ORDER_ID, to_char(PRODUCT_ID) AS PD, QTY, LATEST_QTY, INSPECTION as Insp, to_char(ERPLINENO) as ERPLINENO, to_char(SHEDULELINENO) as SHEDULELINENO '+
        //                                                                                                        'from OMS_ORDER_PRODUCTS_MAIN where ORDER_ID='+FORMAT(RecordSet2.Fields.Item('ORDER_ID').Value)+
        //                                                                                                        ' AND ERPLINENO='+FORMAT(RecordSet2.Fields.Item('ERPLINENO').Value)+' AND SHEDULELINENO is NOT null';
        //                                                                                       // MESSAGE(CreationQuery);
        //                                                                                       RecordSet2 := SQLConnection.Execute(CreationQuery,RowCount2);
        //                                                                                       IF NOT((RecordSet2.BOF) OR (RecordSet2.EOF)) THEN
        //                                                                                         RecordSet2.MoveFirst;
        //                                                                                       WHILE (NOT RecordSet2.EOF) DO
        //                                                                                       BEGIN
        //                                                                                        schdlQty:=0; SchdlInsrct:=0; schdlOMSQty:=0;
        //                                                                                        Schedule2.RESET;
        //                                                                                        Schedule2.SETRANGE(Schedule2."Document No.",ChangeLog."Primary Key Field 2 Value");
        //                                                                                        Schedule2.SETFILTER(Schedule2."Document Line No.",FORMAT(RecordSet2.Fields.Item('ERPLINENO').Value));
        //                                                                                        Schedule2.SETFILTER(Schedule2."Line No.",FORMAT(RecordSet2.Fields.Item('SHEDULELINENO').Value));
        //                                                                                        IF Schedule2.FINDFIRST THEN
        //                                                                                        BEGIN
        //                                                                                          schdlQty := Schedule2.Quantity;
        //                                                                                        END;
        //                                                                                        schdlOMSQty:=RecordSet2.Fields.Item('QTY').Value;
        //                                                                                        SchdlInsrct := schdlOMSQty - schdlQty;
        //                                                                                        CreationQuery := ' Update OMS_ORDER_PRODUCTS_MAIN Set LATEST_QTY = LATEST_QTY - round(to_number(replace('''+FORMAT(SchdlInsrct)+''','''+','+''','''+''+'''))) where SHEDULELINENO = '+
        //                                                                                                         FORMAT(RecordSet2.Fields.Item('SHEDULELINENO').Value)+' and ORDER_ID = '+FORMAT(RecordSet2.Fields.Item('ORDER_ID').Value)+
        //                                                                                                         ' and ERPLINENO = '+FORMAT(RecordSet2.Fields.Item('ERPLINENO').Value);
        //                                                                                        SQLConnection.Execute(CreationQuery);
        //                                                                                        RecordSet2.MoveNext;
        //                                                                                       END;
        //                                                                                       */
        //                                                                                   END ELSE BEGIN
        //                                                                                       CreationQuery := 'Delete from OMS_ORDER_PRODUCTS_MAIN where ORDER_ID = ' +
        //                                                                                                        FORMAT(RecordSet2.Fields.Item('ORDER_ID').Value) + ' and PRODUCT_ID = ' + FORMAT(RecordSet2.Fields.Item('PRODUCT_ID').Value) +
        //                                                                                                        ' and ERPLINENO = ' + FORMAT(RecordSet2.Fields.Item('ERPLINENO').Value);
        //                                                                                       // MESSAGE(CreationQuery);
        //                                                                                       SQLConnection.Execute(CreationQuery);
        //                                                                                       QtyDiff -= ItmLQ;
        //                                                                                   END;
        //                                                                                   RecordSet2.MoveNext;
        //                                                                               END;
        //                                                                               // schedule handling
        //                                                                               CreationQuery := 'Select to_char(ORDER_ID) as ORDER_ID, to_char(PRODUCT_ID) AS PD, QTY, LATEST_QTY, INSPECTION as Insp, to_char(ERPLINENO) as ERPLINENO, to_char(SHEDULELINENO) as SHEDULELINENO ' +
        //                                                                                                 'from OMS_ORDER_PRODUCTS_MAIN where ORDER_ID=' + FORMAT(RecordSet.Fields.Item('od').Value) +
        //                                                                                                 ' AND ERPLINENO=' + FORMAT(RecordSet.Fields.Item('ERPLinNo').Value) + ' AND SHEDULELINENO is NOT null';
        //                                                                               // MESSAGE(CreationQuery);
        //                                                                               RecordSet2 := SQLConnection.Execute(CreationQuery, RowCount2);
        //                                                                               IF NOT ((RecordSet2.BOF) OR (RecordSet2.EOF)) THEN
        //                                                                                   RecordSet2.MoveFirst;
        //                                                                               WHILE (NOT RecordSet2.EOF) DO BEGIN
        //                                                                                   schdlQty := 0;
        //                                                                                   SchdlInsrct := 0;
        //                                                                                   schdlOMSQty := 0;
        //                                                                                   Schedule2.RESET;
        //                                                                                   Schedule2.SETRANGE(Schedule2."Document No.", ChangeLog."Primary Key Field 2 Value");
        //                                                                                   Schedule2.SETFILTER(Schedule2."Document Line No.", FORMAT(RecordSet2.Fields.Item('ERPLINENO').Value));
        //                                                                                   Schedule2.SETFILTER(Schedule2."Line No.", FORMAT(RecordSet2.Fields.Item('SHEDULELINENO').Value));
        //                                                                                   IF Schedule2.FINDFIRST THEN BEGIN
        //                                                                                       schdlQty := Schedule2.Quantity;
        //                                                                                   END;
        //                                                                                   CreationQuery := 'Select to_char(ORDER_ID) as ORDER_ID,to_char(PRODUCT_ID) as  PRODUCT_ID,QTY, LATEST_QTY, to_char(ERPLINENO) as ERPLINENO, to_char(SHEDULELINENO) as SHEDULELINENO, ' +
        //                                                                                                   '(select to_char(old_order_id) from OMS_ORDER_MASTER_MAIN1 a where a.order_id=b.order_id) old_id ' +
        //                                                                                                   'FROM OMS_ORDER_PRODUCTS_MAIN  b Where ORDER_ID IN( ' +
        //                                                                                                   'Select ORDER_ID from OMS_ORDER_MASTER_MAIN1 where ' + Status + '= ''' + FORMAT(ChangeLog."Primary Key Field 2 Value") + ''' ) ' +
        //                                                                                                   'and ERPLINENO = ' + FORMAT(RecordSet.Fields.Item('ERPLinNo').Value) + ' and SHEDULELINENO=' + FORMAT(RecordSet2.Fields.Item('SHEDULELINENO').Value) + ' ORDER BY ORDER_ID DESC ';
        //                                                                                   // MESSAGE(CreationQuery);
        //                                                                                   RecordSetx := SQLConnection.Execute(CreationQuery, RowCount2);
        //                                                                                   IF NOT ((RecordSetx.BOF) OR (RecordSetx.EOF)) THEN
        //                                                                                       RecordSetx.MoveFirst;
        //                                                                                   QTYTEMP := RecordSetx.Fields.Item('QTY').Value;
        //                                                                                   QtyDiff := QTYTEMP - schdlQty;
        //                                                                                   WHILE (NOT RecordSetx.EOF) DO BEGIN
        //                                                                                       WeekStart := ' Update OMS_ORDER_PRODUCTS_MAIN Set QTY = round(to_number(replace(''' + FORMAT(schdlQty) + ''',''' + ',' + ''',''' + '' + '''))) where SHEDULELINENO = ' +
        //                                                                                                    FORMAT(RecordSetx.Fields.Item('SHEDULELINENO').Value) + ' and ORDER_ID = ' + FORMAT(RecordSetx.Fields.Item('ORDER_ID').Value) +
        //                                                                                                    ' and ERPLINENO = ' + FORMAT(RecordSetx.Fields.Item('ERPLINENO').Value);
        //                                                                                       //MESSAGE(WeekStart);
        //                                                                                       SQLConnection.Execute(WeekStart);
        //                                                                                       RecordSetx.MoveNext;
        //                                                                                   END;
        //                                                                                   RecordSetx := SQLConnection.Execute(CreationQuery, RecCountx);
        //                                                                                   IF NOT ((RecordSetx.BOF) OR (RecordSetx.EOF)) THEN
        //                                                                                       RecordSetx.MoveFirst;
        //                                                                                   TempLQ := RecordSetx.Fields.Item('LATEST_QTY').Value;
        //                                                                                   IF TempLQ <= 0 THEN BEGIN
        //                                                                                       WeekStart := 'Delete from OMS_ORDER_PRODUCTS_MAIN where ORDER_ID=' + FORMAT(RecordSetx.Fields.Item('ORDER_ID').Value) + ' and ERPLINENO=' +
        //                                                                                                    FORMAT(RecordSetx.Fields.Item('ERPLINENO').Value) + ' and SHEDULELINENO=' + FORMAT(RecordSetx.Fields.Item('SHEDULELINENO').Value);
        //                                                                                       SQLConnection.Execute(WeekStart);
        //                                                                                   END;
        //                                                                                   WHILE (NOT RecordSetx.EOF) AND (QtyDiff > 0) DO BEGIN
        //                                                                                       schdlOMSQty := RecordSetx.Fields.Item('QTY').Value;
        //                                                                                       SchdlInsrct := schdlOMSQty - schdlQty;
        //                                                                                       ItmLQ := RecordSetx.Fields.Item('LATEST_QTY').Value;
        //                                                                                       IF ItmLQ > QtyDiff THEN BEGIN
        //                                                                                           CreationQuery := ' Update OMS_ORDER_PRODUCTS_MAIN Set LATEST_QTY = LATEST_QTY - round(to_number(replace(''' + FORMAT(ItmLQ - QtyDiff) + ''',''' + ',' + ''',''' + '' + '''))) where SHEDULELINENO = ' +
        //                                                                                                            FORMAT(RecordSetx.Fields.Item('SHEDULELINENO').Value) + ' and ORDER_ID = ' + FORMAT(RecordSetx.Fields.Item('ORDER_ID').Value) +
        //                                                                                                            ' and ERPLINENO = ' + FORMAT(RecordSetx.Fields.Item('ERPLINENO').Value);
        //                                                                                           //MESSAGE(CreationQuery);
        //                                                                                           SQLConnection.Execute(CreationQuery);
        //                                                                                           QtyDiff := 0;
        //                                                                                       END ELSE BEGIN
        //                                                                                           CreationQuery := 'Delete from OMS_ORDER_PRODUCTS_MAIN where SHEDULELINENO = ' + FORMAT(RecordSetx.Fields.Item('SHEDULELINENO').Value) +
        //                                                                                                            ' and  ORDER_ID = ' + FORMAT(RecordSetx.Fields.Item('ORDER_ID').Value) +
        //                                                                                                            ' and ERPLINENO = ' + FORMAT(RecordSetx.Fields.Item('ERPLINENO').Value);
        //                                                                                           //MESSAGE(CreationQuery);
        //                                                                                           SQLConnection.Execute(CreationQuery);
        //                                                                                           QtyDiff -= ItmLQ;
        //                                                                                       END;
        //                                                                                       RecordSetx.MoveNext;
        //                                                                                   END;
        //                                                                                   RecordSet2.MoveNext;
        //                                                                               END;
        //                                                                               // shcdule handling end
        //                                                                               LINESCOUNT := 0;
        //                                                                               CreationQuery := ' select * from (Select to_char(ORDER_ID) as ORDER_ID,SALE_DESC, ' +
        //                                                                                               '(SELECT COUNT(ORDER_ID) FROM OMS_ORDER_PRODUCTS_MAIN WHERE ORDER_ID=Main.ORDER_ID) AS LinesCount ' +
        //                                                                                               'from OMS_ORDER_MASTER_MAIN1 Main WHERE ' + Status + '= ''' + FORMAT(ChangeLog."Primary Key Field 2 Value") + ''') where LinesCount = 0';
        //                                                                               RecordSety := SQLConnection.Execute(CreationQuery, RecCountx);
        //                                                                               /*WHILE (NOT RecordSety.EOF) DO
        //                                                                               BEGIN
        //                                                                                 LINESCOUNT:=RecordSety.Fields.Item('LinesCount').Value;
        //                                                                                 MESSAGE(FORMAT(RecordSety.Fields.Item('ORDER_ID').Value)+' - '+ FORMAT(LINESCOUNT));
        //                                                                                 RecordSety.MoveNext;
        //                                                                               END;*/
        //                                                                               IF NOT ((RecordSety.BOF) OR (RecordSety.EOF)) THEN
        //                                                                                   RecordSety.MoveFirst;
        //                                                                               WHILE (NOT RecordSety.EOF) DO BEGIN
        //                                                                                   LINESCOUNT := RecordSety.Fields.Item('LinesCount').Value;
        //                                                                                   //EVALUATE(LINESCOUNT,FORMAT(RecordSety.Fields.Item('LinesCount').Value));
        //                                                                                   //IF  LINESCOUNT = 0 THEN
        //                                                                                   // BEGIN
        //                                                                                   CreationQuery := 'Delete from OMS_ORDER_MASTER_MAIN1 where ORDER_ID = ' + FORMAT(RecordSety.Fields.Item('ORDER_ID').Value);
        //                                                                                   SQLConnection.Execute(CreationQuery);
        //                                                                                   // END;
        //                                                                                   RecordSety.MoveNext;
        //                                                                               END;
        //                                                                           END;
        //                                                                   END;
        //                                                                   WeekStart := '';
        //                                                                   IF FORMAT(RecordSet.Fields.Item('Od').Value) <> OrderId THEN
        //                                                                       Qunt := 2
        //                                                                   ELSE
        //                                                                       Qunt := 1;
        //                                                               END;
        //                                                           END;
        //                                                           RowCount := RowCount + 1;
        //                                                           EVALUATE(InnStatus, FORMAT(RecordSet.Fields.Item('LQ').Value));
        //                                                           RecordSet.MoveNext;
        //                                                       END;
        //                                                       //pranavi
        //                                                       /*
        //                                                       WHILE NOT RecordSet.EOF DO
        //                                                       BEGIN
        //                                                          EVALUATE(InnStatus,FORMAT(RecordSet.Fields.Item('sts').Value));
        //                                                          IF (Qunt=0) THEN
        //                                                          BEGIN
        //                                                             IF InnStatus<=8 THEN
        //                                                             BEGIN
        //                                                              //  MESSAGE('Item in Child or Master');
        //                                                                EVALUATE(Qunt,FORMAT(RecordSet.Fields.Item('LQ').Value));
        //                                                                EVALUATE(InnStatus,FORMAT(FORMAT(ChangeLog."New Value")));
        //                                                                EVALUATE(x,FORMAT(FORMAT(ChangeLog."Old Value")));
        //                                                                x:=InnStatus - x;    //This line added for latest quantinty calculation-swathi
        //                                                                InnStatus:= InnStatus - Qunt;
        //                                                                EVALUATE( Qunt,FORMAT(RecordSet.Fields.Item('Od').Value));
        //                                                                WeekStart:=  ' Update OMS_ORDER_PRODUCTS_MAIN set '+
        //                                                                       ' QTY = QTY+ '+
        //                                                                       ' round(to_number(replace('''+FORMAT(InnStatus)+''','''+','+''','''+''+'''))) '+
        //                                                                       ' ,LATEST_QTY=LATEST_QTY+ '+
        //                                                                       ' round(to_number(replace('''+FORMAT(x)+''','''+','+''','''+''+'''))) '+
        //                                                                       ' where ERPLineNo ='+FORMAT(ChangeLog."Primary Key Field 3 Value")+''+
        //                                                                       ' and SHEDULELINENO is NULL and ORDER_ID= '+FORMAT(RecordSet.Fields.Item('Od').Value)+'' ;
        //                                                               IF WeekStart<>'' THEN
        //                                                                  SQLConnection.Execute(WeekStart);
        //                                                             //  MESSAGE(WeekStart);
        //                                                               WeekStart:='';
        //                                                               IF FORMAT(RecordSet.Fields.Item('Od').Value)<>OrderId THEN
        //                                                                 Qunt:=2
        //                                                               ELSE  Qunt:=1;
        //                                                             END;
        //                                                          END;
        //                                                          RowCount:=RowCount+1;
        //                                                          EVALUATE(InnStatus,FORMAT(RecordSet.Fields.Item('LQ').Value));
        //                                                          RecordSet.MoveNext;
        //                                                       END;
        //                                                       */
        //                                                       /*IF (RowCount=1)AND (Qunt=1) THEN
        //                                                       BEGIN
        //                                                       // MESSAGE('Item in Master');
        //                                                        IF OrdStatus<=8 THEN
        //                                                        BEGIN
        //                                                          WeekStart:=  ' Update OMS_ORDER_PRODUCTS_MAIN set '+
        //                                                                       ' QTY = '+
        //                                                                       ' round(to_number(replace('''+FORMAT(ChangeLog."New Value")+''','''+','+''','''+''+'''))) '+
        //                                                                       ' ,LATEST_QTY= '+
        //                                                                       ' round(to_number(replace('''+FORMAT(ChangeLog."New Value")+''','''+','+''','''+''+'''))) '+
        //                                                                       ' where ERPLineNo ='+FORMAT(ChangeLog."Primary Key Field 3 Value")+''+
        //                                                                       ' and SHEDULELINENO is NULL and OrdER_id ='+OrderId+'' ;
        //                                                          IF WeekStart<>'' THEN
        //                                                             SQLConnection.Execute(WeekStart);
        //                                                         // MESSAGE(WeekStart);
        //                                                          WeekStart:='';

        //                                                         END ELSE
        //                                                         BEGIN
        //                                                            InnerQuery:=' insert into OMS_ORDER_ITEM_MODIFICATIONS( TRANS_ID, ORDER_ID, PRODUCT_ID,'+
        //                                                                     ' ERPLINENO, QTY_CHANGE ) values( (select nvl(Max(TRANS_ID),0)+1 from '+
        //                                                                     ' OMS_ORDER_ITEM_MODIFICATIONS),'+OrderId+',(select PRODUCT_ID from '+
        //                                                                     ' OMS_ORDER_PRODUCTS_MAIN where  ERPLineNo ='+FORMAT(ChangeLog."Primary Key Field 3 Value")+''+
        //                                                                     ' and SHEDULELINENO is null  and ordeR_id ='+OrderId+'), '+
        //                                                                     ' '+FORMAT(ChangeLog."Primary Key Field 3 Value")+', '+
        //                                                                     ' round(to_number(replace('''+FORMAT(ChangeLog."New Value")+''','''+','+''','''+''+''')))) ' ;
        //                                                           // MESSAGE(InnerQuery);
        //                                                            IF InnerQuery<>'' THEN
        //                                                              SQLConnection.Execute(InnerQuery);
        //                                                            UpdateWebHead:='update OMS_ORDER_MASTER_MAIN1 set MODIFICATION=1 where OrdER_ID ='+OrderId+'';
        //                                                            SQLConnection.Execute(UpdateWebHead);
        //                                                         END;
        //                                                       END ELSE*/
        //                                                       IF (RowCount = 1) AND (Qunt = 0) THEN BEGIN
        //                                                           // MESSAGE(' Item was Dispatched');
        //                                                           EVALUATE(fieldNo, ChangeLog."Primary Key Field 3 Value");
        //                                                           SalesLine.SETRANGE(SalesLine."Document No.", ChangeLog."Primary Key Field 2 Value");
        //                                                           SalesLine.SETRANGE(SalesLine."Line No.", fieldNo);
        //                                                           IF SalesLine.FINDSET THEN BEGIN
        //                                                                                         REPEAT
        //                                                                                             //  MESSAGE(SalesLine."No.");
        //                                                                                             EVALUATE(Qunt, FORMAT(FORMAT(ChangeLog."New Value")));
        //                                                                                             InnStatus := Qunt - InnStatus;
        //                                                                                             AdditemtoOrder(SalesLine."No.", OrderId, InnStatus, SalesLine."RDSO Inspection Required"
        //                                                                                                             , FORMAT(SalesLine."Line No."), ' ', FORMAT(SalesLine.Type));
        //                                                                                         UNTIL SalesLine.NEXT = 0
        //                                                           END;
        //                                                           WeekStart := '';
        //                                                       END ELSE
        //                                                           IF (RowCount = 0) THEN BEGIN
        //                                                               // MESSAGE('Not in Any Where');
        //                                                               IF OrdStatus <= 8 THEN BEGIN
        //                                                                   EVALUATE(fieldNo, ChangeLog."Primary Key Field 3 Value");
        //                                                                   SalesLine.SETRANGE(SalesLine."Document No.", ChangeLog."Primary Key Field 2 Value");
        //                                                                   SalesLine.SETRANGE(SalesLine."Line No.", fieldNo);
        //                                                                   IF SalesLine.FINDSET THEN BEGIN
        //                                                                                                 REPEAT
        //                                                                                                     //  MESSAGE(SalesLine."No.");
        //                                                                                                     AdditemtoOrder(SalesLine."No.", OrderId, SalesLine.Quantity, SalesLine."RDSO Inspection Required"
        //                                                                                                                    , FORMAT(SalesLine."Line No."), ' ', FORMAT(SalesLine.Type));
        //                                                                                                 UNTIL SalesLine.NEXT = 0
        //                                                                   END;
        //                                                                   WeekStart := '';
        //                                                               END ELSE BEGIN
        //                                                                   InnerQuery := ' insert into OMS_ORDER_ITEM_MODIFICATIONS( TRANS_ID, ORDER_ID, PRODUCT_ID,' +
        //                                                                            ' ERPLINENO, QTY_CHANGE ) values( (select nvl(Max(TRANS_ID),0)+1 from ' +
        //                                                                            ' OMS_ORDER_ITEM_MODIFICATIONS),' + OrderId + ',(select PRODUCT_ID from ' +
        //                                                                            ' OMS_ORDER_PRODUCTS_MAIN where  ERPLineNo =' + FORMAT(ChangeLog."Primary Key Field 3 Value") + '' +
        //                                                                            ' and SHEDULELINENO is null  and ordeR_id =' + OrderId + '), ' +
        //                                                                            ' ' + FORMAT(ChangeLog."Primary Key Field 3 Value") + ', ' +
        //                                                                            ' round(to_number(replace(''' + FORMAT(ChangeLog."New Value") + ''',''' + ',' + ''',''' + '' + ''')))) ';
        //                                                                   //MESSAGE(InnerQuery);
        //                                                                   IF InnerQuery <> '' THEN
        //                                                                       SQLConnection.Execute(InnerQuery);
        //                                                                   UpdateWebHead := 'update OMS_ORDER_MASTER_MAIN1 set MODIFICATION=1 where OrdER_ID =' + OrderId + '';
        //                                                                   SQLConnection.Execute(UpdateWebHead);
        //                                                               END;

        //                                                           END;


        //                                                       IF (Preval <> '') AND (PresVal <> '') THEN BEGIN
        //                                                           UpdateWebHead := 'insert into OMS_MESSAGE_SYSTEM(TRANS_ID,ORDER_ID,MODIFICATION_DATE,PRODUCT_DETAILS' +
        //                                                              ',MODIFICATION,MODIFICATION_TYPE, PREV_VALUE, PRESENT_VALUE) Values ' +
        //                                                              '((select max(TRANS_ID)+1 from OMS_MESSAGE_SYSTEM),' + OrderId + '' +
        //                                                              ',sysdate,(select Description from OMS_PRODUCT_MASTER1 where PRODUCT_ID =(select MAx(PRODUCT_ID) from' +
        //                                                              ' OMS_ORDER_PRODUCTS_MAIN where  ERPLineNo =' + FORMAT(ChangeLog."Primary Key Field 3 Value") + '' +
        //                                                              ' and SHEDULELINENO is NULL  and ordeR_id =' + OrderId + ')), ' +
        //                                                              '1,5,''' + Preval + ''',''' + PresVal + ''')';
        //                                                       END ELSE
        //                                                           IF (PresVal <> '') THEN BEGIN
        //                                                               UpdateWebHead := 'insert into OMS_MESSAGE_SYSTEM(TRANS_ID,ORDER_ID,MODIFICATION_DATE,PRODUCT_DETAILS' +
        //                                                                 ',MODIFICATION,MODIFICATION_TYPE,  PRESENT_VALUE) Values ' +
        //                                                                 '((select max(TRANS_ID)+1 from OMS_MESSAGE_SYSTEM),' + OrderId + '' +
        //                                                                  ',sysdate,(select Description from OMS_PRODUCT_MASTER1 where PRODUCT_ID =(select MAx(PRODUCT_ID) from' +
        //                                                                  ' OMS_ORDER_PRODUCTS_MAIN where  ERPLineNo =' + FORMAT(ChangeLog."Primary Key Field 3 Value") + '' +
        //                                                                  ' and SHEDULELINENO is NULL and ordeR_id =' + OrderId + ')), ' +
        //                                                                  '1,5,''' + PresVal + ''')';
        //                                                           END;
        //                                                       // MESSAGE(UpdateWebHead);
        //                                                       SQLConnection.Execute(UpdateWebHead);
        //                                                       //pranavi
        //                                                       CreationQuery := ' Select to_char(ORDER_ID) AS od,to_char(PRODUCT_ID) AS pd,to_char(LATEST_QTY) AS LQ,to_char(INSPECTION) as Insp, ' +
        //                                                                      'to_char(ERPLINENO) as ERPLinNo,(select to_char( ' +
        //                                                                      ' status) from OMS_ORDER_MASTER_MAIN1 where ordeR_id=a.ordeR_id) sts,(select to_char(sum(Latest_Qty)' +
        //                                                                      ') from OMS_ORDER_PRODUCTS_MAIN where Product_id=a.ProducT_id and ERPLineNo =a.ERPLineNo and' +
        //                                                                      ' SHEDULELINENO is NULL and OrdER_id in(select Order_id from OMS_ORDER_MASTER_MAIN1 where' +
        //                                                                      ' ' + Status + ' =''' + FORMAT(ChangeLog."Primary Key Field 2 Value") + ''' and ORDER_TRACKING_STATUS<>3 ' +
        //                                                                      ' )) AS LQT from OMS_ORDER_PRODUCTS_MAIN a ' +
        //                                                                      ' where  LATEST_QTY<>0 and ERPLineNo =' + FORMAT(ChangeLog."Primary Key Field 3 Value") + '' +
        //                                                                      ' and SHEDULELINENO is NULL and OrdER_id in(select Order_id from OMS_ORDER_MASTER_MAIN1 where ' +
        //                                                                      ' ' + Status + '  =''' + FORMAT(ChangeLog."Primary Key Field 2 Value") + ''' and ORDER_TRACKING_STATUS<>3)' +
        //                                                                      ' ORder by ORDER_id';
        //                                                       // MESSAGE(CreationQuery);
        //                                                       RowCount := 0;
        //                                                       //Added by Pranavi on 12-12-15
        //                                                       RecordSet := SQLConnection.Execute(CreationQuery, RowCount);
        //                                                       IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                                                           RecordSet.MoveFirst;
        //                                                       //pranavi
        //                                                       WHILE NOT RecordSet.EOF DO BEGIN
        //                                                           EVALUATE(InnStatus, FORMAT(RecordSet.Fields.Item('sts').Value));
        //                                                           IF InnStatus <= 9 THEN BEGIN
        //                                                               WeekStart := ' Update OMS_ORDER_PRODUCTS_MAIN set ' +
        //                                                                     ' QTY = ' +
        //                                                                     ' round(to_number(replace(''' + FORMAT(ChangeLog."New Value") + ''',''' + ',' + ''',''' + '' + '''))) ' +
        //                                                                     ' where ERPLineNo =' + FORMAT(ChangeLog."Primary Key Field 3 Value") + '' +
        //                                                                     ' and SHEDULELINENO is NULL and ORDER_ID= ' + FORMAT(RecordSet.Fields.Item('Od').Value) + '';
        //                                                               //MESSAGE(WeekStart);
        //                                                               SQLConnection.Execute(WeekStart);
        //                                                               CreationQuery := 'Select to_char(ORDER_ID) as ORDER_ID, to_char(PRODUCT_ID) AS PD, QTY, LATEST_QTY, INSPECTION as Insp, to_char(ERPLINENO) as ERPLINENO, to_char(SHEDULELINENO) as SHEDULELINENO ' +
        //                                                                                'from OMS_ORDER_PRODUCTS_MAIN where ORDER_ID=' + FORMAT(RecordSet.Fields.Item('od').Value) +
        //                                                                                ' AND ERPLINENO=' + FORMAT(RecordSet.Fields.Item('ERPLinNo').Value) + ' AND SHEDULELINENO is NOT null';
        //                                                               //MESSAGE(CreationQuery);
        //                                                               RecordSet2 := SQLConnection.Execute(CreationQuery, RowCount2);
        //                                                               IF NOT ((RecordSet2.BOF) OR (RecordSet2.EOF)) THEN
        //                                                                   RecordSet2.MoveFirst;
        //                                                               WHILE (NOT RecordSet2.EOF) DO BEGIN
        //                                                                   schdlQty := 0;
        //                                                                   SchdlInsrct := 0;
        //                                                                   schdlOMSQty := 0;
        //                                                                   Schedule2.RESET;
        //                                                                   Schedule2.SETRANGE(Schedule2."Document No.", ChangeLog."Primary Key Field 2 Value");
        //                                                                   Schedule2.SETFILTER(Schedule2."Document Line No.", FORMAT(RecordSet2.Fields.Item('ERPLINENO').Value));
        //                                                                   Schedule2.SETFILTER(Schedule2."Line No.", FORMAT(RecordSet2.Fields.Item('SHEDULELINENO').Value));
        //                                                                   IF Schedule2.FINDFIRST THEN BEGIN
        //                                                                       schdlQty := Schedule2.Quantity;
        //                                                                   END;
        //                                                                   CreationQuery := ' Update OMS_ORDER_PRODUCTS_MAIN Set QTY = round(to_number(replace(''' + FORMAT(schdlQty) + ''',''' + ',' + ''',''' + '' + '''))) ' +
        //                                                                                    '  where SHEDULELINENO = ' +
        //                                                                                    FORMAT(RecordSet2.Fields.Item('SHEDULELINENO').Value) + ' and ORDER_ID = ' + FORMAT(RecordSet2.Fields.Item('ORDER_ID').Value) +
        //                                                                                    ' and ERPLINENO = ' + FORMAT(RecordSet2.Fields.Item('ERPLINENO').Value);
        //                                                                   //MESSAGE(CreationQuery);
        //                                                                   SQLConnection.Execute(CreationQuery);
        //                                                                   RecordSet2.MoveNext;
        //                                                               END;
        //                                                           END;
        //                                                           RecordSet.MoveNext;
        //                                                       END;
        //                                                       //pranavi
        //                                                   END;    //If_ChangeLog table is 37_end
        //                                                   fieldNo := 0;
        //                                                   //  MESSAGE(WeekStart+' Checking');
        //                                                   //  MESSAGE(FORMAT(fieldNo));
        //                                                   // PRANAVI
        //                                                   ChangeLogNew.RESET;
        //                                                   ChangeLogNew.SETRANGE(ChangeLogNew."Table No.", 60095);
        //                                                   ChangeLogNew.SETRANGE(ChangeLogNew."Primary Key Field 2 Value", ChangeLog."Primary Key Field 2 Value");
        //                                                   ChangeLogNew.SETRANGE(ChangeLogNew."Primary Key Field 3 Value", ChangeLog."Primary Key Field 3 Value");
        //                                                   ChangeLogNew.SETRANGE(ChangeLogNew."Field No.", 7);
        //                                                   ChangeLogNew.SETRANGE(ChangeLogNew."Type of Change", ChangeLogNew."Type of Change"::Modification);
        //                                                   IF ChangeLogNew.FINDFIRST THEN BEGIN
        //                                                       ChangeLogNew.DELETEALL(TRUE);
        //                                                   END;
        //                                                   // PRANAVI
        //                                               END; //case_end

        //                                           21:
        //                                               BEGIN
        //                                                   /*MESSAGE('Shipment');     // Shipment Date
        //                                                    fieldNo :=0;
        //                                                    EVALUATE(DDate,FORMAT(ChangeLog."New Value"));
        //                                                    WeekEnd:=FORMAT(DDate,0,'<Day>-<Month Text,3>-<Year4>');
        //                                                    WeekStart:=WeekStart+' CUSTOMER_EXPECTING_DATE='''+WeekEnd+''' where ';   */
        //                                               END;
        //                                           43:                           // SalesPerson Code
        //                                               BEGIN
        //                                                   IF (ChangeLog."Table No." = 36) AND (FORMAT(ChangeLog."New Value") <> '')
        //                                                   AND (ChangeLog."Type of Change" = ChangeLog."Type of Change"::Modification) THEN BEGIN
        //                                                       WeekStart := WeekStart + ' ENTRY_PERSON=''' + ChangeLog."New Value" + ''', ORDER_TRACKING_STATUS=7 where ';
        //                                                       fieldNo := 12;
        //                                                   END;
        //                                               END;
        //                                           13732:
        //                                               BEGIN                           //Work Order Number
        //                                                   IF (ChangeLog."Table No." = 36) AND (FORMAT(ChangeLog."New Value") <> '') AND
        //                                                    (ChangeLog."Type of Change" = ChangeLog."Type of Change"::Modification) THEN BEGIN
        //                                                       WeekStart := WeekStart + ' WORK_DESCRIPTION=''' + FORMAT(ChangeLog."New Value") + '''' +
        //                                                        ' where ';
        //                                                       fieldNo := 12;
        //                                                   END;
        //                                               END;
        //                                           60016:                         // Customer Order No.
        //                                               BEGIN
        //                                                   IF (ChangeLog."Table No." = 36) AND (FORMAT(ChangeLog."New Value") <> '')
        //                                                   AND (ChangeLog."Type of Change" = ChangeLog."Type of Change"::Modification) THEN BEGIN
        //                                                       WeekStart := WeekStart + ' CUSTOMER_ORDER_NO=''' + ChangeLog."New Value" + ''', ORDER_TRACKING_STATUS=7 where ';
        //                                                       fieldNo := 12;
        //                                                   END;
        //                                               END;
        //                                           60021:
        //                                               BEGIN                   // Project Completion Date
        //                                                   IF (ChangeLog."Table No." = 36) AND (FORMAT(ChangeLog."New Value") <> '')
        //                                                   AND (ChangeLog."Type of Change" = ChangeLog."Type of Change"::Modification) THEN BEGIN
        //                                                       //MESSAGE(FORMAT(ChangeLog."Entry No."));  // Need to remove
        //                                                       IF (STRLEN(ChangeLog."New Value") = 8) AND (COPYSTR(ChangeLog."New Value", 3, 1) = '/') THEN BEGIN
        //                                                           EVALUATE(Day, COPYSTR(ChangeLog."New Value", 4, 2));
        //                                                           EVALUATE(Month, COPYSTR(ChangeLog."New Value", 1, 2));
        //                                                           EVALUATE(Year, COPYSTR(ChangeLog."New Value", 7, 2));
        //                                                       END
        //                                                       ELSE BEGIN
        //                                                           EVALUATE(Day, COPYSTR(ChangeLog."New Value", 9, 2));
        //                                                           EVALUATE(Month, COPYSTR(ChangeLog."New Value", 6, 2));
        //                                                           EVALUATE(Year, COPYSTR(ChangeLog."New Value", 3, 2));
        //                                                       END;

        //                                                       /*   EVALUATE(Day,COPYSTR(ChangeLog."New Value",9,2));
        //                                                          EVALUATE(Month,COPYSTR(ChangeLog."New Value",6,2));
        //                                                          EVALUATE(Year,COPYSTR(ChangeLog."New Value",3,2));        */
        //                                                       DDate := DMY2DATE(Day, Month, 2000 + Year);

        //                                                       // EVALUATE(DDate,FORMAT(ChangeLog."New Value"));
        //                                                       WeekEnd := FORMAT(DDate, 0, '<Day>-<Month Text,3>-<Year4>');
        //                                                       fieldNo := 3;
        //                                                       WeekStart := WeekStart + ' ORDER_COMPLETION_DATE=''' + WeekEnd + ''', ORDER_TRACKING_STATUS=7 where ';
        //                                                   END;
        //                                               END;
        //                                           60061:
        //                                               BEGIN                    // Order Value
        //                                                   IF (ChangeLog."Table No." = 36) AND (FORMAT(ChangeLog."New Value") <> '') AND
        //                                                    (ChangeLog."Type of Change" = ChangeLog."Type of Change"::Modification) THEN BEGIN
        //                                                       WeekStart := WeekStart + ' ORDER_VALUE=round(to_number(replace(''' + FORMAT(ChangeLog."New Value") + ''',''' + ',' + ''',' +
        //                                                        '''' + '' + '''))), ORDER_TRACKING_STATUS=7 where ';
        //                                                       fieldNo := 1;
        //                                                   END;
        //                                               END;
        //                                           60087:
        //                                               BEGIN                       //Station Names
        //                                                   IF (ChangeLog."Table No." = 36) AND (FORMAT(ChangeLog."New Value") <> '') AND
        //                                                    (ChangeLog."Type of Change" = ChangeLog."Type of Change"::Modification) THEN BEGIN
        //                                                       WeekStart := WeekStart + ' STATION_NAMES=''' + FORMAT(ChangeLog."New Value") + '''' +
        //                                                        ' where ';
        //                                                       fieldNo := 12;
        //                                                   END;
        //                                               END;
        //                                           60116:
        //                                               BEGIN                   // Order Completion Period
        //                                                   IF (ChangeLog."Table No." = 36) AND (FORMAT(ChangeLog."New Value") <> '') AND
        //                                                    (ChangeLog."Type of Change" = ChangeLog."Type of Change"::Modification) THEN BEGIN
        //                                                       WeekStart := WeekStart + ' ORDER_COMPLETION_PERIOD' +
        //                                                       '=round(to_number(replace(''' + FORMAT(ChangeLog."New Value") + ''',''' + ',' + ''',' +
        //                                                        '''' + '' + '''))) ,ORDER_COMPLETION_DATE=EXPECTED_WEEK_START_DATE' +
        //                                                       '+round(to_number(replace(''' + FORMAT(ChangeLog."New Value") + ''',''' + ',' + ''',' +
        //                                                        '''' + '' + '''))),' +
        //                                                        'CUSTOMER_EXPECTING_DATE=EXPECTED_WEEK_START_DATE' +
        //                                                       '+round(to_number(replace(''' + FORMAT(ChangeLog."New Value") + ''',''' + ',' + ''',' +
        //                                                        '''' + '' + '''))), ORDER_TRACKING_STATUS=7 where ';
        //                                                       fieldNo := 1;
        //                                                   END;
        //                                               END;
        //                                           60068:
        //                                               BEGIN                     // Installation
        //                                                   IF (ChangeLog."Table No." = 36) AND (FORMAT(ChangeLog."New Value") <> '')
        //                                                   AND (ChangeLog."Type of Change" = ChangeLog."Type of Change"::Modification) THEN BEGIN
        //                                                       Installation := 0;
        //                                                       CASE ChangeLog."New Value" OF
        //                                                           '1':
        //                                                               Installation := 2;
        //                                                           '2':
        //                                                               Installation := 1;
        //                                                           '3':
        //                                                               Installation := 1;
        //                                                       END;
        //                                                       WeekStart := WeekStart + ' INSTALLATION= ' + FORMAT(Installation) + ', ORDER_TRACKING_STATUS=7 where ';
        //                                                       fieldNo := 12;
        //                                                   END;
        //                                               END;
        //                                           60090:
        //                                               BEGIN
        //                                                   fieldNo := 12;         // RDSO Inspection Req
        //                                                   IF (ChangeLog."Table No." = 36) AND (FORMAT(ChangeLog."New Value") <> '')
        //                                                   AND (ChangeLog."Type of Change" = ChangeLog."Type of Change"::Modification) THEN BEGIN
        //                                                       IF FORMAT(ChangeLog."New Value") = 'YES' THEN BEGIN
        //                                                           WeekStart := WeekStart + ' RDSO=1 where ';
        //                                                       END ELSE
        //                                                           WeekStart := WeekStart + ' RDSO=0, ORDER_TRACKING_STATUS=7 where ';
        //                                                   END;
        //                                               END;
        //                                           60066:
        //                                               BEGIN
        //                                                   fieldNo := 9;        // Call letter Received Date
        //                                                   IF (ChangeLog."Table No." = 36) AND (FORMAT(ChangeLog."New Value") <> '')
        //                                                   AND (ChangeLog."Type of Change" = ChangeLog."Type of Change"::Modification) THEN BEGIN
        //                                                       //mnraju
        //                                                       IF (STRLEN(ChangeLog."New Value") = 8) AND (COPYSTR(ChangeLog."New Value", 3, 1) = '/') THEN BEGIN
        //                                                           EVALUATE(Day, COPYSTR(ChangeLog."New Value", 4, 2));
        //                                                           EVALUATE(Month, COPYSTR(ChangeLog."New Value", 1, 2));
        //                                                           EVALUATE(Year, COPYSTR(ChangeLog."New Value", 7, 2));
        //                                                       END
        //                                                       ELSE BEGIN
        //                                                           EVALUATE(Day, COPYSTR(ChangeLog."New Value", 9, 2));
        //                                                           EVALUATE(Month, COPYSTR(ChangeLog."New Value", 6, 2));
        //                                                           EVALUATE(Year, COPYSTR(ChangeLog."New Value", 3, 2));
        //                                                       END;
        //                                                       /* EVALUATE(Day,COPYSTR(ChangeLog."New Value",9,2));
        //                                                        EVALUATE(Month,COPYSTR(ChangeLog."New Value",6,2));
        //                                                        EVALUATE(Year,COPYSTR(ChangeLog."New Value",3,2)); */
        //                                                       DDate := DMY2DATE(Day, Month, 2000 + Year);

        //                                                       //  EVALUATE(DDate,ChangeLog."New Value");
        //                                                       WeekEnd := FORMAT(DDate, 0, '<Day>-<Month Text,3>-<Year4>');
        //                                                       WeekStart := WeekStart + ' CAL_LETTER_REC_DATE=''' + WeekEnd + ''' where ';
        //                                                   END;
        //                                               END;
        //                                           60065:
        //                                               BEGIN
        //                                                   fieldNo := 7;           // Call letter Expired
        //                                                   IF (ChangeLog."Table No." = 36) AND (FORMAT(ChangeLog."New Value") <> '')
        //                                                   AND (ChangeLog."Type of Change" = ChangeLog."Type of Change"::Modification) THEN BEGIN
        //                                                       //mnraju
        //                                                       //  MESSAGE(FORMAT(STRLEN(ChangeLog."New Value"))+', '+COPYSTR(ChangeLog."New Value",3,1));
        //                                                       IF (STRLEN(ChangeLog."New Value") = 8) AND (COPYSTR(ChangeLog."New Value", 3, 1) = '/') THEN BEGIN
        //                                                           EVALUATE(Day, COPYSTR(ChangeLog."New Value", 4, 2));
        //                                                           EVALUATE(Month, COPYSTR(ChangeLog."New Value", 1, 2));
        //                                                           EVALUATE(Year, COPYSTR(ChangeLog."New Value", 7, 2));
        //                                                       END
        //                                                       ELSE BEGIN
        //                                                           EVALUATE(Day, COPYSTR(ChangeLog."New Value", 9, 2));
        //                                                           EVALUATE(Month, COPYSTR(ChangeLog."New Value", 6, 2));
        //                                                           EVALUATE(Year, COPYSTR(ChangeLog."New Value", 3, 2));
        //                                                       END;
        //                                                       /* EVALUATE(Day,COPYSTR(ChangeLog."New Value",9,2));
        //                                                        EVALUATE(Month,COPYSTR(ChangeLog."New Value",6,2));
        //                                                        EVALUATE(Year,COPYSTR(ChangeLog."New Value",3,2));  */
        //                                                       DDate := DMY2DATE(Day, Month, 2000 + Year);
        //                                                       //   EVALUATE(DDate,ChangeLog."New Value");
        //                                                       WeekEnd := FORMAT(DDate, 0, '<Day>-<Month Text,3>-<Year4>');
        //                                                       WeekStart := WeekStart + ' CAL_LETTER_EXPIR_DATE=''' + WeekEnd + ''' where ';
        //                                                   END;
        //                                               END;
        //                                           60074:
        //                                               BEGIN
        //                                                   fieldNo := 7;        // Call letter Status
        //                                                   IF (ChangeLog."Table No." = 36) AND (FORMAT(ChangeLog."New Value") <> '')
        //                                                   AND (ChangeLog."Type of Change" = ChangeLog."Type of Change"::Modification) THEN BEGIN
        //                                                       IF FORMAT(ChangeLog."New Value") = 'Received' THEN BEGIN
        //                                                           WeekStart := WeekStart + ' CAL_LETTER_RECV=1 where ';
        //                                                       END
        //                                                       ELSE
        //                                                           IF FORMAT(ChangeLog."New Value") = 'Pending' THEN BEGIN
        //                                                               WeekStart := WeekStart + ' CAL_LETTER_RECV=2, STATUS = 21 where ';
        //                                                           END
        //                                                           ELSE
        //                                                               IF FORMAT(ChangeLog."New Value") = 'NA' THEN BEGIN
        //                                                                   WeekStart := WeekStart + ' CAL_LETTER_RECV=3 where ';
        //                                                               END
        //                                                               ELSE
        //                                                                   IF FORMAT(ChangeLog."New Value") = '1' THEN BEGIN
        //                                                                       WeekStart := WeekStart + ' CAL_LETTER_RECV=1 where ';
        //                                                                   END
        //                                                                   ELSE
        //                                                                       IF FORMAT(ChangeLog."New Value") = '2' THEN BEGIN
        //                                                                           WeekStart := WeekStart + ' CAL_LETTER_RECV=2, STATUS = 21 where ';
        //                                                                       END
        //                                                                       ELSE
        //                                                                           IF FORMAT(ChangeLog."New Value") = '3' THEN BEGIN
        //                                                                               WeekStart := WeekStart + ' CAL_LETTER_RECV=3 where ';
        //                                                                           END
        //                                                                           ELSE
        //                                                                               WeekStart := WeekStart + ' CAL_LETTER_RECV=0 where ';
        //                                                   END
        //                                                   ELSE
        //                                                       IF (ChangeLog."Table No." = 36) AND (FORMAT(ChangeLog."New Value") <> '')
        //                                                 AND (ChangeLog."Type of Change" = ChangeLog."Type of Change"::Insertion) THEN BEGIN
        //                                                           IF FORMAT(ChangeLog."New Value") = 'Received' THEN BEGIN
        //                                                               WeekStart := WeekStart + ' CAL_LETTER_RECV=1 where ';
        //                                                           END
        //                                                           ELSE
        //                                                               IF FORMAT(ChangeLog."New Value") = 'Pending' THEN BEGIN
        //                                                                   WeekStart := WeekStart + ' CAL_LETTER_RECV=2, STATUS = 21 where ';
        //                                                               END
        //                                                               ELSE
        //                                                                   IF FORMAT(ChangeLog."New Value") = 'NA' THEN BEGIN
        //                                                                       WeekStart := WeekStart + ' CAL_LETTER_RECV=3 where ';
        //                                                                   END
        //                                                                   ELSE
        //                                                                       IF FORMAT(ChangeLog."New Value") = '1' THEN BEGIN
        //                                                                           WeekStart := WeekStart + ' CAL_LETTER_RECV=1 where ';
        //                                                                       END
        //                                                                       ELSE
        //                                                                           IF FORMAT(ChangeLog."New Value") = '2' THEN BEGIN
        //                                                                               WeekStart := WeekStart + ' CAL_LETTER_RECV=2, STATUS = 21 where ';
        //                                                                           END
        //                                                                           ELSE
        //                                                                               IF FORMAT(ChangeLog."New Value") = '3' THEN BEGIN
        //                                                                                   WeekStart := WeekStart + ' CAL_LETTER_RECV=3 where ';
        //                                                                               END
        //                                                                               ELSE
        //                                                                                   WeekStart := WeekStart + ' CAL_LETTER_RECV=0 where ';
        //                                                       END;
        //                                               END;
        //                                           60075:
        //                                               BEGIN
        //                                                   fieldNo := 7;         // Call Letter Exp date
        //                                                   IF (ChangeLog."Table No." = 36) AND (FORMAT(ChangeLog."New Value") <> '')
        //                                                   AND (ChangeLog."Type of Change" = ChangeLog."Type of Change"::Modification) THEN BEGIN
        //                                                       IF (STRLEN(ChangeLog."New Value") = 8) AND (COPYSTR(ChangeLog."New Value", 3, 1) = '/') THEN BEGIN
        //                                                           EVALUATE(Day, COPYSTR(ChangeLog."New Value", 4, 2));
        //                                                           EVALUATE(Month, COPYSTR(ChangeLog."New Value", 1, 2));
        //                                                           EVALUATE(Year, COPYSTR(ChangeLog."New Value", 7, 2));
        //                                                       END
        //                                                       ELSE BEGIN
        //                                                           EVALUATE(Day, COPYSTR(ChangeLog."New Value", 9, 2));
        //                                                           EVALUATE(Month, COPYSTR(ChangeLog."New Value", 6, 2));
        //                                                           EVALUATE(Year, COPYSTR(ChangeLog."New Value", 3, 2));
        //                                                       END;

        //                                                       /*  EVALUATE(Day,COPYSTR(ChangeLog."New Value",9,2));
        //                                                         EVALUATE(Month,COPYSTR(ChangeLog."New Value",6,2));
        //                                                         EVALUATE(Year,COPYSTR(ChangeLog."New Value",3,2));    */
        //                                                       DDate := DMY2DATE(Day, Month, 2000 + Year);

        //                                                       // EVALUATE(DDate,FORMAT(ChangeLog."New Value"));
        //                                                       WeekEnd := FORMAT(DDate, 0, '<Day>-<Month Text,3>-<Year4>');
        //                                                       WeekStart := WeekStart + ' CAL_LETTER_EXP_DATE=''' + WeekEnd + ''' where ';
        //                                                   END;
        //                                               END;
        //                                           60009:
        //                                               BEGIN                      // RDSO item wise required
        //                                                   IF (ChangeLog."Table No." = 37) AND (ChangeLog."Primary Key Field 3 Value" <> '')
        //                                                   AND (ChangeLog."Type of Change" = ChangeLog."Type of Change"::Modification) THEN BEGIN
        //                                                       CreationQuery := ' Select * from OMS_ORDER_PRODUCTS_MAIN  ' +
        //                                                                    ' where ERPLineNo =' + FORMAT(ChangeLog."Primary Key Field 3 Value") + '' +
        //                                                                    ' and SHEDULELINENO is NULL and OrdeR_id =' + OrderId;
        //                                                       RecordSet := SQLConnection.Execute(CreationQuery, RowCount);
        //                                                       IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                                                           RecordSet.MoveFirst;
        //                                                       RowCount := 0;
        //                                                       WHILE NOT RecordSet.EOF DO BEGIN
        //                                                           RowCount := RowCount + 1;
        //                                                           RecordSet.MoveNext;
        //                                                       END;
        //                                                       IF RowCount <= 0 THEN BEGIN
        //                                                           EVALUATE(fieldNo, ChangeLog."Primary Key Field 3 Value");
        //                                                           SalesLine.SETRANGE(SalesLine."Document No.", ChangeLog."Primary Key Field 2 Value");
        //                                                           SalesLine.SETRANGE(SalesLine."Line No.", fieldNo);
        //                                                           IF SalesLine.FINDSET THEN BEGIN
        //                                                                                         REPEAT
        //                                                                                             AdditemtoOrder(SalesLine."No.", OrderId, SalesLine.Quantity, SalesLine."RDSO Inspection Required"
        //                                                                                                             , FORMAT(SalesLine."Line No."), ' ', FORMAT(SalesLine.Type));
        //                                                                                         UNTIL SalesLine.NEXT = 0
        //                                                           END;
        //                                                       END ELSE BEGIN
        //                                                           IF (FORMAT(ChangeLog."New Value") = 'Yes') THEN BEGIN
        //                                                               WeekStart := ' Update OMS_ORDER_PRODUCTS_MAIN set ' +
        //                                                                          ' INSPECTION=1 ' +
        //                                                                          ' where ERPLineNo =' + FORMAT(ChangeLog."Primary Key Field 3 Value") + '' +
        //                                                                          ' and SHEDULELINENO is NULL and ';
        //                                                           END ELSE BEGIN
        //                                                               WeekStart := ' Update OMS_ORDER_PRODUCTS_MAIN set ' +
        //                                                                          ' INSPECTION=0 ' +
        //                                                                          ' where ERPLineNo =' + FORMAT(ChangeLog."Primary Key Field 3 Value") + '' +
        //                                                                          ' and SHEDULELINENO is NULL and ';
        //                                                           END;
        //                                                           fieldNo := 12;
        //                                                       END;
        //                                                   END;
        //                                               END;

        //                                       END;
        //                                       IF (WeekStart <> 'Update OMS_ORDER_MASTER_MAIN1 set ') AND (WeekStart <> '') AND (fieldNo <> 0)
        //                                        AND (ChangeLog."Type of Change" = ChangeLog."Type of Change"::Modification) THEN BEGIN
        //                                           WeekStart := WeekStart + ' Order_id=' + FORMAT(OrderId) + '';
        //                                           IF fieldNo <> 0 THEN BEGIN
        //                                               IF TrackingQuery <> '' THEN BEGIN
        //                                                   SQLConnection.Execute(TrackingQuery);
        //                                                   TrackingQuery := '';
        //                                                   UpdateWebHead := 'update OMS_ORDER_MASTER_MAIN1 set MODIFICATION=1, ORDER_TRACKING_STATUS=7,TRACKING_PERSON_ID= '
        //                                   +
        //                                                                     ' ''' + User + ''',LAST_MODIFY_DATE=sysdate where  Order_id=' + FORMAT(OrderId) + '';
        //                                                   SQLConnection.Execute(UpdateWebHead);
        //                                               END;
        //                                               UpdateWebHead := WeekStart;
        //                                               //MESSAGE(WeekStart);
        //                                               //Message(Format(ChangeLog."Entry No."));
        //                                               SQLConnection.Execute(UpdateWebHead, NoOfRowsAffected);

        //                                               // Some times Call Letter Status was not updated. So added the following condition to checking purpose
        //                                               // added by J.Vijay Kumar on 15-Nov-11
        //                                               IF (ChangeLog."Field No." = 60074) AND (NoOfRowsAffected = 0) THEN BEGIN
        //                                                   MESSAGE('Call Letter Status Not Updated & Order ID is ' + FORMAT(OrderId));
        //                                               END;

        //                                               IF (fieldNo <> 12) AND (fieldNo <> 5) THEN BEGIN
        //                                                   IF (Preval <> '') AND (PresVal <> '') THEN BEGIN
        //                                                       UpdateWebHead := 'insert into OMS_MESSAGE_SYSTEM(TRANS_ID,ORDER_ID,MODIFICATION_DATE,REMARKS,MODIFICATION,' +
        //                                                          'MODIFICATION_TYPE, PREV_VALUE, PRESENT_VALUE) Values ' +
        //                                                          '((select max(TRANS_ID)+1 from OMS_MESSAGE_SYSTEM),' + DELCHR(OrderId, '=', ',') + '' +
        //                                                          ',sysdate,''' + SaleHeader.Remarks + ''',1,' + FORMAT(fieldNo) + ',''' + Preval + ''',''' + PresVal + ''')';
        //                                                   END ELSE
        //                                                       IF (PresVal <> '') THEN BEGIN
        //                                                           UpdateWebHead := 'insert into OMS_MESSAGE_SYSTEM(TRANS_ID,ORDER_ID,MODIFICATION_DATE,REMARKS,MODIFICATION,' +
        //                                                              'MODIFICATION_TYPE,  PRESENT_VALUE) Values ' +
        //                                                              '((select max(TRANS_ID)+1 from OMS_MESSAGE_SYSTEM),' + DELCHR(OrderId, '=', ',') + '' +
        //                                                              ',sysdate,''' + SaleHeader.Remarks + ''',1,' + FORMAT(fieldNo) + ',''' + PresVal + ''')';
        //                                                       END;
        //                                                   //MESSAGE(UpdateWebHead);
        //                                                   SQLConnection.Execute(UpdateWebHead);

        //                                                   IF fieldNo = 5 THEN BEGIN                                // Check the Order Planning to Unplan

        //                                                       SQLQuery := 'select to_char(Plan_id)planid from OMS_ORDER_PLANNING_MAIN1 where Order_Id =' + DELCHR(OrderId, '=', ',') + ' and ' +
        //                                                                   'Planning_mode=3';
        //                                                       RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                                                       RowCount := 0;
        //                                                       IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                                                           RecordSet.MoveFirst;
        //                                                       WHILE NOT RecordSet.EOF DO BEGIN
        //                                                           RowCount := RowCount + 1;
        //                                                           RecordSet.MoveNext;
        //                                                       END;
        //                                                       IF RowCount > 0 THEN BEGIN
        //                                                           //to do insertion
        //                                                           /*
        //                                                             UpdateWebHead := 'insert into OMS_PLAN_TRACKING_MAIN1(PLAN_ID, AVAILABILITY_DATE, ORDER_ID, PRODUCT_ID,'+
        //                                                                                'QTY,  PLAN_ENTRY_DATE, ITEM_NO, EXPECTED_WEEK_START_DATE, REMAINING_UNITS, WORKED_UNITS
        //                                   
        //                                    
        //                                                                            'PLANNING_MODE, UNDO_PLAN_DATE, REMARKS) values ((select Max(PLAN_ID)+1 from '+
        //                                                                            ' OMS_PLAN_TRACKING_MAIN1), '
        //                                                                             Product_id =(Select Product_id from OMS_PRODUCT_MASTER1 where ITEM_NO ='+
        //                                                                            ''''+FORMAT(ChangeLog."Old Value")+''')';
        //                                                             SQLConnection.Execute(UpdateWebHead);
        //                                                            */
        //                                                           /*UpdateWebHead := 'Delete from OMS_ORDER_PLANNING_MAIN1 where Order_Id ='+OrderId+' and '+
        //                                                                           ' Product_id =(Select Product_id from OMS_PRODUCT_MASTER1 where ITEM_NO ='+
        //                                                                           ''''+FORMAT(ChangeLog."Old Value")+''')';
        //                                                           SQLConnection.Execute(UpdateWebHead);*/

        //                                                           // PPOdeletions(ChangeLog."Primary Key Field 2 Value",ChangeLog."Old Value");
        //                                                           //to do Mail Generation
        //                                                       END;
        //                                                       //  MESSAGE('The Production Plan is Unplanned');
        //                                                   END;
        //                                               END;
        //                                           END;
        //                                       END;

        //                                   /* IF (ChangeLog."Primary Key Field 3 Value"<>'') AND  (ChangeLog."Table No."<>60095) AND
        //                                     (ChangeLog."Type of Change"=ChangeLog."Type of Change"::Insertion) THEN
        //                                    BEGIN
        //                                       IF ( Callletterrece<>ChangeLog."Primary Key Field 3 Value") THEN
        //                                       BEGIN
        //                                          EVALUATE(OrderPeriod,ChangeLog."Primary Key Field 3 Value") ;
        //                                          SalesLine.SETRANGE(SalesLine."Document No.",SaleHeader."No.");
        //                                          SalesLine.SETRANGE(SalesLine.Type,SalesLine.Type::Item);
        //                                          SalesLine.SETRANGE(SalesLine."Line No.",OrderPeriod);
        //                                          IF SalesLine.FINDSET THEN BEGIN
        //                                          REPEAT
        //                                             Inspection:=FALSE;
        //                                             IF SalesLine."RDSO Inspection Required"=TRUE THEN
        //                                             BEGIN
        //                                                Inspection:=TRUE;
        //                                             END;
        //                                             AdditemtoOrder(SalesLine."No.",OrderId,SalesLine.Quantity,Inspection,FORMAT(SalesLine."Line No."),' ','Item');
        //                                            {
        //                                             Schedule.SETRANGE(Schedule."Document No.",SaleHeader."No.");
        //                                             Schedule.SETRANGE(Schedule."Document Line No.",SalesLine."Line No.");
        //                                             Schedule.SETRANGE(Schedule.Type,Schedule.Type::Item);
        //                                             IF Schedule.FINDSET THEN BEGIN
        //                                             REPEAT
        //                                               IF (Schedule."No."<>SalesLine."No.") THEN
        //                                               BEGIN
        //                                                  // MESSAGE('Schedule Item :'+FORMAT(Schedule."No."));
        //                                                   AdditemtoOrder(Schedule."No.",OrderId,Schedule.Quantity,Inspection);
        //                                               END;
        //                                               UNTIL Schedule.NEXT=0
        //                                            END; }

        //                                          UNTIL SalesLine.NEXT=0
        //                                          END;
        //                                          Callletterrece:=ChangeLog."Primary Key Field 3 Value";
        //                                       END;
        //                                    END;   */

        //                                   UNTIL ChangeLog.NEXT = 0;
        //     END;
        //     ChangeLog.RESET;
        //     ChangeLog.SETRANGE(ChangeLog."Primary Key Field 2 Value", SaleHeader."No.");
        //     IF ChangeLog.FINDFIRST THEN BEGIN
        //         ChangeLog.DELETEALL(TRUE);//anil
        //                                   //MESSAGE('All Modifications are updated in OMS');
        //     END;

        // END;

        // SQLConnection.CommitTrans;
        // RecordSet.Close;
        // //RecordSetx.Close;
        // //RecordSety.Close;
        // //RecordSet1.Close;
        // //RecordSet2.Close;
        // SQLConnection.Close;
        // Success := TRUE;
        // ConnectionOpen := 0;

    end;


    procedure ItemCreationinOMS(No: Text[60]; Description: Text[60]; Description2: Text[60]; Type: Text[30]);
    var
        CreationQuery: Text[1000];
        WeekStart: Text[1000];
        WeekEnd: Text[1000];
        Installation: Integer;
        RDSO: Integer;
        CustomerDate: Text[30];
        SaleDesc: Text[30];
        OrderId: Text[30];
        CompletionDate: Text[30];
        CustomerOrder: Text[70];
        fieldNo: Integer;
        DDate: Date;
        AcntTable: Record "G/L Account";
    begin

        // SQLQuery := 'select to_char(PRODUCT_ID) PRODUCT_ID from OMS_PRODUCT_MASTER1 where item_no =''' + No + '''';
        // RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        // RowCount := 0;
        // IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //     RecordSet.MoveFirst;
        // WHILE NOT RecordSet.EOF DO BEGIN
        //     RowCount := RowCount + 1;
        //     RecordSet.MoveNext;
        // END;
        // IF RowCount <= 0 THEN BEGIN
        //     IF Type = 'Item' THEN BEGIN
        //         itemTable.SETRANGE(itemTable."No.", No);
        //         // itemTable.SETRANGE(itemTable.Description,Description);
        //         // itemTable.SETRANGE(itemTable."Description 2",Description2);
        //         IF itemTable.FINDFIRST THEN BEGIN
        //             WeekStart := 'insert into OMS_PRODUCT_MASTER1(';
        //             IF itemTable."Description 2" <> '' THEN BEGIN
        //                 WeekStart := WeekStart + ' DESCRIPTION2,';
        //                 WeekEnd := WeekEnd + '''' + CONVERTSTR(itemTable."Description 2", '''', ' ') + ''',';
        //             END;
        //             IF itemTable."Item Sub Group Code" <> '' THEN BEGIN
        //                 WeekStart := WeekStart + 'ITEM_SUB_GROUP_CODE ,';
        //                 WeekEnd := WeekEnd + '''' + itemTable."Item Sub Group Code" + ''',';
        //             END;
        //             IF itemTable."Item Sub Sub Group Code" <> '' THEN BEGIN
        //                 WeekStart := WeekStart + 'ITEM_SUB_SUB_GROUP_CODE ,';
        //                 WeekEnd := WeekEnd + '''' + FORMAT(itemTable."Item Sub Sub Group Code") + ''',';
        //             END;
        //             IF itemTable.Description <> '' THEN BEGIN
        //                 WeekStart := WeekStart + 'DESCRIPTION ,';
        //                 WeekEnd := WeekEnd + '''' + CONVERTSTR(itemTable.Description, '''', ' ') + ''',';
        //             END;
        //             IF FORMAT(itemTable."Safety Lead Time") <> '' THEN BEGIN
        //                 WeekStart := WeekStart + ' LEAD_TIME ,';
        //                 WeekEnd := WeekEnd + '''' + FORMAT(itemTable."Safety Lead Time") + ''',';
        //             END;
        //             IF FORMAT(itemTable."Product Group Code") <> '' THEN BEGIN
        //                 WeekStart := WeekStart + 'PROD_GROUP_CODE,';
        //                 WeekEnd := WeekEnd + '''' + FORMAT(itemTable."Product Group Code") + ''',';
        //             END;
        //             WeekStart := WeekStart + 'NO_OF_UNITS,PRODUCT_ID,ITEM_NO) Values(';
        //             WeekEnd := WeekEnd + '0,(select Max(Product_id)+1 from OMS_PRODUCT_MASTER1),''' + FORMAT(itemTable."No.") + ''')';
        //             CreationQuery := WeekStart + WeekEnd;
        //         END;

        //         // MESSAGE(CreationQuery);
        //         IF CreationQuery <> '' THEN
        //             SQLConnection.Execute(CreationQuery);
        //         SQLConnection.CommitTrans;
        //         SQLConnection.BeginTrans;
        //         MESSAGE(itemTable."No." + ' Item created in OMS');
        //     END;
        // END;
    end;


    procedure CustomerCreationinOMS(CustomerNumber: Text[30]);
    var
        CreationQuery: Text[1000];
        CustomerId: Integer;
        OrderPeriod: Integer;
        OrderValue: Integer;
        WeekStart: Text[30];
        WeekEnd: Text[30];
        SalesPerson: Text[30];
        Customer: Record Customer;
    begin
        // SQLQuery := 'select to_char(Customer_id)Customer_id from OMS_CUSTOMER_MASTER1 where ERP_CUSTOMER_ID ' +
        //             '=''' + CustomerNumber + '''';
        // RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        // RowCount := 0;
        // IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //     RecordSet.MoveFirst;
        // WHILE NOT RecordSet.EOF DO BEGIN
        //     RowCount := RowCount + 1;
        //     RecordSet.MoveNext;
        // END;

        // IF RowCount <= 0 THEN BEGIN
        //     Customer.SETRANGE(Customer."No.", CustomerNumber);
        //     IF Customer.FINDFIRST THEN BEGIN
        //         CreationQuery := 'insert into OMS_CUSTOMER_MASTER1(CUSTOMER_ID, CUSTOMER_NAME, CITY,CUSTOMER_TYPE,' +
        //         ' ERP_CUSTOMER_ID) values ((select Max(Customer_id)+1 from OMS_CUSTOMER_MASTER1),' +
        //         ' ''' + CONVERTSTR(Customer.Name, '''', ' ') + '''' +
        //         ',''' + Customer.City + ''',''' + Customer."Customer Posting Group" + ''',''' + Customer."No." + ''')';
        //         //  MESSAGE(CreationQuery);
        //         SQLConnection.Execute(CreationQuery);
        //         SQLConnection.CommitTrans;
        //         SQLConnection.BeginTrans;
        //         IF GUIALLOWED THEN
        //             MESSAGE(Customer.Name + ' Customer created in OMS');
        //     END;
        // END;
    end;

    procedure BlankettoOrder(SaleHeader: Record "Sales Header"; BlanketHeader: Record "Sales Header"; PartialorFull: Integer);
    var
        CreationQuery: Text[1000];
        CustomerId: Integer;
        OrderValue: Integer;
        WeekStart: Text[1000];
        WeekEnd: Text[1000];
        SalesPerson: Text[30];
        Installation: Integer;
        RDSO: Integer;
        CustomerDate: Text[30];
        SaleDesc: Text[30];
        OrderId: Text[30];
        CompletionDate: Text[30];
        CustomerOrder: Text[70];
        CallletterReq: Text[30];
        Callletterrece: Text[30];
        CallletterExpir: Text[30];
        ChangeLog: Record "Change Log Entry";
        Preval: Text[250];
        DDate: Date;
        OrderStatus: Integer;
        BlanketLine: Record "Sales Line";
        SaleHeaderLine: Record "Sales Line";
        TrckPerson: Text[30];
        TrackingQuery: Text[1000];
    begin

        //     IF ISCLEAR(SQLConnection) THEN
        //         CREATE(SQLConnection, FALSE, TRUE);//Rev01

        //     IF ISCLEAR(RecordSet) THEN
        //         CREATE(RecordSet, FALSE, TRUE);//Rev01
        //     RowCount := 0;

        //     IF ConnectionOpen <> 1 THEN BEGIN
        //         SQLConnection.ConnectionString := 'DSN=omserp;UID=omsuser;PASSWORD=management;SERVER=oracle_80;';
        //         SQLConnection.Open;
        //         SQLConnection.BeginTrans;
        //         ConnectionOpen := 1;
        //     END;
        //     IF PartialorFull = 1 THEN BEGIN

        //         SQLQuery := 'select to_char(ORDER_ID)ORDER_ID from OMS_ORDER_MASTER_MAIN1  where BLANKET_DESC= ''' + BlanketHeader."No." + '''';
        //         RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //         RowCount := 0;
        //         IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //             RecordSet.MoveFirst;
        //         WHILE NOT RecordSet.EOF DO BEGIN
        //             RowCount := RowCount + 1;
        //             WeekStart := FORMAT(RecordSet.Fields.Item('ORDER_ID').Value);
        //             RecordSet.MoveNext;
        //         END;
        //         IF RowCount > 0 THEN   // NO Sale Order
        //         BEGIN
        //             // Verification of the Order in OMS
        //             SaleDesc := SaleHeader."No.";
        //             SaleOrderCreationinOMS(BlanketHeader);
        //             SaleOrderCreationinOMS(SaleHeader);

        //             IF ConnectionOpen <> 1 THEN BEGIN
        //                 SQLConnection.ConnectionString := 'DSN=omserp;UID=omsuser;PASSWORD=management;SERVER=oracle_80;';
        //                 SQLConnection.Open;
        //                 SQLConnection.BeginTrans;
        //                 ConnectionOpen := 1;
        //             END;
        //             SQLQuery := 'select to_char(ORDER_ID)ORDER_ID from OMS_ORDER_MASTER_MAIN1  where SAle_DESC= ''' + SaleDesc + '''';
        //             RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //             RowCount := 0;
        //             IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                 RecordSet.MoveFirst;
        //             WHILE NOT RecordSet.EOF DO BEGIN
        //                 RowCount := RowCount + 1;
        //                 OrderId := FORMAT(RecordSet.Fields.Item('ORDER_ID').Value);
        //                 RecordSet.MoveNext;
        //             END;

        //             CreationQuery := 'update OMS_ORDER_MASTER_MAIN1 set OLD_ORDER_ID =' + WeekStart + ',' +
        //                             '  TRACKING_PERSON_ID=''' + User + '''  where order_id=' + DELCHR(FORMAT(OrderId), '=', ',') + '';
        //             SQLConnection.Execute(CreationQuery);
        //             //erplino is added by swathi
        //             SQLQuery := 'select to_char(PRODUCT_ID)PID,to_char(LATEST_QTY)LQTY,to_char(ERPLINENO)ELN from OMS_ORDER_PRODUCTS_MAIN ' +
        //                         'where order_id= ' + DELCHR(FORMAT(OrderId), '=', ',') + '';
        //             RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //             RowCount := 0;
        //             IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                 RecordSet.MoveFirst;
        //             WHILE NOT RecordSet.EOF DO BEGIN
        //                 CreationQuery := 'update OMS_ORDER_PRODUCTS_MAIN set LATEST_QTY =LATEST_QTY-' +
        //                                 '' + FORMAT(RecordSet.Fields.Item('LQTY').Value) + ' where ORDER_ID=' + WeekStart + ' and PRODUCT_ID =' +
        //                                 ' ' + FORMAT(RecordSet.Fields.Item('PID').Value) + ' AND ERPLINENO=' + FORMAT(RecordSet.Fields.Item('ELN').Value) + '';
        //                 SQLConnection.Execute(CreationQuery);
        //                 RecordSet.MoveNext;
        //             END;
        //             MESSAGE('Blanket Order Partially Released');
        //         END ELSE BEGIN
        //             SaleOrderCreationinOMS(BlanketHeader);
        //             IF ConnectionOpen <> 1 THEN BEGIN
        //                 SQLConnection.ConnectionString := 'DSN=omserp;UID=omsuser;PASSWORD=management;SERVER=oracle_80;';
        //                 SQLConnection.Open;
        //                 SQLConnection.BeginTrans;
        //                 ConnectionOpen := 1;
        //             END;

        //             SQLQuery := 'select to_char(ORDER_ID)ORDER_ID from OMS_ORDER_MASTER_MAIN1  where BLANKET_DESC= ''' + BlanketHeader."No." + '''';
        //             RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //             RowCount := 0;
        //             IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                 RecordSet.MoveFirst;
        //             WHILE NOT RecordSet.EOF DO BEGIN
        //                 RowCount := RowCount + 1;
        //                 WeekStart := FORMAT(RecordSet.Fields.Item('ORDER_ID').Value);
        //                 RecordSet.MoveNext;
        //             END;
        //             IF RowCount > 0 THEN   // NO Sale Order
        //             BEGIN
        //                 // Verification of the Order in OMS

        //                 SaleOrderCreationinOMS(SaleHeader);
        //                 IF ConnectionOpen <> 1 THEN BEGIN
        //                     SQLConnection.ConnectionString := 'DSN=omserp;UID=omsuser;PASSWORD=management;SERVER=oracle_80;';
        //                     SQLConnection.Open;
        //                     SQLConnection.BeginTrans;
        //                     ConnectionOpen := 1;
        //                 END;

        //                 SQLQuery := 'select to_char(ORDER_ID)ORDER_ID from OMS_ORDER_MASTER_MAIN1  where SAle_DESC= ''' + SaleHeader."No." + '''';
        //                 RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                 RowCount := 0;
        //                 IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                     RecordSet.MoveFirst;
        //                 WHILE NOT RecordSet.EOF DO BEGIN
        //                     RowCount := RowCount + 1;
        //                     OrderId := FORMAT(RecordSet.Fields.Item('ORDER_ID').Value);
        //                     RecordSet.MoveNext;
        //                 END;
        //                 CreationQuery := 'update OMS_ORDER_MASTER_MAIN1 set OLD_ORDER_ID =' + WeekStart + ',' +
        //                                 ' TRACKING_PERSON_ID=''' + User + '''  where order_id=' + DELCHR(FORMAT(OrderId), '=', ',') + '';
        //                 SQLConnection.Execute(CreationQuery);
        //                 //erplino is added by swathi
        //                 SQLQuery := 'select to_char(PRODUCT_ID)PID,to_char(LATEST_QTY)LQTY,to_char(ERPLINENO)ELN from OMS_ORDER_PRODUCTS_MAIN ' +
        //                              'where order_id= ' + DELCHR(FORMAT(OrderId), '=', ',') + '';
        //                 RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                 RowCount := 0;
        //                 IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                     RecordSet.MoveFirst;
        //                 WHILE NOT RecordSet.EOF DO BEGIN
        //                     CreationQuery := 'update OMS_ORDER_PRODUCTS_MAIN set LATEST_QTY =LATEST_QTY-' +
        //                                     '' + FORMAT(RecordSet.Fields.Item('LQTY').Value) + ' where ORDER_ID=' + WeekStart + ' and PRODUCT_ID =' +
        //                                     ' ' + FORMAT(RecordSet.Fields.Item('PID').Value) + ' AND ERPLINENO=' + FORMAT(RecordSet.Fields.Item('ELN').Value) + '';
        //                     SQLConnection.Execute(CreationQuery);
        //                     RecordSet.MoveNext;
        //                 END;
        //                 MESSAGE('Blanket Order Partially Released');
        //             END;

        //         END;

        //     END ELSE BEGIN
        //         SaleOrderCreationinOMS(BlanketHeader);
        //         IF ISCLEAR(RecordSet) THEN
        //             CREATE(RecordSet, FALSE, TRUE);//Rev01
        //         RowCount := 0;

        //         IF ConnectionOpen <> 1 THEN BEGIN
        //             SQLConnection.ConnectionString := 'DSN=omserp;UID=omsuser;PASSWORD=management;SERVER=oracle_80;';
        //             SQLConnection.Open;
        //             SQLConnection.BeginTrans;
        //             ConnectionOpen := 1;
        //         END;

        //         SQLQuery := 'select to_char(ORDER_ID)ORDER_ID from OMS_ORDER_MASTER_MAIN1  where BLANKET_DESC= ''' + BlanketHeader."No." + '''';
        //         RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //         RowCount := 0;
        //         IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //             RecordSet.MoveFirst;
        //         WHILE NOT RecordSet.EOF DO BEGIN
        //             RowCount := RowCount + 1;
        //             OrderId := FORMAT(RecordSet.Fields.Item('ORDER_ID').Value);
        //             RecordSet.MoveNext;
        //         END;
        //         IF RowCount >= 1 THEN BEGIN
        //             SQLQuery := 'select  to_char(ORDER_ID)ORDER_ID,to_char(ORDER_TRACKING_STATUS)ODS,to_char(LAST_MODIFY_DATE,''' + 'dd-mon-yy' +
        //          ''')Ls,' +
        //                      'ENTRY_PERSON,to_char(EXPECTED_WEEK_START_DATE,''' + 'dd-mon-yy' + ''')exps,to_char(ORDER_PRIORITY)OP,' +
        //                      'to_char(STATUS)st,NVL(to_char(REMARKS),'' '')re, ' +
        //                      ' NVL(to_char(CAL_LETTER_EXP_DATE,''' + 'dd-mon-yy' + '''),'' '')cExp,' +
        //                      'to_char(CUSTOMER_EXPECTING_DATE,''' + 'dd-mon-yy' + ''')cs, ' +
        //                      ' to_char(EXPECTED_WEEK_END_DATE,''' + 'dd-mon-yy' + ''')expe' +
        //                      ',to_char(ORDER_VALUE)Ov,NVL(to_char(ORDER_COMPLETION_DATE,''' + 'dd-mon-yy' + '''),'' '')Orcd,' +
        //                      'NVL(to_char(TRACKING_PERSON_ID),'' '')trk from OMS_ORDER_MASTER_MAIN1 where ' +
        //                      ' BLANKET_DESC= ''' + BlanketHeader."No." + '''';

        //             RecordSet := SQLConnection.Execute(SQLQuery, RowCount);

        //             IF RowCount = 0 THEN
        //                 ERROR('Blanket Order does not exist in OMS Please Forward to OMS');

        //             IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                 RecordSet.MoveFirst;

        //             WHILE NOT RecordSet.EOF DO BEGIN
        //                 OrderId := FORMAT(RecordSet.Fields.Item('ORDER_ID').Value);
        //                 IF FORMAT(RecordSet.Fields.Item('ODS').Value) <> '' THEN
        //                     EVALUATE(CustomerId, FORMAT(RecordSet.Fields.Item('ODS').Value))
        //                 ELSE
        //                     CustomerId := 0;
        //                 CustomerOrder := FORMAT(RecordSet.Fields.Item('Ls').Value);
        //                 WeekStart := FORMAT(RecordSet.Fields.Item('exps').Value);
        //                 SalesPerson := FORMAT(RecordSet.Fields.Item('ENTRY_PERSON').Value);
        //                 IF FORMAT(RecordSet.Fields.Item('Ov').Value) <> '' THEN
        //                     EVALUATE(OrderValue, FORMAT(RecordSet.Fields.Item('Ov').Value))
        //                 ELSE
        //                     OrderValue := 0;
        //                 IF FORMAT(RecordSet.Fields.Item('OP').Value) <> '' THEN
        //                     EVALUATE(Installation, FORMAT(RecordSet.Fields.Item('OP').Value))
        //                 ELSE
        //                     Installation := 0;
        //                 IF FORMAT(RecordSet.Fields.Item('St').Value) <> '' THEN
        //                     EVALUATE(RDSO, FORMAT(RecordSet.Fields.Item('St').Value))
        //                 ELSE
        //                     RDSO := 0;
        //                 IF FORMAT(RecordSet.Fields.Item('Orcd').Value) <> ' ' THEN
        //                     CompletionDate := FORMAT(RecordSet.Fields.Item('Orcd').Value)
        //                 ELSE
        //                     CompletionDate := ' ';
        //                 CustomerDate := FORMAT(RecordSet.Fields.Item('cs').Value);
        //                 IF FORMAT(RecordSet.Fields.Item('re').Value) <> '' THEN
        //                     WeekEnd := FORMAT(RecordSet.Fields.Item('re').Value)
        //                 ELSE
        //                     WeekEnd := ' ';
        //                 IF CompletionDate = ' ' THEN
        //                     CompletionDate := CustomerDate;
        //                 IF FORMAT(RecordSet.Fields.Item('trk').Value) <> '' THEN
        //                     TrckPerson := FORMAT(RecordSet.Fields.Item('trk').Value)
        //                 ELSE
        //                     TrckPerson := SalesPerson;

        //                 IF (FORMAT(RecordSet.Fields.Item('re').Value) = ' ') THEN
        //                     TrackingQuery := 'insert into OMS_ORDER_TRACKING_MAIN1(TRANS_ID,Order_Id,MODIFICATION_TYPE,MODIFICATION_DATE,' +
        //                           'ENTRY_EMPLOYEE_ID,PREV_EXPECT_WEEK_START,PREV_EXPECT_WEEK_END,PREV_ORDER_PRIORITY,PREV_QTY,Product_ID,PREV_STATUS' +
        //                           ',PREV_CUST_DATE,OLD_ORDER_VALUE,PREV_ORDER_COMPLETION_DATE,PREV_TRACKING_PERSON_ID) values(' +
        //                           '(select Max(TRANS_ID)+1 from OMS_ORDER_TRACKING_MAIN1 ),' +
        //                           '' + DELCHR(OrderId, '=', ',') + ',' + FORMAT(CustomerId) + ',''' + CustomerOrder + ''',''' + SalesPerson + ''',''' + WeekStart + ''',' +
        //                           '''' + FORMAT(RecordSet.Fields.Item('expe').Value) + ''',' +
        //                           '' + FORMAT(Installation) + ',0,0,' + FORMAT(RDSO) + ',''' + CustomerDate + ''',' +
        //                           '''' + FORMAT(RecordSet.Fields.Item('Ov').Value) + ''',''' + CompletionDate + ''',''' + TrckPerson + ''') '
        //                 ELSE
        //                     TrackingQuery := 'insert into OMS_ORDER_TRACKING_MAIN1(TRANS_ID,Order_Id,MODIFICATION_TYPE,MODIFICATION_DATE,' +
        //                       'ENTRY_EMPLOYEE_ID,PREV_EXPECT_WEEK_START,PREV_EXPECT_WEEK_END,PREV_ORDER_PRIORITY,PREV_QTY,Product_ID,PREV_STATUS' +
        //                       ',REMARKS,PREV_CUST_DATE,OLD_ORDER_VALUE,PREV_ORDER_COMPLETION_DATE,PREV_TRACKING_PERSON_ID) values(' +
        //                       '(select Max(TRANS_ID)+1 from OMS_ORDER_TRACKING_MAIN1 ),' +
        //                       '' + DELCHR(OrderId, '=', ',') + ',' + FORMAT(CustomerId) + ',''' + CustomerOrder + ''',''' + SalesPerson + ''',''' + WeekStart + ''',' +
        //                       '''' + FORMAT(RecordSet.Fields.Item('expe').Value) + ''',' +
        //                       '' + FORMAT(Installation) + ',0,0,' + FORMAT(RDSO) + ',' +
        //                       '''' + WeekEnd + ''',''' + CustomerDate + ''',''' + FORMAT(RecordSet.Fields.Item('Ov').Value) + ''',''' + CompletionDate + '''' +
        //                       ',''' + TrckPerson + ''')';
        //                 RecordSet.MoveNext;
        //                 SQLConnection.Execute(TrackingQuery);
        //             END;
        //             CreationQuery := 'update OMS_ORDER_MASTER_MAIN1 set SALE_DESC =''' + SaleHeader."No." + ''',STATUS=8,RELEASE_DATE=sysdate, ' +
        //                            '  TRACKING_PERSON_ID=''' + User + ''', ORDER_TRACKING_STATUS=6 where order_id=' + DELCHR(FORMAT(OrderId), '=', ',') + '';
        //             SQLConnection.Execute(CreationQuery);

        //             /* //Code for upadation of Latest Qty in OMS-swathi
        //              SaleLineGRec.RESET;
        //              SaleLineGRec.SETRANGE(SaleLineGRec."Document No.",BlanketHeader."No.");
        //              IF SaleLineGRec.FINDFIRST THEN
        //              REPEAT
        //                SQLQuery := 'select to_char(PRODUCT_ID)PID,to_char(LATEST_QTY)LQTY,to_char(ERPLINENO)ELN from OMS_ORDER_PRODUCTS_MAIN '+
        //                             'where order_id= '+delchr(FORMAT(OrderId),'=',',')+' AND  ERPLINENO='+ FORMAT(SaleLineGRec."Line No.")+' ';
        //                RecordSet:=SQLConnection.Execute(SQLQuery,RowCount);
        //                RowCount:=0;
        //                IF NOT((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                   RecordSet.MoveFirst;
        //                WHILE NOT RecordSet.EOF DO
        //                BEGIN
        //                     CreationQuery :='update OMS_ORDER_PRODUCTS_MAIN set LATEST_QTY ='+FORMAT(SaleLineGRec.Quantity)+' where PRODUCT_ID ='+FORMAT(RecordSet.Fields.Item('PID').Value)+'';
        //                     SQLConnection.Execute(CreationQuery);
        //                     RecordSet.MoveNext;
        //                END;
        //              UNTIL SaleLineGRec.NEXT=0;
        //              //Code for upadation of Latest Qty in OMS-added by swathi
        //              */
        //             MESSAGE('Successfully Converted to Order in OMS');
        //             //SaleOrderCreationinOMS(SaleHeader);
        //         END ELSE
        //             MESSAGE('Please First Forward the Blanket Order to OMS and Make to Order');
        //     END;

        //     ChangeLog.RESET;
        //     ChangeLog.SETRANGE(ChangeLog."Primary Key Field 2 Value", SaleHeader."No.");
        //     // ChangeLog.SETRANGE(ChangeLog."Type of Change",ChangeLog."Type of Change"::Insertion);
        //     IF ChangeLog.FINDFIRST THEN BEGIN
        //         ChangeLog.DELETEALL(TRUE);
        //     END;

        //     SQLConnection.CommitTrans;
        //     RecordSet.Close;
        //     SQLConnection.Close;
        //     ConnectionOpen := 0;

    end;


    procedure AdditemtoOrder(SalesLineNo: Text[60]; OrderId: Text[30]; Quantity: Decimal; Inspection: Boolean; ERPLineNO: Text[30]; SCHEDULELINENO: Text[30]; ItemType: Text[30]);
    var
        CreationQuery: Text[1000];
        LatestQty: Integer;
        Qty: Integer;
        SchLineNo: Text[60];
    begin


        //     // Added by J.Vijay Kumar for some time Line & scheduled Items have Empty Selected on 30-Dec-2010
        //     IF SalesLineNo = '' THEN BEGIN
        //         //IF GUIALLOWED THEN
        //         //  MESSAGE('Testing' + SalesLineNo);
        //         IF SCHEDULELINENO = ' ' THEN
        //             IF GUIALLOWED THEN
        //                 MESSAGE('LINE ITEM EMPTY WAS SELECTED AT ' + ERPLineNO)
        //             ELSE
        //                 IF GUIALLOWED THEN
        //                     MESSAGE('SCHEDULED ITEM EMPTY SELECTED AT ' + SCHEDULELINENO + ' OF LINE ITEM ' + ERPLineNO);
        //     END;

        //     ItemCreationinOMS(SalesLineNo, '', '', ItemType);
        //     // Checking Line & Schedule Line no, if it is equal not insert record
        //     // added by J.Vijay Kumar on 13-Sep-10
        //     IF SCHEDULELINENO = ERPLineNO THEN
        //         EXIT;
        //     IF (ItemType = 'Item') OR (ItemType = 'G/L Account') THEN BEGIN
        //         LatestQty := ROUND(Quantity, 1);
        //         SchLineNo := '';
        //         IF SCHEDULELINENO <> ' ' THEN
        //             SchLineNo := ' and SHEDULELINENO=' + SCHEDULELINENO
        //         ELSE
        //             SchLineNo := ' and SHEDULELINENO is null ';
        //         SQLQuery := 'select to_char(PRODUCT_ID)PID from OMS_ORDER_PRODUCTS_MAIN where order_id=' + DELCHR(OrderId, '=', ',') + ' ' +
        //                     ' and ERPLINENO=' + ERPLineNO + '' + SchLineNo;
        //         RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //         RowCount := 0;
        //         IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //             RecordSet.MoveFirst;
        //         WHILE NOT RecordSet.EOF DO BEGIN
        //             RowCount := RowCount + 1;
        //             EVALUATE(Qty, FORMAT(RecordSet.Fields.Item('PID').Value));
        //             RecordSet.MoveNext;
        //         END;
        //         IF RowCount <= 0 THEN BEGIN
        //             SchLineNo := '';
        //             // IF ItemType = 'Item' THEN
        //             BEGIN
        //                 IF Inspection = TRUE THEN BEGIN
        //                     IF SCHEDULELINENO <> ' ' THEN BEGIN
        //                         CreationQuery := 'insert into OMS_ORDER_PRODUCTS_MAIN(ORDER_ID,PRODUCT_ID, QTY, LATEST_QTY, INSPECTION,ERPLINENO,' +
        //                                     'SHEDULELINENO)' +
        //                                     ' values(' + DELCHR(OrderId, '=', ',') + ',(select MAX(Product_id) from OMS_PRODUCT_MASTER1 where item_no =''' + SalesLineNo + '''),' +
        //                                     '' + FORMAT(LatestQty) + ',' + FORMAT(LatestQty) + ',1,' + ERPLineNO + ',' + SCHEDULELINENO + ')';
        //                     END
        //                     ELSE BEGIN
        //                         CreationQuery := 'insert into OMS_ORDER_PRODUCTS_MAIN(ORDER_ID,PRODUCT_ID, QTY, LATEST_QTY, INSPECTION,ERPLINENO)' +
        //                                    ' values(' + DELCHR(OrderId, '=', ',') + ',(select MAX(Product_id) from OMS_PRODUCT_MASTER1 where item_no =''' + SalesLineNo + '''),' +
        //                                    '' + FORMAT(LatestQty) + ',' + FORMAT(LatestQty) + ',1,' + ERPLineNO + ')';
        //                     END;
        //                 END
        //                 ELSE BEGIN
        //                     IF SCHEDULELINENO <> ' ' THEN BEGIN
        //                         CreationQuery := 'insert into OMS_ORDER_PRODUCTS_MAIN(ORDER_ID,PRODUCT_ID, QTY, LATEST_QTY, INSPECTION,ERPLINENO,' +
        //                                       ' SHEDULELINENO)' +
        //                                       ' values(' + DELCHR(OrderId, '=', ',') + ',(select MAX(Product_id) from OMS_PRODUCT_MASTER1 where item_no =''' + SalesLineNo + '''),' +
        //                                       '' + FORMAT(LatestQty) + ',' + FORMAT(LatestQty) + ',0,' + ERPLineNO + ',' + SCHEDULELINENO + ')';
        //                     END
        //                     ELSE BEGIN
        //                         CreationQuery := 'insert into OMS_ORDER_PRODUCTS_MAIN(ORDER_ID,PRODUCT_ID, QTY, LATEST_QTY, INSPECTION,ERPLINENO)' +
        //                                       ' values(' + DELCHR(OrderId, '=', ',') + ',(select MAX(Product_id) from OMS_PRODUCT_MASTER1 where item_no =''' + SalesLineNo + '''),' +
        //                                       '' + FORMAT(LatestQty) + ',' + FORMAT(LatestQty) + ',0,' + ERPLineNO + ')';
        //                     END;
        //                 END;
        //             END;

        //             // Commented - Begin
        //             /* ELSE
        //               BEGIN
        //                 CreationQuery := 'insert into OMS_ORDER_PRODUCTS_MAIN(ORDER_ID,PRODUCT_ID, QTY, LATEST_QTY, INSPECTION,ERPLINENO)'+
        //                                 ' values('+delchr(OrderId,'=',',')+',(select MAX(Product_id) from OMS_PRODUCT_MASTER1 where item_no ='''+SalesLineNo+'''),'+
        //                                 ''+FORMAT(LatestQty)+','+FORMAT(LatestQty)+',1,'+ERPLineNO+')';
        //               END
        //             */
        //             // Commeneted - End

        //             IF CreationQuery <> '' THEN BEGIN
        //                 SQLConnection.Execute(CreationQuery);
        //                 SQLConnection.CommitTrans;   //added by pranavi on 27-jan-2016 to solve lines not inserting issue
        //                 SQLConnection.BeginTrans;
        //             END;

        //         END
        //         ELSE BEGIN
        //             SchLineNo := '';
        //             IF SCHEDULELINENO <> ' ' THEN
        //                 SchLineNo := ' and SHEDULELINENO=' + SCHEDULELINENO;

        //             IF Inspection = TRUE THEN BEGIN
        //                 CreationQuery := 'update OMS_ORDER_PRODUCTS_MAIN set LATEST_QTY=' + FORMAT(LatestQty) + ',' +
        //                                  'INSPECTION=1 where ' +
        //                                  'order_id=' + DELCHR(OrderId, '=', ',') + ' and product_id=' + FORMAT(Qty) + ' and ERPLINENO=' + ERPLineNO + '' + SchLineNo;
        //             END
        //             ELSE BEGIN
        //                 CreationQuery := 'update OMS_ORDER_PRODUCTS_MAIN set LATEST_QTY=' + FORMAT(LatestQty) + ',' +
        //                                  'INSPECTION=0 where ' +
        //                                  'order_id=' + DELCHR(OrderId, '=', ',') + ' and product_id=' + FORMAT(Qty) + ' and ERPLINENO=' + ERPLineNO + '' + SchLineNo;
        //             END;
        //             IF CreationQuery <> '' THEN
        //                 SQLConnection.Execute(CreationQuery);
        //         END;
        //     END;

    end;


    procedure PPOdeletions(SaleOrderNO: Text[50]; ItemNO: Text[60]);

    var
        RPOExisted: Integer;
    begin

        //     /*  RPOExisted:=0;

        //                             // Already RPOs Existed or not

        //     //  {"Production Order".SETRANGE("Production Order"."Sales Order No.",SaleOrderNO);
        //        "Production Order".SETRANGE("Production Order"."Source No.",ItemNO);
        //        "Production Order".SETRANGE("Production Order".Status,"Production Order".Status::Released);
        //        IF "Production Order".FINDSET THEN BEGIN
        //        REPEAT
        //           RPOExisted:=1;
        //        UNTIL "Production Order".NEXT=0
        //     //   END; }
        //        IF RPOExisted=0 THEN
        //        BEGIN
        //                       // Already Planned Production Order Existed or not
        //     //       {"Production Order".SETRANGE("Production Order"."Sales Order No.",SAleOrderNO);
        //            "Production Order".SETRANGE("Production Order"."Source No.",ItemNO);
        //            "Production Order".SETRANGE("Production Order".Status,"Production Order".Status::Planned);
        //                       // Verify the Requests to Delete
        //            IF "Production Order".FINDSET THEN BEGIN
        //            REPEAT
        //               IndentHeader.LockTable;
        //               IndentHeader.SETRANGE(IndentHeader."Production Order No." , "Production Order"."No.");
        //               IndentHeader.SETRANGE(IndentHeader."Indent Status" ,IndentHeader."Indent Status":Indent);
        //               IF IndentHeader.FINDFIRST THEN BEGIN
        //                   IndentHeader.DELETEALL(TRUE);
        //               END;
        //             UNTIL "Production Order".NEXT=0
        //     //        END; }
        //                        // Delete the PPOs
        //             "Production Order".LOCKTABLE;
        //             "Production Order".SETRANGE("Production Order"."Sales Order No.",SaleOrderNO);
        //             "Production Order".SETRANGE("Production Order"."Source No.",ItemNO);
        //             "Production Order".SETRANGE("Production Order".Status,"Production Order".Status::Planned);
        //             IF "Production Order".FINDFIRST THEN BEGIN
        //               "Production Order".DELETEALL(TRUE);
        //             END;
        //        END;
        //           */

    end;


    procedure TenderCreationOMS(TenderHeader: Record "Tender Header");
    var
        CreationQuery: Text[1000];
        CustomerId: Integer;
        OrderPeriod: Integer;
        OrderValue: Integer;
        WeekStart: Text[1000];
        WeekEnd: Text[1000];
        SalesPerson: Text[30];
        Installation: Integer;
        RDSO: Integer;
        CustomerDate: Text[30];
        SaleDesc: Text[30];
        OrderId: Text[30];
        CompletionDate: Text[30];
        CustomerOrder: Text[70];
        CallletterReq: Text[30];
        Callletterrece: Text[30];
        CallletterExpir: Text[30];
        ChangeLog: Record "Change Log Entry";
        Preval: Text[250];
        fieldNo: Integer;
        PresVal: Text[250];
        DDate: Date;
        OrderStatus: Integer;
        TenderLine: Record "Tender Line";
        Tracking: Text[70];
        Schedule: Record Schedule2;
        SchLine: Text[30];
        Qunt: Decimal;
    begin

        //     IF ISCLEAR(SQLConnection) THEN
        //         CREATE(SQLConnection, FALSE, TRUE);//Rev01

        //     IF ISCLEAR(RecordSet) THEN
        //         CREATE(RecordSet, FALSE, TRUE);//Rev01

        //     RowCount := 0;

        //     IF ConnectionOpen <> 1 THEN BEGIN
        //         SQLConnection.ConnectionString := 'DSN=omserp;UID=omsuser;PASSWORD=management;SERVER=oracle_80;';
        //         SQLConnection.Open;
        //         ConnectionOpen := 1;
        //         SQLConnection.BeginTrans;
        //     END;

        //     SQLQuery := 'select  to_char(ORDER_ID)ORDER_ID,to_char(ORDER_TRACKING_STATUS)ODS,' +
        //               ' to_char(LAST_MODIFY_DATE,''' + 'dd-mon-yy' + ''')Ls,' +
        //                 'ENTRY_PERSON,to_char(EXPECTED_WEEK_START_DATE,''' + 'dd-mon-yy' + ''')exps,to_char(ORDER_PRIORITY)OP,' +
        //                 'to_char(STATUS)st,REMARKS,to_char(CAL_LETTER_EXP_DATE,''' + 'dd-mon-yy' + '''),' +
        //                 ' to_char(CUSTOMER_EXPECTING_DATE' +
        //                 ',''' + 'dd-mon-yy' + ''')cs,to_char(ORDER_VALUE)Ov,to_char(ORDER_COMPLETION_DATE,''' + 'dd-mon-yy' + ''') ' +
        //                 ' from OMS_ORDER_MASTER_MAIN1 where TENDER_DESC= ''' + TenderHeader."Tender No." + '''';
        //     OrderStatus := 5;

        //     RecordSet := SQLConnection.Execute(SQLQuery, RowCount);

        //     RowCount := 0;
        //     IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //         RecordSet.MoveFirst;
        //     WHILE NOT RecordSet.EOF DO BEGIN
        //         RowCount := RowCount + 1;
        //         OrderId := FORMAT(RecordSet.Fields.Item('ORDER_ID').Value);
        //         RecordSet.MoveNext;
        //     END;

        //     IF RowCount <= 0 THEN   // NO Sale Order
        //     BEGIN           // Verification of the Customer in OMS
        //         CustomerCreationinOMS(TenderHeader."Customer No.");
        //         CASE TenderHeader."Expected Order month" OF
        //             TenderHeader."Expected Order month"::JAN:
        //                 BEGIN
        //                     WeekStart := '01/01/' + FORMAT(TODAY, 0, '<year>');
        //                     WeekEnd := 'Jan';
        //                 END;
        //             TenderHeader."Expected Order month"::FEB:
        //                 BEGIN
        //                     WeekStart := '02/01/' + FORMAT(TODAY, 0, '<year>');
        //                     WeekEnd := 'Feb';
        //                 END;
        //             TenderHeader."Expected Order month"::MAR:
        //                 BEGIN
        //                     WeekStart := '03/01/' + FORMAT(TODAY, 0, '<year>');
        //                     WeekEnd := 'Mar';
        //                 END;
        //             TenderHeader."Expected Order month"::APR:
        //                 BEGIN
        //                     WeekStart := '04/01/' + FORMAT(TODAY, 0, '<year>');
        //                     WeekEnd := 'Apr';
        //                 END;
        //             TenderHeader."Expected Order month"::MAY:
        //                 BEGIN
        //                     WeekStart := '05/01/' + FORMAT(TODAY, 0, '<year>');
        //                     WeekEnd := 'May';
        //                 END;
        //             TenderHeader."Expected Order month"::JUN:
        //                 BEGIN
        //                     WeekStart := '06/01/' + FORMAT(TODAY, 0, '<year>');
        //                     WeekEnd := 'Jun';
        //                 END;
        //             TenderHeader."Expected Order month"::JUL:
        //                 BEGIN
        //                     WeekStart := '07/01/' + FORMAT(TODAY, 0, '<year>');
        //                     WeekEnd := 'Jul';
        //                 END;
        //             TenderHeader."Expected Order month"::AUG:
        //                 BEGIN
        //                     WeekStart := '08/01/' + FORMAT(TODAY, 0, '<year>');
        //                     WeekEnd := 'Aug';
        //                 END;
        //             TenderHeader."Expected Order month"::SEP:
        //                 BEGIN
        //                     WeekStart := '09/01/' + FORMAT(TODAY, 0, '<year>');
        //                     WeekEnd := 'Sep';
        //                 END;
        //             TenderHeader."Expected Order month"::OCT:
        //                 BEGIN
        //                     WeekStart := '10/01/' + FORMAT(TODAY, 0, '<year>');
        //                     WeekEnd := 'Oct';
        //                 END;
        //             TenderHeader."Expected Order month"::NOV:
        //                 BEGIN
        //                     WeekStart := '11/01/' + FORMAT(TODAY, 0, '<year>');
        //                     WeekEnd := 'Nov';
        //                 END;
        //             TenderHeader."Expected Order month"::DEC:
        //                 BEGIN
        //                     WeekStart := '12/01/' + FORMAT(TODAY, 0, '<year>');
        //                     WeekEnd := 'Dec';
        //                 END;
        //         END;

        //         IF FORMAT(WeekEnd) = FORMAT(TODAY, 0, '<Month Text,3>') THEN BEGIN
        //             WeekStart := FORMAT(TODAY, 0, '<Month,2>/<Day,2>/<Year>');
        //         END;

        //         EVALUATE(DDate, WeekStart);
        //         IF DDate < TODAY THEN
        //             DDate := CALCDATE('365D', DDate);
        //         WeekStart := FORMAT(DDate, 0, '<Day>-<Month Text,3>-<Year4>');
        //         SQLQuery := 'select to_char(Customer_id)Customer_id,to_char((next_day(''' + WeekStart + ''',''' + 'MONDAY' + ''')-7), ' +
        //             '''' + 'DD-MON-YY' + ''')WeekStart, ' +
        //             'to_char((next_day(''' + WeekStart + ''',''' + 'MONDAY' + ''')-7)+7,''' + 'DD-MON-YY' + ''')WeekEnd ' +
        //            ', to_char((next_day(''' + WeekStart + ''',''' + 'MONDAY' + ''')-7),''' + 'mm/dd/yy' + ''')WkStart ' +
        //            'from OMS_CUSTOMER_MASTER1 where ERP_CUSTOMER_ID like ''' + TenderHeader."Customer No." + '''';
        //         RecordSet := SQLConnection.Execute(SQLQuery, RowCount);

        //         IF RowCount = 0 THEN
        //             ERROR('Plan Pending Orders does not exist');

        //         IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //             RecordSet.MoveFirst;

        //         WHILE NOT RecordSet.EOF DO BEGIN
        //             EVALUATE(CustomerId, FORMAT(RecordSet.Fields.Item('Customer_id').Value));
        //             EVALUATE(OrderPeriod, FORMAT(TenderHeader."Order Completion Period"));
        //             CustomerOrder := TenderHeader."Customer Tender No.";
        //             Preval := FORMAT(TenderHeader."Tech. Bid Opening Date", 0, '<Day>-<Month Text,3>-<Year4>');
        //             WeekStart := FORMAT(RecordSet.Fields.Item('WeekStart').Value);
        //             SalesPerson := TenderHeader."Salesperson Code";
        //             OrderValue := ROUND(TenderHeader."Minimum Bid Amount", 1);
        //             WeekEnd := FORMAT(RecordSet.Fields.Item('WeekEnd').Value);
        //             Installation := 0;
        //             RDSO := 0;
        //             OrderPeriod := TenderHeader."Order Completion Period";
        //             EVALUATE(DDate, FORMAT(RecordSet.Fields.Item('WkStart').Value));
        //             DDate := CALCDATE(FORMAT(OrderPeriod) + 'D', DDate);
        //             CompletionDate := FORMAT(DDate, 0, '<Day>-<Month Text,3>-<Year4>');
        //             SaleDesc := TenderHeader."Tender No.";
        //             RecordSet.MoveNext;
        //         END;

        //         CreationQuery := '';
        //         CreationQuery := 'insert into OMS_ORDER_MASTER_MAIN1(ORDER_ID, STATUS, CUSTOMER_ID, ORDER_ENTRY_DATE,' +
        //              'ORDER_COMPLETION_PERIOD, ORDER_VALUE, EXPECTED_WEEK_START_DATE, EXPECTED_WEEK_END_DATE, ORDER_PRIORITY,' +
        //              'ENTRY_PERSON, INSTALLATION, RDSO, LAST_MODIFY_DATE, ORDER_TRACKING_STATUS , CUSTOMER_EXPECTING_DATE,TENDER_DESC, ' +
        //              'TENDER_NO,TENDER_OPEN_DATE,ORDER_COMPLETION_DATE, TRACKING_PERSON_ID,CAL_LETTER_EXT_FLAG) values(' +
        //              '(select Max(order_id)+1 from OMS_ORDER_MASTER_MAIN1),' + FORMAT(OrderStatus) + ',' +
        //              '' + FORMAT(CustomerId) + ',sysdate,' + FORMAT(OrderPeriod) + ',' + FORMAT(OrderValue) + ',''' + FORMAT(WeekStart) + ''',' +
        //              '''' + FORMAT(WeekEnd) + ''',1,''' + SalesPerson + ''',' + FORMAT(Installation) + ',' + FORMAT(RDSO) + ',sysdate,6,' +
        //              '''' + CompletionDate + ''',''' + SaleDesc + ''',''' + CustomerOrder + ''',''' + Preval + ''',''' + CompletionDate + ''',''' + User + ''',0)';



        //         IF CreationQuery <> '' THEN
        //             SQLConnection.Execute(CreationQuery);
        //         SQLConnection.CommitTrans;
        //         SQLConnection.BeginTrans;

        //         //Sales Line Table insertion
        //         SQLQuery := 'select to_char(ORDER_ID) Orderid from OMS_ORDER_MASTER_MAIN1 where TENDER_DESC =''' + TenderHeader."Tender No." + ''''
        //      ;
        //         RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //         IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //             RecordSet.MoveFirst;

        //         WHILE NOT RecordSet.EOF DO BEGIN
        //             OrderId := FORMAT(RecordSet.Fields.Item('Orderid').Value);
        //             RecordSet.MoveNext;
        //         END;

        //         TenderLine.SETRANGE(TenderLine."Document No.", TenderHeader."Tender No.");
        //         IF TenderLine.FINDSET THEN BEGIN
        //                                        REPEAT
        //                                            IF FORMAT(TenderLine.Type) = 'G/L Account' THEN BEGIN
        //                                                CreationQuery := ' Select * from OMS_PRODUCT_MASTER1 where item_no like ''' + TenderLine."No." + ''' ';
        //                                                RecordSet := SQLConnection.Execute(CreationQuery, RowCount);
        //                                                IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                                                    RecordSet.MoveFirst;
        //                                                RowCount := 0;
        //                                                WHILE NOT RecordSet.EOF DO BEGIN
        //                                                    RowCount := RowCount + 1;
        //                                                    RecordSet.MoveNext;
        //                                                END;
        //                                                IF RowCount <= 0 THEN BEGIN
        //                                                    CreationQuery := ' insert into OMS_PRODUCT_MASTER1 (PRODUCT_ID, ITEM_NO, DESCRIPTION) values ' +
        //                                                                   ' ((select Max(PRODUCT_ID)+1 from OMS_PRODUCT_MASTER1),''' + TenderLine."No." + ''',' +
        //                                                                   ' ''' + TenderLine.Description + ''')';
        //                                                    IF CreationQuery <> '' THEN
        //                                                        SQLConnection.Execute(CreationQuery);
        //                                                    SQLConnection.CommitTrans;
        //                                                    SQLConnection.BeginTrans;

        //                                                END;
        //                                            END;
        //                                            //ItemCreationinOMS(TenderLine."No.",TenderLine.Description,TenderLine."Description 2",FORMAT(TenderLine.Type));
        //                                            AdditemtoOrder(TenderLine."No.", OrderId, TenderLine.Quantity, FALSE, FORMAT(TenderLine."Line No."), ' ',
        //                                                           FORMAT(TenderLine.Type));
        //                                            Schedule.SETRANGE(Schedule."Document No.", TenderHeader."Tender No.");
        //                                            Schedule.SETRANGE(Schedule."Document Line No.", TenderLine."Line No.");
        //                                            IF Schedule.FINDSET THEN BEGIN
        //                                                                         REPEAT
        //                                                                             IF (Schedule."No." <> TenderLine."No.") THEN BEGIN
        //                                                                                 IF FORMAT(Schedule.Type) = 'G/L Account' THEN BEGIN
        //                                                                                     CreationQuery := ' Select * from OMS_PRODUCT_MASTER1 where item_no like ''' + Schedule."No." + ''' ';
        //                                                                                     RecordSet := SQLConnection.Execute(CreationQuery, RowCount);
        //                                                                                     IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                                                                                         RecordSet.MoveFirst;
        //                                                                                     RowCount := 0;
        //                                                                                     WHILE NOT RecordSet.EOF DO BEGIN
        //                                                                                         RowCount := RowCount + 1;
        //                                                                                         RecordSet.MoveNext;
        //                                                                                     END;
        //                                                                                     IF RowCount <= 0 THEN BEGIN
        //                                                                                         CreationQuery := ' insert into OMS_PRODUCT_MASTER1 (PRODUCT_ID, ITEM_NO, DESCRIPTION) values ' +
        //                                                                                                     ' ((select Max(PRODUCT_ID)+1 from OMS_PRODUCT_MASTER1),''' + Schedule."No." + ''',' +
        //                                                                                                     ' ''' + Schedule.Description + ''')';
        //                                                                                         IF CreationQuery <> '' THEN
        //                                                                                             SQLConnection.Execute(CreationQuery);
        //                                                                                         SQLConnection.CommitTrans;
        //                                                                                         SQLConnection.BeginTrans;

        //                                                                                     END;
        //                                                                                 END;
        //                                                                                 AdditemtoOrder(Schedule."No.", OrderId, Schedule.Quantity, FALSE, FORMAT(TenderLine."Line No."), FORMAT(Schedule."Line No.")
        //                                                                                                , FORMAT(Schedule.Type));
        //                                                                             END;
        //                                                                         UNTIL Schedule.NEXT = 0
        //                                            END;

        //                                        UNTIL TenderLine.NEXT = 0
        //         END;
        //         ChangeLog.RESET;
        //         ChangeLog.SETRANGE(ChangeLog."Primary Key Field 1 Value", TenderHeader."Tender No.");
        //         IF ChangeLog.FINDFIRST THEN BEGIN
        //             ChangeLog.DELETEALL(TRUE);
        //         END;

        //         MESSAGE(SaleDesc + ' Tender Created in OMS');

        //     END ELSE        //TENDER Existed
        //     BEGIN
        //         ChangeLog.RESET;
        //         ChangeLog.SETRANGE(ChangeLog."Primary Key Field 1 Value", TenderHeader."Tender No.");
        //         fieldNo := 0;
        //         Tracking := '';
        //         IF ChangeLog.FINDFIRST THEN BEGIN
        //                                         REPEAT
        //                                             //  MESSAGE('Tender Existed');
        //                                             WeekStart := '';
        //                                             WeekStart := 'Update OMS_ORDER_MASTER_MAIN1 set ';
        //                                             Preval := FORMAT(ChangeLog."Old Value");
        //                                             PresVal := FORMAT(ChangeLog."New Value");
        //                                             CASE ChangeLog."Field No." OF
        //                                                 2:
        //                                                     BEGIN
        //                                                         IF (ChangeLog."Table No." = 60063)
        //                                                           AND (ChangeLog."Type of Change" = ChangeLog."Type of Change"::Deletion) THEN BEGIN
        //                                                             WeekStart := ' Delete from OMS_ORDER_PRODUCTS_MAIN ' +
        //                                                                        ' where ERPLineNo =''' + FORMAT(ChangeLog."Primary Key Field 2 Value") + '''' +
        //                                                                        ' and SHEDULELINENO is null and ordeR_id= ' + DELCHR(OrderId, '=', ',') + '';
        //                                                             fieldNo := 5;
        //                                                             IF WeekStart <> '' THEN
        //                                                                 SQLConnection.Execute(WeekStart);
        //                                                             TenderLine.SETRANGE(TenderLine."Document No.", ChangeLog."Primary Key Field 1 Value");
        //                                                             EVALUATE(fieldNo, ChangeLog."Primary Key Field 2 Value");
        //                                                             TenderLine.SETRANGE(TenderLine."Line No.", fieldNo);
        //                                                             IF TenderLine.FINDSET THEN BEGIN
        //                                                                                            REPEAT
        //                                                                                                UpdateWebHead := 'insert into OMS_MESSAGE_SYSTEM(TRANS_ID,ORDER_ID,MODIFICATION_DATE,PRODUCT_DETAILS,' +
        //                                                                                                               'MODIFICATION,MODIFICATION_TYPE, PREV_VALUE, PRESENT_VALUE) Values ' +
        //                                                                                                               '((select max(TRANS_ID)+1 from OMS_MESSAGE_SYSTEM),' + DELCHR(OrderId, '=', ',') + '' +
        //                                                                                                               ',sysdate,''Product Deleted'',1,5,''' + TenderLine."No." + ''',''0'')';
        //                                                                                                fieldNo := 5;
        //                                                                                                IF UpdateWebHead <> '' THEN
        //                                                                                                    SQLConnection.Execute(UpdateWebHead);
        //                                                                                            UNTIL TenderLine.NEXT = 0
        //                                                             END;
        //                                                         END;
        //                                                         IF (ChangeLog."Table No." = 60063)
        //                                                           AND (ChangeLog."Type of Change" = ChangeLog."Type of Change"::Insertion) THEN BEGIN
        //                                                             // MESSAGE('Tender Insertion');
        //                                                             EVALUATE(fieldNo, ChangeLog."New Value");
        //                                                             TenderLine.SETRANGE(TenderLine."Document No.", ChangeLog."Primary Key Field 1 Value");
        //                                                             TenderLine.SETRANGE(TenderLine."Line No.", fieldNo);
        //                                                             IF TenderLine.FINDSET THEN BEGIN
        //                                                                                            REPEAT
        //                                                                                                IF FORMAT(TenderLine.Type) = 'G/L Account' THEN BEGIN
        //                                                                                                    // MESSAGE('Tender G/l a/c');
        //                                                                                                    CreationQuery := ' Select * from OMS_PRODUCT_MASTER1 where item_no like ''' + TenderLine."No." + ''' ';
        //                                                                                                    RecordSet := SQLConnection.Execute(CreationQuery, RowCount);
        //                                                                                                    IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                                                                                                        RecordSet.MoveFirst;
        //                                                                                                    RowCount := 0;
        //                                                                                                    WHILE NOT RecordSet.EOF DO BEGIN
        //                                                                                                        RowCount := RowCount + 1;
        //                                                                                                        RecordSet.MoveNext;
        //                                                                                                    END;
        //                                                                                                    IF RowCount <= 0 THEN BEGIN
        //                                                                                                        CreationQuery := ' insert into OMS_PRODUCT_MASTER1 (PRODUCT_ID, ITEM_NO, DESCRIPTION) values ' +
        //                                                                                                                       ' ((select Max(PRODUCT_ID)+1 from OMS_PRODUCT_MASTER1),''' + TenderLine."No." + ''',' +
        //                                                                                                                       ' ''' + TenderLine.Description + ''')';
        //                                                                                                        IF CreationQuery <> '' THEN
        //                                                                                                            SQLConnection.Execute(CreationQuery);
        //                                                                                                        SQLConnection.CommitTrans;
        //                                                                                                        SQLConnection.BeginTrans;
        //                                                                                                    END;
        //                                                                                                END;
        //                                                                                                // MESSAGE(TenderLine."No.");
        //                                                                                                AdditemtoOrder(TenderLine."No.", OrderId, TenderLine.Quantity, FALSE,
        //                                                                                                        FORMAT(TenderLine."Line No."), ' ', FORMAT(TenderLine.Type));
        //                                                                                            UNTIL TenderLine.NEXT = 0
        //                                                             END;
        //                                                         END;
        //                                                         IF (ChangeLog."Table No." = 60062) AND (ChangeLog."New Value" <> '')
        //                                                           AND (ChangeLog."Type of Change" = ChangeLog."Type of Change"::Modification) THEN BEGIN
        //                                                             fieldNo := 12;
        //                                                             WeekStart := WeekStart + 'Customer_id=(Select Customer_id from OMS_CUSTOMER_MASTER1 where ' +
        //                                                             'ERP_CUSTOMER_ID=''' + PresVal + ''') where ';
        //                                                         END;
        //                                                     END;
        //                                                 4:
        //                                                     BEGIN
        //                                                         IF (ChangeLog."Table No." = 60063) AND (ChangeLog."Old Value" <> '')
        //                                                           AND (ChangeLog."Type of Change" = ChangeLog."Type of Change"::Deletion) THEN BEGIN
        //                                                             IF fieldNo = 5 THEN BEGIN                //Item No
        //                                                                 fieldNo := 10;
        //                                                                 SaleDesc := FORMAT(ChangeLog."Old Value");   // ITem Number
        //                                                                                                              // MESSAGE(SaleDesc);
        //                                                             END;
        //                                                         END;
        //                                                         IF (ChangeLog."Table No." = 60063)
        //                                                           AND (ChangeLog."Type of Change" = ChangeLog."Type of Change"::Modification) THEN BEGIN
        //                                                             IF (Preval <> '') THEN BEGIN
        //                                                                 EVALUATE(OrderPeriod, ChangeLog."Primary Key Field 2 Value");
        //                                                                 TenderLine.SETRANGE(TenderLine."Document No.", ChangeLog."Primary Key Field 1 Value");
        //                                                                 TenderLine.SETRANGE(TenderLine."Line No.", OrderPeriod);
        //                                                                 IF TenderLine.FINDSET THEN BEGIN
        //                                                                                                REPEAT
        //                                                                                                    IF FORMAT(TenderLine.Type) = 'G/L Account' THEN BEGIN
        //                                                                                                        CreationQuery := ' Select * from OMS_PRODUCT_MASTER1 where item_no like ''' + TenderLine."No." + ''' ';
        //                                                                                                        RecordSet := SQLConnection.Execute(CreationQuery, RowCount);
        //                                                                                                        IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                                                                                                            RecordSet.MoveFirst;
        //                                                                                                        RowCount := 0;
        //                                                                                                        WHILE NOT RecordSet.EOF DO BEGIN
        //                                                                                                            RowCount := RowCount + 1;
        //                                                                                                            RecordSet.MoveNext;
        //                                                                                                        END;
        //                                                                                                        IF RowCount <= 0 THEN BEGIN
        //                                                                                                            CreationQuery := ' insert into OMS_PRODUCT_MASTER1 (PRODUCT_ID, ITEM_NO, DESCRIPTION) values ' +
        //                                                                                                                           ' ((select Max(PRODUCT_ID)+1 from OMS_PRODUCT_MASTER1),''' + TenderLine."No." + ''',' +
        //                                                                                                                           ' ''' + TenderLine.Description + ''')';
        //                                                                                                            IF CreationQuery <> '' THEN
        //                                                                                                                SQLConnection.Execute(CreationQuery);
        //                                                                                                            SQLConnection.CommitTrans;
        //                                                                                                            SQLConnection.BeginTrans;
        //                                                                                                        END;
        //                                                                                                    END ELSE BEGIN
        //                                                                                                        CreationQuery := ' Select * from OMS_PRODUCT_MASTER1 where item_no like ''' + TenderLine."No." + ''' ';
        //                                                                                                        RecordSet := SQLConnection.Execute(CreationQuery, RowCount);
        //                                                                                                        IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                                                                                                            RecordSet.MoveFirst;
        //                                                                                                        RowCount := 0;
        //                                                                                                        WHILE NOT RecordSet.EOF DO BEGIN
        //                                                                                                            RowCount := RowCount + 1;
        //                                                                                                            RecordSet.MoveNext;
        //                                                                                                        END;
        //                                                                                                        IF RowCount <= 0 THEN BEGIN
        //                                                                                                            ItemCreationinOMS(TenderLine."No.", TenderLine.Description, TenderLine."Description 2", FORMAT(TenderLine.Type))
        //                                                                                       ;
        //                                                                                                        END;
        //                                                                                                    END;
        //                                                                                                    WeekStart := 'Update OMS_ORDER_PRODUCTS_MAIN set ' +
        //                                                                                                               ' PRODUCT_ID=(select PRODUCT_ID from OMS_PRODUCT_MASTER1 where item_no = ' +
        //                                                                                                               '''' + FORMAT(ChangeLog."New Value") + ''') ' +
        //                                                                                                               ' where ERPLineNo =''' + FORMAT(ChangeLog."Primary Key Field 2 Value") + '''' +
        //                                                                                                               ' and SHEDULELINENO is NULL and ';
        //                                                                                                    fieldNo := 5;
        //                                                                                                UNTIL TenderLine.NEXT = 0
        //                                                                 END;
        //                                                             END;
        //                                                         END;
        //                                                     END;
        //                                                 7:
        //                                                     BEGIN
        //                                                         IF (ChangeLog."Table No." = 60063) AND ((Preval <> '0') OR (Preval <> ''))
        //                                                         AND (ChangeLog."Type of Change" = ChangeLog."Type of Change"::Modification) THEN      //Quantity
        //                                                           BEGIN
        //                                                             CreationQuery := ' Select * from OMS_ORDER_PRODUCTS_MAIN  ' +
        //                                                                          ' where ERPLineNo =' + FORMAT(ChangeLog."Primary Key Field 2 Value") + '' +
        //                                                                          ' and SHEDULELINENO is NULL and OrdeR_id=' + DELCHR(OrderId, '=', ',');
        //                                                             RecordSet := SQLConnection.Execute(CreationQuery, RowCount);
        //                                                             IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                                                                 RecordSet.MoveFirst;
        //                                                             RowCount := 0;
        //                                                             WHILE NOT RecordSet.EOF DO BEGIN
        //                                                                 RowCount := RowCount + 1;
        //                                                                 RecordSet.MoveNext;
        //                                                             END;
        //                                                             IF RowCount <= 0 THEN BEGIN
        //                                                                 EVALUATE(OrderPeriod, ChangeLog."Primary Key Field 2 Value");
        //                                                                 TenderLine.SETRANGE(TenderLine."Document No.", ChangeLog."Primary Key Field 1 Value");
        //                                                                 TenderLine.SETRANGE(TenderLine."Line No.", OrderPeriod);
        //                                                                 IF TenderLine.FINDSET THEN BEGIN
        //                                                                                                REPEAT
        //                                                                                                    AdditemtoOrder(TenderLine."No.", OrderId, TenderLine.Quantity, FALSE
        //                                                                                                                    , FORMAT(TenderLine."Line No."), ' ', FORMAT(TenderLine.Type));
        //                                                                                                UNTIL TenderLine.NEXT = 0
        //                                                                 END;
        //                                                             END ELSE BEGIN
        //                                                                 WeekStart := ' Update OMS_ORDER_PRODUCTS_MAIN set ' +
        //                                                                              ' LATEST_QTY= ' +
        //                                                                              ' round(to_number(replace(''' + FORMAT(ChangeLog."New Value") + ''',''' + ',' + ''',''' + '' + '''))) ' +
        //                                                                              ' where ERPLineNo =' + FORMAT(ChangeLog."Primary Key Field 2 Value") + '' +
        //                                                                              ' and SHEDULELINENO is NULL  and ';
        //                                                                 fieldNo := 5;
        //                                                             END;
        //                                                         END;
        //                                                     END;

        //                                                 20:
        //                                                     BEGIN         //SalesPerson Code
        //                                                         IF (ChangeLog."Table No." = 60062) AND (ChangeLog."New Value" <> '')
        //                                                          AND (ChangeLog."Type of Change" = ChangeLog."Type of Change"::Modification) THEN BEGIN
        //                                                             WeekStart := WeekStart + ' ENTRY_PERSON=''' + ChangeLog."New Value" + ''' where ';
        //                                                             fieldNo := 12;
        //                                                         END;
        //                                                     END;
        //                                                 57:
        //                                                     BEGIN
        //                                                         IF (ChangeLog."Table No." = 60062) AND (ChangeLog."New Value" <> '')
        //                                                          AND (ChangeLog."Type of Change" = ChangeLog."Type of Change"::Modification) THEN BEGIN
        //                                                             EVALUATE(Day, COPYSTR(ChangeLog."New Value", 9, 2));
        //                                                             EVALUATE(Month, COPYSTR(ChangeLog."New Value", 6, 2));
        //                                                             EVALUATE(Year, COPYSTR(ChangeLog."New Value", 3, 2));
        //                                                             DDate := DMY2DATE(Day, Month, 2000 + Year);

        //                                                             // EVALUATE(DDate,FORMAT(ChangeLog."New Value"));
        //                                                             WeekEnd := FORMAT(DDate, 0, '<Day>-<Month Text,3>-<Year4>');
        //                                                             fieldNo := 12;              //Tender Open Bid Date
        //                                                             WeekStart := WeekStart + ' TENDER_OPEN_DATE=''' + WeekEnd + ''' where ';
        //                                                         END;
        //                                                     END;
        //                                                 51:
        //                                                     BEGIN
        //                                                         IF (ChangeLog."Table No." = 60062) AND (ChangeLog."New Value" <> '')
        //                                                          AND (ChangeLog."Type of Change" = ChangeLog."Type of Change"::Modification) THEN BEGIN
        //                                                             WeekEnd := FORMAT(ChangeLog."New Value");
        //                                                             fieldNo := 12;              //Customer Tender No
        //                                                             WeekStart := WeekStart + ' TENDER_NO=''' + WeekEnd + ''' where ';
        //                                                         END;
        //                                                     END;
        //                                                 60116:
        //                                                     BEGIN     //Order Completion Period
        //                                                         IF (ChangeLog."Table No." = 60062) AND (ChangeLog."New Value" <> '')
        //                                                          AND (ChangeLog."Type of Change" = ChangeLog."Type of Change"::Modification) THEN BEGIN
        //                                                             UpdateWebHead := 'update OMS_ORDER_MASTER_MAIN1 set ORDER_COMPLETION_PERIOD=' + FORMAT(ChangeLog."New Value") + ',' +
        //                                                                               ' MODIFICATION=1 where order_id =' + DELCHR(OrderId, '=', ',') + '';
        //                                                             SQLConnection.Execute(UpdateWebHead);
        //                                                             WeekStart := WeekStart + ' ORDER_COMPLETION_DATE=EXPECTED_WEEK_START_DATE+' + FORMAT(ChangeLog."New Value") + ',' +
        //                                                                        ' CUSTOMER_EXPECTING_DATE=EXPECTED_WEEK_START_DATE+' + FORMAT(ChangeLog."New Value") + ' where ';
        //                                                             fieldNo := 3;
        //                                                         END;
        //                                                     END;
        //                                                 21:
        //                                                     BEGIN         //Order Value
        //                                                         IF (ChangeLog."Table No." = 60062) AND (ChangeLog."New Value" <> '')
        //                                                          AND (ChangeLog."Type of Change" = ChangeLog."Type of Change"::Modification) THEN BEGIN
        //                                                             // EVALUATE(fieldNo,ChangeLog."New Value")  ;
        //                                                             WeekStart := WeekStart + ' ORDER_VALUE=round(to_number(replace(''' + FORMAT(ChangeLog."New Value") + ''',''' + ',' + ''',' +
        //                                                             '''' + '' + '''))) where ';
        //                                                             fieldNo := 1;
        //                                                         END;
        //                                                     END;
        //                                                 60005:
        //                                                     BEGIN
        //                                                         // MESSAGE('Expecting week');
        //                                                         IF (ChangeLog."Table No." = 60062) AND (ChangeLog."Type of Change" = ChangeLog."Type of Change"::Modification) THEN BEGIN
        //                                                             CASE ChangeLog."New Value" OF
        //                                                                 'JAN':
        //                                                                     BEGIN
        //                                                                         WeekStart := '01/01/' + FORMAT(TODAY, 0, '<year>');
        //                                                                         WeekEnd := 'Jan';
        //                                                                     END;
        //                                                                 'FEB':
        //                                                                     BEGIN
        //                                                                         WeekStart := '02/01/' + FORMAT(TODAY, 0, '<year>');
        //                                                                         WeekEnd := 'Feb';
        //                                                                     END;
        //                                                                 'MAR':
        //                                                                     BEGIN
        //                                                                         WeekStart := '03/01/' + FORMAT(TODAY, 0, '<year>');
        //                                                                         WeekEnd := 'Mar';
        //                                                                     END;
        //                                                                 'APR':
        //                                                                     BEGIN
        //                                                                         WeekStart := '04/01/' + FORMAT(TODAY, 0, '<year>');
        //                                                                         WeekEnd := 'Apr';
        //                                                                     END;
        //                                                                 'MAY':
        //                                                                     BEGIN
        //                                                                         WeekStart := '05/01/' + FORMAT(TODAY, 0, '<year>');
        //                                                                         WeekEnd := 'May';
        //                                                                     END;
        //                                                                 'JUN':
        //                                                                     BEGIN
        //                                                                         WeekStart := '06/01/' + FORMAT(TODAY, 0, '<year>');
        //                                                                         WeekEnd := 'Jun';
        //                                                                     END;
        //                                                                 'JUL':
        //                                                                     BEGIN
        //                                                                         WeekStart := '07/01/' + FORMAT(TODAY, 0, '<year>');
        //                                                                         WeekEnd := 'Jul';
        //                                                                     END;
        //                                                                 'AUG':
        //                                                                     BEGIN
        //                                                                         WeekStart := '08/01/' + FORMAT(TODAY, 0, '<year>');
        //                                                                         WeekEnd := 'Aug';
        //                                                                     END;
        //                                                                 'SEP':
        //                                                                     BEGIN
        //                                                                         WeekStart := '09/01/' + FORMAT(TODAY, 0, '<year>');
        //                                                                         WeekEnd := 'Sep';
        //                                                                     END;
        //                                                                 'OCT':
        //                                                                     BEGIN
        //                                                                         WeekStart := '10/01/' + FORMAT(TODAY, 0, '<year>');
        //                                                                         WeekEnd := 'Oct';
        //                                                                     END;
        //                                                                 'NOV':
        //                                                                     BEGIN
        //                                                                         WeekStart := '11/01/' + FORMAT(TODAY, 0, '<year>');
        //                                                                         WeekEnd := 'Nov';
        //                                                                     END;
        //                                                                 'DEC':
        //                                                                     BEGIN
        //                                                                         WeekStart := '12/01/' + FORMAT(TODAY, 0, '<year>');
        //                                                                         WeekEnd := 'Dec';
        //                                                                     END;
        //                                                                 '1':
        //                                                                     BEGIN
        //                                                                         WeekStart := '01/01/' + FORMAT(TODAY, 0, '<year>');
        //                                                                         WeekEnd := 'Jan';
        //                                                                     END;
        //                                                                 '2':
        //                                                                     BEGIN
        //                                                                         WeekStart := '02/01/' + FORMAT(TODAY, 0, '<year>');
        //                                                                         WeekEnd := 'Feb';
        //                                                                     END;
        //                                                                 '3':
        //                                                                     BEGIN
        //                                                                         WeekStart := '03/01/' + FORMAT(TODAY, 0, '<year>');
        //                                                                         WeekEnd := 'Mar';
        //                                                                     END;
        //                                                                 '4':
        //                                                                     BEGIN
        //                                                                         WeekStart := '04/01/' + FORMAT(TODAY, 0, '<year>');
        //                                                                         WeekEnd := 'Apr';
        //                                                                     END;
        //                                                                 '5':
        //                                                                     BEGIN
        //                                                                         WeekStart := '05/01/' + FORMAT(TODAY, 0, '<year>');
        //                                                                         WeekEnd := 'May';
        //                                                                     END;
        //                                                                 '6':
        //                                                                     BEGIN
        //                                                                         WeekStart := '06/01/' + FORMAT(TODAY, 0, '<year>');
        //                                                                         WeekEnd := 'Jun';
        //                                                                     END;
        //                                                                 '7':
        //                                                                     BEGIN
        //                                                                         WeekStart := '07/01/' + FORMAT(TODAY, 0, '<year>');
        //                                                                         WeekEnd := 'Jul';
        //                                                                     END;
        //                                                                 '8':
        //                                                                     BEGIN
        //                                                                         WeekStart := '08/01/' + FORMAT(TODAY, 0, '<year>');
        //                                                                         WeekEnd := 'Aug';
        //                                                                     END;
        //                                                                 '9':
        //                                                                     BEGIN
        //                                                                         WeekStart := '09/01/' + FORMAT(TODAY, 0, '<year>');
        //                                                                         WeekEnd := 'Sep';
        //                                                                     END;
        //                                                                 '10':
        //                                                                     BEGIN
        //                                                                         WeekStart := '10/01/' + FORMAT(TODAY, 0, '<year>');
        //                                                                         WeekEnd := 'Oct';
        //                                                                     END;
        //                                                                 '11':
        //                                                                     BEGIN
        //                                                                         WeekStart := '11/01/' + FORMAT(TODAY, 0, '<year>');
        //                                                                         WeekEnd := 'Nov';
        //                                                                     END;
        //                                                                 '12':
        //                                                                     BEGIN
        //                                                                         WeekStart := '12/01/' + FORMAT(TODAY, 0, '<year>');
        //                                                                         WeekEnd := 'Dec';
        //                                                                     END;

        //                                                             END;
        //                                                             IF FORMAT(WeekEnd) = FORMAT(TODAY, 0, '<Month Text,3>') THEN BEGIN
        //                                                                 WeekStart := FORMAT(TODAY, 0, '<Month,2>/<Day,2>/<Year>');
        //                                                                 WeekStart := FORMAT(CALCDATE('7D', TODAY), 0, '<Month,2>/<Day,2>/<Year>');
        //                                                             END;
        //                                                             EVALUATE(DDate, WeekStart);
        //                                                             IF DDate < TODAY THEN
        //                                                                 DDate := CALCDATE('365D', DDate);
        //                                                             WeekStart := FORMAT(DDate, 0, '<Day>-<Month Text,3>-<Year4>');
        //                                                             WeekEnd := FORMAT(CALCDATE('7D', DDate), 0, '<Day>-<Month Text,3>-<Year4>');
        //                                                             WeekStart := 'Update OMS_ORDER_MASTER_MAIN1 set EXPECTED_WEEK_START_DATE=(select next_day(''' + WeekStart + ''',' +
        //                                                             '''' + 'MONDAY' + ''')-7 from dual),' +
        //                                                                        'EXPECTED_WEEK_END_DATE=(select next_day(''' + WeekEnd + ''',''' + 'MONDAY' + ''')-7 from dual) where ';
        //                                                             //MESSAGE(WeekStart);
        //                                                             fieldNo := 4;
        //                                                         END;
        //                                                     END;


        //                                             END;
        //                                             IF (WeekStart <> 'Update OMS_ORDER_MASTER_MAIN1 set ') AND (WeekStart <> '') AND (fieldNo <> 0)
        //                                                AND (ChangeLog."Type of Change" = ChangeLog."Type of Change"::Modification) THEN BEGIN
        //                                                 WeekStart := WeekStart + ' Order_id=' + DELCHR(FORMAT(OrderId), '=', ',') + '';
        //                                                 // MESSAGE(WeekStart);
        //                                                 IF fieldNo <> 0 THEN BEGIN
        //                                                     UpdateWebHead := WeekStart;
        //                                                     SQLConnection.Execute(UpdateWebHead);

        //                                                     UpdateWebHead := 'update OMS_ORDER_MASTER_MAIN1 set MODIFICATION=1 where ' +
        //                                                                       'order_id =' + OrderId + '';
        //                                                     SQLConnection.Execute(UpdateWebHead);
        //                                                     //MESSAGE(ChangeLog."Field Name" +' Modified');
        //                                                     IF (fieldNo <> 12) THEN BEGIN
        //                                                         IF (Preval <> '') AND (PresVal <> '') THEN BEGIN
        //                                                             UpdateWebHead := 'insert into OMS_MESSAGE_SYSTEM(TRANS_ID,ORDER_ID,MODIFICATION_DATE,REMARKS,MODIFICATION,' +
        //                                                                'MODIFICATION_TYPE, PREV_VALUE, PRESENT_VALUE) Values ' +
        //                                                                '((select max(TRANS_ID)+1 from OMS_MESSAGE_SYSTEM),' + DELCHR(OrderId, '=', ',') + '' +
        //                                                                ',sysdate,''' + 'Tender Modification' + ''',1,' + FORMAT(fieldNo) + ',''' + Preval + ''',''' + PresVal + ''')';
        //                                                         END ELSE
        //                                                             IF (PresVal <> '') THEN BEGIN
        //                                                                 UpdateWebHead := 'insert into OMS_MESSAGE_SYSTEM(TRANS_ID,ORDER_ID,MODIFICATION_DATE,REMARKS,MODIFICATION,' +
        //                                                                    'MODIFICATION_TYPE, PRESENT_VALUE) Values ' +
        //                                                                    '((select max(TRANS_ID)+1 from OMS_MESSAGE_SYSTEM),' + DELCHR(OrderId, '=', ',') + '' +
        //                                                                    ',sysdate,''' + 'Tender Modification' + ''',1,' + FORMAT(fieldNo) + ',''' + PresVal + ''')';
        //                                                             END;
        //                                                         SQLConnection.Execute(UpdateWebHead);

        //                                                     END;
        //                                                 END;
        //                                             END;

        //                                         UNTIL ChangeLog.NEXT = 0;
        //         END;

        //         // Order Item Added
        //         // Order Details Modified

        //         //  MESSAGE(TenderHeader."Tender No.");
        //         ChangeLog.RESET;
        //         ChangeLog.SETRANGE(ChangeLog."Primary Key Field 2 Value", TenderHeader."Tender No.");
        //         fieldNo := 0;
        //         Tracking := '';
        //         IF ChangeLog.FINDFIRST THEN BEGIN
        //                                         REPEAT
        //                                             // MESSAGE('Tender Schedule Existed');
        //                                             WeekStart := '';
        //                                             WeekStart := ' Update OMS_ORDER_MASTER_MAIN1 set ';
        //                                             Preval := FORMAT(ChangeLog."Old Value");
        //                                             PresVal := FORMAT(ChangeLog."New Value");
        //                                             CASE ChangeLog."Field No." OF
        //                                                 3:
        //                                                     BEGIN                            // Line No
        //                                                         IF (ChangeLog."Type of Change" = ChangeLog."Type of Change"::Deletion) THEN BEGIN
        //                                                             IF (ChangeLog."Table No." = 60095) THEN BEGIN
        //                                                                 WeekStart := 'Delete from OMS_ORDER_PRODUCTS_MAIN ' +
        //                                                                            'where ERPLineNo =''' + FORMAT(ChangeLog."Primary Key Field 3 Value") + '''' +
        //                                                                            ' and SHEDULELINENO= ''' + FORMAT(ChangeLog."Old Value") + ''' and Order_id =' + OrderId + '';
        //                                                                 fieldNo := 5;
        //                                                                 IF WeekStart <> '' THEN
        //                                                                     SQLConnection.Execute(WeekStart);
        //                                                                 Schedule.SETRANGE(Schedule."Document No.", ChangeLog."Primary Key Field 2 Value");
        //                                                                 EVALUATE(fieldNo, ChangeLog."Primary Key Field 3 Value");         // Schedule item Insertion
        //                                                                 Schedule.SETRANGE(Schedule."Document Line No.", fieldNo);
        //                                                                 EVALUATE(fieldNo, ChangeLog."Old Value");
        //                                                                 Schedule.SETRANGE(Schedule."Line No.", fieldNo);
        //                                                                 IF Schedule.FINDSET THEN BEGIN
        //                                                                                              REPEAT
        //                                                                                                  UpdateWebHead := 'insert into OMS_MESSAGE_SYSTEM(TRANS_ID,ORDER_ID,MODIFICATION_DATE,PRODUCT_DETAILS,' +
        //                                                                                                               'MODIFICATION,MODIFICATION_TYPE, PREV_VALUE, PRESENT_VALUE) Values ' +
        //                                                                                                               '((select max(TRANS_ID)+1 from OMS_MESSAGE_SYSTEM),' + OrderId + '' +
        //                                                                                                               ',sysdate,''Product Deleted'',1,5,''' + Schedule."No." + ''',''0'')';
        //                                                                                                  fieldNo := 5;
        //                                                                                                  IF UpdateWebHead <> '' THEN
        //                                                                                                      SQLConnection.Execute(UpdateWebHead);
        //                                                                                              UNTIL Schedule.NEXT = 0
        //                                                                 END;

        //                                                             END;
        //                                                         END ELSE
        //                                                             IF (ChangeLog."Type of Change" = ChangeLog."Type of Change"::Insertion) THEN BEGIN
        //                                                                 IF (ChangeLog."Table No." = 60095) THEN BEGIN
        //                                                                     // MESSAGE('Schedule Insertion');
        //                                                                     Schedule.SETRANGE(Schedule."Document No.", ChangeLog."Primary Key Field 2 Value");
        //                                                                     EVALUATE(fieldNo, ChangeLog."Primary Key Field 3 Value");         // Schedule item Insertion
        //                                                                     Schedule.SETRANGE(Schedule."Document Line No.", fieldNo);
        //                                                                     EVALUATE(fieldNo, ChangeLog."New Value");
        //                                                                     Schedule.SETRANGE(Schedule."Line No.", fieldNo);
        //                                                                     IF Schedule.FINDSET THEN BEGIN
        //                                                                                                  REPEAT
        //                                                                                                      //  MESSAGE(Schedule."No.");
        //                                                                                                      IF FORMAT(Schedule.Type) = 'G/L Account' THEN BEGIN
        //                                                                                                          CreationQuery := ' Select * from OMS_PRODUCT_MASTER1 where item_no like ''' + Schedule."No." + ''' ';
        //                                                                                                          RecordSet := SQLConnection.Execute(CreationQuery, RowCount);
        //                                                                                                          IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                                                                                                              RecordSet.MoveFirst;
        //                                                                                                          RowCount := 0;
        //                                                                                                          WHILE NOT RecordSet.EOF DO BEGIN
        //                                                                                                              RowCount := RowCount + 1;
        //                                                                                                              RecordSet.MoveNext;
        //                                                                                                          END;
        //                                                                                                          IF RowCount <= 0 THEN BEGIN
        //                                                                                                              CreationQuery := ' insert into OMS_PRODUCT_MASTER1 (PRODUCT_ID, ITEM_NO, DESCRIPTION) values ' +
        //                                                                                                                             ' ((select Max(PRODUCT_ID)+1 from OMS_PRODUCT_MASTER1),''' + Schedule."No." + ''',' +
        //                                                                                                                             ' ''' + Schedule.Description + ''')';
        //                                                                                                              IF CreationQuery <> '' THEN
        //                                                                                                                  SQLConnection.Execute(CreationQuery);
        //                                                                                                              SQLConnection.CommitTrans;
        //                                                                                                              SQLConnection.BeginTrans;
        //                                                                                                              //   MESSAGE(CreationQuery);
        //                                                                                                          END;
        //                                                                                                      END;
        //                                                                                                      //  MESSAGE(Schedule."No.");
        //                                                                                                      AdditemtoOrder(Schedule."No.", OrderId, Schedule.Quantity, Schedule."RDSO Required"
        //                                                                                                                      , FORMAT(ChangeLog."Primary Key Field 3 Value"), FORMAT(ChangeLog."New Value"),
        //                                                                                                                       FORMAT(Schedule.Type));
        //                                                                                                  UNTIL Schedule.NEXT = 0
        //                                                                     END;
        //                                                                 END;
        //                                                             END;
        //                                                     END;
        //                                                 5:
        //                                                     BEGIN
        //                                                         //Tender Schedule item Modification
        //                                                         IF (ChangeLog."Table No." = 60095) THEN BEGIN
        //                                                             SaleDesc := '';
        //                                                             IF (ChangeLog."Type of Change" = ChangeLog."Type of Change"::Modification) THEN BEGIN
        //                                                                 WeekStart := '';
        //                                                                 EVALUATE(fieldNo, ChangeLog."Primary Key Field 3 Value");
        //                                                                 SchLine := COPYSTR(ChangeLog."Primary Key", STRPOS(ChangeLog."Primary Key",
        //                                                                 ChangeLog."Primary Key Field 3 Value"), STRLEN(ChangeLog."Primary Key"));
        //                                                                 SchLine := COPYSTR(SchLine, ROUND(STRPOS(SchLine, '=') + 1), STRLEN(SchLine));
        //                                                                 Schedule.SETRANGE(Schedule."Document No.", ChangeLog."Primary Key Field 2 Value");
        //                                                                 Schedule.SETRANGE(Schedule."Document Line No.", fieldNo);
        //                                                                 EVALUATE(fieldNo, SchLine);
        //                                                                 Schedule.SETRANGE(Schedule."Line No.", fieldNo);
        //                                                                 IF Schedule.FINDSET THEN BEGIN
        //                                                                                              REPEAT
        //                                                                                                  IF FORMAT(Schedule.Type) = 'G/L Account' THEN BEGIN
        //                                                                                                      CreationQuery := ' Select * from OMS_PRODUCT_MASTER1 where item_no like ''' + Schedule."No." + ''' ';
        //                                                                                                      RecordSet := SQLConnection.Execute(CreationQuery, RowCount);
        //                                                                                                      IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                                                                                                          RecordSet.MoveFirst;
        //                                                                                                      RowCount := 0;
        //                                                                                                      WHILE NOT RecordSet.EOF DO BEGIN
        //                                                                                                          RowCount := RowCount + 1;
        //                                                                                                          RecordSet.MoveNext;
        //                                                                                                      END;
        //                                                                                                      IF RowCount <= 0 THEN BEGIN
        //                                                                                                          CreationQuery := ' insert into OMS_PRODUCT_MASTER1 (PRODUCT_ID, ITEM_NO, DESCRIPTION) values ' +
        //                                                                                                                         ' ((select Max(PRODUCT_ID)+1 from OMS_PRODUCT_MASTER1),''' + Schedule."No." + ''',' +
        //                                                                                                                         ' ''' + Schedule.Description + ''')';
        //                                                                                                          IF CreationQuery <> '' THEN
        //                                                                                                              SQLConnection.Execute(CreationQuery);
        //                                                                                                          SQLConnection.CommitTrans;
        //                                                                                                          SQLConnection.BeginTrans;
        //                                                                                                      END;
        //                                                                                                  END;
        //                                                                                                  WeekStart := ' Update OMS_ORDER_PRODUCTS_MAIN set ' +
        //                                                                                                              ' PRODUCT_ID=(select PRODUCT_ID from OMS_PRODUCT_MASTER1 where item_no = ' +
        //                                                                                                              ' ''' + FORMAT(ChangeLog."New Value") + ''') ' +
        //                                                                                                              ' where ERPLineNo =''' + FORMAT(ChangeLog."Primary Key Field 3 Value") + '''' +
        //                                                                                                              ' and SHEDULELINENO= ''' + SchLine + '''  and ';
        //                                                                                              UNTIL Schedule.NEXT = 0
        //                                                                 END;
        //                                                             END;
        //                                                         END;
        //                                                     END;

        //                                                 7:
        //                                                     BEGIN
        //                                                         IF (ChangeLog."Table No." = 60095)
        //                                                         AND (ChangeLog."Type of Change" = ChangeLog."Type of Change"::Modification) THEN                    //Schedule Quantity
        //                                                         BEGIN
        //                                                             WeekStart := '';
        //                                                             SchLine := COPYSTR(ChangeLog."Primary Key", STRPOS(ChangeLog."Primary Key",
        //                                                             ChangeLog."Primary Key Field 3 Value"), STRLEN(ChangeLog."Primary Key"));
        //                                                             SchLine := COPYSTR(SchLine, ROUND(STRPOS(SchLine, '=') + 1), STRLEN(SchLine));
        //                                                             EVALUATE(fieldNo, SchLine);
        //                                                             CreationQuery := ' Select * from OMS_ORDER_PRODUCTS_MAIN  ' +
        //                                                                           ' where ERPLineNo =' + FORMAT(ChangeLog."Primary Key Field 3 Value") + '' +
        //                                                                           ' and SHEDULELINENO =' + FORMAT(fieldNo) + ' and OrdeR_id =' + OrderId;
        //                                                             RecordSet := SQLConnection.Execute(CreationQuery, RowCount);
        //                                                             IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                                                                 RecordSet.MoveFirst;
        //                                                             RowCount := 0;
        //                                                             WHILE NOT RecordSet.EOF DO BEGIN
        //                                                                 RowCount := RowCount + 1;
        //                                                                 RecordSet.MoveNext;
        //                                                             END;
        //                                                             IF RowCount <= 0 THEN BEGIN
        //                                                                 //  MESSAGE('Enter in Tender schedule Lines');
        //                                                                 EVALUATE(fieldNo, ChangeLog."Primary Key Field 3 Value");
        //                                                                 SchLine := COPYSTR(ChangeLog."Primary Key", STRPOS(ChangeLog."Primary Key",
        //                                                                 ChangeLog."Primary Key Field 3 Value"), STRLEN(ChangeLog."Primary Key"));
        //                                                                 SchLine := COPYSTR(SchLine, ROUND(STRPOS(SchLine, '=') + 1), STRLEN(SchLine));
        //                                                                 Schedule.SETRANGE(Schedule."Document No.", ChangeLog."Primary Key Field 2 Value");
        //                                                                 Schedule.SETRANGE(Schedule."Document Line No.", fieldNo);
        //                                                                 EVALUATE(fieldNo, SchLine);
        //                                                                 Schedule.SETRANGE(Schedule."Line No.", fieldNo);
        //                                                                 IF Schedule.FINDSET THEN BEGIN
        //                                                                                              REPEAT
        //                                                                                                  //    MESSAGE(Schedule."No.");
        //                                                                                                  AdditemtoOrder(Schedule."No.", OrderId, Schedule.Quantity, FALSE
        //                                                                                                                  , FORMAT(Schedule."Document Line No."), FORMAT(Schedule."Line No."), FORMAT(Schedule.Type));
        //                                                                                              UNTIL Schedule.NEXT = 0
        //                                                                 END;
        //                                                             END ELSE BEGIN
        //                                                                 WeekStart := ' Update OMS_ORDER_PRODUCTS_MAIN set ' +
        //                                                                            ' LATEST_QTY= ' +
        //                                                                            ' round(to_number(replace(''' + FORMAT(ChangeLog."New Value") + ''',''' + ',' + ''',''' + '' + '''))) ' +
        //                                                                            ' where ERPLineNo =' + FORMAT(ChangeLog."Primary Key Field 3 Value") + '' +
        //                                                                            ' and SHEDULELINENO=' + FORMAT(fieldNo) + '  and ';
        //                                                                 fieldNo := 5;
        //                                                             END;
        //                                                         END;
        //                                                     END;
        //                                                 8:
        //                                                     BEGIN
        //                                                         IF (ChangeLog."Table No." = 60095) THEN      //Schedule RDSO req
        //                                                         BEGIN
        //                                                             WeekStart := '';
        //                                                             SchLine := COPYSTR(ChangeLog."Primary Key", STRPOS(ChangeLog."Primary Key",
        //                                                             ChangeLog."Primary Key Field 3 Value"), STRLEN(ChangeLog."Primary Key"));
        //                                                             SchLine := COPYSTR(SchLine, ROUND(STRPOS(SchLine, '=') + 1), STRLEN(SchLine));
        //                                                             EVALUATE(fieldNo, SchLine);
        //                                                             CreationQuery := ' Select * from OMS_ORDER_PRODUCTS_MAIN  ' +
        //                                                                            ' where ERPLineNo =' + FORMAT(ChangeLog."Primary Key Field 3 Value") + '' +
        //                                                                            ' and SHEDULELINENO =' + FORMAT(fieldNo) + ' and OrdeR_id =' + OrderId;
        //                                                             RecordSet := SQLConnection.Execute(CreationQuery, RowCount);
        //                                                             IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                                                                 RecordSet.MoveFirst;
        //                                                             RowCount := 0;
        //                                                             WHILE NOT RecordSet.EOF DO BEGIN
        //                                                                 RowCount := RowCount + 1;
        //                                                                 RecordSet.MoveNext;
        //                                                             END;
        //                                                             IF RowCount <= 0 THEN BEGIN
        //                                                                 EVALUATE(fieldNo, ChangeLog."Primary Key Field 3 Value");
        //                                                                 SchLine := COPYSTR(ChangeLog."Primary Key", STRPOS(ChangeLog."Primary Key",
        //                                                                 ChangeLog."Primary Key Field 3 Value"), STRLEN(ChangeLog."Primary Key"));
        //                                                                 SchLine := COPYSTR(SchLine, ROUND(STRPOS(SchLine, '=') + 1), STRLEN(SchLine));
        //                                                                 Schedule.SETRANGE(Schedule."Document No.", ChangeLog."Primary Key Field 2 Value");
        //                                                                 Schedule.SETRANGE(Schedule."Document Line No.", fieldNo);
        //                                                                 EVALUATE(fieldNo, SchLine);
        //                                                                 Schedule.SETRANGE(Schedule."Line No.", fieldNo);
        //                                                                 IF Schedule.FINDSET THEN BEGIN
        //                                                                                              REPEAT
        //                                                                                                  AdditemtoOrder(Schedule."No.", OrderId, Schedule.Quantity, FALSE
        //                                                                                                                  , FORMAT(Schedule."Document Line No."), FORMAT(Schedule."Line No."), FORMAT(Schedule.Type));
        //                                                                                              UNTIL Schedule.NEXT = 0
        //                                                                 END;
        //                                                             END ELSE BEGIN
        //                                                                 IF (FORMAT(ChangeLog."New Value") = 'Yes') THEN BEGIN
        //                                                                     WeekStart := 'Update OMS_ORDER_PRODUCTS_MAIN set ' +
        //                                                                           ' INSPECTION=1  ' +
        //                                                                           ' where ERPLineNo =' + FORMAT(ChangeLog."Primary Key Field 3 Value") + '' +
        //                                                                           ' and SHEDULELINENO=' + FORMAT(fieldNo) + '  and ';
        //                                                                 END ELSE BEGIN
        //                                                                     WeekStart := 'Update OMS_ORDER_PRODUCTS_MAIN set ' +
        //                                                                            ' INSPECTION=0   ' +
        //                                                                            ' where ERPLineNo =' + FORMAT(ChangeLog."Primary Key Field 3 Value") + '' +
        //                                                                            ' and SHEDULELINENO=' + FORMAT(fieldNo) + ' and ';
        //                                                                 END;
        //                                                                 fieldNo := 5;
        //                                                             END;
        //                                                         END;
        //                                                     END;
        //                                             END;

        //                                             IF (WeekStart <> ' Update OMS_ORDER_MASTER_MAIN1 set ') AND (WeekStart <> '') AND (fieldNo <> 0)
        //                                                 AND (ChangeLog."Type of Change" = ChangeLog."Type of Change"::Modification) THEN BEGIN
        //                                                 WeekStart := WeekStart + ' Order_id=' + FORMAT(OrderId) + '';
        //                                                 // MESSAGE(WeekStart);
        //                                                 IF fieldNo <> 0 THEN BEGIN
        //                                                     UpdateWebHead := WeekStart;
        //                                                     //MESSAGE(UpdateWebHead + ' , ' + FORMAT(ChangeLog."Field No.") +' , ' + FORMAT(ChangeLog."Entry No.") + ' , '
        //                                                     //+ FORMAT(fieldNo));
        //                                                     SQLConnection.Execute(UpdateWebHead);

        //                                                     UpdateWebHead := 'update OMS_ORDER_MASTER_MAIN1 set MODIFICATION=1 where ' +
        //                                                                       'order_id =' + OrderId + '';
        //                                                     SQLConnection.Execute(UpdateWebHead);
        //                                                     //MESSAGE(ChangeLog."Field Name" +' Modified');
        //                                                     IF (fieldNo <> 12) THEN BEGIN
        //                                                         IF (Preval <> '') AND (PresVal <> '') THEN BEGIN
        //                                                             UpdateWebHead := 'insert into OMS_MESSAGE_SYSTEM(TRANS_ID,ORDER_ID,MODIFICATION_DATE,REMARKS,MODIFICATION,' +
        //                                                                'MODIFICATION_TYPE, PREV_VALUE, PRESENT_VALUE) Values ' +
        //                                                                '((select max(TRANS_ID)+1 from OMS_MESSAGE_SYSTEM),' + OrderId + '' +
        //                                                                ',sysdate,''' + 'Tender Modification' + ''',1,' + FORMAT(fieldNo) + ',''' + Preval + ''',''' + PresVal + ''')';
        //                                                         END ELSE
        //                                                             IF (PresVal <> '') THEN BEGIN
        //                                                                 UpdateWebHead := 'insert into OMS_MESSAGE_SYSTEM(TRANS_ID,ORDER_ID,MODIFICATION_DATE,REMARKS,MODIFICATION,' +
        //                                                                    'MODIFICATION_TYPE, PRESENT_VALUE) Values ' +
        //                                                                    '((select max(TRANS_ID)+1 from OMS_MESSAGE_SYSTEM),' + OrderId + '' +
        //                                                                    ',sysdate,''' + 'Tender Modification' + ''',1,' + FORMAT(fieldNo) + ',''' + PresVal + ''')';
        //                                                             END;
        //                                                         SQLConnection.Execute(UpdateWebHead);
        //                                                     END;
        //                                                 END;
        //                                             END;

        //                                         UNTIL ChangeLog.NEXT = 0;
        //         END;
        //         ChangeLog.RESET;
        //         ChangeLog.SETRANGE(ChangeLog."Primary Key Field 1 Value", TenderHeader."Tender No.");
        //         IF ChangeLog.FINDFIRST THEN BEGIN
        //             //  MESSAGE('Change log Deleted');
        //             ChangeLog.DELETEALL(TRUE);
        //         END;
        //         ChangeLog.RESET;
        //         ChangeLog.SETRANGE(ChangeLog."Primary Key Field 2 Value", TenderHeader."Tender No.");
        //         IF ChangeLog.FINDFIRST THEN BEGIN
        //             ChangeLog.DELETEALL(TRUE);
        //         END;

        //         MESSAGE(' Tender Modifications are Updated in OMS');
        //     END;
        //     SQLConnection.CommitTrans;
        //     RecordSet.Close;
        //     SQLConnection.Close;
        //     ConnectionOpen := 0;
    end;


    procedure TendertoBlanketorOrder(No: Text[60]; BlanketOrdorSaleOrder: Integer; TenderNo: Text[60]; PartialorFull: Integer);
    var
        Orderid: Text[30];
        WeekStart: Text[1000];
        CreationQuery: Text[1000];
        BlanketHeader: Record "Sales Header";
        Tender: Record "Tender Header";
        CustomerId: Integer;
        OrderValue: Integer;
        WeekEnd: Text[1000];
        SalesPerson: Text[30];
        Installation: Integer;
        RDSO: Integer;
        CustomerDate: Text[30];
        SaleDesc: Text[30];
        CompletionDate: Text[30];
        CustomerOrder: Text[70];
        CallletterReq: Text[30];
        Callletterrece: Text[30];
        CallletterExpir: Text[30];
        ChangeLog: Record "Change Log Entry";
        Preval: Text[250];
        DDate: Date;
        OrderStatus: Integer;
        TrckPerson: Text[30];
        TrackingQuery: Text[1000];
    begin

        //     IF ISCLEAR(SQLConnection) THEN
        //         CREATE(SQLConnection, FALSE, TRUE);//Rev01

        //     IF ISCLEAR(RecordSet) THEN
        //         CREATE(RecordSet, FALSE, TRUE);//Rev01

        //     IF ConnectionOpen <> 1 THEN BEGIN
        //         SQLConnection.ConnectionString := 'DSN=omserp;UID=omsuser;PASSWORD=management;SERVER=oracle_80;';
        //         SQLConnection.Open;
        //         ConnectionOpen := 1;
        //         SQLConnection.BeginTrans;
        //     END;

        //     RowCount := 0;

        //     IF PartialorFull = 1 THEN BEGIN
        //         //BlanketOrdorSaleOrder
        //         SQLQuery := 'select to_char(ORDER_ID)ORDER_ID from OMS_ORDER_MASTER_MAIN1  where ' +
        //                        ' TENDER_DESC= ''' + TenderNo + '''';
        //         // MESSAGE(SQLQuery);
        //         RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //         RowCount := 0;
        //         IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //             RecordSet.MoveFirst;
        //         WHILE NOT RecordSet.EOF DO BEGIN
        //             RowCount := RowCount + 1;
        //             WeekStart := FORMAT(RecordSet.Fields.Item('ORDER_ID').Value);
        //             RecordSet.MoveNext;
        //         END;
        //         IF RowCount = 0 THEN   // NO Tender
        //         BEGIN
        //             Tender.SETRANGE(Tender."Tender No.", TenderNo);
        //             IF Tender.FINDFIRST THEN BEGIN
        //                 TenderCreationOMS(Tender);
        //                 IF ConnectionOpen <> 1 THEN BEGIN
        //                     SQLConnection.ConnectionString := 'DSN=omserp;UID=omsuser;PASSWORD=management;SERVER=oracle_80;';
        //                     SQLConnection.Open;
        //                     SQLConnection.BeginTrans;
        //                     ConnectionOpen := 1;
        //                 END;

        //             END;
        //         END;
        //         SQLQuery := 'select to_char(ORDER_ID)ORDER_ID from OMS_ORDER_MASTER_MAIN1  where ' +
        //                     ' TENDER_DESC= ''' + TenderNo + '''';
        //         RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //         RowCount := 0;
        //         IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //             RecordSet.MoveFirst;
        //         WHILE NOT RecordSet.EOF DO BEGIN
        //             RowCount := RowCount + 1;
        //             WeekStart := FORMAT(RecordSet.Fields.Item('ORDER_ID').Value);
        //             RecordSet.MoveNext;
        //         END;
        //         // MESSAGE(WeekStart);
        //         SalesHeader.SETRANGE(SalesHeader."No.", No);
        //         IF SalesHeader.FINDFIRST THEN BEGIN
        //             SaleOrderCreationinOMS(SalesHeader);
        //             IF ConnectionOpen <> 1 THEN BEGIN
        //                 SQLConnection.ConnectionString := 'DSN=omserp;UID=omsuser;PASSWORD=management;SERVER=oracle_80;';
        //                 SQLConnection.Open;
        //                 SQLConnection.BeginTrans;
        //                 ConnectionOpen := 1;
        //             END;

        //             IF BlanketOrdorSaleOrder = 1 THEN BEGIN
        //                 SQLQuery := 'select to_char(ORDER_ID)ORDER_ID from OMS_ORDER_MASTER_MAIN1  where BLANKET_DESC= ''' + No + '''';
        //             END
        //             ELSE
        //                 SQLQuery := 'select to_char(ORDER_ID)ORDER_ID from OMS_ORDER_MASTER_MAIN1  where SALE_DESC= ''' + No + '''';
        //             RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //             RowCount := 0;
        //             IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                 RecordSet.MoveFirst;
        //             WHILE NOT RecordSet.EOF DO BEGIN
        //                 RowCount := RowCount + 1;
        //                 Orderid := FORMAT(RecordSet.Fields.Item('ORDER_ID').Value);
        //                 RecordSet.MoveNext;
        //             END;

        //             CreationQuery := 'update OMS_ORDER_MASTER_MAIN1 set OLD_ORDER_ID =' + WeekStart + ' ' +
        //                            ' ,TRACKING_PERSON_ID=''' + User + ''' where order_id=' + FORMAT(Orderid) + '';
        //             SQLConnection.Execute(CreationQuery);

        //         END;
        //     END ELSE BEGIN
        //         SQLQuery := 'select to_char(ORDER_ID)ORDER_ID from OMS_ORDER_MASTER_MAIN1  where TENDER_DESC= ''' + TenderNo + '''';
        //         // MESSAGE(SQLQuery+' Total Order Converted');
        //         RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //         RowCount := 0;
        //         IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //             RecordSet.MoveFirst;
        //         WHILE NOT RecordSet.EOF DO BEGIN
        //             RowCount := RowCount + 1;
        //             Orderid := FORMAT(RecordSet.Fields.Item('ORDER_ID').Value);
        //             RecordSet.MoveNext;
        //         END;
        //         IF RowCount = 0 THEN   // NO Tender
        //         BEGIN
        //             Tender.SETRANGE(Tender."Tender No.", TenderNo);
        //             IF Tender.FINDFIRST THEN BEGIN
        //                 TenderCreationOMS(Tender);
        //                 IF ConnectionOpen <> 1 THEN BEGIN
        //                     SQLConnection.ConnectionString := 'DSN=omserp;UID=omsuser;PASSWORD=management;SERVER=oracle_80;';
        //                     SQLConnection.Open;
        //                     SQLConnection.BeginTrans;
        //                     ConnectionOpen := 1;
        //                 END;
        //             END;
        //         END;
        //         SQLQuery := 'select  to_char(ORDER_ID)ORDER_ID,to_char(ORDER_TRACKING_STATUS)ODS,' +
        //                   'to_char(LAST_MODIFY_DATE,''' + 'dd-mon-yy' + ''')Ls,'
        //       +
        //                   'ENTRY_PERSON,to_char(EXPECTED_WEEK_START_DATE,''' + 'dd-mon-yy' + ''')exps,to_char(ORDER_PRIORITY)OP,' +
        //                   'to_char(STATUS)st,NVL(to_char(REMARKS),'' '')re, ' +
        //                   ' NVL(to_char(CAL_LETTER_EXP_DATE,''' + 'dd-mon-yy' + '''),'' '')cExp,' +
        //                   'to_char(CUSTOMER_EXPECTING_DATE,''' + 'dd-mon-yy' + ''')cs, ' +
        //                   ' to_char(EXPECTED_WEEK_END_DATE,''' + 'dd-mon-yy' + ''')expe' +
        //                   ',to_char(ORDER_VALUE)Ov,NVL(to_char(ORDER_COMPLETION_DATE,''' + 'dd-mon-yy' + '''),'' '')Orcd,' +
        //                   'NVL(to_char(TRACKING_PERSON_ID),'' '')trk from OMS_ORDER_MASTER_MAIN1 where ' +
        //                   ' BLANKET_DESC= ''' + BlanketHeader."No." + '''';

        //         RecordSet := SQLConnection.Execute(SQLQuery, RowCount);

        //         IF RowCount = 0 THEN
        //             ERROR('Blanket Order does not exist in OMS Please Forward to OMS');

        //         IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //             RecordSet.MoveFirst;

        //         WHILE NOT RecordSet.EOF DO BEGIN
        //             Orderid := FORMAT(RecordSet.Fields.Item('ORDER_ID').Value);
        //             IF FORMAT(RecordSet.Fields.Item('ODS').Value) <> '' THEN
        //                 EVALUATE(CustomerId, FORMAT(RecordSet.Fields.Item('ODS').Value))
        //             ELSE
        //                 CustomerId := 0;
        //             CustomerOrder := FORMAT(RecordSet.Fields.Item('Ls').Value);
        //             WeekStart := FORMAT(RecordSet.Fields.Item('exps').Value);
        //             SalesPerson := FORMAT(RecordSet.Fields.Item('ENTRY_PERSON').Value);
        //             IF FORMAT(RecordSet.Fields.Item('Ov').Value) <> '' THEN
        //                 EVALUATE(OrderValue, FORMAT(RecordSet.Fields.Item('Ov').Value))
        //             ELSE
        //                 OrderValue := 0;
        //             IF FORMAT(RecordSet.Fields.Item('OP').Value) <> '' THEN
        //                 EVALUATE(Installation, FORMAT(RecordSet.Fields.Item('OP').Value))
        //             ELSE
        //                 Installation := 0;
        //             IF FORMAT(RecordSet.Fields.Item('St').Value) <> '' THEN
        //                 EVALUATE(RDSO, FORMAT(RecordSet.Fields.Item('St').Value))
        //             ELSE
        //                 RDSO := 0;
        //             IF FORMAT(RecordSet.Fields.Item('Orcd').Value) <> ' ' THEN
        //                 CompletionDate := FORMAT(RecordSet.Fields.Item('Orcd').Value)
        //             ELSE
        //                 CompletionDate := ' ';
        //             CustomerDate := FORMAT(RecordSet.Fields.Item('cs').Value);
        //             IF FORMAT(RecordSet.Fields.Item('re').Value) <> '' THEN
        //                 WeekEnd := FORMAT(RecordSet.Fields.Item('re').Value)
        //             ELSE
        //                 WeekEnd := ' ';
        //             IF CompletionDate = ' ' THEN
        //                 CompletionDate := CustomerDate;
        //             IF FORMAT(RecordSet.Fields.Item('trk').Value) <> '' THEN
        //                 TrckPerson := FORMAT(RecordSet.Fields.Item('trk').Value)
        //             ELSE
        //                 TrckPerson := SalesPerson;

        //             IF (FORMAT(RecordSet.Fields.Item('re').Value) = ' ') THEN
        //                 TrackingQuery := 'insert into OMS_ORDER_TRACKING_MAIN1(TRANS_ID,Order_Id,MODIFICATION_TYPE,MODIFICATION_DATE,' +
        //                       'ENTRY_EMPLOYEE_ID,PREV_EXPECT_WEEK_START,PREV_EXPECT_WEEK_END,PREV_ORDER_PRIORITY,PREV_QTY,Product_ID,PREV_STATUS' +
        //                       ',PREV_CUST_DATE,OLD_ORDER_VALUE,PREV_ORDER_COMPLETION_DATE,PREV_TRACKING_PERSON_ID) values(' +
        //                       '(select Max(TRANS_ID)+1 from OMS_ORDER_TRACKING_MAIN1 ),' +
        //                       '' + Orderid + ',' + FORMAT(CustomerId) + ',''' + CustomerOrder + ''',''' + SalesPerson + ''',''' + WeekStart + ''',' +
        //                       '''' + FORMAT(RecordSet.Fields.Item('expe').Value) + ''',' +
        //                       '' + FORMAT(Installation) + ',0,0,' + FORMAT(RDSO) + ',''' + CustomerDate + ''',' +
        //                       '''' + FORMAT(RecordSet.Fields.Item('Ov').Value) + ''',''' + CompletionDate + ''',''' + TrckPerson + ''') '
        //             ELSE
        //                 TrackingQuery := 'insert into OMS_ORDER_TRACKING_MAIN1(TRANS_ID,Order_Id,MODIFICATION_TYPE,MODIFICATION_DATE,' +
        //                   'ENTRY_EMPLOYEE_ID,PREV_EXPECT_WEEK_START,PREV_EXPECT_WEEK_END,PREV_ORDER_PRIORITY,PREV_QTY,Product_ID,PREV_STATUS' +
        //                   ',REMARKS,PREV_CUST_DATE,OLD_ORDER_VALUE,PREV_ORDER_COMPLETION_DATE,PREV_TRACKING_PERSON_ID) values(' +
        //                   '(select Max(TRANS_ID)+1 from OMS_ORDER_TRACKING_MAIN1 ),' +
        //                   '' + Orderid + ',' + FORMAT(CustomerId) + ',''' + CustomerOrder + ''',''' + SalesPerson + ''',''' + WeekStart + ''',' +
        //                   '''' + FORMAT(RecordSet.Fields.Item('expe').Value) + ''',' +
        //                   '' + FORMAT(Installation) + ',0,0,' + FORMAT(RDSO) + ',' +
        //                   '''' + WeekEnd + ''',''' + CustomerDate + ''',''' + FORMAT(RecordSet.Fields.Item('Ov').Value) + ''',''' + CompletionDate + '''' +
        //                   ',''' + TrckPerson + ''')';
        //             RecordSet.MoveNext;
        //             SQLConnection.Execute(TrackingQuery);
        //             // MESSAGE(TrackingQuery);
        //         END;

        //         IF BlanketOrdorSaleOrder = 1 THEN BEGIN
        //             CreationQuery := 'update OMS_ORDER_MASTER_MAIN1 set BLANKET_DESC =''' + No + ''',STATUS=6,TRACKING_PERSON_ID=''' + User + ''' ' +
        //                          ' , ORDER_TRACKING_STATUS=6 where TENDER_DESC= ''' + TenderNo + '''';
        //         END ELSE
        //             CreationQuery := 'update OMS_ORDER_MASTER_MAIN1 set SALE_DESC =''' + No + ''',STATUS=8,RELEASE_DATE=sysdate ' +
        //                          ',TRACKING_PERSON_ID=''' + User + ''' , ORDER_TRACKING_STATUS=6 where TENDER_DESC= ''' + TenderNo + '''';

        //         SQLConnection.Execute(CreationQuery);
        //         // MESSAGE( CreationQuery);


        //         /*
        //          SalesHeader.SETFILTER(SalesHeader."No.",No);
        //          IF SalesHeader.FINDSET THEN
        //          REPEAT
        //             MESSAGE(FORMAT(SalesHeader.COUNT));
        //             MESSAGE(SalesHeader."No." + '  ' +No);
        //             SaleOrderCreationinOMS(SalesHeader);
        //          UNTIL SalesHeader.NEXT=0;
        //           */

        //     END;
        //     /*   ChangeLog.RESET;
        //        ChangeLog.SETRANGE(ChangeLog."Primary Key Field 2 Value",No);
        //       // ChangeLog.SETRANGE(ChangeLog."Type of Change",ChangeLog."Type of Change"::Insertion);
        //        IF ChangeLog.FINDFIRST THEN
        //        BEGIN
        //          ChangeLog.DELETEALL(TRUE);
        //        END;*/

        //     IF BlanketOrdorSaleOrder = 1 THEN BEGIN
        //         MESSAGE('Tender to Blanket Order Released');
        //     END ELSE
        //         MESSAGE('Tender to Sale Order Released');
        //     SQLConnection.CommitTrans;
        //     RecordSet.Close;
        //     SQLConnection.Close;

    end;


    procedure RPOUpdationinOMS(Rec: Record "Production Order");
    begin


        /*IF ISCLEAR(SQLConnection) THEN
           CREATE(SQLConnection,False,True);//Rev01
        
        IF ISCLEAR(RecordSet) THEN
           CREATE(RecordSet,False,True);//Rev01
        
        WebRecStatus := Quotes+Text50001+Quotes;
        IF ConnectionOpen<>1 THEN
        BEGIN
           SQLConnection.ConnectionString:='DSN=omserp;UID=omsuser;PASSWORD=management;SERVER=oracle_80;';
           SQLConnection.Open;
           ConnectionOpen:=1;
           MESSAGE('OMS Connected');
        END;
        
        SQLQuery:='Update  OMS_ORDER_PLANNING_MAIN1 set PLAN_TYPE =1 where order_id =(select '+
                  ' Order_id from OMS_ORDER_MASTER_MAIN1 where sale_desc ='''+Rec."Sales Order No."+''')'+
                  ' and item_no ='''+Rec."Source No."+''' and QTY='+FORMAT(Rec.Quantity)+'';
        
        SQLConnection.Execute(SQLQuery);
        
        MESSAGE('Plan Freezed in OMS of this Order');
        
        RecordSet.Close;
        SQLConnection.Close;  */

    end;


    procedure OrderShipmentinOMS(No: Text[60]; ExportNo: Text[60]);
    var
        ExportOrdHeader: Record "Sales Shipment Header";
        ExportOrdLine: Record "Sales Shipment Line";
        Partial: Integer;
        CreationQuery: Text[1000];
        CustomerId: Integer;
        MasterOrder: Text[30];
        OrderValue: Integer;
        OrderId: Text[30];
        CompletionDate: Text[30];
        CustomerOrder: Text[70];
        ChangeLog: Record "Change Log Entry";
    begin

        /*IF ISCLEAR(SQLConnection) THEN
           CREATE(SQLConnection,False,True);//Rev01
        
        IF ISCLEAR(RecordSet) THEN
           CREATE(RecordSet,False,True);//Rev01
        
        IF ConnectionOpen<>1 THEN
        BEGIN
          SQLConnection.ConnectionString:='DSN=omserp;UID=omsuser;PASSWORD=management;SERVER=oracle_80;';
          SQLConnection.Open;
          ConnectionOpen:=1;
          MESSAGE('OMS Connected');
        END;
        
        SQLQuery:='Select Order_id from OMS_ORDER_MASTER_MAIN1 where sale_desc ='''+No+'''';
        //MESSAGE(SQLQuery);
        RecordSet:=SQLConnection.Execute(SQLQuery,RowCount);
        
         RowCount:=0;
         IF NOT((RecordSet.BOF) OR (RecordSet.EOF)) THEN
            RecordSet.MoveFirst;
         WHILE NOT RecordSet.EOF DO
         BEGIN
            RowCount:=RowCount+1;
            OrderId:=FORMAT(RecordSet.Fields.Item('ORDER_ID').Value);
            RecordSet.MoveNext;
         END;
        
        Partial:=0;
        SalesLine.SETRANGE(SalesLine."No.",No);
        IF SalesLine.FINDSET THEN
        REPEAT
        
           ExportOrdLine.SETRANGE(ExportOrdLine."No.",ExportNo);
           ExportOrdLine.SETRANGE(ExportOrdLine."Line No.",SalesLine."Line No.");
           ExportOrdLine.SETRANGE(ExportOrdLine.Type,ExportOrdLine.Type::Item);
           IF ExportOrdLine.FINDSET THEN
             REPEAT
             IF (ExportOrdLine.Quantity <> SalesLine.Quantity) AND (Partial=0) THEN  Partial:=1;
           UNTIL ExportOrdLine.NEXT=0;
        
        UNTIL SalesLine.NEXT=0;
         IF Partial =0 THEN
         BEGIN
             SQLQuery:='Update  OMS_ORDER_MASTER_MAIN1 set STATUS =14 where order_id =(select '+
                  ' Order_id from OMS_ORDER_MASTER_MAIN1 where sale_desc ='''+No+''')';
            // MESSAGE(SQLQuery);
             SQLConnection.Execute(SQLQuery);
         END ELSE
         BEGIN
           ExportOrdLine.SETRANGE(ExportOrdLine."No.",ExportNo);
           ExportOrdLine.SETRANGE(ExportOrdLine."Line No.",SalesLine."Line No.");
           ExportOrdLine.SETRANGE(ExportOrdLine.Type,ExportOrdLine.Type::Item);
           SQLQuery := 'select ORDER_ID from OMS_ORDER_MASTER_MAIN1 '+
                      ' where SALE_DESC ='''+No+''' and OLD_ORDER_ID is null ) '   ;
          // MESSAGE(SQLQuery);
           RecordSet := SQLConnection.Execute(SQLQuery,RowCount);
           RowCount := 0 ;
           IF RowCount = 0 THEN
              ERROR('Plan Pending Orders does not exist');
        
           IF NOT((RecordSet.BOF) OR (RecordSet.EOF)) THEN
              RecordSet.MoveFirst;
        
           WHILE NOT RecordSet.EOF DO
           BEGIN
              RowCount:= RowCount +1;
              MasterOrder:=FORMAT(RecordSet.Fields.Item('ORDER_ID').Value);
              RecordSet.MoveNext;
           END;
           IF RowCount>0 THEN
           BEGIN
        
              SQLQuery:='insert into OMS_ORDER_MASTER_MAIN1 (ORDER_ID, TENDER_NO, TENDER_DESC, BLANKET_DESC, SALE_DESC, STATUS,'+
                        'CUSTOMER_ID, ORDER_COMPLETION_PERIOD, ORDER_VALUE, EXPECTED_WEEK_START_DATE, EXPECTED_WEEK_END_DATE,'+
                        'ORDER_PRIORITY,INSTALLATION, RDSO, ORDER_ENTRY_DATE,ENTRY_PERSON, LAST_MODIFY_DATE, ORDER_TRACKING_STATUS'+
                        ',TENDER_OPEN_DATE, RELEASE_DATE, CUSTOMER_EXPECTING_DATE, OLD_ORDER_ID, REMARKS, CAL_LETTER_RECV,'+
                        'CAL_LETTER_EXP_DATE, CAL_LETTER_EXPIR_DATE, CAL_LETTER_REC_DATE, CUSTOMER_ORDER_NO, CONVERSION_NO, '+
                        'ORDER_COMPLETION_DATE, ROADPERMIT, ROADPERMIT_REC, ROADPERMIT_REC_DATE,ROADPERMIT_EXP_DATE, '+
                        ' DISPATCH_CONFIRMATION, DISPATCH_CONFIRM_DATE)select (select Max(ORDER_ID)+1 from OMS_ORDER_MASTER_MAIN1),'+
                        ' TENDER_NO, TENDER_DESC, BLANKET_DESC,SALE_DESC, 14, CUSTOMER_ID, ORDER_COMPLETION_PERIOD, ORDER_VALUE'+
                        ', EXPECTED_WEEK_START_DATE, EXPECTED_WEEK_END_DATE, ORDER_PRIORITY, INSTALLATION, RDSO, ORDER_ENTRY_DATE, '+
                            'ENTRY_PERSON, LAST_MODIFY_DATE, ORDER_TRACKING_STATUS, TENDER_OPEN_DATE, RELEASE_DATE, CUSTOMER_EXPECTING_DATE,
        '
        +
                        ''+FORMAT(MasterOrder)+', REMARKS, CAL_LETTER_RECV, CAL_LETTER_EXP_DATE, CAL_LETTER_EXPIR_DATE, '+
                        ' CAL_LETTER_REC_DATE, CUSTOMER_ORDER_NO, CONVERSION_NO, ORDER_COMPLETION_DATE, ROADPERMIT, ROADPERMIT_REC,'+
                        ' ROADPERMIT_REC_DATE,ROADPERMIT_EXP_DATE, DISPATCH_CONFIRMATION, DISPATCH_CONFIRM_DATE from '+
                        ' OMS_ORDER_MASTER_MAIN1 where order_id = '+FORMAT(MasterOrder)+'';
        
              SQLConnection.Execute(SQLQuery);
              SQLQuery := 'select to_char(Max(ORDER_ID)) Order_id from OMS_ORDER_MASTER_MAIN1 where sale_desc ='''+No+''' and '+
                          ' OLD_ORDER_ID is not null';
              RecordSet := SQLConnection.Execute(SQLQuery,RowCount);
        
              IF NOT((RecordSet.BOF) OR (RecordSet.EOF)) THEN
                RecordSet.MoveFirst;
        
              WHILE NOT RecordSet.EOF DO
              BEGIN
                 OrderId:=FORMAT(RecordSet.Fields.Item('Order_id').Value);
                // MESSAGE(OrderId);
                 RecordSet.MoveNext;
              END;
              ExportOrdLine.SETRANGE(ExportOrdLine."Document No.",No);
              ExportOrdLine.SETRANGE(ExportOrdLine.Type,ExportOrdLine.Type::Item);
              IF ExportOrdLine.FINDSET THEN BEGIN
              REPEAT
                 IF ExportOrdLine."RDSO Inspection Required"=TRUE THEN
                 BEGIN
                    CreationQuery := 'insert into OMS_ORDER_PRODUCTS_MAIN(ORDER_ID,PRODUCT_ID, QTY, LATEST_QTY, INSPECTION)'+
                     ' values('+OrderId+',(select distinct Product_id from OMS_PRODUCT_MASTER1 where item_no ='+
                     ''''+ExportOrdLine."No."+'''),'+FORMAT(ExportOrdLine.Quantity)+','+FORMAT(ExportOrdLine.Quantity)+',0)';
                 END ELSE
                 BEGIN
                    CreationQuery := 'insert into OMS_ORDER_PRODUCTS_MAIN(ORDER_ID,PRODUCT_ID, QTY, LATEST_QTY, INSPECTION)'+
                        ' values('+OrderId+',(select distinct Product_id from OMS_PRODUCT_MASTER1 where item_no ='''+ExportOrdLine."No."+'''
        ),
        '+
                    ''+FORMAT(ExportOrdLine.Quantity)+','+FORMAT(ExportOrdLine.Quantity)+',2)';
                 END;
               //  MESSAGE(CreationQuery);
        
                 IF CreationQuery<>'' THEN
                    SQLConnection.Execute(CreationQuery);
        
                 CreationQuery := 'update OMS_ORDER_PRODUCTS_MAIN set  LATEST_QTY= LATEST_QTY-'+FORMAT(ExportOrdLine.Quantity)+' where '+
                     ' Product_id in(select distinct Product_id from OMS_PRODUCT_MASTER1 where item_no ='+
                     ''''+ExportOrdLine."No."+''') and Order_id ='+FORMAT(MasterOrder)+'';
                 IF CreationQuery<>'' THEN
                    SQLConnection.Execute(CreationQuery);
        
        
              UNTIL ExportOrdLine.NEXT=0
              END;
        
              SQLQuery:='Update OMS_ORDER_MASTER_MAIN1 set STATUS =14 where order_id =(select '+
                     ' Order_id from OMS_ORDER_MASTER_MAIN1 where sale_desc ='''+No+''')';
            //  MESSAGE(SQLQuery);
              SQLConnection.Execute(SQLQuery);
        
           END;
        
         END;
        
        RecordSet.Close;
        SQLConnection.Close; */

    end;


    procedure PRMRefresh();
    var
        lDate: Date;
        ProdHeader: Record "Production BOM Header";
        ProdLine: Record "Production BOM Line";
        ProdOrder: Record "Production Order";
        ProdOrderLine: Record "Prod. Order Line";
        ItemLedger: Record "Item Ledger Entry";
        ProdVersion: Record "Production BOM Version";
        WeekStart: Text[1000];
        WeekEnd: Text[1000];
        VersCode: Text[60];
        EntryNO: Integer;
        CDATE: Date;
        SoldPins: Decimal;
        SMdPins: Decimal;
        DipPins: Decimal;
        Fixings: Decimal;
        bench: Decimal;
        Description: Text[80];
        temp_date: Date;
    begin


        // IF ISCLEAR(SQLConnection) THEN
        //     CREATE(SQLConnection, FALSE, TRUE);//Rev01

        // IF ISCLEAR(RecordSet) THEN
        //     CREATE(RecordSet, FALSE, TRUE);//Rev01

        // IF ConnectionOpen <> 1 THEN BEGIN
        //     SQLConnection.ConnectionString := 'DSN=prmuser;UID=prmuser;PASSWORD=mrpffe06;SERVER=oracle_80;';
        //     SQLConnection.Open;
        //     ConnectionOpen := 1;
        // END;

        // //**************************** Production BOM Header and Line ****************************


        // SQLQuery := 'select to_char(max(CREATION_DATE),''' + 'dd/mm/yy' + ''')C_DATE from ERP_PRODUCTION_BOM_HEADER1';
        // //MESSAGE(SQLQuery);
        // RecordSet := SQLConnection.Execute(SQLQuery, RowCount);

        // IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //     RecordSet.MoveFirst;

        // WHILE NOT RecordSet.EOF DO BEGIN
        //     //MESSAGE(FORMAT(RecordSet.Fields.Item('C_DATE').Value));   //ANIL  commented in order to run the job queues
        //     EVALUATE(lDate, FORMAT(RecordSet.Fields.Item('C_DATE').Value));
        //     RecordSet.MoveNext;
        // END;
        // ProdHeader.RESET;
        // ProdHeader.SETFILTER(ProdHeader."Creation Date", '>=' + FORMAT(lDate));


        // IF ProdHeader.FINDSET THEN
        //         REPEAT
        //             SQLQuery := 'select to_char(NO_)No from ERP_PRODUCTION_BOM_HEADER1 where NO_=''' + ProdHeader."No." + '''';
        //             //MESSAGE(SQLQuery);
        //             RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //             RowCount := 0;
        //             IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                 RecordSet.MoveFirst;
        //             WHILE NOT RecordSet.EOF DO BEGIN
        //                 RowCount := RowCount + 1;
        //                 RecordSet.MoveNext;
        //             END;
        //             IF RowCount > 0 THEN BEGIN
        //                 WeekStart := 'DELETE FROM ERP_PRODUCTION_BOM_LINE1 WHERE PRODUCTION_BOM_NO=''' + ProdHeader."No." + '''';
        //                 SQLConnection.Execute(WeekStart);

        //                 WeekStart := 'DELETE FROM ERP_PRODUCTION_BOM_HEADER1 WHERE NO_=''' + ProdHeader."No." + '''';
        //                 SQLConnection.Execute(WeekStart);

        //             END;
        //             EVALUATE(bench, FORMAT(ROUND(ProdHeader."Bench Mark Time(In Hours)", 1)));
        //             EVALUATE(SoldPins, FORMAT(ROUND(ProdHeader."Total Soldering Points", 1)));
        //             EVALUATE(SMdPins, FORMAT(ROUND(ProdHeader."Total Soldering Points SMD", 1)));
        //             EVALUATE(DipPins, FORMAT(ROUND(ProdHeader."Total Soldering Points DIP", 1)));
        //             EVALUATE(Fixings, FORMAT(ROUND(ProdHeader."Total No. of Fixing Holes", 1)));
        //             //MESSAGE('SolderPins '+FORMAT(ROUND(SoldPins)));
        //             Description := CONVERTSTR(ProdHeader.Description, '''', ' ');

        //             WeekStart := 'insert into ERP_PRODUCTION_BOM_HEADER1(';
        //             WeekEnd := '';
        //             IF ProdHeader.Description <> '' THEN BEGIN
        //                 WeekStart := WeekStart + ' DESCRIPTION,';
        //                 WeekEnd := WeekEnd + '''' + Description + ''',';
        //             END;
        //             WeekStart := WeekStart + 'BENCHMARK ,TOTAL_SOLDERING_PINS,TOTAL_SOLDERING_PINS_SMD,TOTAL_SOLDERING_PINS_DIP, ' +
        //                         'TOTAL_FIXING_HOLES,CREATION_DATE,LAST_DATE,NO_) Values(';
        //             WeekEnd := WeekEnd + '' + CommaRemoval(FORMAT(bench)) + ',' + CommaRemoval(FORMAT(SoldPins)) + ',' + CommaRemoval(FORMAT(SMdPins)) + ',' + CommaRemoval(FORMAT(DipPins)) + ',' +
        //             '' + CommaRemoval(FORMAT(Fixings)) + ',';
        //             WeekEnd := WeekEnd + '''' + FORMAT(ProdHeader."Creation Date", 0, '<Day>-<Month Text,3>-<Year4>') + ''',' +
        //             '''' + FORMAT(ProdHeader."Last Date Modified", 0, '<Day>-<Month Text,3>-<Year4>') + ''',''' + ProdHeader."No." + ''')';
        //             WeekStart := WeekStart + WeekEnd;
        //             //  MESSAGE(WeekStart);
        //             IF WeekStart <> '' THEN
        //                 SQLConnection.Execute(WeekStart);


        //             ProdVersion.SETRANGE(ProdVersion."Production BOM No.", ProdHeader."No.");
        //             ProdVersion.SETRANGE(ProdVersion.Status, ProdVersion.Status::Certified);
        //             IF ProdVersion.FINDSET THEN
        //                     REPEAT
        //                         VersCode := ProdVersion."Version Code";
        //                     UNTIL ProdVersion.NEXT = 0;

        //             ProdLine.SETRANGE(ProdLine."Production BOM No.", ProdHeader."No.");
        //             ProdLine.SETRANGE(ProdLine."Version Code", VersCode);
        //             IF ProdLine.FINDSET THEN
        //                     REPEAT
        //                         WeekStart := 'insert into ERP_PRODUCTION_BOM_LINE1(';
        //                         WeekEnd := '';
        //                         IF ProdHeader.Description <> '' THEN BEGIN
        //                             WeekStart := WeekStart + ' DESCRIPTION,';
        //                             Description := CONVERTSTR(ProdHeader.Description, '''', ' ');
        //                             WeekEnd := WeekEnd + '''' + Description + ''',';
        //                         END;

        //                         EVALUATE(bench, FORMAT(ROUND(ProdLine."Quantity per", 0.01)));
        //                         EVALUATE(SoldPins, FORMAT(ROUND(ProdLine."No. of Opportunities", 0.01)));
        //                         EVALUATE(SMdPins, FORMAT(ROUND(ProdLine."No. of Pins", 0.01)));
        //                         EVALUATE(DipPins, FORMAT(ROUND(ProdLine."No. of Soldering Points", 0.01)));
        //                         EVALUATE(Fixings, FORMAT(ROUND(ProdLine."No. of Fixing Holes", 0.01)));
        //                         WeekStart := WeekStart + 'QUANTITY_PER,NO_OF_OPPORTUNITIES, NO_OF_PINS, NO_OF_SOLDERING_POINTS,NO_OF_FIXING_HOLES, ' +
        //                                   'TYPE_OF_SOLDER,PRODUCTION_BOM_NO, TYPE, NO) Values(';
        //                         WeekEnd := WeekEnd + '' + CommaRemoval(FORMAT(bench)) + ',' + CommaRemoval(FORMAT(SoldPins)) + ',' + CommaRemoval(FORMAT(SMdPins)) + ',' + CommaRemoval(FORMAT(DipPins)) + ',' +
        //                          '' + CommaRemoval(FORMAT(Fixings)) + ',''' + FORMAT(ProdLine."Type of Solder") + ''',' +
        //                          '''' + FORMAT(ProdLine."Production BOM No.") + ''',''' + FORMAT(ProdLine.Type) + ''',''' + ProdLine."No." + ''')';
        //                         WeekStart := WeekStart + WeekEnd;
        //                         //MESSAGE(WeekStart);
        //                         IF WeekStart <> '' THEN
        //                             SQLConnection.Execute(WeekStart);

        //                     UNTIL ProdLine.NEXT = 0;

        //         UNTIL ProdHeader.NEXT = 0;

        // // added by vijaya   FOR UPDATING LAST UPDATED FIELDS
        // ProdHeader.RESET;
        // ProdLine.RESET;
        // /*SQLQuery:='select to_char(max(LAST_DATE),'''+'dd/mm/yy'+''')C_DATE from ERP_PRODUCTION_BOM_HEADER1';
        // //MESSAGE(SQLQuery);
        // RecordSet:=SQLConnection.Execute(SQLQuery,RowCount);

        // IF NOT((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //    RecordSet.MoveFirst;

        // WHILE NOT RecordSet.EOF DO
        // BEGIN
        //    EVALUATE(lDate,FORMAT(RecordSet.Fields.Item('C_DATE').Value));
        //    RecordSet.MoveNext;
        // END;*/

        // ProdHeader.SETFILTER(ProdHeader."Last Date Modified", '>=' + FORMAT(lDate));
        // //ProdHeader.SETFILTER(ProdHeader."No.",'ECPBPCB02335');
        // IF ProdHeader.FINDSET THEN
        //         REPEAT
        //             SQLQuery := 'select to_char(NO_)No from ERP_PRODUCTION_BOM_HEADER1 where NO_=''' + ProdHeader."No." + '''';
        //             //MESSAGE(SQLQuery);
        //             RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //             RowCount := 0;
        //             IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                 RecordSet.MoveFirst;
        //             WHILE NOT RecordSet.EOF DO BEGIN
        //                 RowCount := RowCount + 1;
        //                 RecordSet.MoveNext;
        //             END;
        //             IF RowCount > 0 THEN BEGIN
        //                 WeekStart := 'DELETE FROM ERP_PRODUCTION_BOM_LINE1 WHERE PRODUCTION_BOM_NO=''' + ProdHeader."No." + '''';
        //                 SQLConnection.Execute(WeekStart);

        //                 WeekStart := 'DELETE FROM ERP_PRODUCTION_BOM_HEADER1 WHERE NO_=''' + ProdHeader."No." + '''';
        //                 SQLConnection.Execute(WeekStart);

        //             END;
        //             EVALUATE(bench, FORMAT(ROUND(ProdHeader."Bench Mark Time(In Hours)", 0.01)));
        //             EVALUATE(SoldPins, FORMAT(ROUND(ProdHeader."Total Soldering Points", 0.01)));
        //             EVALUATE(SMdPins, FORMAT(ROUND(ProdHeader."Total Soldering Points SMD", 0.01)));
        //             EVALUATE(DipPins, FORMAT(ROUND(ProdHeader."Total Soldering Points DIP", 0.01)));
        //             EVALUATE(Fixings, FORMAT(ROUND(ProdHeader."Total No. of Fixing Holes", 0.01)));
        //             //MESSAGE('SolderPins '+FORMAT(ROUND(SoldPins)));
        //             Description := CONVERTSTR(ProdHeader.Description, '''', ' ');

        //             WeekStart := 'insert into ERP_PRODUCTION_BOM_HEADER1(';
        //             WeekEnd := '';
        //             IF ProdHeader.Description <> '' THEN BEGIN
        //                 WeekStart := WeekStart + ' DESCRIPTION,';
        //                 WeekEnd := WeekEnd + '''' + Description + ''',';
        //             END;
        //             WeekStart := WeekStart + 'BENCHMARK ,TOTAL_SOLDERING_PINS,TOTAL_SOLDERING_PINS_SMD,TOTAL_SOLDERING_PINS_DIP, ' +
        //                         'TOTAL_FIXING_HOLES,CREATION_DATE,LAST_DATE,NO_) Values(';
        //             WeekEnd := WeekEnd + '' + CommaRemoval(FORMAT(bench)) + ',' + CommaRemoval(FORMAT(SoldPins)) + ',' + CommaRemoval(FORMAT(SMdPins)) + ',' + CommaRemoval(FORMAT(DipPins)) + ',' +
        //             '' + CommaRemoval(FORMAT(Fixings)) + ',';
        //             WeekEnd := WeekEnd + '''' + FORMAT(ProdHeader."Creation Date", 0, '<Day>-<Month Text,3>-<Year4>') + ''',' +
        //             '''' + FORMAT(ProdHeader."Last Date Modified", 0, '<Day>-<Month Text,3>-<Year4>') + ''',''' + ProdHeader."No." + ''')';
        //             WeekStart := WeekStart + WeekEnd;
        //             //  MESSAGE(WeekStart);
        //             IF WeekStart <> '' THEN
        //                 SQLConnection.Execute(WeekStart);


        //             ProdVersion.SETRANGE(ProdVersion."Production BOM No.", ProdHeader."No.");
        //             ProdVersion.SETRANGE(ProdVersion.Status, ProdVersion.Status::Certified);
        //             IF ProdVersion.FINDSET THEN
        //                     REPEAT
        //                         VersCode := ProdVersion."Version Code";
        //                     UNTIL ProdVersion.NEXT = 0;

        //             ProdLine.SETRANGE(ProdLine."Production BOM No.", ProdHeader."No.");
        //             ProdLine.SETRANGE(ProdLine."Version Code", VersCode);
        //             IF ProdLine.FINDSET THEN
        //                     REPEAT
        //                         WeekStart := 'insert into ERP_PRODUCTION_BOM_LINE1(';
        //                         WeekEnd := '';
        //                         IF ProdHeader.Description <> '' THEN BEGIN
        //                             WeekStart := WeekStart + ' DESCRIPTION,';
        //                             Description := CONVERTSTR(ProdHeader.Description, '''', ' ');
        //                             WeekEnd := WeekEnd + '''' + Description + ''',';
        //                         END;

        //                         EVALUATE(bench, FORMAT(ROUND(ProdLine."Quantity per", 0.01)));
        //                         EVALUATE(SoldPins, FORMAT(ROUND(ProdLine."No. of Opportunities", 0.01)));
        //                         EVALUATE(SMdPins, FORMAT(ROUND(ProdLine."No. of Pins", 0.01)));
        //                         EVALUATE(DipPins, FORMAT(ROUND(ProdLine."No. of Soldering Points", 0.01)));
        //                         EVALUATE(Fixings, FORMAT(ROUND(ProdLine."No. of Fixing Holes", 0.01)));
        //                         WeekStart := WeekStart + 'QUANTITY_PER,NO_OF_OPPORTUNITIES, NO_OF_PINS, NO_OF_SOLDERING_POINTS,NO_OF_FIXING_HOLES, ' +
        //                                   'TYPE_OF_SOLDER,PRODUCTION_BOM_NO, TYPE, NO) Values(';
        //                         WeekEnd := WeekEnd + '' + CommaRemoval(FORMAT(bench)) + ',' + CommaRemoval(FORMAT(SoldPins)) + ',' + CommaRemoval(FORMAT(SMdPins)) + ',' + CommaRemoval(FORMAT(DipPins)) + ',' +
        //                          '' + CommaRemoval(FORMAT(Fixings)) + ',''' + FORMAT(ProdLine."Type of Solder") + ''',' +
        //                          '''' + FORMAT(ProdLine."Production BOM No.") + ''',''' + FORMAT(ProdLine.Type) + ''',''' + ProdLine."No." + ''')';
        //                         WeekStart := WeekStart + WeekEnd;
        //                         //MESSAGE(WeekStart);
        //                         IF WeekStart <> '' THEN
        //                             SQLConnection.Execute(WeekStart);

        //                     UNTIL ProdLine.NEXT = 0;

        //         UNTIL ProdHeader.NEXT = 0;
        // // end by vijaya


        // MESSAGE('Production BOMs are Refreshed'); // commented in order to run the job queues

        // //*********************************** Production Order and Line *************************************

        // SQLQuery := 'select to_char(max(CREATION_DATE),''' + 'dd/mm/yy' + ''')C_DATE from ERP_PRODUCTION_ORDER1';
        // //MESSAGE(SQLQuery);
        // RecordSet := SQLConnection.Execute(SQLQuery, RowCount);

        // IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //     RecordSet.MoveFirst;

        // WHILE NOT RecordSet.EOF DO BEGIN
        //     EVALUATE(CDATE, FORMAT(RecordSet.Fields.Item('C_DATE').Value));
        //     RecordSet.MoveNext;
        // END;

        // //ProdOrder.SETFILTER(ProdOrder."Creation Date", '>='+FORMAT(CDATE));   // Commented by Pranavi on 02-09-2017
        // // commented by vishnu for dumping the not found orders to prm


        // ProdOrder.SETFILTER(ProdOrder."Last Date Modified", '>=' + FORMAT(CDATE));   // Added by Pranavi on 02-09-2017
        // //ProdOrder.SETRANGE(ProdOrder."No.",'RVB19SCC0002');
        // IF ProdOrder.FINDSET THEN
        //         REPEAT
        //             SQLQuery := 'select to_char(NO)No from ERP_PRODUCTION_ORDER1 where NO=''' + ProdOrder."No." + '''';
        //             RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //             RowCount := 0;
        //             IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                 RecordSet.MoveFirst;
        //             WHILE NOT RecordSet.EOF DO BEGIN
        //                 RowCount := RowCount + 1;
        //                 RecordSet.MoveNext;
        //             END;
        //             IF RowCount > 0 THEN BEGIN
        //                 WeekStart := 'DELETE FROM ERP_PRODUCTION_ORDER1 WHERE NO=''' + ProdOrder."No." + '''';
        //                 SQLConnection.Execute(WeekStart);
        //             END;
        //             ProdOrderLine.SETRANGE(ProdOrderLine."Prod. Order No.", ProdOrder."No.");
        //             IF ProdOrderLine.FINDSET THEN
        //                 REPEAT
        //                         Description := CONVERTSTR(ProdOrder.Description, '''', ' ');
        //                     WeekStart := 'insert into ERP_PRODUCTION_ORDER1( NO, STATUS, DESCRIPTION, CREATION_DATE, BOM_NO, LAST_DATE, LINE_NO,' +
        //                                                                   'ITEM_SUB_GROUP_CODE,PROD_GROUP_CODE)' +
        //                                ' values( ''' + ProdOrderLine."Prod. Order No." + ''',''' + FORMAT(ProdOrder.Status) + ''',' +
        //                                ' ''' + Description + ''',''' + FORMAT(ProdOrder."Creation Date", 0, '<Day>-<Month Text,3>-<Year4>') + ''',' +
        //                                '''' + ProdOrderLine."Item No." + ''',' +
        //                                '''' + FORMAT(ProdOrder."Last Date Modified", 0, '<Day>-<Month Text,3>-<Year4>') + '''' +
        //                                ',' + FORMAT(ProdOrderLine."Line No.") + ',''' + ProdOrder."Item Sub Group Code" + ''',' +
        //                                '''' + ProdOrder."Product Group Code" + ''')';

        //                     // MESSAGE(WeekStart);
        //                     IF WeekStart <> '' THEN
        //                         SQLConnection.Execute(WeekStart);
        //                 UNTIL ProdOrderLine.NEXT = 0;

        //         UNTIL ProdOrder.NEXT = 0;

        // MESSAGE('Production Orders are Refreshed'); //commented in order to run the job queues

        // //*************************** Item Ledger Entry ***********************************

        // SQLQuery := 'select to_char(max(Entry_no))EntryNO from ERP_ITEM_LEDGER_ENTRY1';
        // //MESSAGE(SQLQuery);
        // RecordSet := SQLConnection.Execute(SQLQuery, RowCount);

        // IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //     RecordSet.MoveFirst;

        // WHILE NOT RecordSet.EOF DO BEGIN
        //     EVALUATE(EntryNO, FORMAT(RecordSet.Fields.Item('EntryNO').Value));
        //     RecordSet.MoveNext;
        // END;

        // ItemLedger.RESET;
        // // VISHNU FOR ILE DUMPING
        // ItemLedger.SETCURRENTKEY("ITL Doc No.", "ITL Doc Line No.", "ITL Doc Ref Line No.", "Serial No.");
        // //ItemLedger.SETRANGE(ItemLedger."ITL Doc No.",'AIA18TLC0013','AIA18TLC0014');
        // //ItemLedger.SETFILTER(ItemLedger."ITL Doc No.",'WRA18SUP0002');
        // //'LEV18SUP0002','MSK18SLP0002','NRF18SUP0001','SEC18SUP00013','WRA18SUP0002','AIA18TLC0001','AIA18TLC0002','AIA18TLC0013','AIA18TLC0014'
        // ItemLedger.SETFILTER(ItemLedger."Entry No.", '>' + FORMAT(EntryNO));
        // ItemLedger.SETRANGE(ItemLedger."Entry Type", ItemLedger."Entry Type"::Transfer);
        // ItemLedger.SETRANGE(ItemLedger."Location Code", 'PROD');
        // ItemLedger.SETRANGE(ItemLedger."Product Group Code", 'PCB');
        // IF ItemLedger.FINDSET THEN
        //     REPEAT
        //             WeekStart := 'insert into ERP_ITEM_LEDGER_ENTRY1(ENTRY_NO,ENTRY_TYPE, PRODUCT_GROUP_CODE, SERIAL_NO, ITL_DOC_NO,' +
        //                        ' ITL_DOC_LINE_NO, POST_DATE, LOC_CODE,ITL_REF_LINE_NO ) values(' +
        //                        ' ' + FORMAT(ItemLedger."Entry No.") + ',''' + FORMAT(ItemLedger."Entry Type") + ''',' +
        //                        ' ''' + ItemLedger."Product Group Code" + ''',''' + ItemLedger."Serial No." + ''',' +
        //                        '''' + ItemLedger."ITL Doc No." + ''',' + FORMAT(ItemLedger."ITL Doc Line No.") + ',' +
        //                        '''' + FORMAT(ItemLedger."Posting Date", 0, '<Day>-<Month Text,3>-<Year4>') + ''',' +
        //                        '''' + ItemLedger."Location Code" + ''',' + FORMAT(ItemLedger."ITL Doc Ref Line No.") + ')';
        //         // MESSAGE(WeekStart);
        //         IF WeekStart <> '' THEN
        //             SQLConnection.Execute(WeekStart);

        //     UNTIL ItemLedger.NEXT = 0;

        // MESSAGE('serial Numbers are Refreshed'); //commented in order to run the job queues

        // RecordSet.Close;
        // SQLConnection.Close;

    end;


    procedure ProdBOMHeadertoPRM(Rec: Record "Production BOM Header");
    var
        WeekStart: Text[1000];
        WeekEnd: Text[1000];
        ProdOrdLine: Record "Production BOM Line";
        SoldType: Text[30];
        ProdVersion: Record "Production BOM Version";
        VersCode: Text[60];
        Description: Text[250];
        SoldPins: Decimal;
        SMdPins: Decimal;
        DipPins: Decimal;
        Fixings: Decimal;
        bench: Decimal;
    begin

        // IF ISCLEAR(SQLConnection) THEN
        //     CREATE(SQLConnection, FALSE, TRUE);//Rev01

        // IF ISCLEAR(RecordSet) THEN
        //     CREATE(RecordSet, FALSE, TRUE);//Rev01

        // IF ConnectionOpen <> 1 THEN BEGIN
        //     SQLConnection.ConnectionString := 'DSN=prmuser;UID=prmuser;PASSWORD=mrpffe06;SERVER=oracle_80;';
        //     SQLConnection.Open;
        //     ConnectionOpen := 1;
        //  MESSAGE('PRM Connected');


        // SQLQuery := 'select to_char(NO_)No from ERP_PRODUCTION_BOM_HEADER1 where NO_=''' + Rec."No." + '''';
        // MESSAGE(SQLQuery);
        //   RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        // RowCount := 0;
        // IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //     RecordSet.MoveFirst;
        // WHILE NOT RecordSet.EOF DO BEGIN
        //     RowCount := RowCount + 1;
        //     RecordSet.MoveNext;
        // END;
        // IF RowCount > 0 THEN BEGIN
        //     WeekStart := 'DELETE FROM ERP_PRODUCTION_BOM_LINE1 WHERE PRODUCTION_BOM_NO=''' + Rec."No." + '''';
        //     SQLConnection.Execute(WeekStart);

        //     WeekStart := 'DELETE FROM  ERP_PRODUCTION_BOM_HEADER1 WHERE NO_=''' + Rec."No." + '''';
        //     SQLConnection.Execute(WeekStart);
        //     // MESSAGE( WeekStart);
        // END;
        // WeekStart := 'insert into ERP_PRODUCTION_BOM_HEADER1(';
        // WeekEnd := '';
        // IF Rec.Description <> '' THEN BEGIN
        //     WeekStart := WeekStart + ' DESCRIPTION,';
        //     Description := CONVERTSTR(Rec.Description, '''', ' ');
        //     WeekEnd := WeekEnd + '''' + Description + ''',';
        // END;
        // EVALUATE(bench, FORMAT(ROUND(Rec."Bench Mark Time(In Hours)", 0.01)));
        // EVALUATE(SoldPins, FORMAT(ROUND(Rec."Total Soldering Points", 0.01)));
        // EVALUATE(SMdPins, FORMAT(ROUND(Rec."Total Soldering Points SMD", 0.01)));
        // EVALUATE(DipPins, FORMAT(ROUND(Rec."Total Soldering Points DIP", 0.01)));
        // EVALUATE(Fixings, FORMAT(ROUND(Rec."Total No. of Fixing Holes", 0.01)));

        // WeekStart := WeekStart + 'BENCHMARK ,TOTAL_SOLDERING_PINS,TOTAL_SOLDERING_PINS_SMD,TOTAL_SOLDERING_PINS_DIP, ' +
        //             'TOTAL_FIXING_HOLES,CREATION_DATE,LAST_DATE,NO_) Values(';
        // WeekEnd := WeekEnd + '' + DELCHR(CommaRemoval(FORMAT(bench)), '=', ',') + ',' + DELCHR(CommaRemoval(FORMAT(SoldPins)), '=', ',') + ',' +
        // '' + DELCHR(CommaRemoval(FORMAT(SMdPins)), '=', ',') + ',' + DELCHR(CommaRemoval(FORMAT(DipPins)), '=', ',') + ',' + DELCHR(CommaRemoval(FORMAT(Fixings)), '=', ',') + ',';
        // WeekEnd := WeekEnd + '''' + FORMAT(Rec."Creation Date", 0, '<Day>-<Month Text,3>-<Year4>') + ''',' +
        // '''' + FORMAT(Rec."Last Date Modified", 0, '<Day>-<Month Text,3>-<Year4>') + ''',''' + Rec."No." + ''')';
        // WeekStart := WeekStart + WeekEnd;
        // //MESSAGE(WeekStart);
        // IF WeekStart <> '' THEN
        //     SQLConnection.Execute(WeekStart);
        // ProdVersion.SETRANGE(ProdVersion."Production BOM No.", Rec."No.");
        // ProdVersion.SETRANGE(ProdVersion.Status, ProdVersion.Status::Certified);
        // IF ProdVersion.FINDSET THEN
        //         REPEAT
        //             VersCode := ProdVersion."Version Code";
        //         UNTIL ProdVersion.NEXT = 0;

        // ProdOrdLine.SETRANGE(ProdOrdLine."Production BOM No.", Rec."No.");
        // ProdOrdLine.SETRANGE(ProdOrdLine."Version Code", VersCode);
        // IF ProdOrdLine.FINDSET THEN
        //     REPEAT
        //             WeekStart := 'insert into ERP_PRODUCTION_BOM_LINE1(';
        //         WeekEnd := '';
        //         IF Rec.Description <> '' THEN BEGIN
        //             WeekStart := WeekStart + ' DESCRIPTION,';
        //             Description := CONVERTSTR(ProdOrdLine.Description, '''', ' ');
        //             WeekEnd := WeekEnd + '''' + Description + ''',';
        //         END;
        //         EVALUATE(bench, FORMAT(ROUND(ProdOrdLine."Quantity per", 0.01)));
        //         EVALUATE(SoldPins, FORMAT(ROUND(ProdOrdLine."No. of Opportunities", 0.01)));
        //         EVALUATE(SMdPins, FORMAT(ROUND(ProdOrdLine."No. of Pins", 0.01)));
        //         EVALUATE(DipPins, FORMAT(ROUND(ProdOrdLine."No. of Soldering Points", 0.01)));
        //         EVALUATE(Fixings, FORMAT(ROUND(ProdOrdLine."No. of Fixing Holes", 0.01)));

        //         WeekStart := WeekStart + 'QUANTITY_PER,NO_OF_OPPORTUNITIES, NO_OF_PINS, NO_OF_SOLDERING_POINTS,NO_OF_FIXING_HOLES, ' +
        //                   'TYPE_OF_SOLDER,PRODUCTION_BOM_NO, TYPE, NO) Values(';
        //         WeekEnd := WeekEnd + '' + DELCHR(CommaRemoval(FORMAT(bench)), '=', ',') + ',' + DELCHR(CommaRemoval(FORMAT(SoldPins)), '=', ',') + ',' +
        //          '' + DELCHR(CommaRemoval(FORMAT(SMdPins)), '=', ',') + ',' + DELCHR(CommaRemoval(FORMAT(DipPins)), '=', ',') + ',' +
        //          '' + DELCHR(CommaRemoval(FORMAT(Fixings)), '=', ',') + ',''' + FORMAT(ProdOrdLine."Type of Solder") + ''',' +
        //          '''' + FORMAT(ProdOrdLine."Production BOM No.") + ''',''' + FORMAT(ProdOrdLine.Type) + ''',''' + ProdOrdLine."No." + ''')';
        //         WeekStart := WeekStart + WeekEnd;
        //         //MESSAGE(WeekStart);
        //         IF WeekStart <> '' THEN
        //             SQLConnection.Execute(WeekStart);

        //     UNTIL ProdOrdLine.NEXT = 0;


        // //  MESSAGE(Rec."No."+' refreshed in PRM');
        // RecordSet.Close;
        // SQLConnection.Close;
        // CLEAR(SQLConnection);
        // CLEAR(RecordSet);
        // ConnectionOpen := 0;
    end;


    procedure ProdOrdRefresh(RecNo: Text[120]);
    var
        ProdOrder: Record "Production Order";
        WeekStart: Text[1000];
        WeekEnd: Text[1000];
        ProdOrderLine: Record "Prod. Order Line";
        Description: Text[120];
    begin

        // IF ISCLEAR(SQLConnection) THEN
        //     CREATE(SQLConnection, FALSE, TRUE);//Rev01

        // IF ISCLEAR(RecordSet) THEN
        //     CREATE(RecordSet, FALSE, TRUE);//Rev01

        // IF ConnectionOpen <> 1 THEN BEGIN
        //     SQLConnection.ConnectionString := 'DSN=PRMUSER;UID=prmuser;PASSWORD=mrpffe06;SERVER=oracle_80;';
        //     SQLConnection.Open;
        //     ConnectionOpen := 1;
        //     // MESSAGE('PRM Connected');
        // END;
        // //MESSAGE(RecNo);
        // ProdOrder.SETRANGE(ProdOrder."No.", RecNo);
        // IF ProdOrder.FINDSET THEN
        //         REPEAT
        //             SQLQuery := 'select to_char(NO)No from ERP_PRODUCTION_ORDER1 where NO=''' + ProdOrder."No." + '''';
        //             // MESSAGE(SQLQuery);
        //             RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //             RowCount := 0;
        //             IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                 RecordSet.MoveFirst;
        //             WHILE NOT RecordSet.EOF DO BEGIN
        //                 RowCount := RowCount + 1;
        //                 RecordSet.MoveNext;
        //             END;
        //             IF RowCount > 0 THEN BEGIN
        //                 WeekStart := 'DELETE FROM ERP_PRODUCTION_ORDER1 WHERE NO=''' + ProdOrder."No." + '''';
        //                 //MESSAGE(WeekStart);
        //                 SQLConnection.Execute(WeekStart);
        //             END;
        //             ProdOrderLine.SETRANGE(ProdOrderLine."Prod. Order No.", ProdOrder."No.");
        //             IF ProdOrderLine.FINDSET THEN
        //                 REPEAT
        //                         Description := CONVERTSTR(ProdOrder.Description, '''', ' ');
        //                     WeekStart := 'insert into ERP_PRODUCTION_ORDER1( NO, STATUS, DESCRIPTION, CREATION_DATE, BOM_NO, LAST_DATE, LINE_NO,' +
        //                                                                   'ITEM_SUB_GROUP_CODE,PROD_GROUP_CODE)' +
        //                                ' values( ''' + ProdOrderLine."Prod. Order No." + ''',''' + FORMAT(ProdOrder.Status) + ''',' +
        //                                ' ''' + Description + ''',''' + FORMAT(ProdOrder."Creation Date", 0, '<Day>-<Month Text,3>-<Year4>') + ''',' +
        //                                '''' + ProdOrderLine."Item No." + ''',' +
        //                                '''' + FORMAT(ProdOrder."Last Date Modified", 0, '<Day>-<Month Text,3>-<Year4>') + '''' +
        //                                ',' + FORMAT(ProdOrderLine."Line No.") + ',''' + ProdOrder."Item Sub Group Code" + ''',' +
        //                                '''' + ProdOrder."Product Group Code" + ''')';

        //                     // MESSAGE(WeekStart);
        //                     IF WeekStart <> '' THEN
        //                         SQLConnection.Execute(WeekStart);
        //                 UNTIL ProdOrderLine.NEXT = 0;
        //         UNTIL ProdOrder.NEXT = 0;

        // //MESSAGE('Production Orders are Refreshed');


        // ConnectionOpen := 0;
        // RecordSet.Close;
        // SQLConnection.Close;
    end;


    procedure ItemDeletioninOMS(SalesLineNo: Text[60]; OrderId: Text[30]; Quantity: Text[60]; SaleOrderNo: Text[60]);
    var
        WeekStart: Text[500];
    begin

        // WeekStart := 'Update OMS_ORDER_PRODUCTS_MAIN set LATEST_QTY=LATEST_QTY-' +
        //            'round(to_number(replace(''' + FORMAT(Quantity) + ''',''' + ',' + ''',''' + '' + ''')))' +
        //            ' where Product_id =(Select Product_id from ' +
        //            'OMS_PRODUCT_MASTER1 where ITEM_NO =''' + SalesLineNo + ''') and Order_id=' + FORMAT(OrderId) + '';

        // // Check the Order Planning to Uplan
        // SQLQuery := 'select to_char(Plan_id)planid from OMS_ORDER_PLANNING_MAIN1 where Order_Id =' + OrderId + ' and ' +
        //            ' Product_id =(Select Product_id from OMS_PRODUCT_MASTER1 where ITEM_NO =' +
        //            '''' + SalesLineNo + ''')';
        // RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        // RowCount := 0;
        // IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //     RecordSet.MoveFirst;
        // WHILE NOT RecordSet.EOF DO BEGIN
        //     RowCount := RowCount + 1;
        //     RecordSet.MoveNext;
        // END;
        // IF RowCount > 0 THEN BEGIN
        //     UpdateWebHead := 'Delete from OMS_ORDER_PLANNING_MAIN1 where Order_Id =' + OrderId + ' and ' +
        //            ' Product_id =(Select Product_id from OMS_PRODUCT_MASTER1 where ITEM_NO =' +
        //            '''' + SalesLineNo + ''')';
        //     //  MESSAGE(UpdateWebHead);
        //     SQLConnection.Execute(UpdateWebHead);
        //     PPOdeletions(SaleOrderNo, SalesLineNo);
        //     // MESSAGE('The Production Plan is Unplanned');
        //     // to do Mail Generation
        // END;
        // UpdateWebHead := WeekStart;
        // SQLConnection.Execute(UpdateWebHead);
    end;


    procedure DumProductsOMS();
    var
        SaleHeader: Record "Sales Header";
        OrderId: Text[30];
        CreationQuery: Text[1000];
        Inspection: Boolean;
        Schedule: Record Schedule2;
        TenderHeader: Record "Tender Header";
        TenderLine: Record "Tender Line";
    begin

        // IF ISCLEAR(SQLConnection) THEN                        // Shedule wise items Dumping into OMS.
        //     CREATE(SQLConnection, FALSE, TRUE);//Rev01

        // IF ISCLEAR(RecordSet) THEN
        //     CREATE(RecordSet, FALSE, TRUE);//Rev01

        // RowCount := 0;

        // IF ConnectionOpen <> 1 THEN BEGIN
        //     SQLConnection.ConnectionString := 'DSN=omserp;UID=omsuser;PASSWORD=management;SERVER=oracle_80;';
        //     SQLConnection.Open;
        //     SQLConnection.BeginTrans;
        //     ConnectionOpen := 1;
        // END;

        // SaleHeader.SETRANGE(SaleHeader."Document Type", SaleHeader."Document Type"::Order);
        // IF SaleHeader.FINDSET THEN BEGIN
        //                                REPEAT
        //                                    SQLQuery := 'select  to_char(ORDER_ID)ORDER_ID ' +
        //                                              ' from OMS_ORDER_MASTER_MAIN1 where sale_desc = ''' + SaleHeader."No." + ''' ';
        //                                    RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                                    RowCount := 0;
        //                                    IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                                        RecordSet.MoveFirst;
        //                                    WHILE NOT RecordSet.EOF DO BEGIN
        //                                        IF RowCount = 0 THEN
        //                                            OrderId := FORMAT(RecordSet.Fields.Item('ORDER_ID').Value);
        //                                        RowCount := RowCount + 1;
        //                                        RecordSet.MoveNext;
        //                                    END;
        //                                    IF (FORMAT(SaleHeader.Consignee) <> '') THEN BEGIN
        //                                        CreationQuery := 'Update OMS_ORDER_MASTER_MAIN1 set STATION_NAMES=''' + FORMAT(SaleHeader.Consignee) + '''' +
        //                                                         ' where OrdeR_id =' + OrderId + '';
        //                                        IF CreationQuery <> '' THEN
        //                                            SQLConnection.Execute(CreationQuery);
        //                                    END;
        //                                    IF FORMAT(SaleHeader."Work Order Number") <> '' THEN BEGIN
        //                                        CreationQuery := 'Update OMS_ORDER_MASTER_MAIN1 set WORK_DESCRIPTION=''' + FORMAT(SaleHeader."Work Order Number") + '''' +
        //                                                         ' where OrdeR_id =' + OrderId + '';
        //                                        IF CreationQuery <> '' THEN
        //                                            SQLConnection.Execute(CreationQuery);
        //                                    END;


        //                                UNTIL SaleHeader.NEXT = 0



        /*
        //SaleHeader.SETRANGE(SaleHeader."Document Type",SaleHeader."Document Type"::Order);
        //SaleHeader.SETRANGE(SaleHeader."Document Type",SaleHeader."Document Type"::"Blanket Order");
        SaleHeader.SETRANGE(SaleHeader."No.",FORMAT('EFF/SAL/07-08/198'));
        IF SaleHeader.FINDSET THEN BEGIN
        REPEAT
          SQLQuery:='select  to_char(ORDER_ID)ORDER_ID '+
                    ' from OMS_ORDER_MASTER_MAIN1 where BLANKET_DESC  = '''+SaleHeader."No."+''' '+
                    ' and status<7 order by order_id';
          SQLQuery:='select  to_char(ORDER_ID)ORDER_ID '+
                    ' from OMS_ORDER_MASTER_MAIN1 where SALE_DESC  = '''+SaleHeader."No."+''' '+
                    ' order by order_id';
        
          SQLQuery:='select  to_char(ORDER_ID)ORDER_ID '+
                    'from OMS_ORDER_MASTER_MAIN1 where sale_desc= '''+SaleHeader."No."+''' and ordeR_id not in248,291,292,297,'+
                    ' 336,343,363,403,475,507,548,562,575,579,632,633,646,668,679,680,681,698,699,705,726,789,790,791,746,747,138,796) '+
                    ' ';
        
          RecordSet := SQLConnection.Execute(SQLQuery,RowCount);
          RowCount:=0;
          IF NOT((RecordSet.BOF) OR (RecordSet.EOF)) THEN
             RecordSet.MoveFirst;
          WHILE NOT RecordSet.EOF DO
          BEGIN
            IF RowCount=0 THEN
              OrderId:=FORMAT(RecordSet.Fields.Item('ORDER_ID').Value);
            RowCount:=RowCount+1;
            RecordSet.MoveNext;
          END;
          MESSAGE(OrderId);
          IF RowCount > 0 THEN
          BEGIN
            CreationQuery:=' delete from OMS_ORDER_PRODUCTS_MAIN where order_id='+ OrderId+'';
            //MESSAGE(CreationQuery);
            IF CreationQuery<>'' THEN
               SQLConnection.Execute(CreationQuery);
        
            SalesLine.SETRANGE(SalesLine."Document No.",SaleHeader."No.");
            IF SalesLine.FINDSET THEN BEGIN
            REPEAT
              IF SalesLine."No."<>'' THEN
              BEGIN
               Inspection:=FALSE;
               IF SalesLine."RDSO Inspection Required"=TRUE THEN
               BEGIN
                 Inspection:=TRUE;
               END;
               IF FORMAT(SalesLine.Type)='G/L Account' THEN
               BEGIN
                 CreationQuery:=' Select * from OMS_PRODUCT_MASTER1 where item_no like '''+SalesLine."No."+''' ';
                 RecordSet := SQLConnection.Execute(CreationQuery,RowCount);
                 IF NOT((RecordSet.BOF) OR (RecordSet.EOF)) THEN
                    RecordSet.MoveFirst;
                 RowCount:=0;
                 WHILE NOT RecordSet.EOF DO
                 BEGIN
                    RowCount:=RowCount+1;
                    RecordSet.MoveNext;
                 END;
                 IF RowCount<=0 THEN
                 BEGIN
                    CreationQuery:=' insert into OMS_PRODUCT_MASTER1 (PRODUCT_ID, ITEM_NO, DESCRIPTION) values '+
                                   ' ((select Max(PRODUCT_ID)+1 from OMS_PRODUCT_MASTER1),'''+SalesLine."No."+''','+
                                   ' '''+SalesLine.Description+''')';
                    //MESSAGE(CreationQuery);
                    IF CreationQuery<>'' THEN
                       SQLConnection.Execute(CreationQuery);
                    SQLConnection.CommitTrans;
                    SQLConnection.BeginTrans;
                 END;
              END;
              MESSAGE(SalesLine."No."+' '+FORMAT(SalesLine."Line No.")+' '+FORMAT(SalesLine.Quantity));
                  AdditemtoOrder(SalesLine."No.",OrderId,SalesLine.Quantity,Inspection,FORMAT(SalesLine."Line No."),' ',FORMAT(SalesLine.Typ
        e)
        );
              Schedule.SETRANGE(Schedule."Document No.",SaleHeader."No.");
              Schedule.SETRANGE(Schedule."Document Line No.",SalesLine."Line No.");
              IF Schedule.FINDSET THEN BEGIN                  // Schedule items insertion
              REPEAT
                 IF (Schedule."No."<>SalesLine."No.") AND (Schedule."No."<>'')   THEN
                 BEGIN
                   IF FORMAT(Schedule.Type)='G/L Account' THEN
                   BEGIN
                      CreationQuery:=' Select * from OMS_PRODUCT_MASTER1 where item_no like '''+Schedule."No."+''' ';
                      RecordSet := SQLConnection.Execute(CreationQuery,RowCount);
                      IF NOT((RecordSet.BOF) OR (RecordSet.EOF)) THEN
                         RecordSet.MoveFirst;
                      RowCount:=0;
                      WHILE NOT RecordSet.EOF DO
                      BEGIN
                         RowCount:=RowCount+1;
                         RecordSet.MoveNext;
                      END;
                      IF RowCount<=0 THEN
                      BEGIN
                         CreationQuery:=' insert into OMS_PRODUCT_MASTER1 (PRODUCT_ID, ITEM_NO, DESCRIPTION) values '+
                                        ' ((select Max(PRODUCT_ID)+1 from OMS_PRODUCT_MASTER1),'''+Schedule."No."+''','+
                                        ' '''+Schedule.Description+''')';
                         IF CreationQuery<>'' THEN
                            SQLConnection.Execute(CreationQuery);
                         SQLConnection.CommitTrans;
                         SQLConnection.BeginTrans;
                      END;
                    END;
                    AdditemtoOrder(Schedule."No.",OrderId,Schedule.Quantity,Inspection,FORMAT(Schedule."Document Line No.")
                       ,FORMAT(Schedule."Line No."),FORMAT(Schedule.Type));
              END;
              UNTIL Schedule.NEXT=0
             END;
             END;
            UNTIL SalesLine.NEXT=0
           END;
          END;
        UNTIL SaleHeader.NEXT=0
        END;
        
        TenderHeader.SETRANGE(TenderHeader."Tender No.",'TN-09-10-066');
        IF TenderHeader.FINDSET THEN BEGIN
        REPEAT
          SQLQuery:='select  to_char(ORDER_ID)ORDER_ID '+
                    ' from OMS_ORDER_MASTER_MAIN1 where TENDER_DESC = '''+TenderHeader."Tender No."+''' '+
                    ' OrdeR by ORder_ID ';
        
          RecordSet := SQLConnection.Execute(SQLQuery,RowCount);
          RowCount:=0;
          IF NOT((RecordSet.BOF) OR (RecordSet.EOF)) THEN
             RecordSet.MoveFirst;
          WHILE NOT RecordSet.EOF DO
          BEGIN
            IF RowCount=0 THEN
              OrderId:=FORMAT(RecordSet.Fields.Item('ORDER_ID').Value);
            RowCount:=RowCount+1;
        
            RecordSet.MoveNext;
          END;
          MESSAGE( OrderId+' '+TenderHeader."Tender No.");
          IF RowCount > 0 THEN
          BEGIN
            CreationQuery:=' delete from OMS_ORDER_PRODUCTS_MAIN where order_id='+ OrderId+'';
            //MESSAGE(CreationQuery);
            IF CreationQuery<>'' THEN
               SQLConnection.Execute(CreationQuery);
        
            TenderLine.SETRANGE(TenderLine."Document No.",TenderHeader."Tender No.");
            IF TenderLine.FINDSET THEN BEGIN
            REPEAT
              IF TenderLine."No."<>'' THEN
              BEGIN
               Inspection:=FALSE;
               IF FORMAT(TenderLine.Type)='G/L Account' THEN
               BEGIN
                 CreationQuery:=' Select * from OMS_PRODUCT_MASTER1 where item_no like '''+TenderLine."No."+''' ';
                 RecordSet := SQLConnection.Execute(CreationQuery,RowCount);
                 IF NOT((RecordSet.BOF) OR (RecordSet.EOF)) THEN
                    RecordSet.MoveFirst;
                 RowCount:=0;
                 WHILE NOT RecordSet.EOF DO
                 BEGIN
                    RowCount:=RowCount+1;
                    RecordSet.MoveNext;
                 END;
                 IF RowCount<=0 THEN
                 BEGIN
                    CreationQuery:=' insert into OMS_PRODUCT_MASTER1 (PRODUCT_ID, ITEM_NO, DESCRIPTION) values '+
                                   ' ((select Max(PRODUCT_ID)+1 from OMS_PRODUCT_MASTER1),'''+TenderLine."No."+''','+
                                   ' '''+TenderLine.Description+''')';
                    //MESSAGE(CreationQuery);
                    IF CreationQuery<>'' THEN
                       SQLConnection.Execute(CreationQuery);
                    SQLConnection.CommitTrans;
                    SQLConnection.BeginTrans;
                 END;
              END;
              AdditemtoOrder(TenderLine."No.",OrderId,TenderLine.Quantity,Inspection,FORMAT(TenderLine."Line No.")
                       ,' ',FORMAT(TenderLine.Type));
              Schedule.SETRANGE(Schedule."Document No.",TenderHeader."Tender No.");
              Schedule.SETRANGE(Schedule."Document Line No.",TenderLine."Line No.");
              IF Schedule.FINDSET THEN BEGIN                  // Schedule items insertion
              REPEAT
                 IF (Schedule."No."<>TenderLine."No.") AND (Schedule."No."<>'')   THEN
                 BEGIN
                   IF FORMAT(Schedule.Type)='G/L Account' THEN
                   BEGIN
                      CreationQuery:=' Select * from OMS_PRODUCT_MASTER1 where item_no like '''+Schedule."No."+''' ';
                      RecordSet := SQLConnection.Execute(CreationQuery,RowCount);
                      IF NOT((RecordSet.BOF) OR (RecordSet.EOF)) THEN
                         RecordSet.MoveFirst;
                      RowCount:=0;
                      WHILE NOT RecordSet.EOF DO
                      BEGIN
                         RowCount:=RowCount+1;
                         RecordSet.MoveNext;
                      END;
                      IF RowCount<=0 THEN
                      BEGIN
                         CreationQuery:=' insert into OMS_PRODUCT_MASTER1 (PRODUCT_ID, ITEM_NO, DESCRIPTION) values '+
                                        ' ((select Max(PRODUCT_ID)+1 from OMS_PRODUCT_MASTER1),'''+Schedule."No."+''','+
                                        ' '''+Schedule.Description+''')';
                         IF CreationQuery<>'' THEN
                            SQLConnection.Execute(CreationQuery);
                         SQLConnection.CommitTrans;
                         SQLConnection.BeginTrans;
                      END;
                    END;
                    AdditemtoOrder(Schedule."No.",OrderId,Schedule.Quantity,Inspection,FORMAT(Schedule."Document Line No.")
                       ,FORMAT(Schedule."Line No."),FORMAT(Schedule.Type));
              END;
              UNTIL Schedule.NEXT=0
             END;
             END;
            UNTIL TenderLine.NEXT=0
           END;
          END;
        UNTIL TenderHeader.NEXT=0
        END;*/


        // MESSAGE(' Total Products are Posted in OMS');

        // SQLConnection.CommitTrans;
        // RecordSet.Close;
        // SQLConnection.Close;

    end;


    procedure SendPurInvToCF(PurInvHead: Record "Purch. Inv. Header");
    var
        Structure_Amount: Decimal;
        Order_No: Code[30];
        Packing_Value: Decimal;
        Frieght_Value: Decimal;
        Insurance_Value: Decimal;
        Additional_Duty: Decimal;
        Service_Amount: Decimal;
        OrderLineNo: Integer;
        VAT_AMOUNT: Decimal;
        CST_AMOUNT: Decimal;
        //  PostedStrOrderLine: Record "Posted Str Order Line Details";
        //  PurchPost: Codeunit "Purch.-Post";
        PurchRcptLine: Record "Purch. Rcpt. Line";
        VendInvDate: Date;
        PurInvLine: Record "Purch. Inv. Line";
        //  PostedStrOrderDetails: Record "Posted Structure Order Details";
        Dept: Text;
        ISExit: Integer;
        ItemNo: Text[50];
        OtherDeductions: Decimal;
    begin
        //Invoice Line insertion into Cashflow
        // IF ISCLEAR(SQLConnection) THEN
        //     CREATE(SQLConnection, FALSE, TRUE); //Rev01
        // IF ISCLEAR(RecordSet) THEN
        //     CREATE(RecordSet, FALSE, TRUE); //Rev01

        // GLSetup.GET;
        // IF GLSetup."Active ERP-CF Connection" THEN BEGIN
        //     SQLConnection.ConnectionString := GLSetup."Sql Connection String";
        //     SQLConnection.Open;
        // END;
        // SQLQuery := 'SELECT * from Invoice_Line where invoice_number=''' + PurInvHead."No." + '''';

        // RecordSet := SQLConnection.Execute(SQLQuery, RowCount);

        // IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN BEGIN
        //     RecordSet.MoveFirst;
        //     RowCount := 0;
        // END;

        // WHILE NOT RecordSet.EOF DO BEGIN
        //     RowCount := RowCount + 1;
        //     RecordSet.MoveNext;
        // END;

        // IF RowCount <= 0 THEN BEGIN
        //     PurInvLine.RESET;
        //     PurInvLine.SETFILTER(PurInvLine."Document No.", PurInvHead."No.");
        //     IF PurInvLine.FINDFIRST THEN
        //             REPEAT
        //                 Structure_Amount := 0;
        //                 Packing_Value := 0;
        //                 Frieght_Value := 0;
        //                 Insurance_Value := 0;
        //                 Additional_Duty := 0;
        //                 VAT_AMOUNT := 0;
        //                 CST_AMOUNT := 0;
        //                 Packing_Value := 0;
        //                 Frieght_Value := 0;
        //                 Insurance_Value := 0;
        //                 Additional_Duty := 0;
        //                 Service_Amount := 0;
        //                 Order_No := '';
        //                 VendInvDate := 0D;
        //                 ItemNo := '';
        //                 VendInvDate := PurInvHead."Vendor Invoice Date";
        //                 Order_No := PurInvLine."Purchase_Order No.";
        //                 IF (PurInvLine."Receipt No." = '') AND (PurInvLine."Receipt Line No." = 0) THEN
        //                     ItemNo := 'JOURNAL'
        //                 ELSE
        //                     ItemNo := PurInvLine."No.";

        //                 IF COPYSTR(PurInvLine."Document No.", 1, 2) = 'JV' THEN BEGIN
        //                     Order_No := PurInvLine."Document No.";
        //                 END;
        //                 PostedStrOrderLine.RESET;
        //                 PostedStrOrderLine.SETRANGE(PostedStrOrderLine.Type, PostedStrOrderLine.Type::Purchase);
        //                 PostedStrOrderLine.SETRANGE(PostedStrOrderLine."Document Type", PostedStrOrderLine."Document Type"::Invoice);
        //                 PostedStrOrderLine.SETRANGE(PostedStrOrderLine."Invoice No.", PurInvLine."Document No.");
        //                 PostedStrOrderLine.SETRANGE(PostedStrOrderLine."Line No.", PurInvLine."Line No.");
        //                 IF (PostedStrOrderLine.FINDSET) AND (PurInvHead."No. Series" <> 'JV') THEN
        //                         REPEAT
        //                             IF PostedStrOrderLine."Tax/Charge Type" = PostedStrOrderLine."Tax/Charge Type"::GST THEN
        //                                 Structure_Amount += PostedStrOrderLine."Calculation Value"
        //                             ELSE BEGIN
        //                                 IF (PostedStrOrderLine."Tax/Charge Group" = 'PACKING') OR
        //                                    (PostedStrOrderLine."Tax/Charge Group" = 'FORWARDING') THEN BEGIN

        //                                     IF NOT PostedStrOrderLine."Payable to Third Party" THEN
        //                                         Packing_Value += PostedStrOrderLine."Amount (LCY)"
        //                                     ELSE BEGIN
        //                                         SQLQuery := 'Insert into INVOICE_LINE (INVOICE_ID,ORDERNO,ITEMNO,VENDORID,INVOICE_LINE_NO,' +
        //                                                    ' RECEIPT_NUMBER,PACKING_VALUE, ' +
        //                                                    ' INVOICE_NUMBER,RECEIPT_LINE_NO,INVOICED_DATE,ORDER_LINE_NO,BILLNO,LOCATION_CODE) ' +
        //                                                    ' VALUES (seq_Invoice_ID.NEXTVAL,''' + Order_No + ''',''' + ItemNo + ''','''
        //                                                    + PostedStrOrderLine."Third Party Code" + ''','''
        //                                                    + FORMAT(PurInvLine."Line No.") + ''','''
        //                                                    + PurInvLine."Receipt No." + ''',''' +
        //                                                    PurchPost.CommaRemoval(FORMAT(ROUND(PostedStrOrderLine."Amount (LCY)", 0.01))) + ''',''' +
        //                                                    PurInvLine."Document No." + ''',''' + FORMAT(PurInvLine."Receipt Document Line No.") + ''',''' +
        //                                                    FORMAT(VendInvDate, 0, '<Day>-<Month Text,3>-<Year4>') + ''',''' +
        //                                                    FORMAT(PurchRcptLine."Order Line No.") + ''',''' +
        //                                                    FORMAT(PurInvHead."Vendor Invoice No.") +
        //                                                    PurInvLine."Location Code" + ''')';

        //                                         SQLConnection.Execute(SQLQuery);//Rev01
        //                                     END;
        //                                 END
        //                                 ELSE
        //                                     IF PostedStrOrderLine."Tax/Charge Group" = 'FREIGHT' THEN BEGIN
        //                                         IF NOT PostedStrOrderLine."Payable to Third Party" THEN
        //                                             Frieght_Value += PostedStrOrderLine."Amount (LCY)"
        //                                         ELSE BEGIN
        //                                             SQLQuery := 'Insert into INVOICE_LINE (INVOICE_ID,ORDERNO,ITEMNO,VENDORID,INVOICE_LINE_NO,' +
        //                                                        ' RECEIPT_NUMBER,FREIGHT_CHARGES, ' +
        //                                                        ' INVOICE_NUMBER,RECEIPT_LINE_NO,INVOICED_DATE,ORDER_LINE_NO,BILLNO,LOCATION_CODE) ' +
        //                                                        ' VALUES (seq_Invoice_ID.NEXTVAL,''' + Order_No + ''',''' + ItemNo + ''','''
        //                                                        + PostedStrOrderLine."Third Party Code" + ''','''
        //                                                        + FORMAT(PurInvLine."Line No.") + ''','''
        //                                                        + PurInvLine."Receipt No." + ''',''' +
        //                                                        PurchPost.CommaRemoval(FORMAT(ROUND(PostedStrOrderLine."Amount (LCY)", 0.01))) + ''',''' +
        //                                                        PurInvLine."Document No." + ''',''' + FORMAT(PurInvLine."Receipt Document Line No.") + ''',''' +
        //                                                        FORMAT(VendInvDate, 0, '<Day>-<Month Text,3>-<Year4>') + ''',''' +
        //                                                        FORMAT(PurchRcptLine."Order Line No.") + ''',''' +
        //                                                        FORMAT(PurInvHead."Vendor Invoice No.") +
        //                                                        PurInvLine."Location Code" + ''')';


        //                                             SQLConnection.Execute(SQLQuery);//Rev01
        //                                         END;
        //                                     END
        //                                     ELSE
        //                                         IF PostedStrOrderLine."Tax/Charge Group" = 'INSURANCE' THEN BEGIN
        //                                             IF NOT PostedStrOrderLine."Payable to Third Party" THEN
        //                                                 Insurance_Value += PostedStrOrderLine."Amount (LCY)";
        //                                         END ELSE
        //                                             IF PostedStrOrderLine."Tax/Charge Group" = 'ADD.DUTY' THEN
        //                                                 Additional_Duty += PostedStrOrderLine."Amount (LCY)"
        //                                             ELSE
        //                                                 IF (PostedStrOrderLine."Tax/Charge Group" = 'SERVICE') OR
        //                                                    (PostedStrOrderLine."Tax/Charge Code" = 'SERVICETAX') OR
        //                                                    (FORMAT(PostedStrOrderDetails."Tax/Charge Type") = 'Service Tax') THEN BEGIN
        //                                                     IF NOT PostedStrOrderLine."Payable to Third Party" THEN
        //                                                         Service_Amount += PostedStrOrderLine."Amount (LCY)"
        //                                                     ELSE BEGIN
        //                                                         SQLQuery := 'Insert into INVOICE_LINE (INVOICE_ID,ORDERNO,ITEMNO,VENDORID,INVOICE_LINE_NO,' +
        //                                                                    ' RECEIPT_NUMBER,SERVICE_AMOUNT, ' +
        //                                                                    ' INVOICE_NUMBER,RECEIPT_LINE_NO,INVOICED_DATE,ORDER_LINE_NO,BILLNO,LOCATION_CODE) ' +
        //                                                                    ' VALUES (seq_Invoice_ID.NEXTVAL,''' + Order_No + ''',''' + ItemNo + ''','''
        //                                                                    + PostedStrOrderLine."Third Party Code" + ''','''
        //                                                                    + FORMAT(PurInvLine."Line No.") + ''','''
        //                                                                    + PurInvLine."Receipt No." + ''',''' +
        //                                                                    PurchPost.CommaRemoval(FORMAT(ROUND(PostedStrOrderLine."Amount (LCY)", 0.01))) + ''',''' +
        //                                                                    PurInvLine."Document No." + ''',''' + FORMAT(PurInvLine."Receipt Document Line No.") + ''',''' +
        //                                                                    FORMAT(VendInvDate, 0, '<Day>-<Month Text,3>-<Year4>') + ''',''' +
        //                                                                    FORMAT(PurchRcptLine."Order Line No.") + ''',''' +
        //                                                                    FORMAT(PurInvHead."Vendor Invoice No.") +
        //                                                                    PurInvLine."Location Code" + ''')';

        //                                                         SQLConnection.Execute(SQLQuery);//Rev01

        //                                                     END;
        //                                                 END ELSE
        //                                                     IF FORMAT(PostedStrOrderDetails."Tax/Charge Type") = 'E.CESS' THEN BEGIN
        //                                                         IF PostedStrOrderLine."Payable to Third Party" THEN BEGIN
        //                                                             SQLQuery := 'Insert into INVOICE_LINE (INVOICE_ID,ORDERNO,ITEMNO,VENDORID,INVOICE_LINE_NO,' +
        //                                                                        ' RECEIPT_NUMBER,EXCISE, ' +
        //                                                                        ' INVOICE_NUMBER,RECEIPT_LINE_NO,INVOICED_DATE,ORDER_LINE_NO,BILLNO,LOCATION_CODE) ' +
        //                                                                        ' VALUES (seq_Invoice_ID.NEXTVAL,''' + Order_No + ''',''' + ItemNo + ''','''
        //                                                                        + PostedStrOrderLine."Third Party Code" + ''','''
        //                                                                        + FORMAT(PurInvLine."Line No.") + ''','''
        //                                                                        + PurInvLine."Receipt No." + ''',''' +
        //                                                                        PurchPost.CommaRemoval(FORMAT(ROUND(PostedStrOrderLine."Amount (LCY)", 0.01))) + ''',''' +
        //                                                                        PurInvLine."Document No." + ''',''' + FORMAT(PurInvLine."Receipt Document Line No.") + ''',''' +
        //                                                                        FORMAT(VendInvDate, 0, '<Day>-<Month Text,3>-<Year4>') + ''',''' +
        //                                                                        FORMAT(PurchRcptLine."Order Line No.") + ''',''' +
        //                                                                        FORMAT(PurInvHead."Vendor Invoice No.") +
        //                                                                        PurInvLine."Location Code" + ''')';

        //                                                             SQLConnection.Execute(SQLQuery);//Rev01

        //                                                         END;
        //                                                     END ELSE
        //                                                         IF (FORMAT(PostedStrOrderDetails."Tax/Charge Code") = 'EXCISE') AND
        //                                                              (PostedStrOrderLine."Payable to Third Party") THEN BEGIN
        //                                                             SQLQuery := 'Insert into INVOICE_LINE (INVOICE_ID,ORDERNO,ITEMNO,VENDORID,INVOICE_LINE_NO,' +
        //                                                                        ' RECEIPT_NUMBER,EXCISE, ' +
        //                                                                        ' INVOICE_NUMBER,RECEIPT_LINE_NO,INVOICED_DATE,ORDER_LINE_NO,BILLNO,LOCATION_CODE) ' +
        //                                                                        ' VALUES (seq_Invoice_ID.NEXTVAL,''' + Order_No + ''',''' + ItemNo + ''','''
        //                                                                         + PostedStrOrderLine."Third Party Code" + ''','''
        //                                                                          + FORMAT(PurInvLine."Line No.") + ''','''
        //                                                                          + PurInvLine."Receipt No." + ''',''' +
        //                                                                          PurchPost.CommaRemoval(FORMAT(ROUND(PostedStrOrderLine."Amount (LCY)", 0.01))) + ''',''' +
        //                                                                          PurInvLine."Document No." + ''',''' + FORMAT(PurInvLine."Receipt Document Line No.") + ''',''' +
        //                                                                          FORMAT(VendInvDate, 0, '<Day>-<Month Text,3>-<Year4>') + ''',''' +
        //                                                                          FORMAT(PurchRcptLine."Order Line No.") + ''',''' +
        //                                                                          FORMAT(PurInvHead."Vendor Invoice No.") +
        //                                                                          PurInvLine."Location Code" + ''')';
        //                                                             SQLConnection.Execute(SQLQuery);//Rev01
        //                                                         END;
        //                                 Structure_Amount += PostedStrOrderLine."Amount (LCY)";
        //                             END;

        //                         UNTIL PostedStrOrderLine.NEXT = 0;

        //                 IF PurInvLine."No." <> '' THEN BEGIN
        //                     IF PurInvLine."Tax Area Code" = 'PURCH VAT' THEN
        //                         VAT_AMOUNT := PurInvLine."Tax Amount"
        //                     ELSE
        //                         CST_AMOUNT := PurInvLine."Tax Amount";

        //                     IF PurInvLine."Location Code" = 'CS STR' THEN
        //                         Dept := 'CS'
        //                     ELSE
        //                         Dept := 'NORMAL';

        //                     OtherDeductions := PurInvLine."TDS Amount";
        //                     SQLQuery := 'Insert into INVOICE_LINE (INVOICE_ID,ORDERNO,ITEMNO,VENDORID,INVOICE_LINE_NO,MATERIAL_VALUE,' +
        //                               ' RECEIPT_NUMBER,INVOICED_AMOUNT,VAT,EXCISE,CST,PACKING_VALUE,INSURANCE,FREIGHT_CHARGES,ADD_DUTY,BILLED_UNITS, ' +
        //                            ' SERVICE_AMOUNT,INVOICE_NUMBER,RECEIPT_LINE_NO,INVOICED_DATE,ORDER_LINE_NO,BILLNO,DEPT_WISE,LOCATION_CODE) ' +
        //                            ' VALUES (seq_Invoice_ID.NEXTVAL,''' + Order_No + ''',''' + ItemNo + ''','''
        //                             + PurInvLine."Buy-from Vendor No." + ''','''
        //                             + FORMAT(PurInvLine."Line No.") + ''','''
        //                             + PurchPost.CommaRemoval(FORMAT(PurInvLine.Quantity * PurInvLine."Unit Cost (LCY)" - OtherDeductions)) + ''','''
        //                             + PurInvLine."Receipt No." + ''',''' +
        //                             PurchPost.CommaRemoval(FORMAT(ROUND(PurInvLine."Amount To Vendor", 0.01))) + ''',''' +
        //                             PurchPost.CommaRemoval(FORMAT(ROUND(VAT_AMOUNT, 0.01))) + ''',''' +
        //                             PurchPost.CommaRemoval(FORMAT(ROUND(PurInvLine."Excise Amount", 0.01))) + ''',''' +
        //                             PurchPost.CommaRemoval(FORMAT(ROUND(CST_AMOUNT, 0.01))) + ''',''' +
        //                             PurchPost.CommaRemoval(FORMAT(ROUND(Packing_Value, 0.01))) + ''',''' +
        //                             PurchPost.CommaRemoval(FORMAT(ROUND(Frieght_Value, 0.01))) + ''',''' +
        //                             PurchPost.CommaRemoval(FORMAT(ROUND(Insurance_Value, 0.01))) + ''',''' +
        //                             PurchPost.CommaRemoval(FORMAT(ROUND(Additional_Duty, 0.01))) + ''',''' +
        //                             PurchPost.CommaRemoval(FORMAT(ROUND(PurInvLine.Quantity, 0.0001))) + ''',''' +
        //                             PurchPost.CommaRemoval(FORMAT(ROUND(Service_Amount, 0.01))) + ''',''' +
        //                             PurInvLine."Document No." + ''',''' + FORMAT(PurInvLine."Receipt Document Line No.") + ''',''' +
        //                             FORMAT(VendInvDate, 0, '<Day>-<Month Text,3>-<Year4>') + ''',''' +
        //                             FORMAT(PurchRcptLine."Order Line No.") + ''',''' +
        //                             FORMAT(PurInvHead."Vendor Invoice No.") + ''',''' +
        //                             Dept +
        //                             PurInvLine."Location Code" + ''')';
        //                     RecordSet := SQLConnection.Execute(SQLQuery);
        //                 END;
        //             UNTIL PurInvLine.NEXT = 0;
        //     MESSAGE('UPDATED');
        // END
        // ELSE
        //     MESSAGE('Records already Existed');
        // SQLConnection.Close;
    end;


    procedure CashflowAuthMail();
    var
        Mail_count: Integer;
        // SMTP_MAIL: Codeunit "SMTP Mail";
        Mail_Body: array[5] of Text[1000];
        Send_Mail: Boolean;
        //  Mail: Codeunit Mail;
        Body: Text[1024];
        Subject: Text[1000];
        Mail_To: Text[1000];
        Mail_From: Text[1000];
        prevdate: Text[20];
        dateTot: Decimal;
        AFTot: Decimal;
        AFlTot: Decimal;
        CSAFTot: Decimal;
        CSAFlTot: Decimal;
        EmpTot: Decimal;
        LnTot: Decimal;
        PATot: Decimal;
        PBTot: Decimal;
        PCODTot: Decimal;
        TaxTot: Decimal;
        Tot_Tot: Decimal;
        AF: Label 'Admin Fixed';
        AFl: Label 'Admin Flexible';
        CSAF: Label 'CS Admin Fixed';
        CSAFl: Label 'CS Admin Flexible';
        Emp: Label 'Employee';
        Ln: Label 'Loan';
        PA: Label 'Purchase Advance';
        PB: Label 'Purchase Bills';
        PCOD: Label 'Purchase COD';
        Tax: Label 'Tax';
        AFAmt: Decimal;
        AFlAmt: Decimal;
        CSAFAmt: Decimal;
        CSAFlAmt: Decimal;
        EmpAmt: Decimal;
        LnAmt: Decimal;
        PAAmt: Decimal;
        PBAmt: Decimal;
        PCODAmt: Decimal;
        TaxAmt: Decimal;
        TempAmtText: Text;
        DecimalConv: Decimal;
        tempdatevar: Text;
        FromDate: Date;
        ToDate: Date;
        AFAmt1: Text;
        AFlAmt1: Text;
        CSAFAmt1: Text;
        CSAFlAmt1: Text;
        EmpAmt1: Text;
        LnAmt1: Text;
        PAAmt1: Text;
        PBAmt1: Text;
        PCODAmt1: Text;
        TaxAmt1: Text;
        TotalAmt1: Text;
    // Total: ;
    begin
        //Initialization start
        //     RowCount := 0;
        //     SQLQuery := '';
        //     prevdate := '';

        //     //Initializations end

        //     // IF ISCLEAR(SQLConnection) THEN
        //     //     CREATE(SQLConnection, FALSE, TRUE);

        //     // IF ISCLEAR(RecordSet) THEN
        //     //     CREATE(RecordSet, FALSE, TRUE);

        //     // IF ConnectionOpen <> 1 THEN BEGIN
        //     //     SQLConnection.ConnectionString := 'DSN=CASHFLOW;UID=cashflowuser;PASSWORD=firewall123;SERVER=oracle_80;';
        //     //     SQLConnection.Open;
        //     //     SQLConnection.BeginTrans;
        //     //     ConnectionOpen := 1;

        //     //ToDate := TODAY;
        //    // FromDate := CALCDATE('-1D', TODAY);
        //     //to_char(, '999,999,990.00')
        //     SQLQuery :=
        //     'select authdate,TYPE,to_char(sum(AMOUNT), ''99,99,99,99,990'') as amount1  from (select authdate,type,round(amount,0) amount from ' +
        //     '(select trunc(authdate) authdate,authperson,orderno,amount,reason,INFAVOUROF,''Purchase'' person,''Purchase Advance'' type from V_PURCHASE_ADVANCE ' +
        //     'where authdate is not null ' +
        //     'union ' +
        //     'select trunc(authdate) authdate,authperson,orderno,amount,reason,INFAVOUROF,''Purchase'' person,''Purchase Bills'' type from V_PURCHASE_BILLS ' +
        //     'where authdate is not null ' +
        //     'union ';
        //     SQLQuery1 :=
        //     'select trunc(authdate) authdate,authperson,orderno,amount,reason,INFAVOUROF,''Purchase'' person,''Purchase COD'' type  from V_PURCHASE_COD ' +
        //     'where authdate is not null ' +
        //     'union ' +
        //     'select trunc(authdate) authdate,authperson,''-'' orderno,budget_amount amount,reason,INFAVOUROF,expense_name person,''Admin Fixed'' type from MRP_EXPENSE ' +
        //     'where authdate is not null and upper(trim(group_id))=upper(''Admin'') and upper(trim(PAY_TYPE)) = upper(''fixed'') ' +
        //     'union ' +
        //     'select trunc(authdate) authdate,authperson,''-'' orderno,budget_amount amount,reason,INFAVOUROF,expense_name person,''CS Admin Fixed'' type from MRP_EXPENSE ' +
        //     'where authdate is not null and upper(trim(group_id))=upper(''csAdmin'') and upper(trim(PAY_TYPE)) = upper(''fixed'') ' +
        //     'union ';

        //     SQLQuery2 :=
        //     'select trunc(authdate) authdate,authperson,''-'' orderno,budget_amount amount,reason,INFAVOUROF,expense_name person,''Admin Flexible'' type from MRP_EXPENSE ' +
        //     'where authdate is not null and upper(trim(group_id))=upper(''Admin'') and upper(trim(PAY_TYPE)) = upper(''flexible'') ' +
        //     'union ' +
        //     'select trunc(authdate) authdate,authperson,''-'' orderno,budget_amount amount,reason,INFAVOUROF,expense_name person,''CS Admin Flexible'' type from MRP_EXPENSE ' +
        //     'where authdate is not null and upper(trim(group_id))=upper(''CSAdmin'') and upper(trim(PAY_TYPE)) = upper(''flexible'') ' +
        //     'union ' +
        //     'select trunc(authdate) authdate,authperson,''-'' orderno,budget_amount amount,reason,INFAVOUROF,expense_name person,''Tax'' type from MRP_EXPENSE ' +
        //     'where authdate is not null and upper(trim(group_id))=upper(''tax'') ' +
        //     'union ';

        //     SQLQuery3 :=
        //     'select trunc(authdate) authdate,authperson,''-'' orderno,budget_amount amount,reason,INFAVOUROF,expense_name person,''Loan'' type from MRP_EXPENSE ' +
        //     'where authdate is not null and upper(trim(group_id))=upper(''loan'') ' +
        //     'union ' +
        //     'select trunc(authdate) authdate,authperson,''-'' orderno,budget_amount amount,reason,INFAVOUROF,expense_name person,''Employee'' type from MRP_EXPENSE ' +
        //     'where authdate is not null and upper(trim(group_id))=upper(''employee'')) ' +
        //     'where authdate = to_date(''' + FORMAT(FromDate) + ''',''dd-mm-yy'') ' +
        //     ') group by rollup(authdate,TYPE) order by 2 ';

        //     // RecordSet := SQLConnection.Execute(SQLQuery + SQLQuery1 + SQLQuery2 + SQLQuery3, RowCount);
        //     // IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN BEGIN
        //     //     RecordSet.MoveFirst;
        //     //     RowCount := 0;
        //     // END;
        //     Mail_count := 0;
        //     Mail_From := 'erp@efftronics.com';
        //     Mail_To := 'pranavi@efftronics.com,anilkumar@efftronics.com';
        //     Subject := 'Reg: Summarized Cash Flow Authorised Amount Details';
        //     Body := '';
        //     SMTP_MAIL.CreateMessage('ERP', Mail_From, Mail_To, Subject, Body, TRUE);
        //     Body := Body + ('<html><head><style> divone{background-color: white; width: 900px; padding: 20px; border-style:solid ; border-color:#8EB52B;  margin: 20px;} </style></head>');
        //     Body := Body + ('<body><div style="border-color:#8EB52B;  margin: 20px; border-width:15px;   border-style:solid; padding: 20px; width: 800px;"><label><font size="6">Cashflow Authorized Amount Details</font></label>');
        //     Body := Body + ('<hr style=solid; color= #3333CC>');
        //     Body := Body + ('<h>Dear Sir.,</h><br><br>');
        //     //Body := Body+('<h><b>Responsible Dept: <font color=red>Purchase.</font></h><br>');
        //     //Body := Body+('<h>Action: <font color=red>Need to Receive Bill from vendors.</font></b></h><br>');
        //     Body := Body + ('<P> CashFlow Authorized Amounts on <b>' + FORMAT(FromDate) + ': </b></P>');
        //     Body := Body + ('<table border="1" style="border-collapse:collapse; width:100%; font-size:10pt;"><tr><th >Date</th><th>Admin Fixed</th><th>Admin Flexible</th><th>CS Admin Fixed</th>');
        //     Body := Body + ('<th>CS Admin Flexible</th><th>Employee</th><th>Loan</th><th>Purchase Advance</th><th>Purchase Bills</th><th>Purchase COD</th><th>Tax</th><th>Total</th></tr>');
        //     WHILE NOT RecordSet.EOF DO BEGIN
        //         //Body := Body+('<tr><td>'+FORMAT(RecordSet.Fields.Item('authdate').Value)+'</td><td>'++'</td><td>'++'</td><td>'++'</td><td>'++'</td><td>'++'</td>');
        //         //Body := Body+('<td>'++'</td><td>'++'</td><td>'++'</td><td>'++'</td><td>'++'</td><td>'++'</td></tr>');
        //         DecimalConv := 0;
        //         TempAmtText := '';
        //         TempAmtText := FORMAT(RecordSet.Fields.Item('amount1').Value);
        //         EVALUATE(DecimalConv, TempAmtText);
        //         CASE FORMAT(RecordSet.Fields.Item('TYPE').Value) OF
        //             AF:
        //                 BEGIN
        //                     AFAmt := DecimalConv;
        //                     AFAmt1 := TempAmtText;
        //                     AFTot := AFTot + DecimalConv;
        //                 END;
        //             AFl:
        //                 BEGIN
        //                     AFlAmt := DecimalConv;
        //                     AFlAmt1 := TempAmtText;
        //                     AFlTot := AFlTot + DecimalConv;
        //                 END;
        //             CSAF:
        //                 BEGIN
        //                     CSAFAmt := DecimalConv;
        //                     CSAFAmt1 := TempAmtText;
        //                     CSAFTot := CSAFTot + DecimalConv;
        //                 END;
        //             CSAFl:
        //                 BEGIN
        //                     CSAFlAmt := DecimalConv;
        //                     CSAFlAmt1 := TempAmtText;
        //                     CSAFlTot := CSAFlTot + DecimalConv;
        //                 END;
        //             Emp:
        //                 BEGIN
        //                     EmpAmt := DecimalConv;
        //                     EmpAmt1 := TempAmtText;
        //                     EmpTot := EmpTot + DecimalConv;
        //                 END;
        //             Ln:
        //                 BEGIN
        //                     LnAmt := DecimalConv;
        //                     LnAmt1 := TempAmtText;
        //                     LnTot := LnTot + DecimalConv;
        //                 END;
        //             PA:
        //                 BEGIN
        //                     PAAmt := DecimalConv;
        //                     PAAmt1 := TempAmtText;
        //                     PATot := PATot + DecimalConv;
        //                 END;
        //             PB:
        //                 BEGIN
        //                     PBAmt := DecimalConv;
        //                     PBAmt1 := TempAmtText;
        //                     PBTot := PBTot + DecimalConv;
        //                 END;
        //             PCOD:
        //                 BEGIN
        //                     PCODAmt := DecimalConv;
        //                     PCODAmt1 := TempAmtText;
        //                     PCODTot := PCODTot + DecimalConv;
        //                 END;
        //             Tax:
        //                 BEGIN
        //                     TaxAmt := DecimalConv;
        //                     TaxAmt1 := TempAmtText;
        //                     TaxTot := TaxTot + DecimalConv;
        //                 END;
        //             Total:
        //                 TotalAmt1 := TempAmtText;
        //         END;
        //         Tot_Tot := Tot_Tot + DecimalConv;
        //         dateTot := dateTot + DecimalConv;
        //         IF prevdate = '' THEN BEGIN
        //             prevdate := FORMAT(RecordSet.Fields.Item('authdate').Value);
        //             tempdatevar := COPYSTR(prevdate, 1, 8);
        //         END;
        //         //MESSAGE(prevdate);
        //         /*IF (prevdate <> FORMAT(RecordSet.Fields.Item('authdate').Value)) AND (prevdate <> '') THEN
        //         BEGIN  */
        //         //Body := Body+('<tr><td>'+tempdatevar+'  '+'</td><td align = "right">'+FORMAT(AFAmt)+'</td><td align = "right">'+FORMAT(AFlAmt)+'</td><td align = "right">'+FORMAT(CSAFAmt));
        //         //Body := Body+('</td><td align = "right">'+FORMAT(CSAFlAmt)+'</td><td align = "right">'+FORMAT(EmpAmt)+'</td><td align = "right">'+FORMAT(LnAmt)+'</td><td align = "right">'+FORMAT(PAAmt));
        //         //Body := Body+('</td><td align = "right">'+FORMAT(PBAmt)+'</td><td align = "right">'+FORMAT(PCODAmt)+'</td><td align = "right">'+FORMAT(TaxAmt)+'</td><td align = "right"><b>'+FORMAT(dateTot)+'</b></td></tr>');
        //         dateTot := 0;
        //         AFAmt := 0;
        //         AFlAmt := 0;
        //         CSAFAmt := 0;
        //         CSAFlAmt := 0;
        //         EmpAmt := 0;
        //         LnAmt := 0;
        //         PAAmt := 0;
        //         PBAmt := 0;
        //         PCODAmt := 0;
        //         TaxAmt := 0;
        //         //  END;
        //         Mail_count += 1;
        //         RowCount := RowCount + 1;
        //         RecordSet.MoveNext;
        //     END;
        //     Body := Body + ('<tr><td align = "center"><b>' + tempdatevar + '</b></td><td align = "right">' + AFAmt1 + '</td><td align = "right">' + AFlAmt1 + '</td><td align = "right">' + CSAFAmt1);
        //     Body := Body + ('</b></td><td align = "right">' + CSAFlAmt1 + '</td><td align = "right">' + EmpAmt1 + '</td><td align = "right">' + LnAmt1 + '</td><td align = "right">' + PAAmt1);
        //     Body := Body + ('</b></td><td align = "right">' + PBAmt1 + '</td><td align = "right">' + PCODAmt1 + '</td><td align = "right">' + TaxAmt1 + '</td><td align = "right"><b>' + TotalAmt1 + '</b></td></tr>');
        //     Body := Body + ('</table><br>');
        //     Body := Body + ('<br>Click <a href="http://erpserver:8080/ReportMGR/Pages/Report.aspx?ItemPath=%2fCashFlow+Authorisation+Report%2fAuthorisations"><b>here</b></a> to view the detailed report for about <b>1 Month</b>');
        //     Body := Body + ('<p align ="left"> Regards,<br>ERP Team </p>');
        //     Body := Body + ('<br><p align = "center">:: Note: Auto Generated mail from ERP :: </P></div></body></html>');
        //     SMTP_MAIL.AddCC('erp@efftronics.com');

        //     IF Mail_count > 0 THEN
        //         SMTP_MAIL.Send;

    end;


    procedure SalesLinesInsertion(SaleHeader: Record "Sales Header");
    var
        OrderId: Code[20];
        CreationQuery: Text;
        Inspection: Boolean;
        Schedule: Record Schedule2;
        RW: Integer;
        RowCount1: Integer;
        RW1: Integer;
    begin
        // *************************** Sales Line Table insertion ***************************************
        // RW := 0;
        // RW1 := 0;
        // CreationQuery := '';
        // RowCount := 0;
        // IF (SaleHeader."Document Type" = SaleHeader."Document Type"::Order) THEN BEGIN
        //     SQLQuery := 'select to_char(ORDER_ID) Order_id from OMS_ORDER_MASTER_MAIN1 where sale_desc =''' + SaleHeader."No." + '''';
        // END
        // ELSE
        //     SQLQuery := 'select to_char(ORDER_ID) Order_id from OMS_ORDER_MASTER_MAIN1 where BLANKET_DESC =''' + SaleHeader."No." + '''';
        // RecordSet := SQLConnection.Execute(SQLQuery, RowCount);

        // IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //     RecordSet.MoveFirst;

        // WHILE NOT RecordSet.EOF DO BEGIN
        //     OrderId := FORMAT(RecordSet.Fields.Item('Order_id').Value);
        //     RW := RW + 1;
        //     RecordSet.MoveNext;
        // END;
        // IF RW = 1 THEN BEGIN
        //     RW1 := 0;
        //     CreationQuery := 'select order_id,product_id from OMS_ORDER_PRODUCTS_MAIN where ORDER_ID =' + FORMAT(OrderId);
        //     RecordSet := SQLConnection.Execute(CreationQuery, RowCount1);
        //     IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //         RecordSet.MoveFirst;
        //     WHILE NOT RecordSet.EOF DO BEGIN
        //         RowCount1 := RowCount1 + 1;
        //         RW1 := RW1 + 1;
        //         RecordSet.MoveNext;
        //     END;
        //     IF RW1 <= 0 THEN BEGIN
        //         SalesLine.SETRANGE(SalesLine."Document No.", SaleHeader."No.");
        //         IF SalesLine.FINDSET THEN BEGIN
        //                                       REPEAT
        //                                           IF SalesLine."No." <> '' THEN BEGIN
        //                                               Inspection := FALSE;
        //                                               IF SalesLine."RDSO Inspection Required" = TRUE THEN BEGIN
        //                                                   Inspection := TRUE;
        //                                               END;
        //                                               IF FORMAT(SalesLine.Type) = 'G/L Account' THEN BEGIN
        //                                                   CreationQuery := ' Select * from OMS_PRODUCT_MASTER1 where item_no like ''' + SalesLine."No." + ''' ';
        //                                                   RecordSet := SQLConnection.Execute(CreationQuery, RowCount);
        //                                                   IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                                                       RecordSet.MoveFirst;
        //                                                   RowCount := 0;
        //                                                   WHILE NOT RecordSet.EOF DO BEGIN
        //                                                       RowCount := RowCount + 1;
        //                                                       RecordSet.MoveNext;
        //                                                   END;
        //                                                   IF RowCount <= 0 THEN BEGIN
        //                                                       CreationQuery := ' insert into OMS_PRODUCT_MASTER1 (PRODUCT_ID, ITEM_NO, DESCRIPTION) values ' +
        //                                                                      ' ((select Max(PRODUCT_ID)+1 from OMS_PRODUCT_MASTER1),''' + SalesLine."No." + ''',' +
        //                                                                      ' ''' + SalesLine.Description + ''')';
        //                                                       IF CreationQuery <> '' THEN
        //                                                           SQLConnection.Execute(CreationQuery);
        //                                                       SQLConnection.CommitTrans;
        //                                                       SQLConnection.BeginTrans;
        //                                                   END;
        //                                               END;
        //                                               AdditemtoOrder(
        //                                                               SalesLine."No.", OrderId, SalesLine.Quantity, Inspection,
        //                                                               FORMAT(SalesLine."Line No."), ' ', FORMAT(SalesLine.Type)
        //                                                             );

        //                                               Schedule.SETRANGE(Schedule."Document No.", SaleHeader."No.");
        //                                               Schedule.SETRANGE(Schedule."Document Line No.", SalesLine."Line No.");
        //                                               IF Schedule.FINDSET THEN    // Schedule items insertion
        //                                               BEGIN
        //                                                   REPEAT
        //                                                       IF (Schedule."No." <> SalesLine."No.") THEN BEGIN
        //                                                           IF FORMAT(Schedule.Type) = 'G/L Account' THEN BEGIN
        //                                                               CreationQuery := ' Select * from OMS_PRODUCT_MASTER1 where item_no like ''' + Schedule."No." + ''' ';
        //                                                               RecordSet := SQLConnection.Execute(CreationQuery, RowCount);
        //                                                               IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                                                                   RecordSet.MoveFirst;
        //                                                               RowCount := 0;
        //                                                               WHILE NOT RecordSet.EOF DO BEGIN
        //                                                                   RowCount := RowCount + 1;
        //                                                                   RecordSet.MoveNext;
        //                                                               END;
        //                                                               IF RowCount <= 0 THEN BEGIN
        //                                                                   CreationQuery := ' insert into OMS_PRODUCT_MASTER1 (PRODUCT_ID, ITEM_NO, DESCRIPTION) values ' +
        //                                                                                  ' ((select Max(PRODUCT_ID)+1 from OMS_PRODUCT_MASTER1),''' + Schedule."No." + ''',' +
        //                                                                                  ' ''' + Schedule.Description + ''')';
        //                                                                   IF CreationQuery <> '' THEN
        //                                                                       SQLConnection.Execute(CreationQuery);
        //                                                                   SQLConnection.CommitTrans;
        //                                                                   SQLConnection.BeginTrans;
        //                                                               END;
        //                                                           END;
        //                                                           AdditemtoOrder(
        //                                                                           Schedule."No.", OrderId, Schedule.Quantity, Inspection,
        //                                                                           FORMAT(Schedule."Document Line No."), FORMAT(Schedule."Line No."),
        //                                                                           FORMAT(Schedule.Type)
        //                                                                         );
        //                                                       END;
        //                                                   UNTIL Schedule.NEXT = 0
        //                                               END;
        //                                           END;
        //                                       UNTIL SalesLine.NEXT = 0
        //         END;  // SalesLine Find end
        //         SQLConnection.CommitTrans;
        //         SQLConnection.BeginTrans;
        //     END;  // RW1 <0 condition end
        // END;  // RW = 1 condition end
        // CreationQuery := '';
        // RowCount := 0;
    end;


    procedure EMDCreationInCF(Tender: Record "Tender Header");
    var
        TenderHeader: Record "Tender Header";
        TenderLine: Integer;
        EMD_ID: Code[10];
        CustId: Integer;
        TenderId: Code[10];
        EMDAmount: BigInteger;
        InFavorOf: Text;
        UsrId: Code[10];
        User: Record User;
    begin
        MESSAGE('EMD Creation in CashFlow!');
        //Initialization start
        RowCount := 0;
        SQLQuery := '';

        //Initializations end

        // IF ISCLEAR(SQLConnection) THEN
        //     CREATE(SQLConnection, FALSE, TRUE);

        // IF ISCLEAR(RecordSet) THEN
        //     CREATE(RecordSet, FALSE, TRUE);

        // IF ConnectionOpen <> 1 THEN BEGIN
        //     SQLConnection.ConnectionString := 'DSN=CASHFLOW;UID=cashflowuser;PASSWORD=firewall123;SERVER=oracle_80;';
        //     SQLConnection.Open;
        //     SQLConnection.BeginTrans;
        //     ConnectionOpen := 1;
        // END;
        // CustomerCheckInCF(Tender."Customer No.");   // Checks if customer exist in CashFLow else insert customer
        // SQLQuery := 'select * from MRP_AR_CUSTOMER where ERP_CUSID= ''' + Tender."Customer No." + '''';
        // RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        // IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //     RecordSet.MoveFirst;
        // WHILE NOT RecordSet.EOF DO BEGIN
        //     EVALUATE(CustId, FORMAT(RecordSet.Fields.Item('AR_CUSTOMER_ID').Value));
        //     RowCount := RowCount + 1;
        //     RecordSet.MoveNext;
        // END;

        // SQLQuery := 'SELECT MAX(TENDER_ID) TENDER_ID FROM MRP_TENDER WHERE ERP_TENDER_NO = ''' + Tender."Tender No." + '''';
        // RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        // IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //     RecordSet.MoveFirst;

        // WHILE NOT RecordSet.EOF DO BEGIN
        //     TenderId := FORMAT(RecordSet.Fields.Item('TENDER_ID').Value);
        //     RowCount := RowCount + 1;
        //     RecordSet.MoveNext;
        // END;

        // SQLQuery := 'SELECT * FROM MRP_EMD WHERE TENDER_ID = (SELECT MAX(TENDER_ID) TENDER_ID FROM MRP_TENDER WHERE ERP_TENDER_NO = ''' + Tender."Tender No." + ''')';
        // RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        // IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //     RecordSet.MoveFirst;

        // WHILE NOT RecordSet.EOF DO BEGIN
        //     EMD_ID := FORMAT(RecordSet.Fields.Item('EMD_ID').Value);
        //     RowCount := RowCount + 1;
        //     RecordSet.MoveNext;
        // END;
        // EMDAmount := ROUND(Tender."EMD Amount", 1);
        // IF Tender."InFavour of" <> '' THEN
        //     InFavorOf := Tender."InFavour of"
        // ELSE
        //     InFavorOf := '-';
        // User.RESET;
        // User.SETRANGE(User."User Name", USERID);
        // IF User.FINDFIRST THEN
        //     UsrId := User.EmployeeID;
        // IF EMD_ID = '' THEN BEGIN
        //     SQLQuery := 'INSERT INTO MRP_EMD (EMD_ID,EMD_MODE,EMD_NUMBER,EMD_REQUEST_DATE,EMD_EXPECT_DATE,EMD_TAKEN_STATUS,EMD_AMOUNT,EMD_PAYEE_NAME,' +
        //                 'EMD_CANCEL_STATUS,EMD_STATUS,AR_CUSTOMER_ID,TENDER_ID,REMARKS,CREATION_DATE,USERID,PAYABLE_AT) ' +
        //                 'VALUES((SELECT NVL(Max(EMD_ID)+1,1) FROM MRP_EMD), ''' + FORMAT(Tender."EMD Mode of Payment") +
        //                 ''', '''', to_date(''' + FORMAT(Tender."EMD Required Date", 0, '<Day>-<Month Text,3>-<Year4>') + ''',''dd-mon-yyyy''), to_date(''' +
        //                 FORMAT(Tender."EMD Expected Date", 0, '<Day>-<Month Text,3>-<Year4>') + ''',''dd-mon-yyyy''), ''N'', ' + FORMAT(EMDAmount) + ', ''' +
        //                 InFavorOf + ''', ''N'', ''N'',' + FORMAT(CustId) + ', ' + TenderId + ', ''' + Tender.Remarks + ''',sysdate,''' + UsrId + ''',''' + Tender."Payable At" + ''') ';

        //     SQLConnection.Execute(SQLQuery);
        //     SQLQuery := 'INSERT INTO MRP_EMD_OUTFLOW_PLAN_CHANGES (PLAN_CHANGE_ID,EMD_ID,TENDOR_ID,PLANNED_AMOUNT,PAYMENT_REALIZE_DATE,REMARKS,CREATION_DATE,' +
        //                 'USERID,SL_NO,PAYMENT_ID,BASEPLAN,SPLITEDFROM) VALUES((SELECT NVL(MAX(PLAN_CHANGE_ID)+1,1) FROM MRP_EMD_OUTFLOW_PLAN_CHANGES), ' +
        //                 '(SELECT NVL(Max(EMD_ID),1) FROM MRP_EMD) , ' + TenderId + ', ' + FORMAT(EMDAmount) +
        //                 ', to_date(''' + FORMAT(Tender."EMD Required Date", 0, '<Day>-<Month Text,3>-<Year4>') + ''',''dd-mon-yyyy''), '''', SYSDATE, ''' + UsrId + ''', 1,'''',1,'''')';

        //     SQLConnection.Execute(SQLQuery);
        // END
        // ELSE BEGIN
        //     SQLQuery := 'UPDATE MRP_EMD SET EMD_MODE = ''' + FORMAT(Tender."EMD Mode of Payment") + ''', EMD_REQUEST_DATE = to_date(''' +
        //                 FORMAT(Tender."EMD Required Date", 0, '<Day>-<Month Text,3>-<Year4>') + ''',''dd-mon-yyyy''), EMD_EXPECT_DATE = to_date(''' +
        //                 FORMAT(Tender."EMD Expected Date", 0, '<Day>-<Month Text,3>-<Year4>') + ''',''dd-mon-yyyy''), ' +
        //                 'EMD_AMOUNT = ' + FORMAT(EMDAmount) + ',EMD_PAYEE_NAME = ''' + InFavorOf + ''', REMARKS = ''' + Tender.Remarks + ''', DD_CHEQUE_NO = ''' +
        //                 Tender."EMD DD No." + ''',PAYABLE_AT = ''' + Tender."Payable At" + ''', AR_CUSTOMER_ID = ' + FORMAT(CustId) + ', TENDER_ID = ' + TenderId + ' WHERE  EMD_ID = ' + EMD_ID;

        //     SQLConnection.Execute(SQLQuery);
        //     SQLQuery := 'UPDATE MRP_EMD_OUTFLOW_PLAN_CHANGES SET  PLANNED_AMOUNT = ' + FORMAT(EMDAmount) + ', PAYMENT_REALIZE_DATE = ' +
        //     'to_date(''' + FORMAT(Tender."EMD Required Date", 0, '<Day>-<Month Text,3>-<Year4>') + ''',''dd-mon-yyyy'')' +
        //     ' WHERE EMD_ID = ' + EMD_ID + ' AND TENDOR_ID = ' + TenderId + ' AND SL_NO = 1 AND BASEPLAN = 1';

        //     SQLConnection.Execute(SQLQuery);
        // END;
        // SQLConnection.CommitTrans;
        // RecordSet.Close;
        // SQLConnection.Close;
        // ConnectionOpen := 0;
    end;


    procedure TenderCreationInCF(Tender: Record "Tender Header");
    var
        TenderHeader: Record "Tender Header";
        Customer: Record Customer;
        TenderId: Code[10];
        CustId: Integer;
        tendoramount: BigInteger;
        Tendor_Type: Code[10];
    begin
        // MESSAGE('Tender Creation in CashFlow!');
        // //Initialization start
        // RowCount := 0;
        // SQLQuery := '';
        // TenderId := '';
        // //Initializations end

        // IF ISCLEAR(SQLConnection) THEN
        //     CREATE(SQLConnection, FALSE, TRUE);

        // IF ISCLEAR(RecordSet) THEN
        //     CREATE(RecordSet, FALSE, TRUE);

        // IF ConnectionOpen <> 1 THEN BEGIN
        //     SQLConnection.ConnectionString := 'DSN=CASHFLOW;UID=cashflowuser;PASSWORD=firewall123;SERVER=oracle_80;';
        //     SQLConnection.Open;
        //     SQLConnection.BeginTrans;
        //     ConnectionOpen := 1;
        // END;
        // CustomerCheckInCF(Tender."Customer No.");   // Checks if customer exist in CashFLow else insert customer
        // SQLQuery := 'select * from MRP_AR_CUSTOMER where ERP_CUSID= ''' + Tender."Customer No." + '''';
        // RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        // IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //     RecordSet.MoveFirst;
        // WHILE NOT RecordSet.EOF DO BEGIN
        //     EVALUATE(CustId, FORMAT(RecordSet.Fields.Item('AR_CUSTOMER_ID').Value));
        //     RowCount := RowCount + 1;
        //     RecordSet.MoveNext;
        // END;

        // Tendor_Type := FORMAT(Tender.TenderType);

        // SQLQuery := 'SELECT * FROM MRP_TENDER WHERE ERP_TENDER_NO = ''' + Tender."Tender No." + '''';

        // tendoramount := ROUND(Tender."Minimum Bid Amount", 1);

        // RecordSet := SQLConnection.Execute(SQLQuery);
        // IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //     RecordSet.MoveFirst;

        // WHILE NOT RecordSet.EOF DO BEGIN
        //     TenderId := FORMAT(RecordSet.Fields.Item('TENDER_ID').Value);
        //     RowCount := RowCount + 1;
        //     RecordSet.MoveNext;
        // END;
        // IF TenderId <> '' THEN BEGIN
        //     SQLQuery := 'UPDATE MRP_TENDER SET AR_CUSTOMER_ID = ' + FORMAT(CustId) + ', CUST_TENDER_NO = ''' + Tender."Customer Tender No." + ''', TENDER_CALLED_DATE = to_date(''' +
        //                 FORMAT(Tender."Tender Source Date", 0, '<Day>-<Month Text,3>-<Year4>') + ''',''dd-mon-yyyy''), TENDER_LAST_DATE = to_date(''' +
        //                 FORMAT(Tender."Tender Dated", 0, '<Day>-<Month Text,3>-<Year4>') + ''',''dd-mon-yyyy''), TENDER_AMOUNT = ' + FORMAT(tendoramount) + ',' +
        //                 'REMARKS = ''' + Tender.Remarks + ''', USERID = ''' + 'Auto' + ''', TENDER_TYPE = ''' + Tendor_Type + ''', ' +
        //                 'ERP_TENDER_STATUS = ''' + FORMAT(Tender."Tender Status") + ''' WHERE ERP_TENDER_NO = ''' + Tender."Tender No." + ''' AND TENDER_ID = ' + TenderId;

        //     IF SQLQuery <> '' THEN
        //         SQLConnection.Execute(SQLQuery);
        // END
        // ELSE BEGIN
        //     SQLQuery := 'INSERT INTO MRP_TENDER (TENDER_ID,AR_CUSTOMER_ID,CUST_TENDER_NO,TENDER_CALLED_DATE,TENDER_LAST_DATE,TENDER_AMOUNT,' +
        //                 'STATUS,REMARKS,CREATION_DATE,USERID,ERP_TENDER_NO,ERP_TENDER_STATUS,TENDER_TYPE) VALUES((SELECT MAX(TENDER_ID)+1 FROM MRP_TENDER), ' + FORMAT(CustId) +
        //                 ', ''' + Tender."Customer Tender No." + ''', to_date(''' + FORMAT(Tender."Tender Source Date", 0, '<Day>-<Month Text,3>-<Year4>') +
        //                 ''',''dd-mon-yyyy''), to_date(''' + FORMAT(Tender."Tender Dated", 0, '<Day>-<Month Text,3>-<Year4>') + ''',''dd-mon-yyyy''), ' +
        //                 FORMAT(tendoramount) + ', ''N'', ''' + Tender.Remarks + ''', sysdate, ''' + 'Auto' + ''', ''' + Tender."Tender No." + ''', ''' +
        //                 FORMAT(Tender."Tender Status") + ''',''' + Tendor_Type + ''' )';

        //     IF SQLQuery <> '' THEN
        //         SQLConnection.Execute(SQLQuery);
        // END;
        // SQLConnection.CommitTrans;
        // RecordSet.Close;
        // SQLConnection.Close;
        // ConnectionOpen := 0;
    end;


    procedure CustomerCheckInCF(ERPCustNo: Code[12]);
    var
        CF_Cust_Id: Integer;
        LASTREC: Integer;
        CustGRec: Record Customer;
        Country: Record "Country/Region";
        cntry: Code[50];
        statename: Code[50];
        state: Record State;
        addrs2: Text;
        user: Record User;
        username: Code[100];
        CusPstgGrp: Code[20];
    begin
        // SQLQuery := '';
        // RowCount := 0;
        // CF_Cust_Id := 0;
        // LASTREC := 0;
        // SQLQuery := 'select * from MRP_AR_CUSTOMER where ERP_CUSID= ''' + ERPCustNo + '''';
        // RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        // IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //     RecordSet.MoveFirst;
        // WHILE NOT RecordSet.EOF DO BEGIN
        //     EVALUATE(CF_Cust_Id, DELCHR(FORMAT(RecordSet.Fields.Item('AR_CUSTOMER_ID').Value), '=', ','));
        //     RowCount := RowCount + 1;
        //     RecordSet.MoveNext;
        // END;
        // IF CF_Cust_Id = 0 THEN BEGIN
        //     SQLQuery := 'SELECT NVL(MAX(AR_CUSTOMER_ID)+1,1) AS LASTNUM FROM MRP_AR_CUSTOMER';
        //     RecordSet := SQLConnection.Execute(SQLQuery);
        //     IF NOT (RecordSet.EOF OR RecordSet.BOF) THEN
        //         EVALUATE(LASTREC, DELCHR(FORMAT(RecordSet.Fields.Item('LASTNUM').Value), '=', ','));
        //     CustGRec.RESET;
        //     CustGRec.SETFILTER(CustGRec."No.", ERPCustNo);
        //     IF CustGRec.FINDFIRST THEN BEGIN
        //         Country.RESET;
        //         Country.SETFILTER(Country.Code, CustGRec."Country/Region Code");
        //         IF Country.FINDFIRST THEN
        //             cntry := Country.Name;
        //         state.RESET;
        //         state.SETFILTER(state.Code, CustGRec."State Code");
        //         IF state.FINDFIRST THEN
        //             statename := state.Description;
        //         addrs2 := CustGRec."Address 2";
        //         IF addrs2 = '' THEN
        //             addrs2 := '-';
        //         user.SETFILTER(user."User Name", USERID);
        //         IF user.FINDFIRST THEN
        //             username := user.EmployeeID;
        //         CusPstgGrp := UPPERCASE(COPYSTR(CustGRec."Customer Posting Group", 1, 1)) + LOWERCASE(COPYSTR(CustGRec."Customer Posting Group", 2, STRLEN(CustGRec."Customer Posting Group") - 1));
        //         IF CusPstgGrp IN ['Others', 'OTHERS', 'EXPORT', 'Export'] THEN         //added by Pranavi on 06-07-2015 to send Others as Private
        //             CusPstgGrp := 'Private'
        //         ELSE
        //             IF CusPstgGrp = 'Railways' THEN
        //                 CusPstgGrp := COPYSTR(CusPstgGrp, 1, STRLEN(CusPstgGrp) - 1);

        //         SQLQuery := 'INSERT INTO MRP_AR_CUSTOMER(AR_CUSTOMER_ID, AR_CUSTOMER_TYPE, NAME, ADDRESSLINE1, ADDRESSLINE2, CITY, STATE, ERP_CUSID, ' +
        //         'PHONE_NO, MOBILE_NO, EMAIL_ID, ZIP, COUNTRY, USERID) VALUES' +
        //             '(' + FORMAT(LASTREC) + ', ''' + CusPstgGrp + ''', ''' + CustGRec.Name + ''', ''' + CustGRec.Address + ''', ''' + addrs2 + ''', ''' + CustGRec.City + ''', ''' + statename +
        //            ''',''' + CustGRec."No." + ''', ''' + CustGRec."Telex No." + ''', ''' + CustGRec."Phone No." + ''', ''' + CustGRec."E-Mail" + ''', ''' + CustGRec."Post Code" + ''', ''' + cntry + ''', ''' + username + ''')';
        //         // MESSAGE(SQLQuery);
        //         // SQLConnection.Execute(SQLQuery);
        //         // SQLConnection.CommitTrans;
        //         // SQLConnection.BeginTrans;
        //         CF_Cust_Id := LASTREC;
        //  END;
        // END;
    end;


    procedure ActPeriodActYearCalc(Req_Date: Date);
    var
        cDay: Integer;
        cMonth: Integer;
        cYear: Integer;
        cDay1: Integer;
        cDay2: Integer;
        cDay3: Integer;
        cDay4: Integer;
        cDay5: Integer;
        PeriodNo: Integer;
        AccountYearMonth: Integer;
        ShipmentDate: Text;
    begin
        //MESSAGE('Calculating Act Period and Act Year!');
        cDay1 := 1;
        cDay2 := 8;
        cDay3 := 16;
        cDay4 := 23;
        cDay5 := 24;
        ShipmentDate := '';
        PeriodNum := 0;
        AccountYear := 0;
        ShipmentDate := FORMAT(Req_Date, 0, '<Day>-<Month Text,3>-<Year4>');
        cDay := DATE2DMY(Req_Date, 1);
        cMonth := DATE2DMY(Req_Date, 2);
        cYear := DATE2DMY(Req_Date, 3);
        IF cMonth < 4 THEN BEGIN
            AccountYear := cYear - 1;
            AccountYearMonth := cMonth + 9;
        END
        ELSE BEGIN
            AccountYear := cYear;
            AccountYearMonth := cMonth - 3;
        END;
        IF cDay < cDay2 THEN
            PeriodNo := 1
        ELSE
            IF (cDay >= cDay2) AND (cDay < cDay3) THEN
                PeriodNo := 2
            ELSE BEGIN
                //MESSAGE(FORMAT(DATE2DMY(CALCDATE('CM',DMY2DATEh,cYear)),1)));
                IF DATE2DMY(CALCDATE('CM', DMY2DATE(1, cMonth, cYear)), 1) = 31 THEN begin
                    IF (cDay >= cDay3) AND (cDay < cDay5) THEN
                        PeriodNo := 3
                    ELSE
                        PeriodNo := 4
                END
                ELSE BEGIN
                    IF (cDay >= cDay3) AND (cDay < cDay4) THEN
                        PeriodNo := 3
                    ELSE
                        PeriodNo := 4
                END;
            END;
        IF Req_Date = TODAY() THEN
            PeriodNum := 0
        ELSE
            PeriodNum := (AccountYearMonth * 4) - 4 + PeriodNo;
        // MESSAGE('Act Period: '+FORMAT(PeriodNum)+' Act Year: '+FORMAT(AccountYear));
    end;


    procedure SaleOrderCreationinCashFlow(SalesHeader: Record "Sales Header");
    var
        CustId: Integer;
        SaleOrderId: Integer;
        SalesLine: Record "Sales Line";
        SupplyAmt: BigInteger;
        InstAmt: BigInteger;
        SaleOrderTotAmt: BigInteger;
        Cust: Record Customer;
        CSManager: Code[100];
        divisionGRec: Record "Employee Statistics Group";
        SP: Record "Salesperson/Purchaser";
        DummySaleOrderId: Integer;
        InsertedStatus: Code[1];
        NewSaleOrderId: Integer;
        NewDummySaleOrderId: Integer;
        InstId: Integer;
        CustOrderNo: Code[50];
        CustOrderDate: Date;
        InvID: Integer;
    begin
        // //MESSAGE('Sale Order creation in Cashflow!');
        // //Initialization start
        // RowCount := 0;
        // SQLQuery := '';
        // //Initializations end

        // IF ISCLEAR(SQLConnection) THEN
        //     CREATE(SQLConnection, FALSE, TRUE);

        // IF ISCLEAR(RecordSet) THEN
        //     CREATE(RecordSet, FALSE, TRUE);

        // IF (SalesHeader."Currency Factor" > 0) AND (SalesHeader."Currency Code" <> '') THEN BEGIN
        //     CurrencyFactor := SalesHeader."Currency Factor";
        // END ELSE BEGIN
        //     CurrencyFactor := 1;
        // END;

        // IF ConnectionOpen <> 1 THEN BEGIN
        //     SQLConnection.ConnectionString := 'DSN=CASHFLOW;UID=cashflowuser;PASSWORD=firewall123;SERVER=oracle_80;';
        //     SQLConnection.Open;
        //     SQLConnection.BeginTrans;
        //     ConnectionOpen := 1;
        // END;
        // CustomerCheckInCF(SalesHeader."Sell-to Customer No.");   // Checks if customer exist in CashFLow else insert customer
        // SQLQuery := 'select * from MRP_AR_CUSTOMER where ERP_CUSID= ''' + SalesHeader."Sell-to Customer No." + '''';
        // RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        // IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //     RecordSet.MoveFirst;
        // WHILE NOT RecordSet.EOF DO BEGIN
        //     EVALUATE(CustId, DELCHR(FORMAT(RecordSet.Fields.Item('AR_CUSTOMER_ID').Value), '=', ','));
        //     RowCount := RowCount + 1;
        //     RecordSet.MoveNext;
        // END;
        // IF FORMAT(SalesHeader."Document Type") = 'Order' THEN BEGIN
        //     Cust.RESET;
        //     Cust.SETRANGE(Cust."No.", SalesHeader."Sell-to Customer No.");
        //     IF Cust.FINDFIRST THEN BEGIN
        //         divisionGRec.RESET;
        //         divisionGRec.SETRANGE(divisionGRec."Division Code", Cust."Service Zone Code");
        //         IF divisionGRec.FINDFIRST THEN BEGIN
        //             SP.RESET;
        //             SP.SETRANGE(SP.Code, divisionGRec."Project Manager");
        //             IF SP.FINDFIRST THEN
        //                 CSManager := SP.Name;
        //         END;
        //     END;
        //     SalesLine.RESET;
        //     SalesLine.SETRANGE(SalesLine."Document Type", SalesLine."Document Type"::Order);
        //     SalesLine.SETRANGE(SalesLine."Document No.", SalesHeader."No.");
        //     SalesLine.SETFILTER(SalesLine."No.", '<>%1', '');
        //     SalesLine.SETFILTER(SalesLine.Quantity, '>%1', 0);
        //     IF SalesLine.FINDSET THEN
        //         REPEAT
        //                 IF SalesLine.Type = SalesLine.Type::Item THEN
        //                     SupplyAmt := SupplyAmt + ROUND(SalesLine.Quantity * SalesLine."Unitcost(LOA)" / CurrencyFactor, 1)
        //                 ELSE
        //                     IF SalesLine.Type = SalesLine.Type::"G/L Account" THEN
        //                         InstAmt := InstAmt + ROUND(SalesLine.Quantity * SalesLine."Unitcost(LOA)" / CurrencyFactor, 1);
        //             SaleOrderTotAmt := SaleOrderTotAmt + ROUND(SalesLine.Quantity * SalesLine."Unitcost(LOA)" / CurrencyFactor, 1);
        //         UNTIL SalesLine.NEXT = 0;
        //     //SaleOrderTotAmt := ROUND(SalesHeader."Sale Order Total Amount",1);
        //     IF SalesHeader."Customer Posting Group" = 'RAILWAYS' THEN BEGIN
        //         SQLQuery := 'SELECT * FROM MRP_SALE_ORDER_DUMMY WHERE INT_SAL_ORD_NO = ''' + SalesHeader."No." + '''';
        //         RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //         IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //             RecordSet.MoveFirst;
        //         WHILE NOT RecordSet.EOF DO BEGIN
        //             EVALUATE(DummySaleOrderId, DELCHR(FORMAT(RecordSet.Fields.Item('SALE_ORDER_ID').Value), '=', ','));
        //             InsertedStatus := FORMAT(RecordSet.Fields.Item('INSERTED_STATUS').Value);
        //             RowCount := RowCount + 1;
        //             RecordSet.MoveNext;
        //         END;
        //         IF DummySaleOrderId <> 0 THEN    // Check if sale order present in sale order dummy table in c/f
        //         BEGIN
        //             IF InsertedStatus = 'Y' THEN    // check if status indicate sale order created in sale order main table in c/f
        //             BEGIN
        //                 SQLQuery := 'SELECT * FROM MRP_SALE_ORDER WHERE INT_SAL_ORD_NO = ''' + SalesHeader."No." + ''' AND STATUS = ''N''';
        //                 RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                 IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                     RecordSet.MoveFirst;
        //                 WHILE NOT RecordSet.EOF DO BEGIN
        //                     EVALUATE(SaleOrderId, DELCHR(FORMAT(RecordSet.Fields.Item('SALE_ORDER_ID').Value), '=', ','));
        //                     RowCount := RowCount + 1;
        //                     RecordSet.MoveNext;
        //                 END;
        //                 IF SaleOrderId = 0 THEN   // check if sale order created in sale order main table in c/f
        //                 BEGIN
        //                     SQLQuery := 'UPDATE MRP_SALE_ORDER_DUMMY SET AR_CUSTOMER_ID = ' + FORMAT(CustId) + ', PURCHASEORDERNO = ''' + SalesHeader."Customer OrderNo." + ''', ' +
        //                                'PURCHASEORDER_DATE = to_date(''' + FORMAT(SalesHeader."Customer Order Date", 0, '<Day>-<Month Text,3>-<Year4>') + ''',''dd-mon-yyyy''), ' +
        //                                'SALE_ORDER_AMOUNT = ' + FORMAT(SaleOrderTotAmt) + ', SUPPLYAMOUNT = ' + FORMAT(SupplyAmt) + ', INSTALLAMOUNT = ' + FORMAT(InstAmt) + ', ' +
        //                                'SALESPERSON = ''' + SalesHeader."Salesperson Code" + ''', CSMANAGER =  ''' + CSManager + ''', INSERTED_STATUS = ''N'' WHERE SALE_ORDER_ID = ' + FORMAT(DummySaleOrderId) +
        //                                ' AND INT_SAL_ORD_NO = ''' + SalesHeader."No." + '''';
        //                     SQLConnection.Execute(SQLQuery);
        //                     //  SecDepostitCreationInCashFLow(0,SalesHeader,CustId);    // security deposit creation
        //                 END
        //                 ELSE BEGIN
        //                     SQLQuery := 'UPDATE MRP_SALE_ORDER SET AR_CUSTOMER_ID = ' + FORMAT(CustId) + ', PURCHASEORDERNO = ''' + SalesHeader."Customer OrderNo." + ''', ' +
        //                                'PURCHASEORDER_DATE = to_date(''' + FORMAT(SalesHeader."Customer Order Date", 0, '<Day>-<Month Text,3>-<Year4>') + ''',''dd-mon-yyyy''), ' +
        //                                'SALE_ORDER_AMOUNT = ' + FORMAT(SaleOrderTotAmt) + ', SUPPLYAMOUNT = ' + FORMAT(SupplyAmt) + ', INSTALLAMOUNT = ' + FORMAT(InstAmt) + ', ' +
        //                                'SALESPERSON = ''' + SalesHeader."Salesperson Code" + ''', CSMANAGER =  ''' + CSManager + ''' WHERE SALE_ORDER_ID = ' + FORMAT(SaleOrderId) +
        //                                ' AND INT_SAL_ORD_NO = ''' + SalesHeader."No." + ''' AND STATUS = ''N''';
        //                     SQLConnection.Execute(SQLQuery);
        //                     SecDepostitCreationInCashFLow(SaleOrderId, SalesHeader, CustId);    // security deposit creation
        //                     MESSAGE('Sale Order Details Updated in Cashflow!');
        //                 END;
        //             END
        //             ELSE
        //                 IF InsertedStatus = 'N' THEN  // check if status is N i.e. indicates sale order not created in sale order main table in c/f
        //            BEGIN
        //                     SQLQuery := 'UPDATE MRP_SALE_ORDER_DUMMY SET AR_CUSTOMER_ID = ' + FORMAT(CustId) + ', PURCHASEORDERNO = ''' + SalesHeader."Customer OrderNo." + ''', ' +
        //                                'PURCHASEORDER_DATE = to_date(''' + FORMAT(SalesHeader."Customer Order Date", 0, '<Day>-<Month Text,3>-<Year4>') + ''',''dd-mon-yyyy''), ' +
        //                                'SALE_ORDER_AMOUNT = ' + FORMAT(SaleOrderTotAmt) + ', SUPPLYAMOUNT = ' + FORMAT(SupplyAmt) + ', INSTALLAMOUNT = ' + FORMAT(InstAmt) + ', ' +
        //                                'SALESPERSON = ''' + SalesHeader."Salesperson Code" + ''', CSMANAGER =  ''' + CSManager + ''' WHERE SALE_ORDER_ID = ' + FORMAT(DummySaleOrderId) +
        //                                ' AND INT_SAL_ORD_NO = ''' + SalesHeader."No." + '''';
        //                     SQLConnection.Execute(SQLQuery);
        //                     //  SecDepostitCreationInCashFLow(0,SalesHeader,CustId);    // security deposit creation
        //                 END;
        //         END
        //         ELSE  // if new order i.e. record does not present in sale order dummy table in c/f
        //         BEGIN
        //             SQLQuery := 'INSERT INTO MRP_SALE_ORDER_DUMMY (' +
        //                         'SALE_ORDER_ID,AR_CUSTOMER_ID,PURCHASEORDERNO,PURCHASEORDER_DATE,SALE_ORDER_AMOUNT,STATUS,REMARKS,' +
        //                         'CREATION_DATE,EXP_DELIVERY_DATE,USERID,INT_SAL_ORD_NO,SUPPLYAMOUNT,INSTALLAMOUNT,SALESPERSON,CSMANAGER,INSERTED_STATUS) ' +
        //                         'VALUES((SELECT NVL(MAX(SALE_ORDER_ID)+1,1) FROM MRP_SALE_ORDER_DUMMY),' + FORMAT(CustId) + ', ''' + SalesHeader."Customer OrderNo." + ''', ' +
        //                         'to_date(''' + FORMAT(SalesHeader."Customer Order Date", 0, '<Day>-<Month Text,3>-<Year4>') + ''',''dd-mon-yyyy''),' + FORMAT(SaleOrderTotAmt) + ', ''N'', ''' +
        //                         SalesHeader.Remarks + ''', SYSDATE, to_date(''' + FORMAT(SalesHeader."Requested Delivery Date", 0, '<Day>-<Month Text,3>-<Year4>') + ''',''dd-mon-yyyy''), ''Auto'',' +
        //                         '''' + SalesHeader."No." + ''', ' + FORMAT(SupplyAmt) + ', ' + FORMAT(InstAmt) + ', ''' + SalesHeader."Salesperson Code" + ''', ''' + CSManager + ''',''N'')';
        //             SQLConnection.Execute(SQLQuery);
        //             // SecDepostitCreationInCashFLow(0,SalesHeader,CustId);    // security deposit creation
        //         END
        //     END    // end of customer posting group is Railways
        //     ELSE   // if customer posting group is other than Railways
        //     BEGIN
        //         IF SalesHeader."Customer OrderNo." <> '' THEN
        //             CustOrderNo := SalesHeader."Customer OrderNo."
        //         ELSE
        //             CustOrderNo := 'SELF PO';
        //         IF SalesHeader."Customer Order Date" <> 0D THEN
        //             CustOrderDate := SalesHeader."Customer Order Date"
        //         ELSE
        //             CustOrderDate := TODAY();
        //         SQLQuery := 'SELECT * FROM MRP_SALE_ORDER WHERE INT_SAL_ORD_NO = ''' + SalesHeader."No." + ''' and STATUS = ''N''';
        //         RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //         IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //             RecordSet.MoveFirst;
        //         WHILE NOT RecordSet.EOF DO BEGIN
        //             SaleOrderId := RecordSet.Fields.Item('SALE_ORDER_ID').Value;
        //             RowCount := RowCount + 1;
        //             RecordSet.MoveNext;
        //         END;
        //         IF SaleOrderId = 0 THEN    // check if sale order present in sale order table in c/f then insert order
        //         BEGIN
        //             SQLQuery := 'SELECT SALE_ORDER_SEQ.NEXTVAL LASTINVOICEID from dual';
        //             RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //             IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                 RecordSet.MoveFirst;
        //             WHILE NOT RecordSet.EOF DO BEGIN
        //                 EVALUATE(NewSaleOrderId, FORMAT(RecordSet.Fields.Item('LASTINVOICEID').Value));
        //                 // MESSAGE(FORMAT(NewSaleOrderId));
        //                 RowCount := RowCount + 1;
        //                 RecordSet.MoveNext;
        //             END;
        //             SQLQuery := 'INSERT INTO MRP_SALE_ORDER (SALE_ORDER_ID,AR_CUSTOMER_ID,PURCHASEORDERNO,PURCHASEORDER_DATE,SALE_ORDER_AMOUNT,STATUS,REMARKS,' +
        //                         'CREATION_DATE,EXP_DELIVERY_DATE,USERID,INT_SAL_ORD_NO,SUPPLYAMOUNT,INSTALLAMOUNT,SALESPERSON,CSMANAGER) ' +
        //                         'VALUES(' + FORMAT(NewSaleOrderId) + ', ' + FORMAT(CustId) + ', ''' + CustOrderNo + ''', ' +
        //                         'to_date(''' + FORMAT(CustOrderDate, 0, '<Day>-<Month Text,3>-<Year4>') + ''',''dd-mon-yyyy''),' + FORMAT(SaleOrderTotAmt) + ', ''N'', ''' +
        //                         SalesHeader.Remarks + ''', SYSDATE, to_date(''' + FORMAT(SalesHeader."Requested Delivery Date", 0, '<Day>-<Month Text,3>-<Year4>') + ''',''dd-mon-yyyy''), ''Auto'', ' +
        //                         '''' + SalesHeader."No." + ''', ' + FORMAT(SupplyAmt) + ', ' + FORMAT(InstAmt) + ', ''' + SalesHeader."Salesperson Code" + ''', ''' + CSManager + ''')';
        //             //     MESSAGE(SQLQuery);
        //             SQLConnection.Execute(SQLQuery);
        //             IF InstAmt > 0 THEN BEGIN
        //                 SQLQuery := 'INSERT INTO MRP_ARR_INSTALL_INVOICE (AR_INVOICE_ID,SALE_ORDER_ID,INVOICE_DATE,AMOUNT,REMARKS,USERID,CREATION_DATE,INSTALL_PERCENT,AMOUNTTYPE) ' +
        //                            'VALUES(ARR_INVOICE_SEQ.NEXTVAL, ' + FORMAT(NewSaleOrderId) + ', SYSDATE, ' + FORMAT(InstAmt) + ', ' +
        //                            '''Pvt Orders Installation'', ''Auto'', SYSDATE, '''', ''I'')';
        //                 SQLConnection.Execute(SQLQuery);
        //             END;
        //             IF COPYSTR(SalesHeader."No.", 14, 2) IN ['/L', '/T'] THEN BEGIN
        //                 SQLQuery := 'INSERT INTO MRP_ARR_INVOICE (AR_INVOICE_ID,SALE_ORDER_ID,INVOICE_DATE,AMOUNT,REMARKS,USERID,CREATION_DATE,SALEORDER_PERCENT,ORDERDATE) ' +
        //                            'VALUES(ARR_INVOICE_SEQ.NEXTVAL, ' + FORMAT(NewSaleOrderId) + ', SYSDATE, ' + FORMAT(SaleOrderTotAmt) + ', ' +
        //                            '''LMD Orders'', ''Auto'', SYSDATE, '''', SYSDATE)';
        //                 SQLConnection.Execute(SQLQuery);
        //             END;
        //             SQLConnection.CommitTrans;
        //             SQLConnection.BeginTrans;
        //             IF SalesHeader."SD Status" <> SalesHeader."SD Status"::NA THEN
        //                 SecDepostitCreationInCashFLow(NewSaleOrderId, SalesHeader, CustId);    // security deposit creation
        //             MESSAGE('Sale Order Created in Cashflow!');
        //         END
        //         ELSE     // if sale order already present in sale order table in c/f update details
        //         BEGIN
        //             SQLQuery := 'UPDATE MRP_SALE_ORDER SET AR_CUSTOMER_ID = ' + FORMAT(CustId) + ', PURCHASEORDERNO = ''' + CustOrderNo + ''', ' +
        //                        'PURCHASEORDER_DATE = to_date(''' + FORMAT(CustOrderDate, 0, '<Day>-<Month Text,3>-<Year4>') + ''',''dd-mon-yyyy''), ' +
        //                        'SALE_ORDER_AMOUNT = ' + FORMAT(SaleOrderTotAmt) + ', SUPPLYAMOUNT = ' + FORMAT(SupplyAmt) + ', INSTALLAMOUNT = ' + FORMAT(InstAmt) + ', ' +
        //                        'SALESPERSON = ''' + SalesHeader."Salesperson Code" + ''', CSMANAGER =  ''' + CSManager + ''' WHERE SALE_ORDER_ID = ' + FORMAT(SaleOrderId) +
        //                        ' AND INT_SAL_ORD_NO = ''' + SalesHeader."No." + ''' AND STATUS = ''N''';
        //             SQLConnection.Execute(SQLQuery);
        //             IF SalesHeader."SD Status" <> SalesHeader."SD Status"::NA THEN
        //                 SecDepostitCreationInCashFLow(SaleOrderId, SalesHeader, CustId);    // security deposit creation
        //             IF COPYSTR(SalesHeader."No.", 14, 2) IN ['/L', '/T'] THEN BEGIN
        //                 SQLQuery := 'UPDATE MRP_ARR_INVOICE SET AMOUNT =  ' + FORMAT(SaleOrderTotAmt) + ' WHERE SALE_ORDER_ID = ' + FORMAT(SaleOrderId);
        //                 SQLConnection.Execute(SQLQuery);
        //             END;
        //             IF InstAmt > 0 THEN BEGIN
        //                 SQLQuery := 'SELECT * FROM MRP_ARR_INSTALL_INVOICE  WHERE SALE_ORDER_ID = ' + FORMAT(SaleOrderId);
        //                 RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                 IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                     RecordSet.MoveFirst;
        //                 WHILE NOT RecordSet.EOF DO BEGIN
        //                     EVALUATE(InstId, FORMAT(RecordSet.Fields.Item('AR_INVOICE_ID').Value));
        //                     RowCount := RowCount + 1;
        //                     RecordSet.MoveNext;
        //                 END;
        //                 IF InstId <> 0 THEN BEGIN
        //                     SQLQuery := 'UPDATE MRP_ARR_INSTALL_INVOICE SET AMOUNT = ' + FORMAT(InstAmt) + ', CREATION_DATE = SYSDATE WHERE SALE_ORDER_ID = ' + FORMAT(SaleOrderId);
        //                     SQLConnection.Execute(SQLQuery);
        //                 END
        //                 ELSE BEGIN
        //                     SQLQuery := 'INSERT INTO MRP_ARR_INSTALL_INVOICE (AR_INVOICE_ID,SALE_ORDER_ID,INVOICE_DATE,AMOUNT,REMARKS,USERID,CREATION_DATE,INSTALL_PERCENT,AMOUNTTYPE) ' +
        //                                'VALUES(ARR_INVOICE_SEQ.NEXTVAL, ' + FORMAT(SaleOrderId) + ', SYSDATE, ' + FORMAT(InstAmt) + ', ' +
        //                                '''Pvt Orders Installation'', ''Auto'', SYSDATE, '''', ''I'')';
        //                     SQLConnection.Execute(SQLQuery);
        //                 END;
        //                 MESSAGE('Sale Order Details Updated in Cashflow!');
        //             END;
        //         END;
        //     END;
        // END;
        // SQLConnection.CommitTrans;
        // RecordSet.Close;
        // SQLConnection.Close;
        // ConnectionOpen := 0;
    end;


    procedure SecDepostitCreationInCashFLow(CFSalOrdrID: Integer; SalesHeader: Record "Sales Header"; CFCustId: Integer);
    var
        SDAmt: BigInteger;
        EMDAmt: BigInteger;
        SaleOrderID: Code[10];
        EMDMode: Code[10];
        EMDId: Integer;
        SDId: Integer;
        LastSDId: Integer;
        DeptWise: Code[10];
        remarks: Code[30];
        GLEntry: Record "G/L Entry";
        SDPaidAmt: BigInteger;
        SQLQuery1: Text[1000];
        RowCount1: Integer;
        ConnectionOpen1: Integer;
        //  SQLConnection1: Automation "'{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8:'{00000514-0000-0010-8000-00AA006D2EA4}':''{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8'.Connection";
        //RecordSet1: Automation "'{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8:'{00000535-0000-0010-8000-00AA006D2EA4}':''{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8'.Recordset";
        ERP_SD_Tot_Amt: BigInteger;
    begin
        // //MESSAGE('Security Deposit Creation in CashFlow!');
        // //Initialization start
        // RowCount1 := 0;
        // SQLQuery1 := '';
        // //Initializations end

        // IF ISCLEAR(SQLConnection1) THEN
        //     CREATE(SQLConnection1, FALSE, TRUE);

        // IF ISCLEAR(RecordSet1) THEN
        //     CREATE(RecordSet1, FALSE, TRUE);

        // IF ConnectionOpen1 <> 1 THEN BEGIN
        //     SQLConnection1.ConnectionString := 'DSN=CASHFLOW;UID=cashflowuser;PASSWORD=firewall123;SERVER=oracle_80;';
        //     SQLConnection1.Open;
        //     SQLConnection1.BeginTrans;
        //     ConnectionOpen1 := 1;
        // END;
        // SaleOrderID := FORMAT(CFSalOrdrID);
        // SDAmt := ROUND(SalesHeader."Security Deposit Amount", 1);
        // EMDAmt := ROUND(SalesHeader."EMD Amount", 1);
        // ERP_SD_Tot_Amt := ROUND(SalesHeader."Security Deposit Amount", 1) + ROUND(SalesHeader."EMD Amount", 1);
        // SQLQuery1 := 'SELECT * FROM MRP_EMD WHERE TENDER_ID = (SELECT MAX(TENDER_ID) TENDER_ID FROM MRP_TENDER WHERE ERP_TENDER_NO = ''' + SalesHeader."Tender No." + ''')';
        // //MESSAGE(SQLQuery);
        // RecordSet1 := SQLConnection1.Execute(SQLQuery1, RowCount1);
        // IF NOT ((RecordSet1.BOF) OR (RecordSet1.EOF)) THEN
        //     RecordSet1.MoveFirst;

        // WHILE NOT RecordSet1.EOF DO BEGIN
        //     EMDId := RecordSet1.Fields.Item('EMD_ID').Value;
        //     EMDMode := FORMAT(RecordSet1.Fields.Item('EMD_MODE').Value);
        //     RowCount1 := RowCount1 + 1;
        //     RecordSet1.MoveNext;
        // END;
        // IF COPYSTR(SalesHeader."No.", 5, 3) = 'AMC' THEN BEGIN
        //     DeptWise := 'CS';
        //     remarks := 'AMC Order SD';
        // END
        // ELSE BEGIN
        //     DeptWise := 'SALES';
        //     remarks := 'Sale Order SD';
        // END;
        // IF COPYSTR(SalesHeader."No.", 5, 3) = 'AMC' THEN
        //     SQLQuery1 := 'SELECT * FROM MRP_SECURITY_DEPOSIT WHERE AMC_ORDER_ID = ' + FORMAT(CFSalOrdrID) + ' AND SD_STATUS = ''N'''
        // ELSE
        //     SQLQuery1 := 'SELECT * FROM MRP_SECURITY_DEPOSIT WHERE SALE_ORDER_ID = ' + FORMAT(CFSalOrdrID) + ' AND SD_STATUS = ''N''';
        // //MESSAGE(SQLQuery1);
        // RecordSet1 := SQLConnection1.Execute(SQLQuery1, RowCount1);
        // IF NOT ((RecordSet1.BOF) OR (RecordSet1.EOF)) THEN
        //     RecordSet1.MoveFirst;

        // WHILE NOT RecordSet1.EOF DO BEGIN
        //     SDId := RecordSet1.Fields.Item('SD_ID').Value;
        //     RowCount1 := RowCount1 + 1;
        //     RecordSet1.MoveNext;
        // END;
        // SDPaidAmt := 0;
        // GLEntry.RESET;
        // GLEntry.SETRANGE(GLEntry."Sale Order No.", SalesHeader."No.");
        // GLEntry.SETFILTER(GLEntry."G/L Account No.", '%1', '25700');
        // GLEntry.SETFILTER(GLEntry.Amount, '>%1', 0);
        // IF GLEntry.FINDSET THEN
        //         REPEAT
        //             SDPaidAmt := SDPaidAmt + GLEntry.Amount;
        //         UNTIL GLEntry.NEXT = 0;
        // IF SDId = 0 THEN BEGIN
        //     SQLQuery1 := 'SELECT SEC_DEPOSIT_SEQ.NEXTVAL LASTSDID from dual';
        //     RecordSet1 := SQLConnection1.Execute(SQLQuery1, RowCount1);
        //     IF NOT ((RecordSet1.BOF) OR (RecordSet1.EOF)) THEN
        //         RecordSet1.MoveFirst;
        //     WHILE NOT RecordSet1.EOF DO BEGIN
        //         EVALUATE(LastSDId, FORMAT(RecordSet1.Fields.Item('LASTSDID').Value));
        //         RowCount1 := RowCount1 + 1;
        //         RecordSet1.MoveNext;
        //     END;
        //     IF COPYSTR(SalesHeader."No.", 5, 3) = 'AMC' THEN BEGIN
        //         SQLQuery1 := 'INSERT INTO MRP_SECURITY_DEPOSIT (SD_ID,SD_MODE,SD_AMOUNT,SD_PAYEE_NAME,SD_STATUS, ' +
        //                    'AR_CUSTOMER_ID,AMC_ORDER_ID,REMARKS,CREATION_DATE,USERID,DEPT_WISE,EMD_MODE, ' +
        //                    'EMD_NUMBER,EMD_AMOUNT,SD_FINAL_AMT,SALESPERSON,INT_SAL_ORD_NO,SD_ACTUAL_AMOUNT,WARRANTY_PERIOD) ' +
        //                    'VALUES(' + FORMAT(LastSDId) + ', ''' + FORMAT(SalesHeader."Security Deposit") + ''', ' +
        //                    FORMAT(ERP_SD_Tot_Amt) + ', ''' + SalesHeader."Sell-to Customer Name" + ''', ''N'' , ' + FORMAT(CFCustId) + ', ' + FORMAT(SaleOrderID) +
        //                    ', ''' + remarks + ''', SYSDATE, ''Auto'', ''' + DeptWise + ''', ''' + EMDMode + ''', ' + FORMAT(EMDId) + ', ' + FORMAT(EMDAmt) + ', ' +
        //                    FORMAT(ERP_SD_Tot_Amt - EMDAmt) + ', ''' + FORMAT(SalesHeader."Salesperson Code") + ''', ''' + SalesHeader."No." + ''', ' + FORMAT(SDPaidAmt) +
        //                    ', ''' + FORMAT(SalesHeader."Warranty Period") + ''')';
        //         // MESSAGE(SQLQuery1);
        //         SQLConnection1.Execute(SQLQuery1);
        //     END
        //     ELSE BEGIN
        //         SQLQuery1 := 'INSERT INTO MRP_SECURITY_DEPOSIT (SD_ID,SD_MODE,SD_AMOUNT,SD_PAYEE_NAME,SD_STATUS, ' +
        //                    'AR_CUSTOMER_ID,SALE_ORDER_ID,REMARKS,CREATION_DATE,USERID,DEPT_WISE,EMD_MODE, ' +
        //                    'EMD_NUMBER,EMD_AMOUNT,SD_FINAL_AMT,SALESPERSON,INT_SAL_ORD_NO,SD_ACTUAL_AMOUNT,WARRANTY_PERIOD) ' +
        //                    'VALUES(' + FORMAT(LastSDId) + ', ''' + FORMAT(SalesHeader."Security Deposit") + ''', ' +
        //                    FORMAT(ERP_SD_Tot_Amt) + ', ''' + SalesHeader."Sell-to Customer Name" + ''', ''N'' , ' + FORMAT(CFCustId) + ', ' + FORMAT(SaleOrderID) +
        //                    ', ''' + remarks + ''', SYSDATE , ''Auto'', ''' + DeptWise + ''', ''' + EMDMode + ''', ' + FORMAT(EMDId) + ', ' + FORMAT(EMDAmt) + ', ' +
        //                    FORMAT(ERP_SD_Tot_Amt - EMDAmt) + ', ''' + FORMAT(SalesHeader."Salesperson Code") + ''', ''' + SalesHeader."No." + ''', ' + FORMAT(SDPaidAmt) +
        //                    ', ''' + FORMAT(SalesHeader."Warranty Period") + ''')';
        //         MESSAGE(SQLQuery1);
        //         SQLConnection1.Execute(SQLQuery1); //COMMENTED BY VIJAYA ON 08-01-18
        //     END;
        // END
        // ELSE BEGIN
        //     IF COPYSTR(SalesHeader."No.", 5, 3) = 'AMC' THEN BEGIN
        //         SQLQuery1 := 'UPDATE MRP_SECURITY_DEPOSIT SET SD_MODE = ''' + FORMAT(SalesHeader."Security Deposit") + ''', SD_AMOUNT = ' + FORMAT(ERP_SD_Tot_Amt) + ', AR_CUSTOMER_ID = ' + FORMAT(CFCustId) + ', EMD_AMOUNT = ' +
        //                    FORMAT(EMDAmt) + ', SD_FINAL_AMT = ' + FORMAT(ERP_SD_Tot_Amt - EMDAmt) + ', SALESPERSON = ''' + FORMAT(SalesHeader."Salesperson Code") +
        //                    ''' ,SD_ACTUAL_AMOUNT = ' + FORMAT(SDPaidAmt) + ', WARRANTY_PERIOD = ''' + FORMAT(SalesHeader."Warranty Period") + ''', DEPT_WISE = ''' + DeptWise +
        //                    ''' WHERE AMC_ORDER_ID = ' + FORMAT(SaleOrderID) + ' AND SD_STATUS = ''N''';
        //         // MESSAGE(SQLQuery1);
        //         SQLConnection1.Execute(SQLQuery1);
        //     END
        //     ELSE BEGIN
        //         SQLQuery1 := 'UPDATE MRP_SECURITY_DEPOSIT SET SD_MODE = ''' + FORMAT(SalesHeader."Security Deposit") + ''', SD_AMOUNT = ' + FORMAT(ERP_SD_Tot_Amt) + ', AR_CUSTOMER_ID = ' + FORMAT(CFCustId) + ', EMD_AMOUNT = ' +
        //                    FORMAT(EMDAmt) + ', SD_FINAL_AMT = ' + FORMAT(ERP_SD_Tot_Amt - EMDAmt) + ', SALESPERSON = ''' + FORMAT(SalesHeader."Salesperson Code") +
        //                    ''' ,SD_ACTUAL_AMOUNT = ' + FORMAT(SDPaidAmt) + ', WARRANTY_PERIOD = ''' + FORMAT(SalesHeader."Warranty Period") + ''', DEPT_WISE = ''' + DeptWise +
        //                    ''' WHERE SALE_ORDER_ID = ' + FORMAT(SaleOrderID) + ' AND SD_STATUS = ''N''';
        //         // MESSAGE(SQLQuery1);
        //         SQLConnection1.Execute(SQLQuery1);
        //     END;
        // END;
        // SQLConnection1.CommitTrans;
        // RecordSet1.Close;
        // SQLConnection1.Close;
        // ConnectionOpen1 := 0;
    end;



    procedure EMDSDPaymentsEntryInCashFlow(GenJrnlLine: Record "Gen. Journal Line");
    var
        EMDID: Integer;
        GenJrnlLine1: Record "Gen. Journal Line";
        BankAcct: Record "Bank Account";
        TenderId: Integer;
        Amount: BigInteger;
        CF_SDId: Integer;
        CF_SalOrdId: Integer;
        sl_plnd_amt: Integer;
        DiffAmt: Integer;
        LoopEnd: Boolean;
        Last_sl_no: Integer;
        TH: Record "Tender Header";
        SH: Record "Sales Header";
        SIH: Record "Sales Invoice Header";
        SIDummy: Record "Sales Invoice-Dummy";
        SHA: Record "Sales Header Archive";
        PlanChngExist: Boolean;
        CF_SD_Actual_Amt: Integer;
        ERP_Amount: BigInteger;
        ERP_Sec_Dep_Amt: Decimal;
        BasePLanExist: Boolean;
        GLEntry: Record "G/L Entry";
        GLEntry_Received_Ant: BigInteger;
        CF_EMD_AMT: Integer;
        SD_Plan_Chng_Id: Integer;
        SD_INFLW_Last_Pln_Chng_Id: Integer;
        Curr_SL_No: Integer;
        CF_Tot_SD_Amt: BigInteger;
        CF_SD_Final_Amt: BigInteger;
        SDPaidAmt: Decimal;
    begin
        //MESSAGE('EMD or SD Payment Entry in CashFlow!');
        // IF (GenJrnlLine."Account No." = '25500') AND (GenJrnlLine."Tender No" = '') AND (GenJrnlLine."Old Order" = FALSE) THEN
        //     ERROR('Please enter tender no. in line no.: ' + FORMAT(GenJrnlLine."Line No.") + ' for the doc no.: ' + GenJrnlLine."Document No.");
        // IF (GenJrnlLine."Account No." = '25700') AND (GenJrnlLine."Sale Order No" = '') AND (GenJrnlLine."Old Order" = FALSE) THEN
        //     ERROR('Please enter Sale Order no. in line no.: ' + FORMAT(GenJrnlLine."Line No.") + ' for the doc no.: ' + GenJrnlLine."Document No.");
        // //Initialization start
        // RowCount := 0;
        // SQLQuery := '';
        // CF_SD_Actual_Amt := 0;
        // SDPaidAmt := 0;
        // CF_Tot_SD_Amt := 0;
        // CF_SD_Final_Amt := 0;
        // CF_EMD_AMT := 0;
        // //Initializations end

        // IF ISCLEAR(SQLConnection) THEN
        //     CREATE(SQLConnection, FALSE, TRUE);

        // IF ISCLEAR(RecordSet) THEN
        //     CREATE(RecordSet, FALSE, TRUE);

        // IF ISCLEAR(RecordSet1) THEN
        //     CREATE(RecordSet1, FALSE, TRUE);


        // IF ConnectionOpen <> 1 THEN BEGIN
        //     SQLConnection.ConnectionString := 'DSN=CASHFLOW;UID=cashflowuser;PASSWORD=firewall123;SERVER=oracle_80;';
        //     SQLConnection.Open;
        //     SQLConnection.BeginTrans;
        //     ConnectionOpen := 1;
        // END;
        // Amount := ROUND(ABS(GenJrnlLine.Amount), 1);
        // ERP_Amount := ROUND(ABS(GenJrnlLine.Amount), 1);
        // IF (COPYSTR(GenJrnlLine."Journal Batch Name", 1, 3) IN ['BPV', 'JV-']) AND (GenJrnlLine."Account Type" = GenJrnlLine."Account Type"::"G/L Account") AND
        //   (GenJrnlLine."Account No." = '25500') AND (GenJrnlLine.Amount > 0) THEN  // emd payables
        // BEGIN
        //     EXIT;
        // END    // end of emd payables
        // ELSE
        //     IF (COPYSTR(GenJrnlLine."Journal Batch Name", 1, 3) IN ['BPV', 'JV-']) AND (GenJrnlLine."Account Type" = GenJrnlLine."Account Type"::"G/L Account") AND
        //  (GenJrnlLine."Account No." = '25700') AND (GenJrnlLine.Amount > 0) THEN BEGIN   // sd_payables
        //         SQLQuery := 'SELECT * FROM MRP_SECURITY_DEPOSIT WHERE INT_SAL_ORD_NO = ''' + GenJrnlLine."Sale Order No" + ''' AND SD_STATUS = ''N''';
        //         //  MESSAGE(SQLQuery);
        //         RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //         IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //             RecordSet.MoveFirst;
        //         WHILE NOT RecordSet.EOF DO BEGIN
        //             EVALUATE(CF_SDId, FORMAT(RecordSet.Fields.Item('SD_ID').Value));
        //             EVALUATE(CF_Tot_SD_Amt, FORMAT(RecordSet.Fields.Item('SD_AMOUNT').Value));
        //             EVALUATE(CF_EMD_AMT, FORMAT(RecordSet.Fields.Item('EMD_AMOUNT').Value));
        //             EVALUATE(CF_SD_Final_Amt, FORMAT(RecordSet.Fields.Item('SD_FINAL_AMT').Value));
        //             EVALUATE(CF_SD_Actual_Amt, FORMAT(RecordSet.Fields.Item('SD_ACTUAL_AMOUNT').Value));
        //             //MESSAGE(FORMAT(RecordSet.Fields.Item('SALE_ORDER_ID').Value));
        //             IF COPYSTR(GenJrnlLine."Sale Order No", 5, 3) = 'AMC' THEN
        //                 EVALUATE(CF_SalOrdId, FORMAT(RecordSet.Fields.Item('AMC_ORDER_ID').Value))
        //             ELSE
        //                 EVALUATE(CF_SalOrdId, FORMAT(RecordSet.Fields.Item('SALE_ORDER_ID').Value));
        //             RowCount := RowCount + 1;
        //             RecordSet.MoveNext;
        //         END;
        //         IF CF_SDId <> 0 THEN  // Check if CF SD exist
        //         BEGIN
        //             SDPaidAmt := 0;
        //             GLEntry.RESET;
        //             GLEntry.SETRANGE(GLEntry."Sale Order No.", GenJrnlLine."Sale Order No");
        //             GLEntry.SETFILTER(GLEntry."G/L Account No.", '%1', '25700');
        //             GLEntry.SETFILTER(GLEntry.Amount, '>%1', 0);
        //             IF GLEntry.FINDSET THEN BEGIN
        //                                         REPEAT
        //                                             SDPaidAmt := SDPaidAmt + GLEntry.Amount;
        //                                         UNTIL GLEntry.NEXT = 0;
        //             END;
        //             IF SDPaidAmt > CF_SD_Actual_Amt THEN BEGIN
        //                 SQLQuery := 'INSERT INTO MRP_SD_OUTFLOW_PAYMENT (PAYMENT_ID,SD_ID,PAYMENT_DATE,PAYMENT_MODE,DD_CHEQUE_NO,BANK_NAME,AMOUNT,REMARKS,USERID,CREATION_DATE) ' +
        //                             'VALUES((SELECT NVL(MAX(PAYMENT_ID)+1,1) FROM MRP_SD_OUTFLOW_PAYMENT), ' + FORMAT(CF_SDId) +
        //                             ', SYSDATE, ''' + FORMAT(GenJrnlLine."Payment Through") + ''', ''';

        //                 IF FORMAT(GenJrnlLine."Payment Through") = 'Cheque' THEN
        //                     SQLQuery := SQLQuery + GenJrnlLine."Cheque No." + ''', '''
        //                 ELSE
        //                     SQLQuery := SQLQuery + GenJrnlLine."DD/FDR No." + ''', ''';
        //                 GenJrnlLine1.RESET;
        //                 GenJrnlLine1.SETRANGE(GenJrnlLine1."Journal Template Name");
        //                 GenJrnlLine1.SETRANGE(GenJrnlLine1."Journal Batch Name");
        //                 GenJrnlLine1.SETRANGE(GenJrnlLine1."Document No.");
        //                 GenJrnlLine1.SETRANGE(GenJrnlLine1."Account Type", GenJrnlLine1."Account Type"::"Bank Account");
        //                 IF GenJrnlLine1.FINDFIRST THEN BEGIN
        //                     BankAcct.RESET;
        //                     BankAcct.SETRANGE(BankAcct."No.", GenJrnlLine1."Bal. Account No.");
        //                     IF BankAcct.FINDFIRST THEN
        //                         SQLQuery := SQLQuery + BankAcct.Name + ''', '
        //                     ELSE
        //                         SQLQuery := SQLQuery + ''''', ';
        //                 END ELSE
        //                     SQLQuery := SQLQuery + ''''', ';
        //                 SQLQuery := SQLQuery + FORMAT(Amount) + ', ''' + GenJrnlLine.Description + ''', ''Auto'', SYSDATE)';
        //                 // MESSAGE(SQLQuery);
        //                 SQLConnection.Execute(SQLQuery);
        //                 /*
        //                  SQLQuery := 'select * from (select ab.*,(select PLANNED_AMOUNT from mrp_sd_outflow_plan_changes where sl_no = ab.sl_no and '+
        //                              'PAYMENT_REALIZE_DATE = ab.PRD and sd_id = ab.sd_id and sale_order_id = ab.sale_order_id) amt, '+
        //                              '(select  PLAN_CHANGE_ID from mrp_sd_outflow_plan_changes where sl_no = ab.sl_no and '+
        //                              'PAYMENT_REALIZE_DATE = ab.PRD and sd_id = ab.sd_id and sale_order_id = ab.sale_order_id) PlanChngId, '+
        //                              'nvl((select  PLAN_CHANGE_ID from mrp_sd_outflow_plan_changes where sl_no = ab.sl_no and PLANNED_AMOUNT = 0 '+
        //                              'and sd_id = ab.sd_id and sale_order_id = ab.sale_order_id),0) Paid '+
        //                              'from (select sale_order_id,sd_id,sl_no,max(PAYMENT_REALIZE_DATE) prd from mrp_sd_outflow_plan_changes outpc '+
        //                              'where sd_id = '+FORMAT(CF_SDId)+' and sale_order_id = '+FORMAT(CF_SalOrdId)+' group by sale_order_id,sd_id,sl_no) ab order by prd) abc where (paid = 0) ';

        //                  SQLQuery := 'select * from (select ab.*, (select PLANNED_AMOUNT from mrp_sd_outflow_plan_changes where sl_no = ab.sl_no and '+
        //                              'PAYMENT_REALIZE_DATE = ab.PRD and plan_change_id = ab.PlanChngId and sd_id = ab.sd_id and sale_order_id = ab.sale_order_id) amt, '+
        //                              'nvl((select  PLAN_CHANGE_ID from mrp_sd_outflow_plan_changes where sl_no = ab.sl_no and PLANNED_AMOUNT = 0 '+
        //                              'and sd_id = ab.sd_id and sale_order_id = ab.sale_order_id),0) Paid '+
        //                              'from (select sale_order_id,sd_id,sl_no,max(PAYMENT_REALIZE_DATE) prd,max(plan_change_id) PlanChngId from '+
        //                              'mrp_sd_outflow_plan_changes outpc where planned_amount > 0 and sd_id = '+FORMAT(CF_SDId)+' and sale_order_id = '+FORMAT(CF_SalOrdId)+
        //                              ' group by sale_order_id,sd_id,sl_no) ab order by prd ) abc Where (paid = 0) ';
        //                 */
        //                 /* // Start--commented by pranavi on 01-jul-2016 as outflow not required
        //                  SQLQuery := 'select * from  mrp_sd_outflow_plan_changes b, '+
        //                              '(select sd_id,sl_no,max(plan_change_id) PlanChngId from '+
        //                              'mrp_sd_outflow_plan_changes where   sd_id = '+FORMAT(CF_SDId)+' and sale_order_id = '+FORMAT(CF_SalOrdId)+
        //                              'group by sd_id,sl_no) a where a.planchngid=b.plan_change_id and b.planned_amount > 0 ';

        //                 // MESSAGE(SQLQuery);
        //                  RecordSet := SQLConnection.Execute(SQLQuery,RowCount);
        //                  IF NOT( (RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                    RecordSet.MoveFirst;
        //                  WHILE (NOT RecordSet.EOF) AND (LoopEnd = FALSE) DO
        //                  BEGIN
        //                    DiffAmt :=0;
        //                    EVALUATE(sl_plnd_amt,FORMAT(RecordSet.Fields.Item('amt').Value));
        //                    IF sl_plnd_amt  >= Amount THEN
        //                    BEGIN
        //                      Last_sl_no := 0;
        //                      DiffAmt := sl_plnd_amt  - Amount;
        //                      SQLQuery := 'select nvl(max(sl_no)+1,1) a from mrp_sd_outflow_plan_changes where sd_id = '+FORMAT(CF_SDId)+' and sale_order_id = '+FORMAT(CF_SalOrdId);
        //                      RecordSet1 := SQLConnection.Execute(SQLQuery,RowCount);
        //                      IF NOT( (RecordSet1.BOF) OR (RecordSet1.EOF)) THEN
        //                        RecordSet1.MoveFirst;
        //                      WHILE NOT RecordSet1.EOF DO
        //                      BEGIN
        //                        EVALUATE(Last_sl_no,FORMAT(RecordSet1.Fields.Item('a').Value));
        //                        RecordSet1.MoveNext;
        //                      END;
        //                      DiffAmt := sl_plnd_amt  - Amount;
        //                      SQLQuery := 'insert into mrp_sd_outflow_plan_changes (PLAN_CHANGE_ID,SD_ID,SALE_ORDER_ID,PLANNED_AMOUNT,PAYMENT_REALIZE_DATE, '+
        //                                  'REMARKS,CREATED_BY,CREATION_DATE,USERID,SL_NO,PAYMENT_ID,BASEPLAN,SPLITEDFROM) '+
        //                                  'values((select nvl(max(plan_change_id)+1,1) from mrp_sd_outflow_plan_changes), '+
        //                                  FORMAT(CF_SDId)+', '+FORMAT(CF_SalOrdId)+', '+FORMAT(Amount)+', sysdate, '''', ''Auto'', sysdate, ''Auto'''+
        //                                  ', '+FORMAT(Last_sl_no)+', '''', '''', '''')';
        //                    //  MESSAGE(SQLQuery);
        //                      SQLConnection.Execute(SQLQuery);
        //                      SQLQuery := 'insert into mrp_sd_outflow_plan_changes (PLAN_CHANGE_ID,SD_ID,SALE_ORDER_ID,PLANNED_AMOUNT,PAYMENT_REALIZE_DATE, '+
        //                                  'REMARKS,CREATED_BY,CREATION_DATE,USERID,SL_NO,PAYMENT_ID,BASEPLAN,SPLITEDFROM) '+
        //                                  'values((select nvl(max(plan_change_id)+1,1) from mrp_sd_outflow_plan_changes), '+
        //                                  FORMAT(CF_SDId)+', '+FORMAT(CF_SalOrdId)+', 0, sysdate, '''', ''Auto'', sysdate, ''Auto'''+
        //                                  ', '+FORMAT(Last_sl_no)+', '+
        //                                  '(SELECT NVL(MAX(PAYMENT_ID),1) FROM MRP_SD_OUTFLOW_PAYMENT), '''', '''')';
        //                     // MESSAGE(SQLQuery);
        //                      SQLConnection.Execute(SQLQuery);
        //                      SQLQuery := 'update mrp_sd_outflow_plan_changes set PLANNED_AMOUNT = '+FORMAT(DiffAmt)+' where sd_id = '+FORMAT(CF_SDId)+' and sale_order_id = '+
        //                                  FORMAT(CF_SalOrdId)+' and PLAN_CHANGE_ID = '+FORMAT(RecordSet.Fields.Item('PlanChngId').Value);
        //                    //  MESSAGE(SQLQuery);
        //                      SQLConnection.Execute(SQLQuery);
        //                      LoopEnd := TRUE;
        //                    END
        //                    ELSE
        //                    BEGIN
        //                      DiffAmt := Amount - sl_plnd_amt;
        //                      SQLQuery := 'insert into mrp_sd_outflow_plan_changes (PLAN_CHANGE_ID,SD_ID,SALE_ORDER_ID,PLANNED_AMOUNT,PAYMENT_REALIZE_DATE, '+
        //                                  'REMARKS,CREATED_BY,CREATION_DATE,USERID,SL_NO,PAYMENT_ID,BASEPLAN,SPLITEDFROM) '+
        //                                  'values((select nvl(max(plan_change_id)+1,1) from mrp_sd_outflow_plan_changes), '+
        //                                  FORMAT(CF_SDId)+', '+FORMAT(CF_SalOrdId)+', 0, sysdate, '''', ''Auto'', sysdate, ''Auto'', '+
        //                                  FORMAT(RecordSet.Fields.Item('sl_no').Value)+', (SELECT NVL(MAX(PAYMENT_ID),1) FROM MRP_SD_OUTFLOW_PAYMENT), '''', '''')';
        //                    //  MESSAGE(SQLQuery);
        //                      SQLConnection.Execute(SQLQuery);
        //                      Amount := Amount - sl_plnd_amt;
        //                    END;
        //                    RowCount:=RowCount+1;
        //                    RecordSet.MoveNext;
        //                  END;
        //                  */ // End--commented by pranavi on 01-jul-2016 as outflow not required
        //                 IF COPYSTR(GenJrnlLine."Sale Order No", 5, 3) = 'AMC' THEN BEGIN    // If AMC Order
        //                     SQLQuery := 'UPDATE MRP_SECURITY_DEPOSIT SET SD_ACTUAL_AMOUNT = SD_ACTUAL_AMOUNT + ' + FORMAT(Amount) + ' WHERE SD_ID = ' +
        //                                 FORMAT(CF_SDId) + ' AND AMC_ORDER_ID = ' + FORMAT(CF_SalOrdId);
        //                     SQLConnection.Execute(SQLQuery);
        //                     IF CF_SD_Actual_Amt + Amount > CF_Tot_SD_Amt THEN BEGIN
        //                         SQLQuery := 'UPDATE MRP_SECURITY_DEPOSIT SET SD_AMOUNT = SD_AMOUNT + ' + FORMAT(Amount) + ', SD_FINAL_AMT = SD_AMOUNT+' + FORMAT(Amount) + '-EMD_AMOUNT WHERE SD_ID = ' +
        //                                     FORMAT(CF_SDId) + ' AND AMC_ORDER_ID = ' + FORMAT(CF_SalOrdId);
        //                         SQLConnection.Execute(SQLQuery);
        //                     END;
        //                     // Added by Pranavi on 07-Jul-2016 for updating sd_inflow_amt at last planned date instead of as unplanned amt
        //                     SQLQuery := 'select max(Plan_change_id) max_pln_chng_id from (select * from  mrp_sd_plan_changes b, ' +
        //                                 '(select sd_id,sl_no,max(plan_change_id) PlanChngId from  mrp_sd_plan_changes where sd_id = ' + FORMAT(CF_SDId) + ' and ' +
        //                                 'amc_order_id = ' + FORMAT(CF_SalOrdId) + '  group by sd_id,sl_no) a where a.planchngid=b.plan_change_id and b.planned_amount > 0) ' +
        //                                 'where payment_realize_date = (select max(payment_realize_date) from  mrp_sd_plan_changes b, ' +
        //                                 '(select sd_id,sl_no,max(plan_change_id) PlanChngId from  mrp_sd_plan_changes where sd_id = ' + FORMAT(CF_SDId) + ' and ' +
        //                                 'amc_order_id = ' + FORMAT(CF_SalOrdId) + '  group by sd_id,sl_no) a where a.planchngid=b.plan_change_id and b.planned_amount > 0) ';
        //                     RowCount := 0;
        //                     SQLConnection.Execute(SQLQuery, RowCount);
        //                     IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                         RecordSet.MoveFirst;
        //                     WHILE NOT RecordSet.EOF DO BEGIN
        //                         EVALUATE(SD_INFLW_Last_Pln_Chng_Id, FORMAT(RecordSet.Fields.Item('max_pln_chng_id').Value));
        //                         SQLQuery := 'UPDATE mrp_sd_plan_changes SET PLANNED_AMOUNT = PLANNED_AMOUNT + ' + FORMAT(Amount) + ' WHERE PLAN_CHANGE_ID = ' +
        //                                     FORMAT(SD_INFLW_Last_Pln_Chng_Id) + ' AND SD_ID = ' + FORMAT(CF_SDId) + ' AND AMC_ORDER_ID = ' + FORMAT(CF_SalOrdId);
        //                         SQLConnection.Execute(SQLQuery);
        //                         RowCount := RowCount + 1;
        //                         RecordSet.MoveNext;
        //                     END;
        //                 END   // End Of If AMC Order
        //                 ELSE  // If Sale Order
        //                 BEGIN
        //                     SQLQuery := 'UPDATE MRP_SECURITY_DEPOSIT SET SD_ACTUAL_AMOUNT = SD_ACTUAL_AMOUNT + ' + FORMAT(Amount) + ' WHERE SD_ID = ' +
        //                                 FORMAT(CF_SDId) + ' AND SALE_ORDER_ID = ' + FORMAT(CF_SalOrdId);
        //                     SQLConnection.Execute(SQLQuery);
        //                     IF CF_SD_Actual_Amt + Amount > CF_Tot_SD_Amt THEN BEGIN
        //                         SQLQuery := 'UPDATE MRP_SECURITY_DEPOSIT SET SD_AMOUNT = SD_AMOUNT + ' + FORMAT(Amount) + ', SD_FINAL_AMT = SD_AMOUNT+' + FORMAT(Amount) + '-EMD_AMOUNT WHERE SD_ID = ' +
        //                                     FORMAT(CF_SDId) + ' AND AMC_ORDER_ID = ' + FORMAT(CF_SalOrdId);
        //                         SQLConnection.Execute(SQLQuery);
        //                     END;
        //                     // Added by Pranavi on 07-Jul-2016 for updating sd_inflow_amt at last planned date instead of as unplanned amt
        //                     SQLQuery := 'select max(Plan_change_id) max_pln_chng_id from (select * from  mrp_sd_plan_changes b, ' +
        //                                 '(select sd_id,sl_no,max(plan_change_id) PlanChngId from  mrp_sd_plan_changes where sd_id = ' + FORMAT(CF_SDId) + ' and ' +
        //                                 'sale_order_id = ' + FORMAT(CF_SalOrdId) + '  group by sd_id,sl_no) a where a.planchngid=b.plan_change_id and b.planned_amount > 0) ' +
        //                                 'where payment_realize_date = (select max(payment_realize_date) from  mrp_sd_plan_changes b, ' +
        //                                 '(select sd_id,sl_no,max(plan_change_id) PlanChngId from  mrp_sd_plan_changes where sd_id = ' + FORMAT(CF_SDId) + ' and ' +
        //                                 'sale_order_id = ' + FORMAT(CF_SalOrdId) + '  group by sd_id,sl_no) a where a.planchngid=b.plan_change_id and b.planned_amount > 0) ';
        //                     RowCount := 0;
        //                     SQLConnection.Execute(SQLQuery, RowCount);
        //                     IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                         RecordSet.MoveFirst;
        //                     WHILE NOT RecordSet.EOF DO BEGIN
        //                         EVALUATE(SD_INFLW_Last_Pln_Chng_Id, FORMAT(RecordSet.Fields.Item('max_pln_chng_id').Value));
        //                         SQLQuery := 'UPDATE mrp_sd_plan_changes SET PLANNED_AMOUNT = PLANNED_AMOUNT + ' + FORMAT(Amount) + ' WHERE PLAN_CHANGE_ID = ' +
        //                                     FORMAT(SD_INFLW_Last_Pln_Chng_Id) + ' AND SD_ID = ' + FORMAT(CF_SDId) + ' AND SALE_ORDER_ID = ' + FORMAT(CF_SalOrdId);
        //                         SQLConnection.Execute(SQLQuery);
        //                         RowCount := RowCount + 1;
        //                         RecordSet.MoveNext;
        //                     END;
        //                 END;  // End Of AMC or SALE Checking
        //                       // End by Pranavi on 07-Jul-2016
        //             END;
        //             IF SDPaidAmt > 0 THEN BEGIN
        //                 SIH.RESET;
        //                 SIH.SETRANGE(SIH."Order No.", GenJrnlLine."Sale Order No");
        //                 IF SIH.FINDSET THEN
        //                         REPEAT
        //                             IF SIH."Security Deposit Amount" < SDPaidAmt THEN BEGIN
        //                                 SIH."Security Deposit Amount" := SDPaidAmt;
        //                                 SIH.MODIFY;
        //                             END;
        //                         UNTIL SIH.NEXT = 0;
        //                 SIDummy.RESET;
        //                 SIDummy.SETRANGE(SIDummy."No.", GenJrnlLine."Sale Order No");
        //                 IF SIDummy.FINDSET THEN
        //                         REPEAT
        //                             IF SIDummy."Security Deposit Amount" < SDPaidAmt THEN BEGIN
        //                                 SIDummy."Security Deposit Amount" := SDPaidAmt;
        //                                 SIDummy.MODIFY;
        //                             END;
        //                         UNTIL SIDummy.NEXT = 0;

        //                 SH.RESET;
        //                 SH.SETRANGE(SH."No.", GenJrnlLine."Sale Order No");
        //                 IF SH.FINDFIRST THEN BEGIN
        //                     IF SH."Security Deposit Amount" < SDPaidAmt THEN BEGIN
        //                         SH."Security Deposit Amount" := SDPaidAmt;
        //                         SH.MODIFY;
        //                     END;
        //                 END;
        //                 SHA.RESET;
        //                 SHA.SETRANGE(SHA."No.", GenJrnlLine."Sale Order No");
        //                 IF SHA.FINDSET THEN
        //                         REPEAT
        //                             IF SHA."Security Deposit Amount" < SDPaidAmt THEN BEGIN
        //                                 SHA."Security Deposit Amount" := SDPaidAmt;
        //                                 SHA.MODIFY;
        //                             END;
        //                         UNTIL SHA.NEXT = 0;
        //             END;  // end of chekcing SDPaidAmt > 0
        //         END;  //End of Check if CF SD exist
        //     END     // end of sd_payables
        //     ELSE
        //         IF (COPYSTR(GenJrnlLine."Journal Batch Name", 1, 3) IN ['BRV', 'JV-']) AND (GenJrnlLine."Account Type" = GenJrnlLine."Account Type"::"G/L Account") AND
        //      (GenJrnlLine."Account No." = '25500') AND (GenJrnlLine.Amount < 0) THEN BEGIN   // emd_receivables
        //             SQLQuery := 'SELECT nvl(MAX(TENDER_ID),0) TENDER_ID FROM MRP_TENDER WHERE ERP_TENDER_NO = ''' + GenJrnlLine."Tender No" + '''';
        //             // MESSAGE(SQLQuery);
        //             RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //             IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                 RecordSet.MoveFirst;
        //             WHILE NOT RecordSet.EOF DO BEGIN
        //                 EVALUATE(TenderId, FORMAT(RecordSet.Fields.Item('TENDER_ID').Value));
        //                 RowCount := RowCount + 1;
        //                 RecordSet.MoveNext;
        //             END;
        //             SQLQuery := 'SELECT * FROM MRP_EMD WHERE TENDER_ID = (SELECT MAX(TENDER_ID) TENDER_ID FROM MRP_TENDER WHERE ERP_TENDER_NO = ''' + GenJrnlLine."Tender No" + ''')';
        //             //  MESSAGE(SQLQuery);
        //             RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //             IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                 RecordSet.MoveFirst;
        //             WHILE NOT RecordSet.EOF DO BEGIN
        //                 EVALUATE(EMDID, FORMAT(RecordSet.Fields.Item('EMD_ID').Value));
        //                 EVALUATE(CF_EMD_AMT, FORMAT(RecordSet.Fields.Item('EMD_AMOUNT').Value));
        //                 RowCount := RowCount + 1;
        //                 RecordSet.MoveNext;
        //             END;
        //             SQLQuery := '';
        //             SQLQuery := 'INSERT INTO MRP_EMD_INFLOW_PLAN_CHANGES (PLAN_CHANGE_ID,EMD_ID,TENDOR_ID,PLANNED_AMOUNT,PAYMENT_REALIZE_DATE,REMARKS,' +
        //                         'CREATION_DATE,USERID,SL_NO,PAYMENT_ID,BASEPLAN,SPLITEDFROM) ' +
        //                         'VALUES((SELECT NVL(MAX(PLAN_CHANGE_ID),0)+1 FROM MRP_EMD_INFLOW_PLAN_CHANGES), ' +
        //                         FORMAT(EMDID) + ', ' + FORMAT(TenderId) + ', 0, SYSDATE, '''', SYSDATE, ''Auto'', ' +
        //                         ' (SELECT NVL(MAX(SL_NO)+1,1) FROM MRP_EMD_INFLOW_PLAN_CHANGES WHERE EMD_ID = ' + FORMAT(EMDID) + ' AND TENDOR_ID = ' + FORMAT(TenderId) + '),'''','''','''')';
        //             //  MESSAGE(SQLQuery);
        //             SQLConnection.Execute(SQLQuery);
        //             SQLQuery := '';
        //             SQLQuery := 'INSERT INTO MRP_EMD_INFLOW_PAYMENT (PAYMENT_ID,EMD_ID,PAYMENT_DATE,PAYMENT_MODE,DD_CHEQUE_NO,BANK_NAME,AMOUNT,REMARKS,USERID,CREATION_DATE) ' +
        //                         'VALUES((SELECT NVL(MAX(PAYMENT_ID)+1,1) FROM MRP_EMD_INFLOW_PAYMENT), ' + FORMAT(EMDID) + ', SYSDATE, ''' + FORMAT(GenJrnlLine."Payment Through") + ''', ''';


        //             IF FORMAT(GenJrnlLine."Payment Through") = 'Cheque' THEN
        //                 SQLQuery := SQLQuery + GenJrnlLine."Cheque No." + ''', '''
        //             ELSE
        //                 SQLQuery := SQLQuery + GenJrnlLine."DD/FDR No." + ''', ''';
        //             GenJrnlLine1.RESET;
        //             GenJrnlLine1.SETRANGE(GenJrnlLine1."Journal Template Name");
        //             GenJrnlLine1.SETRANGE(GenJrnlLine1."Journal Batch Name");
        //             GenJrnlLine1.SETRANGE(GenJrnlLine1."Document No.");
        //             GenJrnlLine1.SETRANGE(GenJrnlLine1."Account Type", GenJrnlLine1."Account Type"::"Bank Account");
        //             IF GenJrnlLine1.FINDFIRST THEN BEGIN
        //                 BankAcct.RESET;
        //                 BankAcct.SETRANGE(BankAcct."No.");
        //                 IF BankAcct.FINDFIRST THEN
        //                     SQLQuery := SQLQuery + BankAcct.Name + ''', '
        //                 ELSE
        //                     SQLQuery := SQLQuery + ''''', ';
        //             END ELSE
        //                 SQLQuery := SQLQuery + ''''', ';
        //             SQLQuery := SQLQuery + DELCHR(FORMAT(ABS(GenJrnlLine.Amount)), '=', ',') + ', ''' + GenJrnlLine.Description + ''', ''Auto'', SYSDATE)';
        //             //  MESSAGE(SQLQuery);
        //             SQLConnection.Execute(SQLQuery);

        //             // >> Start-Added by PranaV on 08-07-17 for cs cashflow purpose to effect opening balance in cashflow
        //             IF COPYSTR(GenJrnlLine."Sale Order No", 5, 3) = 'AMC' THEN BEGIN
        //                 SQLQuery := 'UPDATE MRP_BANK_LIMIT set  cs_net_position =  cs_net_position+' + DELCHR(FORMAT(ABS(GenJrnlLine.Amount)), '=', ',');
        //                 SQLConnection.Execute(SQLQuery);
        //             END;
        //             // << END-Added by PranaV on 08-07-17 for cs cashflow purpose to effect opening balance in cashflow


        //             GLEntry_Received_Ant := 0; // initialized by vishnu priya for checking the SD Status.
        //             GLEntry.RESET;
        //             GLEntry.SETFILTER(GLEntry."G/L Account No.", '%1', '25500');
        //             GLEntry.SETFILTER(GLEntry."Tender No", '%1', GenJrnlLine."Tender No");
        //             GLEntry.SETFILTER(GLEntry.Amount, '<%1', 0);
        //             IF GLEntry.FINDSET THEN
        //                 REPEAT
        //                         GLEntry_Received_Ant := GLEntry_Received_Ant + ROUND(ABS(GLEntry.Amount), 1);
        //                 UNTIL GLEntry.NEXT = 0;
        //             IF CF_EMD_AMT = GLEntry_Received_Ant THEN BEGIN
        //                 SQLQuery := 'UPDATE MRP_EMD SET EMD_STATUS = ''Y'' WHERE EMD_ID = ' + FORMAT(EMDID) + ' AND TENDER_ID = ' + FORMAT(TenderId);
        //                 SQLConnection.Execute(SQLQuery);
        //             END;
        //             TH.RESET;
        //             TH.SETRANGE(TH."Tender No.", GenJrnlLine."Tender No");
        //             IF TH.FINDFIRST THEN BEGIN
        //                 IF TH."EMD Amount" = GLEntry_Received_Ant THEN BEGIN
        //                     TH."EMD Status" := TH."EMD Status"::Received;
        //                     TH."EMD Satus" := TH."EMD Satus"::Received;
        //                     TH.MODIFY;
        //                 END;
        //             END;
        //             SIDummy.RESET;
        //             SIDummy.SETRANGE(SIDummy."Document Type", SIDummy."Document Type"::Tender);
        //             SIDummy.SETRANGE(SIDummy."No.", GenJrnlLine."Tender No");
        //             IF SIDummy.FINDSET THEN
        //                 REPEAT
        //                         IF SIDummy."EMD Amount" = GLEntry_Received_Ant THEN BEGIN
        //                             SIDummy."EMD Status" := SIDummy."EMD Status"::Received;
        //                             SIDummy.MODIFY;
        //                         END;
        //                 UNTIL SIDummy.NEXT = 0;
        //         END  // end of emd_receivables
        //         ELSE
        //             IF (COPYSTR(GenJrnlLine."Journal Batch Name", 1, 3) IN ['BRV', 'JV-']) AND (GenJrnlLine."Account Type" = GenJrnlLine."Account Type"::"G/L Account") AND
        //          (GenJrnlLine."Account No." = '25700') AND (GenJrnlLine.Amount < 0) THEN BEGIN   // sd_receivables
        //                 SQLQuery := 'SELECT * FROM MRP_SECURITY_DEPOSIT WHERE INT_SAL_ORD_NO = ''' + GenJrnlLine."Sale Order No" + ''' AND SD_STATUS = ''N''';
        //                 // MESSAGE(SQLQuery);
        //                 RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                 IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                     RecordSet.MoveFirst;
        //                 WHILE NOT RecordSet.EOF DO BEGIN
        //                     EVALUATE(CF_SDId, FORMAT(RecordSet.Fields.Item('SD_ID').Value));
        //                     IF COPYSTR(GenJrnlLine."Sale Order No", 5, 3) = 'AMC' THEN
        //                         EVALUATE(CF_SalOrdId, FORMAT(RecordSet.Fields.Item('AMC_ORDER_ID').Value))
        //                     ELSE
        //                         EVALUATE(CF_SalOrdId, FORMAT(RecordSet.Fields.Item('SALE_ORDER_ID').Value));
        //                     EVALUATE(CF_SD_Actual_Amt, FORMAT(RecordSet.Fields.Item('SD_ACTUAL_AMOUNT').Value));
        //                     EVALUATE(CF_Tot_SD_Amt, FORMAT(RecordSet.Fields.Item('SD_AMOUNT').Value));
        //                     RowCount := RowCount + 1;
        //                     RecordSet.MoveNext;
        //                 END;
        //                 IF CF_SDId <> 0 THEN    //Check IF SD record is retrieved
        //                 BEGIN
        //                     SQLQuery := 'INSERT INTO MRP_SD_PAYMENT (PAYMENT_ID,SD_ID,PAYMENT_DATE,PAYMENT_MODE,DD_CHEQUE_NO,BANK_NAME,AMOUNT,REMARKS,USER_ID,CREATION_DATE) ' +
        //                                 'VALUES((SELECT NVL(MAX(PAYMENT_ID)+1,1) FROM MRP_SD_PAYMENT), ' + FORMAT(CF_SDId) +
        //                                 ', SYSDATE, ''' + FORMAT(GenJrnlLine."Payment Through") + ''', ''';
        //                     IF FORMAT(GenJrnlLine."Payment Through") = 'Cheque' THEN
        //                         SQLQuery := SQLQuery + GenJrnlLine."Cheque No." + ''', '''
        //                     ELSE
        //                         SQLQuery := SQLQuery + GenJrnlLine."DD/FDR No." + ''', ''';
        //                     GenJrnlLine1.RESET;
        //                     GenJrnlLine1.SETRANGE(GenJrnlLine1."Journal Template Name");
        //                     GenJrnlLine1.SETRANGE(GenJrnlLine1."Journal Batch Name");
        //                     GenJrnlLine1.SETRANGE(GenJrnlLine1."Document No.");
        //                     GenJrnlLine1.SETRANGE(GenJrnlLine1."Account Type", GenJrnlLine1."Account Type"::"Bank Account");
        //                     IF GenJrnlLine1.FINDFIRST THEN BEGIN
        //                         BankAcct.RESET;
        //                         BankAcct.SETRANGE(BankAcct."No.");
        //                         IF BankAcct.FINDFIRST THEN
        //                             SQLQuery := SQLQuery + BankAcct.Name + ''', '
        //                         ELSE
        //                             SQLQuery := SQLQuery + ''''', ';
        //                     END ELSE
        //                         SQLQuery := SQLQuery + ''''', ';
        //                     SQLQuery := SQLQuery + DELCHR(FORMAT(Amount), '=', ',') + ', ''' + GenJrnlLine.Description + ''', ''Auto'', SYSDATE)';
        //                     // MESSAGE(SQLQuery);
        //                     SQLConnection.Execute(SQLQuery);
        //                     /*
        //                     SQLQuery := 'select ab.*,(select PLANNED_AMOUNT from mrp_sd_plan_changes where sl_no = ab.sl_no and '+
        //                                 'PAYMENT_REALIZE_DATE = ab.PRD and sd_id = ab.sd_id and sale_order_id = ab.sale_order_id) amt, '+
        //                                 '(select  PLAN_CHANGE_ID from mrp_sd_plan_changes where sl_no = ab.sl_no and '+
        //                                 'PAYMENT_REALIZE_DATE = ab.PRD and sd_id = ab.sd_id and sale_order_id = ab.sale_order_id) PlanChngId '+
        //                                 'from (select sale_order_id,sd_id,sl_no,max(PAYMENT_REALIZE_DATE) prd from mrp_sd_plan_changes outpc '+
        //                                 'where sd_id = '+FORMAT(CF_SDId)+' and sale_order_id = '+FORMAT(CF_SalOrdId)+' group by sale_order_id,sd_id,sl_no) ab order by prd';
        //                     */
        //                     IF COPYSTR(GenJrnlLine."Sale Order No", 5, 3) = 'AMC' THEN BEGIN
        //                         SQLQuery := 'select * from  mrp_sd_plan_changes b, ' +
        //                                     '(select sd_id,sl_no,max(plan_change_id) PlanChngId from ' +
        //                                     'mrp_sd_plan_changes where   sd_id = ' + FORMAT(CF_SDId) + ' and amc_order_id = ' + FORMAT(CF_SalOrdId) +
        //                                     'group by sd_id,sl_no) a where a.planchngid=b.plan_change_id and b.planned_amount > 0 ';
        //                     END
        //                     ELSE BEGIN
        //                         SQLQuery := 'select * from  mrp_sd_plan_changes b, ' +
        //                                     '(select sd_id,sl_no,max(plan_change_id) PlanChngId from ' +
        //                                     'mrp_sd_plan_changes where   sd_id = ' + FORMAT(CF_SDId) + ' and sale_order_id = ' + FORMAT(CF_SalOrdId) +
        //                                     'group by sd_id,sl_no) a where a.planchngid=b.plan_change_id and b.planned_amount > 0 ';
        //                     END;
        //                     // MESSAGE(SQLQuery);
        //                     PlanChngExist := FALSE;
        //                     RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                     IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                         RecordSet.MoveFirst;
        //                     WHILE (NOT RecordSet.EOF) AND (LoopEnd = FALSE) DO BEGIN
        //                         PlanChngExist := TRUE;
        //                         DiffAmt := 0;
        //                         SD_Plan_Chng_Id := 0;
        //                         Curr_SL_No := 0;
        //                         EVALUATE(sl_plnd_amt, FORMAT(RecordSet.Fields.Item('PLANNED_AMOUNT').Value));
        //                         EVALUATE(SD_Plan_Chng_Id, FORMAT(RecordSet.Fields.Item('PLAN_CHANGE_ID').Value));
        //                         EVALUATE(Curr_SL_No, FORMAT(RecordSet.Fields.Item('Sl_NO').Value));
        //                         Last_sl_no := 0;
        //                         IF COPYSTR(GenJrnlLine."Sale Order No", 5, 3) = 'AMC' THEN
        //                             SQLQuery := 'select nvl(max(sl_no)+1,1) a from mrp_sd_plan_changes where sd_id = ' + FORMAT(CF_SDId) + ' and amc_order_id = ' + FORMAT(CF_SalOrdId)
        //                         ELSE
        //                             SQLQuery := 'select nvl(max(sl_no)+1,1) a from mrp_sd_plan_changes where sd_id = ' + FORMAT(CF_SDId) + ' and sale_order_id = ' + FORMAT(CF_SalOrdId);
        //                         RecordSet1 := SQLConnection.Execute(SQLQuery, RowCount);
        //                         IF NOT ((RecordSet1.BOF) OR (RecordSet1.EOF)) THEN
        //                             RecordSet1.MoveFirst;
        //                         WHILE NOT RecordSet1.EOF DO BEGIN
        //                             EVALUATE(Last_sl_no, FORMAT(RecordSet1.Fields.Item('a').Value));
        //                             RecordSet1.MoveNext;
        //                         END;
        //                         IF sl_plnd_amt > Amount THEN BEGIN
        //                             DiffAmt := sl_plnd_amt - Amount;
        //                             IF COPYSTR(GenJrnlLine."Sale Order No", 5, 3) = 'AMC' THEN BEGIN   // End of if amc order check
        //                                 SQLQuery := 'insert into mrp_sd_plan_changes (PLAN_CHANGE_ID,SD_ID,AMC_ORDER_ID,PLANNED_AMOUNT,PAYMENT_REALIZE_DATE, ' +
        //                                             'REMARKS,CREATED_BY,CREATION_DATE,USERID,SL_NO,PAYMENT_ID,BASEPLAN,SPLITEDFROM) ' +
        //                                             'values(SEQ_SD_PLAN_CHANGES.NEXTVAL, ' +
        //                                             FORMAT(CF_SDId) + ', ' + FORMAT(CF_SalOrdId) + ', ' + DELCHR(FORMAT(Amount), '=', ',') + ', sysdate, '''', ''Auto'', sysdate, ''Auto''' +
        //                                             ', ' + FORMAT(Last_sl_no) + ', ' +
        //                                             ''''', '''', '''')';
        //                                 //  MESSAGE(SQLQuery);
        //                                 SQLConnection.Execute(SQLQuery);
        //                                 SQLQuery := 'insert into mrp_sd_plan_changes (PLAN_CHANGE_ID,SD_ID,AMC_ORDER_ID,PLANNED_AMOUNT,PAYMENT_REALIZE_DATE, ' +
        //                                             'REMARKS,CREATED_BY,CREATION_DATE,USERID,SL_NO,PAYMENT_ID,BASEPLAN,SPLITEDFROM) ' +
        //                                             'values(SEQ_SD_PLAN_CHANGES.NEXTVAL, ' +
        //                                             FORMAT(CF_SDId) + ', ' + FORMAT(CF_SalOrdId) + ', 0, sysdate, '''', ''Auto'', sysdate, ''Auto''' +
        //                                             ', ' + FORMAT(Last_sl_no) + ', ' +
        //                                             '(SELECT NVL(MAX(PAYMENT_ID),1) FROM MRP_SD_PAYMENT), '''', '''')';
        //                                 //  MESSAGE(SQLQuery);
        //                                 SQLConnection.Execute(SQLQuery);
        //                                 SQLQuery := 'update mrp_sd_plan_changes set PLANNED_AMOUNT = ' + DELCHR(FORMAT(DiffAmt), '=', ',') + ' where sd_id = ' + FORMAT(CF_SDId) + ' and amc_order_id = ' +
        //                                             FORMAT(CF_SalOrdId) + ' and PLAN_CHANGE_ID = ' + FORMAT(SD_Plan_Chng_Id);
        //                                 //  MESSAGE(SQLQuery);
        //                                 SQLConnection.Execute(SQLQuery);
        //                                 LoopEnd := TRUE;
        //                                 Amount := 0;
        //                             END  // End of if amc order check
        //                             ELSE BEGIN  // else part of if amc order check
        //                                 SQLQuery := 'insert into mrp_sd_plan_changes (PLAN_CHANGE_ID,SD_ID,SALE_ORDER_ID,PLANNED_AMOUNT,PAYMENT_REALIZE_DATE, ' +
        //                                             'REMARKS,CREATED_BY,CREATION_DATE,USERID,SL_NO,PAYMENT_ID,BASEPLAN,SPLITEDFROM) ' +
        //                                             'values(SEQ_SD_PLAN_CHANGES.NEXTVAL, ' +
        //                                             FORMAT(CF_SDId) + ', ' + FORMAT(CF_SalOrdId) + ', ' + DELCHR(FORMAT(Amount), '=', ',') + ', sysdate, '''', ''Auto'', sysdate, ''Auto''' +
        //                                             ', ' + FORMAT(Last_sl_no) + ', ' +
        //                                             ''''', '''', '''')';
        //                                 //  MESSAGE(SQLQuery);
        //                                 SQLConnection.Execute(SQLQuery);
        //                                 SQLQuery := 'insert into mrp_sd_plan_changes (PLAN_CHANGE_ID,SD_ID,SALE_ORDER_ID,PLANNED_AMOUNT,PAYMENT_REALIZE_DATE, ' +
        //                                             'REMARKS,CREATED_BY,CREATION_DATE,USERID,SL_NO,PAYMENT_ID,BASEPLAN,SPLITEDFROM) ' +
        //                                             'values(SEQ_SD_PLAN_CHANGES.NEXTVAL, ' +
        //                                             FORMAT(CF_SDId) + ', ' + FORMAT(CF_SalOrdId) + ', 0, sysdate, '''', ''Auto'', sysdate, ''Auto''' +
        //                                             ', ' + FORMAT(Last_sl_no) + ', ' +
        //                                             '(SELECT NVL(MAX(PAYMENT_ID),1) FROM MRP_SD_PAYMENT), '''', '''')';
        //                                 //  MESSAGE(SQLQuery);
        //                                 SQLConnection.Execute(SQLQuery);
        //                                 SQLQuery := 'update mrp_sd_plan_changes set PLANNED_AMOUNT = ' + DELCHR(FORMAT(DiffAmt), '=', ',') + ' where sd_id = ' + FORMAT(CF_SDId) + ' and sale_order_id = ' +
        //                                             FORMAT(CF_SalOrdId) + ' and PLAN_CHANGE_ID = ' + FORMAT(SD_Plan_Chng_Id);
        //                                 //  MESSAGE(SQLQuery);
        //                                 SQLConnection.Execute(SQLQuery);
        //                                 LoopEnd := TRUE;
        //                                 Amount := 0;
        //                             END; // End of else part of if amc order check
        //                         END  // End of If Plan amount > Amount
        //                         ELSE
        //                             IF sl_plnd_amt = Amount THEN  // IF plan amount equal to Amount
        //                        BEGIN
        //                                 DiffAmt := sl_plnd_amt - Amount;
        //                                 IF COPYSTR(GenJrnlLine."Sale Order No", 5, 3) = 'AMC' THEN BEGIN   // End of if amc order check
        //                                     SQLQuery := 'insert into mrp_sd_plan_changes (PLAN_CHANGE_ID,SD_ID,AMC_ORDER_ID,PLANNED_AMOUNT,PAYMENT_REALIZE_DATE, ' +
        //                                                 'REMARKS,CREATED_BY,CREATION_DATE,USERID,SL_NO,PAYMENT_ID,BASEPLAN,SPLITEDFROM) ' +
        //                                                 'values(SEQ_SD_PLAN_CHANGES.NEXTVAL, ' +
        //                                                 FORMAT(CF_SDId) + ', ' + FORMAT(CF_SalOrdId) + ', ' + DELCHR(FORMAT(Amount), '=', ',') + ', sysdate, '''', ''Auto'', sysdate, ''Auto''' +
        //                                                 ', ' + FORMAT(Curr_SL_No) + ', ' +
        //                                                 ''''', '''', '''')';
        //                                     //  MESSAGE(SQLQuery);
        //                                     SQLConnection.Execute(SQLQuery);
        //                                     SQLQuery := 'insert into mrp_sd_plan_changes (PLAN_CHANGE_ID,SD_ID,AMC_ORDER_ID,PLANNED_AMOUNT,PAYMENT_REALIZE_DATE, ' +
        //                                                 'REMARKS,CREATED_BY,CREATION_DATE,USERID,SL_NO,PAYMENT_ID,BASEPLAN,SPLITEDFROM) ' +
        //                                                 'values(SEQ_SD_PLAN_CHANGES.NEXTVAL, ' +
        //                                                 FORMAT(CF_SDId) + ', ' + FORMAT(CF_SalOrdId) + ', 0, sysdate, '''', ''Auto'', sysdate, ''Auto''' +
        //                                                 ', ' + FORMAT(Curr_SL_No) + ', ' +
        //                                                 '(SELECT NVL(MAX(PAYMENT_ID),1) FROM MRP_SD_PAYMENT), '''', '''')';
        //                                     //  MESSAGE(SQLQuery);
        //                                     SQLConnection.Execute(SQLQuery);
        //                                     // Comment-Start--Commented By Pranavi on 20-Jul-2016
        //                                     /*
        //                                       SQLQuery := 'update mrp_sd_plan_changes set PLANNED_AMOUNT = '+delchr(FORMAT(DiffAmt),'=',',')+' where sd_id = '+FORMAT(CF_SDId)+' and amc_order_id = '+
        //                                                   FORMAT(CF_SalOrdId)+' and PLAN_CHANGE_ID = '+FORMAT(SD_Plan_Chng_Id);
        //                                     //  MESSAGE(SQLQuery);
        //                                       SQLConnection.Execute(SQLQuery);
        //                                     */
        //                                     // Comment-End--Commented By Pranavi on 20-Jul-2016
        //                                     LoopEnd := TRUE;
        //                                     Amount := 0;
        //                                 END  // End of if amc order check
        //                                 ELSE BEGIN  // else part of if amc order check
        //                                     SQLQuery := 'insert into mrp_sd_plan_changes (PLAN_CHANGE_ID,SD_ID,SALE_ORDER_ID,PLANNED_AMOUNT,PAYMENT_REALIZE_DATE, ' +
        //                                                 'REMARKS,CREATED_BY,CREATION_DATE,USERID,SL_NO,PAYMENT_ID,BASEPLAN,SPLITEDFROM) ' +
        //                                                 'values(SEQ_SD_PLAN_CHANGES.NEXTVAL, ' +
        //                                                 FORMAT(CF_SDId) + ', ' + FORMAT(CF_SalOrdId) + ', ' + FORMAT(Amount) + ', sysdate, '''', ''Auto'', sysdate, ''Auto''' +
        //                                                 ', ' + FORMAT(Curr_SL_No) + ', ' +
        //                                                 ''''', '''', '''')';
        //                                     //  MESSAGE(SQLQuery);
        //                                     SQLConnection.Execute(SQLQuery);
        //                                     SQLQuery := 'insert into mrp_sd_plan_changes (PLAN_CHANGE_ID,SD_ID,SALE_ORDER_ID,PLANNED_AMOUNT,PAYMENT_REALIZE_DATE, ' +
        //                                                 'REMARKS,CREATED_BY,CREATION_DATE,USERID,SL_NO,PAYMENT_ID,BASEPLAN,SPLITEDFROM) ' +
        //                                                 'values(SEQ_SD_PLAN_CHANGES.NEXTVAL, ' +
        //                                                 FORMAT(CF_SDId) + ', ' + FORMAT(CF_SalOrdId) + ', 0, sysdate, '''', ''Auto'', sysdate, ''Auto''' +
        //                                                 ', ' + FORMAT(Curr_SL_No) + ', ' +
        //                                                 '(SELECT NVL(MAX(PAYMENT_ID),1) FROM MRP_SD_PAYMENT), '''', '''')';
        //                                     //  MESSAGE(SQLQuery);
        //                                     SQLConnection.Execute(SQLQuery);
        //                                     // Comment-Start--Commented By Pranavi on 20-Jul-2016
        //                                     /*
        //                                       SQLQuery := 'update mrp_sd_plan_changes set PLANNED_AMOUNT = '+FORMAT(DiffAmt)+' where sd_id = '+FORMAT(CF_SDId)+' and sale_order_id = '+
        //                                                   FORMAT(CF_SalOrdId)+' and PLAN_CHANGE_ID = '+FORMAT(SD_Plan_Chng_Id);
        //                                     //  MESSAGE(SQLQuery);
        //                                       SQLConnection.Execute(SQLQuery);
        //                                     */
        //                                     // Comment-End--Commented By Pranavi on 20-Jul-2016
        //                                     LoopEnd := TRUE;
        //                                     Amount := 0;
        //                                 END; // End of else part of if amc order check
        //                             END // End of If Planned Amount equal to Amount
        //                             ELSE BEGIN // IF Planned Amount < Amount
        //                                 DiffAmt := Amount - sl_plnd_amt;
        //                                 IF COPYSTR(GenJrnlLine."Sale Order No", 5, 3) = 'AMC' THEN BEGIN
        //                                     SQLQuery := 'insert into mrp_sd_plan_changes (PLAN_CHANGE_ID,SD_ID,AMC_ORDER_ID,PLANNED_AMOUNT,PAYMENT_REALIZE_DATE, ' +
        //                                                 'REMARKS,CREATED_BY,CREATION_DATE,USERID,SL_NO,PAYMENT_ID,BASEPLAN,SPLITEDFROM) ' +
        //                                                 'values(SEQ_SD_PLAN_CHANGES.NEXTVAL, ' +
        //                                                 FORMAT(CF_SDId) + ', ' + FORMAT(CF_SalOrdId) + ', 0, sysdate, '''', ''Auto'', sysdate, ''Auto'', ' +
        //                                                 FORMAT(Curr_SL_No) + ', (SELECT NVL(MAX(PAYMENT_ID),1) FROM MRP_SD_PAYMENT), '''', '''')';
        //                                 END
        //                                 ELSE BEGIN
        //                                     SQLQuery := 'insert into mrp_sd_plan_changes (PLAN_CHANGE_ID,SD_ID,SALE_ORDER_ID,PLANNED_AMOUNT,PAYMENT_REALIZE_DATE, ' +
        //                                                 'REMARKS,CREATED_BY,CREATION_DATE,USERID,SL_NO,PAYMENT_ID,BASEPLAN,SPLITEDFROM) ' +
        //                                                 'values(SEQ_SD_PLAN_CHANGES.NEXTVAL, ' +
        //                                                 FORMAT(CF_SDId) + ', ' + FORMAT(CF_SalOrdId) + ', 0, sysdate, '''', ''Auto'', sysdate, ''Auto'', ' +
        //                                                 FORMAT(Curr_SL_No) + ', (SELECT NVL(MAX(PAYMENT_ID),1) FROM MRP_SD_PAYMENT), '''', '''')';
        //                                 END;
        //                                 //  MESSAGE(SQLQuery);
        //                                 SQLConnection.Execute(SQLQuery);
        //                                 Amount := Amount - sl_plnd_amt;
        //                             END;
        //                         RowCount := RowCount + 1;
        //                         RecordSet.MoveNext;
        //                     END;
        //                     Last_sl_no := 0;
        //                     IF COPYSTR(GenJrnlLine."Sale Order No", 5, 3) = 'AMC' THEN
        //                         SQLQuery := 'select nvl(max(sl_no)+1,1) a from mrp_sd_plan_changes where sd_id = ' + FORMAT(CF_SDId) + ' and amc_order_id = ' + FORMAT(CF_SalOrdId)
        //                     ELSE
        //                         SQLQuery := 'select nvl(max(sl_no)+1,1) a from mrp_sd_plan_changes where sd_id = ' + FORMAT(CF_SDId) + ' and sale_order_id = ' + FORMAT(CF_SalOrdId);
        //                     RecordSet1 := SQLConnection.Execute(SQLQuery, RowCount);
        //                     IF NOT ((RecordSet1.BOF) OR (RecordSet1.EOF)) THEN
        //                         RecordSet1.MoveFirst;
        //                     WHILE NOT RecordSet1.EOF DO BEGIN
        //                         EVALUATE(Last_sl_no, FORMAT(RecordSet1.Fields.Item('a').Value));
        //                         RecordSet1.MoveNext;
        //                     END;
        //                     IF Last_sl_no = 0 THEN
        //                         Last_sl_no := 1;
        //                     IF PlanChngExist = FALSE THEN BEGIN
        //                         BasePLanExist := FALSE;
        //                         IF COPYSTR(GenJrnlLine."Sale Order No", 5, 3) = 'AMC' THEN
        //                             SQLQuery := 'select * from  mrp_sd_plan_changes where sd_id = ' + FORMAT(CF_SDId) + ' and amc_order_id = ' + FORMAT(CF_SalOrdId) + ' and baseplan = 1'
        //                         ELSE
        //                             SQLQuery := 'select * from  mrp_sd_plan_changes where sd_id = ' + FORMAT(CF_SDId) + ' and sale_order_id = ' + FORMAT(CF_SalOrdId) + ' and baseplan = 1';
        //                         RecordSet1 := SQLConnection.Execute(SQLQuery, RowCount);
        //                         IF NOT ((RecordSet1.BOF) OR (RecordSet1.EOF)) THEN
        //                             RecordSet1.MoveFirst;
        //                         WHILE NOT RecordSet1.EOF DO BEGIN
        //                             BasePLanExist := TRUE;
        //                             RecordSet1.MoveNext;
        //                         END;
        //                         IF BasePLanExist = TRUE THEN BEGIN
        //                             IF COPYSTR(GenJrnlLine."Sale Order No", 5, 3) = 'AMC' THEN BEGIN
        //                                 SQLQuery := 'insert into mrp_sd_plan_changes (PLAN_CHANGE_ID,SD_ID,AMC_ORDER_ID,PLANNED_AMOUNT,PAYMENT_REALIZE_DATE, ' +
        //                                             'REMARKS,CREATED_BY,CREATION_DATE,USERID,SL_NO,PAYMENT_ID,BASEPLAN,SPLITEDFROM) ' +
        //                                             'values(SEQ_SD_PLAN_CHANGES.NEXTVAL, ' +
        //                                             FORMAT(CF_SDId) + ', ' + FORMAT(CF_SalOrdId) + ', ' + FORMAT(Amount) + ', sysdate, '''', ''Auto'', sysdate, ''Auto'', ' +
        //                                             FORMAT(Last_sl_no) + ', (SELECT NVL(MAX(PAYMENT_ID),1) FROM MRP_SD_PAYMENT), '''', '''')';
        //                             END ELSE BEGIN
        //                                 SQLQuery := 'insert into mrp_sd_plan_changes (PLAN_CHANGE_ID,SD_ID,SALE_ORDER_ID,PLANNED_AMOUNT,PAYMENT_REALIZE_DATE, ' +
        //                                             'REMARKS,CREATED_BY,CREATION_DATE,USERID,SL_NO,PAYMENT_ID,BASEPLAN,SPLITEDFROM) ' +
        //                                             'values(SEQ_SD_PLAN_CHANGES.NEXTVAL, ' +
        //                                             FORMAT(CF_SDId) + ', ' + FORMAT(CF_SalOrdId) + ', ' + FORMAT(Amount) + ', sysdate, '''', ''Auto'', sysdate, ''Auto'', ' +
        //                                             FORMAT(Last_sl_no) + ', (SELECT NVL(MAX(PAYMENT_ID),1) FROM MRP_SD_PAYMENT), '''', '''')';
        //                             END;
        //                             // MESSAGE(SQLQuery);
        //                             SQLConnection.Execute(SQLQuery);
        //                         END
        //                         ELSE BEGIN
        //                             IF COPYSTR(GenJrnlLine."Sale Order No", 5, 3) = 'AMC' THEN BEGIN
        //                                 SQLQuery := 'insert into mrp_sd_plan_changes (PLAN_CHANGE_ID,SD_ID,AMC_ORDER_ID,PLANNED_AMOUNT,PAYMENT_REALIZE_DATE, ' +
        //                                             'REMARKS,CREATED_BY,CREATION_DATE,USERID,SL_NO,PAYMENT_ID,BASEPLAN,SPLITEDFROM) ' +
        //                                             'values(SEQ_SD_PLAN_CHANGES.NEXTVAL, ' +
        //                                             FORMAT(CF_SDId) + ', ' + FORMAT(CF_SalOrdId) + ', ' + FORMAT(Amount) + ', sysdate, '''', ''Auto'', sysdate, ''Auto'', ' +
        //                                             '1, (SELECT NVL(MAX(PAYMENT_ID),1) FROM MRP_SD_PAYMENT), 1, '''')';
        //                             END ELSE BEGIN
        //                                 SQLQuery := 'insert into mrp_sd_plan_changes (PLAN_CHANGE_ID,SD_ID,SALE_ORDER_ID,PLANNED_AMOUNT,PAYMENT_REALIZE_DATE, ' +
        //                                             'REMARKS,CREATED_BY,CREATION_DATE,USERID,SL_NO,PAYMENT_ID,BASEPLAN,SPLITEDFROM) ' +
        //                                             'values(SEQ_SD_PLAN_CHANGES.NEXTVAL, ' +
        //                                             FORMAT(CF_SDId) + ', ' + FORMAT(CF_SalOrdId) + ', ' + FORMAT(Amount) + ', sysdate, '''', ''Auto'', sysdate, ''Auto'', ' +
        //                                             '1, (SELECT NVL(MAX(PAYMENT_ID),1) FROM MRP_SD_PAYMENT), 1, '''')';
        //                             END;
        //                             // MESSAGE(SQLQuery);
        //                             SQLConnection.Execute(SQLQuery);
        //                         END;
        //                         IF COPYSTR(GenJrnlLine."Sale Order No", 5, 3) = 'AMC' THEN BEGIN
        //                             SQLQuery := 'insert into mrp_sd_plan_changes (PLAN_CHANGE_ID,SD_ID,AMC_ORDER_ID,PLANNED_AMOUNT,PAYMENT_REALIZE_DATE, ' +
        //                                         'REMARKS,CREATED_BY,CREATION_DATE,USERID,SL_NO,PAYMENT_ID,BASEPLAN,SPLITEDFROM) ' +
        //                                         'values(SEQ_SD_PLAN_CHANGES.NEXTVAL, ' +
        //                                         FORMAT(CF_SDId) + ', ' + FORMAT(CF_SalOrdId) + ', 0, sysdate, '''', ''Auto'', sysdate, ''Auto'', ' +
        //                                         '1, (SELECT NVL(MAX(PAYMENT_ID),1) FROM MRP_SD_PAYMENT), '''', '''')';
        //                         END ELSE BEGIN
        //                             SQLQuery := 'insert into mrp_sd_plan_changes (PLAN_CHANGE_ID,SD_ID,SALE_ORDER_ID,PLANNED_AMOUNT,PAYMENT_REALIZE_DATE, ' +
        //                                         'REMARKS,CREATED_BY,CREATION_DATE,USERID,SL_NO,PAYMENT_ID,BASEPLAN,SPLITEDFROM) ' +
        //                                         'values(SEQ_SD_PLAN_CHANGES.NEXTVAL, ' +
        //                                         FORMAT(CF_SDId) + ', ' + FORMAT(CF_SalOrdId) + ', 0, sysdate, '''', ''Auto'', sysdate, ''Auto'', ' +
        //                                         '1, (SELECT NVL(MAX(PAYMENT_ID),1) FROM MRP_SD_PAYMENT), '''', '''')';
        //                         END;
        //                         // MESSAGE(SQLQuery);
        //                         SQLConnection.Execute(SQLQuery);
        //                     END
        //                     ELSE BEGIN
        //                         IF Amount > 0 THEN BEGIN
        //                             IF COPYSTR(GenJrnlLine."Sale Order No", 5, 3) = 'AMC' THEN BEGIN
        //                                 SQLQuery := 'insert into mrp_sd_plan_changes (PLAN_CHANGE_ID,SD_ID,AMC_ORDER_ID,PLANNED_AMOUNT,PAYMENT_REALIZE_DATE, ' +
        //                                             'REMARKS,CREATED_BY,CREATION_DATE,USERID,SL_NO,PAYMENT_ID,BASEPLAN,SPLITEDFROM) ' +
        //                                             'values(SEQ_SD_PLAN_CHANGES.NEXTVAL, ' +
        //                                             FORMAT(CF_SDId) + ', ' + FORMAT(CF_SalOrdId) + ', ' + FORMAT(Amount) + ', sysdate, '''', ''Auto'', sysdate, ''Auto'', ' +
        //                                             FORMAT(Last_sl_no) + ', (SELECT NVL(MAX(PAYMENT_ID),1) FROM MRP_SD_PAYMENT), '''', '''')';
        //                                 // MESSAGE(SQLQuery);
        //                                 SQLConnection.Execute(SQLQuery);
        //                                 SQLQuery := 'insert into mrp_sd_plan_changes (PLAN_CHANGE_ID,SD_ID,AMC_ORDER_ID,PLANNED_AMOUNT,PAYMENT_REALIZE_DATE, ' +
        //                                             'REMARKS,CREATED_BY,CREATION_DATE,USERID,SL_NO,PAYMENT_ID,BASEPLAN,SPLITEDFROM) ' +
        //                                             'values(SEQ_SD_PLAN_CHANGES.NEXTVAL, ' +
        //                                             FORMAT(CF_SDId) + ', ' + FORMAT(CF_SalOrdId) + ', 0, sysdate, '''', ''Auto'', sysdate, ''Auto'', ' +
        //                                             FORMAT(Last_sl_no) + ', (SELECT NVL(MAX(PAYMENT_ID),1) FROM MRP_SD_PAYMENT), '''', '''')';
        //                                 // MESSAGE(SQLQuery);
        //                                 SQLConnection.Execute(SQLQuery);
        //                             END ELSE BEGIN
        //                                 SQLQuery := 'insert into mrp_sd_plan_changes (PLAN_CHANGE_ID,SD_ID,SALE_ORDER_ID,PLANNED_AMOUNT,PAYMENT_REALIZE_DATE, ' +
        //                                             'REMARKS,CREATED_BY,CREATION_DATE,USERID,SL_NO,PAYMENT_ID,BASEPLAN,SPLITEDFROM) ' +
        //                                             'values(SEQ_SD_PLAN_CHANGES.NEXTVAL, ' +
        //                                             FORMAT(CF_SDId) + ', ' + FORMAT(CF_SalOrdId) + ', ' + FORMAT(Amount) + ', sysdate, '''', ''Auto'', sysdate, ''Auto'', ' +
        //                                             FORMAT(Last_sl_no) + ', (SELECT NVL(MAX(PAYMENT_ID),1) FROM MRP_SD_PAYMENT), '''', '''')';
        //                                 // MESSAGE(SQLQuery);
        //                                 SQLConnection.Execute(SQLQuery);
        //                                 SQLQuery := 'insert into mrp_sd_plan_changes (PLAN_CHANGE_ID,SD_ID,SALE_ORDER_ID,PLANNED_AMOUNT,PAYMENT_REALIZE_DATE, ' +
        //                                             'REMARKS,CREATED_BY,CREATION_DATE,USERID,SL_NO,PAYMENT_ID,BASEPLAN,SPLITEDFROM) ' +
        //                                             'values(SEQ_SD_PLAN_CHANGES.NEXTVAL, ' +
        //                                             FORMAT(CF_SDId) + ', ' + FORMAT(CF_SalOrdId) + ', 0, sysdate, '''', ''Auto'', sysdate, ''Auto'', ' +
        //                                             FORMAT(Last_sl_no) + ', (SELECT NVL(MAX(PAYMENT_ID),1) FROM MRP_SD_PAYMENT), '''', '''')';
        //                                 // MESSAGE(SQLQuery);
        //                                 SQLConnection.Execute(SQLQuery);
        //                             END;
        //                         END;
        //                     END;

        //                     // >> Start-Added by PranaV on 08-07-17 for cs cashflow purpose to effect opening balance in cashflow
        //                     IF COPYSTR(GenJrnlLine."Sale Order No", 5, 3) = 'AMC' THEN BEGIN
        //                         SQLQuery := 'UPDATE MRP_BANK_LIMIT set  cs_net_position =  cs_net_position+' + DELCHR(FORMAT(ABS(GenJrnlLine.Amount)), '=', ',');
        //                         SQLConnection.Execute(SQLQuery);
        //                     END;
        //                     // << END-Added by PranaV on 08-07-17 for cs cashflow purpose to effect opening balance in cashflow


        //                     GLEntry_Received_Ant := 0; // initialized by Vishnu Priya for testing
        //                     GLEntry.RESET;
        //                     GLEntry.SETFILTER(GLEntry."G/L Account No.", '%1', '25700');
        //                     GLEntry.SETFILTER(GLEntry."Sale Order No.", '%1', GenJrnlLine."Sale Order No");
        //                     GLEntry.SETFILTER(GLEntry.Amount, '<%1', 0);
        //                     IF GLEntry.FINDSET THEN
        //                         REPEAT
        //                                 GLEntry_Received_Ant := GLEntry_Received_Ant + ROUND(ABS(GLEntry.Amount), 1);
        //                         UNTIL GLEntry.NEXT = 0;
        //                     IF (GLEntry_Received_Ant = CF_SD_Actual_Amt) AND (CF_SD_Actual_Amt = CF_Tot_SD_Amt) THEN BEGIN
        //                         SQLQuery := 'UPDATE MRP_SECURITY_DEPOSIT SET SD_STATUS = ''Y'' WHERE SD_ID = ' + FORMAT(CF_SDId) + ' AND INT_SAL_ORD_NO = ''' + GenJrnlLine."Sale Order No" + '''';
        //                         // MESSAGE(SQLQuery);
        //                         SQLConnection.Execute(SQLQuery);
        //                     END;
        //                     SIH.RESET;
        //                     SIH.SETRANGE(SIH."Order No.", GenJrnlLine."Sale Order No");
        //                     IF SIH.FINDSET THEN
        //                         REPEAT
        //                                 IF SIH."Security Deposit Amount" = GLEntry_Received_Ant THEN BEGIN
        //                                     SIH."SD Status" := SIH."SD Status"::Received;
        //                                     SIH.SecDepStatus := SIH.SecDepStatus::Received;
        //                                     SIH.MODIFY;
        //                                     ERP_Sec_Dep_Amt := ROUND(SIH."Security Deposit Amount", 1);
        //                                 END;
        //                         UNTIL SIH.NEXT = 0;
        //                     SIDummy.RESET;
        //                     SIDummy.SETRANGE(SIDummy."No.", GenJrnlLine."Sale Order No");
        //                     IF SIDummy.FINDSET THEN
        //                         REPEAT
        //                                 IF ERP_Sec_Dep_Amt = GLEntry_Received_Ant THEN BEGIN
        //                                     SIDummy."SD Status" := SIDummy."SD Status"::Received;
        //                                     SIDummy.SecDepStatus := SIDummy.SecDepStatus::Received;
        //                                     SIDummy.MODIFY;
        //                                 END;
        //                         UNTIL SIDummy.NEXT = 0;

        //                     SH.RESET;
        //                     SH.SETRANGE(SH."No.", GenJrnlLine."Sale Order No");
        //                     IF SH.FINDFIRST THEN BEGIN
        //                         IF ERP_Sec_Dep_Amt = GLEntry_Received_Ant THEN BEGIN
        //                             SH."SD Status" := SH."SD Status"::Received;
        //                             SH.SecDepStatus := SH.SecDepStatus::Received;
        //                             SH.MODIFY;
        //                         END;
        //                     END;
        //                     SHA.RESET;
        //                     SHA.SETRANGE(SHA."No.", GenJrnlLine."Sale Order No");
        //                     IF SHA.FINDSET THEN
        //                         REPEAT
        //                                 IF ERP_Sec_Dep_Amt = GLEntry_Received_Ant THEN BEGIN
        //                                     SHA."SD status" := SHA."SD status"::Received;
        //                                     SHA.SecDepStatus := SHA.SecDepStatus::Received;
        //                                     SHA.MODIFY;
        //                                 END;
        //                         UNTIL SHA.NEXT = 0;
        //                 END;  //end of Check IF SD record is retrieved
        //             END;  // end of sd_receivables

        // SQLConnection.CommitTrans;
        // RecordSet.Close;
        // SQLConnection.Close;
        // ConnectionOpen := 0;

    end;


    procedure PrivateSaleOrdrCreationInCashFlow(SalesHeader: Record "Sales Header");
    var
        CustId: Integer;
        SaleOrderId: Integer;
        SalesLine: Record "Sales Line";
        SupplyAmt: Decimal;
        InstAmt: Decimal;
        SaleOrderTotAmt: Decimal;
        Cust: Record Customer;
        CSManager: Code[100];
        divisionGRec: Record "Employee Statistics Group";
        SP: Record "Salesperson/Purchaser";
        DummySaleOrderId: Integer;
        InsertedStatus: Code[1];
        NewSaleOrderId: Integer;
        NewDummySaleOrderId: Integer;
        PT_CF_Id: Integer;
        PaymntTrmRec: Record "Payment Terms";
        AdvAmt: Decimal;
        InstlFlag: Integer;
        AdvPercnt: Decimal;
        RetentionAmt: Decimal;
        DelPercnt: Integer;
        CrdtPercnt: Integer;
        LineAmtLOA: Integer;
        Line_SupplyAmt: Decimal;
        Line_InstAmt: Decimal;
        Line_AdvAmt: Decimal;
        Line_RetentionAmt: Decimal;
        LinNo: Decimal;
        Line_Qty: Decimal;
        Line_BiildQty: Decimal;
        Line_UnitPrice: Decimal;
        Line_Retention_Percnt: Integer;
        Line_Supply_Percnt: Integer;
        CLE: Record "Cust. Ledger Entry";
        DCLE: Record "Detailed Cust. Ledg. Entry";
        AdvPaymentAmt: Decimal;
        AR_Paymnt_Id: Integer;
        IsLineNo: Integer;
        CF_Line_Qty: Decimal;
        DiffQty: Decimal;
        Instl_DiffAmt: Decimal;
        Supply_DiffAmt: Decimal;
        Ret_Diff_Amt: Decimal;
        DiffLineAmt: Decimal;
        Ordr_Tot_Amt: Decimal;
        Ordr_Sup_Amt: Decimal;
        Ordr_Ret_Amt: Decimal;
        Ordr_Inst_Amt: Decimal;
        Ord_Adv_Amt: Decimal;
        Tot_Inv_Amt: Decimal;
        Tot_Inst_Inv_Amt: Decimal;
        Tot_Adv_Paid_Amt: Decimal;
        Ordr_PlnChanges_amt: Decimal;
        Inst_PlnChanges_Amt: Decimal;
        Sup_UnPlnnd_Amt: Decimal;
        Ret_UnPlnnd_Amt: Decimal;
        Inst_UnPlnnd_Amt: Decimal;
        TempAmt: Decimal;
        Enf: Boolean;
        TestAmt: Decimal;
        LastOrdAdvId: Integer;
        ERP_CSMangr_ID: Code[10];
        SLGRec: Record "Sales Line";
        Temp_Amount: Decimal;
        temp_PlnAmt: Decimal;
        Temp_Tot_Adv_Paid_Amt: Decimal;
        temp_del_line_adv_amt: Decimal;
        Last_Inst_OnHnd_Pln_Chgs_SLNO: Integer;
        Is_Ordr_Aftr_Int: Code[10];
        New_Adv_Amt: Decimal;
        CustOrderNo: Code[500];
        CustOrderDate: Date;
        CommitFlag: Boolean;
        Item_Grp: Record Item;
        Temp_Adv_Auto_Planned_Amt: Decimal;
        Temp_Adv_Auto_Paid_Amt: Decimal;
    begin
        // MESSAGE('Private Order Creation in Cashlflow!');
        // //Initialization start
        // RowCount := 0;
        // SQLQuery := '';
        // CommitFlag := TRUE;
        // //Initializations end

        // IF ISCLEAR(SQLConnection) THEN
        //     CREATE(SQLConnection, FALSE, TRUE);

        // IF ISCLEAR(RecordSet) THEN
        //     CREATE(RecordSet, FALSE, TRUE);

        // IF ISCLEAR(RecordSet1) THEN
        //     CREATE(RecordSet1, FALSE, TRUE);

        // IF ISCLEAR(RecordSet2) THEN
        //     CREATE(RecordSet2, FALSE, TRUE);

        // IF (SalesHeader."Currency Factor" > 0) AND (SalesHeader."Currency Code" <> '') THEN BEGIN
        //     CurrencyFactor := SalesHeader."Currency Factor";
        // END ELSE BEGIN
        //     CurrencyFactor := 1;
        // END;

        // IF ConnectionOpen <> 1 THEN BEGIN
        //     SQLConnection.ConnectionString := 'DSN=CASHFLOW;UID=cashflowuser;PASSWORD=firewall123;SERVER=oracle_80;';
        //     SQLConnection.Open;
        //     SQLConnection.BeginTrans;
        //     ConnectionOpen := 1;
        // END;
        // IF (FORMAT(SalesHeader."Document Type") = 'Order') AND (SalesHeader."Customer Posting Group" IN ['PRIVATE', 'OTHERS', 'EXPORT'])
        //   AND (SalesHeader.Order_After_CF_Integration = TRUE) AND NOT (SalesHeader."Sell-to Customer No." IN ['CUST00536', 'CUST01164']) THEN   // integrate only if private customer and not efftronics customer
        // BEGIN
        //     CustomerCheckInCF(SalesHeader."Sell-to Customer No.");   // Checks if customer exist in CashFLow else insert customer
        //     SQLQuery := ' select * from MRP_AR_CUSTOMER where ERP_CUSID= ''' + SalesHeader."Sell-to Customer No." + '''';
        //     RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //     IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //         RecordSet.MoveFirst;
        //     WHILE NOT RecordSet.EOF DO BEGIN
        //         CustId := RecordSet.Fields.Item('AR_CUSTOMER_ID').Value;    //get Cashflw customer id
        //         RowCount := RowCount + 1;
        //         RecordSet.MoveNext;
        //     END;
        //     Cust.RESET;
        //     Cust.SETRANGE(Cust."No.", SalesHeader."Sell-to Customer No.");
        //     IF Cust.FINDFIRST THEN BEGIN
        //         divisionGRec.RESET;
        //         divisionGRec.SETRANGE(divisionGRec."Division Code", Cust."Service Zone Code");
        //         IF divisionGRec.FINDFIRST THEN BEGIN
        //             SP.RESET;
        //             SP.SETRANGE(SP.Code, divisionGRec."Project Manager");
        //             IF SP.FINDFIRST THEN BEGIN
        //                 CSManager := SP.Name;   // cs sales mngr id
        //                 ERP_CSMangr_ID := SP.Code; // cs sales mngr name
        //             END;
        //         END;
        //     END;
        //     CLE.RESET;
        //     CLE.SETRANGE(CLE."Customer No.", SalesHeader."Sell-to Customer No.");
        //     CLE.SETRANGE(CLE."Payment Type", CLE."Payment Type"::Advance);
        //     CLE.SETRANGE(CLE."Sale Order no", SalesHeader."No.");
        //     IF CLE.FINDSET THEN
        //             REPEAT
        //                 DCLE.RESET;
        //                 DCLE.SETRANGE(DCLE."Cust. Ledger Entry No.", CLE."Entry No.");
        //                 DCLE.SETRANGE(DCLE."Entry Type", DCLE."Entry Type"::"Initial Entry");
        //                 IF DCLE.FINDSET THEN
        //                         REPEAT
        //                             AdvPaymentAmt := AdvPaymentAmt + ABS(DCLE."Amount (LCY)");   //get paid adv payment amount
        //                             AdvPaymentDate := DCLE."Posting Date";
        //                         UNTIL DCLE.NEXT = 0;
        //             UNTIL CLE.NEXT = 0;
        //     //SaleOrderTotAmt := ROUND(SalesHeader."Sale Order Total Amount",1);
        //     PaymntTrmRec.RESET;
        //     PaymntTrmRec.SETRANGE(PaymntTrmRec.Code, SalesHeader."Payment Terms Code");
        //     IF PaymntTrmRec.FINDFIRST THEN       // calc adv,del,credit % as per payment term
        //     BEGIN
        //         CASE PaymntTrmRec."Stage 1" OF
        //             PaymntTrmRec."Stage 1"::Advance:
        //                 AdvPercnt := PaymntTrmRec."Percentage 1";
        //             PaymntTrmRec."Stage 1"::Delivery:
        //                 DelPercnt := PaymntTrmRec."Percentage 1";
        //             PaymntTrmRec."Stage 1"::Against_RDSO_IC:
        //                 DelPercnt := PaymntTrmRec."Percentage 1";
        //             PaymntTrmRec."Stage 1"::Credit:
        //                 CrdtPercnt := PaymntTrmRec."Percentage 1";
        //         END;
        //         CASE PaymntTrmRec."Stage 2" OF
        //             PaymntTrmRec."Stage 2"::Advance:
        //                 AdvPercnt := PaymntTrmRec."Percentage 2";
        //             PaymntTrmRec."Stage 2"::Delivery:
        //                 DelPercnt := PaymntTrmRec."Percentage 2";
        //             PaymntTrmRec."Stage 2"::Against_RDSO_IC:
        //                 DelPercnt := PaymntTrmRec."Percentage 2";
        //             PaymntTrmRec."Stage 2"::Credit:
        //                 CrdtPercnt := PaymntTrmRec."Percentage 2";
        //         END;
        //         CASE PaymntTrmRec."Stage 3" OF
        //             PaymntTrmRec."Stage 3"::Advance:
        //                 AdvPercnt := PaymntTrmRec."Percentage 3";
        //             PaymntTrmRec."Stage 3"::Delivery:
        //                 DelPercnt := PaymntTrmRec."Percentage 3";
        //             PaymntTrmRec."Stage 3"::Against_RDSO_IC:
        //                 DelPercnt := PaymntTrmRec."Percentage 3";
        //             PaymntTrmRec."Stage 3"::Credit:
        //                 CrdtPercnt := PaymntTrmRec."Percentage 3";
        //         END;
        //     END;
        //     AdvAmt := 0;
        //     SalesLine.RESET;
        //     SalesLine.SETRANGE(SalesLine."Document Type", SalesLine."Document Type"::Order);
        //     SalesLine.SETRANGE(SalesLine."Document No.", SalesHeader."No.");
        //     SalesLine.SETFILTER(SalesLine."No.", '<>%1', '');
        //     SalesLine.SETFILTER(SalesLine.Quantity, '>%1', 0);
        //     IF SalesLine.FINDSET THEN
        //         REPEAT
        //                 LineAmtLOA := 0;
        //             LineAmtLOA := ROUND(SalesLine.Quantity * SalesLine."Unitcost(LOA)" / CurrencyFactor, 1);
        //             IF SalesLine.Type = SalesLine.Type::Item THEN BEGIN
        //                 IF Item_Grp.GET(SalesLine."No.") THEN BEGIN
        //                     IF (COPYSTR(SalesLine."No.", 1, 4) = 'INST') AND (Item_Grp."Item Sub Sub Group Code" = 'INSTALLATION') THEN BEGIN
        //                         InstAmt := InstAmt + ROUND(SalesLine.Quantity * SalesLine."Unitcost(LOA)" / CurrencyFactor, 1); // calc total order inst amt
        //                     END ELSE BEGIN
        //                         AdvAmt += LineAmtLOA * AdvPercnt / 100;      // calc total order adv amount
        //                         IF SalesLine."Retention Portion" > 0 THEN BEGIN
        //                             RetentionAmt := RetentionAmt + (LineAmtLOA * SalesLine."Retention Portion" / 100);  // calc total order retention amt
        //                             SupplyAmt := SupplyAmt + (LineAmtLOA - (LineAmtLOA * AdvPercnt / 100) - (LineAmtLOA * SalesLine."Retention Portion" / 100));  // calc total order supply amt
        //                         END ELSE BEGIN
        //                             SupplyAmt := SupplyAmt + (LineAmtLOA - (LineAmtLOA * AdvPercnt / 100));  // calc total order supply amt
        //                         END;
        //                     END;
        //                 END;
        //             END
        //             ELSE
        //                 IF SalesLine.Type = SalesLine.Type::"G/L Account" THEN BEGIN
        //                     InstAmt := InstAmt + ROUND(SalesLine.Quantity * SalesLine."Unitcost(LOA)" / CurrencyFactor, 1); // calc total order inst amt
        //                 END;
        //             SaleOrderTotAmt := SaleOrderTotAmt + LineAmtLOA;
        //         UNTIL SalesLine.NEXT = 0;
        //     IF InstAmt > 0 THEN InstlFlag := 1 ELSE InstlFlag := 0;
        //     IF (SalesHeader."Customer OrderNo." = '') OR (SalesHeader."Customer OrderNo." = ' ') THEN
        //         CustOrderNo := 'NIL'
        //     ELSE
        //         CustOrderNo := SalesHeader."Customer OrderNo.";
        //     IF SalesHeader."Customer Order Date" <> 0D THEN
        //         CustOrderDate := SalesHeader."Customer Order Date"
        //     ELSE
        //         CustOrderDate := SalesHeader."Order Date";
        //     // Added by Pranavi on 26-Jul-2016 as part of payment terms process
        //     PT_CF_Id := 0;
        //     SQLQuery := ' SELECT * FROM PAYMENT_TERMS WHERE (ACTINACT = 1) AND (PAYMENT_TERM_CODE = ''' + SalesHeader."Payment Terms Code" + ''')';
        //     RecordSet := SQLConnection.Execute(SQLQuery);
        //     IF NOT (RecordSet.EOF OR RecordSet.BOF) THEN BEGIN
        //         EVALUATE(PT_CF_Id, FORMAT(RecordSet.Fields.Item('TERM_ID').Value));    // get CF payment term id
        //     END;
        //     // End by Pranavi
        //     IF PT_CF_Id = 0 THEN ERROR('Payment term not found in cashflow!\Please forward payment terms to cashflow!');

        //     SQLQuery := ' SELECT * FROM MRP_SALE_ORDER WHERE INT_SAL_ORD_NO = ''' + SalesHeader."No." + ''' AND STATUS = ''N''';
        //     RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //     IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //         RecordSet.MoveFirst;
        //     WHILE NOT RecordSet.EOF DO BEGIN
        //         SaleOrderId := RecordSet.Fields.Item('SALE_ORDER_ID').Value;    // get CF Sale orde id
        //         IF FORMAT(RecordSet.Fields.Item('IS_ORDR_AFT_INTEGRTION').Value) = '1' THEN
        //             Is_Ordr_Aftr_Int := 'YES'
        //         ELSE
        //             Is_Ordr_Aftr_Int := 'NO';
        //         RowCount := RowCount + 1;
        //         RecordSet.MoveNext;
        //     END;
        //     IF SaleOrderId = 0 THEN    // check if sale order present in sale order table in c/f then insert order
        //     BEGIN
        //         SQLQuery := ' SELECT SALE_ORDER_SEQ.NEXTVAL LASTOrdID from dual';
        //         RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //         IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //             RecordSet.MoveFirst;
        //         WHILE NOT RecordSet.EOF DO BEGIN
        //             EVALUATE(NewSaleOrderId, FORMAT(RecordSet.Fields.Item('LASTOrdID').Value));   // get last order seq id
        //             RowCount := RowCount + 1;
        //             RecordSet.MoveNext;
        //         END;
        //         // sale order insertion in CF
        //         SQLQuery := ' INSERT INTO MRP_SALE_ORDER(SALE_ORDER_ID,AR_CUSTOMER_ID,PURCHASEORDERNO,PURCHASEORDER_DATE,SALE_ORDER_AMOUNT,STATUS,CREATION_DATE, ' +
        //                     ' USERID,ADV_AMOUNT,INT_SAL_ORD_NO,SUPPLYAMOUNT,INSTALLAMOUNT, SALESPERSON,RETENTIONAMOUNT,INSTALLATION_FLAG,CSMANAGER, ' +
        //                     ' PAYMENT_TERM_ID,IS_ORDR_AFT_INTEGRTION,CSMANAGER_ID) VALUES(' + FORMAT(NewSaleOrderId) + ', ' + FORMAT(CustId) + ', ''' + CustOrderNo + ''', ' +
        //                     ' to_date(''' + FORMAT(CustOrderDate, 0, '<Day>-<Month Text,3>-<Year4>') + ''',''dd-mon-yyyy''),' + DELCHR(FORMAT(ROUND(SaleOrderTotAmt, 1, '=')), '=', ',') +
        //                     ', ''N'', SYSDATE, ''Auto'', ' + DELCHR(FORMAT(ROUND(AdvAmt, 1, '=')), '=', ',') + ', ''' + SalesHeader."No." + ''', ' + DELCHR(FORMAT(ROUND(SupplyAmt, 1, '=')), '=', ',') + ', ' + DELCHR(FORMAT(ROUND(InstAmt, 1, '=')), '=', ',') + ', ''' +
        //                     SalesHeader."Salesperson Code" + ''', ' + DELCHR(FORMAT(ROUND(RetentionAmt, 1, '=')), '=', ',') + ', ' + FORMAT(InstlFlag) + ', ''' + CSManager + ''', ''' + DELCHR(FORMAT(PT_CF_Id), '=', ',') +
        //                     ''', 1, ''' + ERP_CSMangr_ID + ''')';
        //         MESSAGE(SQLQuery);
        //         SQLConnection.Execute(SQLQuery);
        //         // Sales Lines Insertion in CF
        //         SalesLine.RESET;
        //         SalesLine.SETRANGE(SalesLine."Document Type", SalesLine."Document Type"::Order);
        //         SalesLine.SETRANGE(SalesLine."Document No.", SalesHeader."No.");
        //         SalesLine.SETFILTER(SalesLine."No.", '<>%1', '');
        //         SalesLine.SETFILTER(SalesLine.Quantity, '>%1', 0);
        //         IF SalesLine.FINDSET THEN   // process sales lines one by one
        //                 REPEAT
        //                     LineAmtLOA := 0;
        //                     Line_UnitPrice := 0;
        //                     LineAmtLOA := ROUND(SalesLine.Quantity * SalesLine."Unitcost(LOA)" / CurrencyFactor, 1);  // line tot amount
        //                     EVALUATE(LinNo, FORMAT(SalesLine."Line No."));
        //                     Line_Qty := ROUND(SalesLine.Quantity, 0.01);                // line tot qty
        //                     Line_BiildQty := ROUND(SalesLine."Quantity Invoiced", 0.01);   // line billed qty
        //                     Line_Supply_Percnt := SalesLine."Supply Portion";
        //                     Line_Retention_Percnt := SalesLine."Retention Portion";
        //                     Line_UnitPrice := ROUND(SalesLine."Unitcost(LOA)" / CurrencyFactor, 0.01);
        //                     IF SalesLine.Type = SalesLine.Type::Item THEN BEGIN   // if line is item
        //                         IF Item_Grp.GET(SalesLine."No.") THEN BEGIN
        //                             IF (COPYSTR(SalesLine."No.", 1, 4) = 'INST') AND (Item_Grp."Item Sub Sub Group Code" = 'INSTALLATION') THEN BEGIN
        //                                 Line_InstAmt := ROUND(SalesLine.Quantity * SalesLine."Unitcost(LOA)" / CurrencyFactor, 1);
        //                                 SQLQuery := ' INSERT INTO MRP_SALE_ORDER_LINES(SALE_ORDER_ID,LINE_NO,ITEM_NO,ITEM_DESCRIPTION,QUANTITY,BILLED_QTY,AMOUNT,UNIT_PRICE,INSTALLATION_STATUS) ' +
        //                                            ' VALUES(' + DELCHR(FORMAT(NewSaleOrderId), '=', ',') + ', ' + DELCHR(FORMAT(LinNo), '=', ',') + ', ''' + FORMAT(SalesLine."No.") + ''', ''' + FORMAT(SalesLine.Description) + ''', ' +
        //                                            DELCHR(FORMAT(ROUND(Line_Qty, 0.01)), '=', ',') + ', ' + DELCHR(FORMAT(ROUND(Line_BiildQty, 0.01)), '=', ',') + ', ' + DELCHR(FORMAT(ROUND(LineAmtLOA, 1, '=')), '=', ',') +
        //                                            ' , ' + DELCHR(FORMAT(ROUND(Line_UnitPrice, 1, '=')), '=', ',') + ', ''I'') ';
        //                                 //MESSAGE(SQLQuery);
        //                                 SQLConnection.Execute(SQLQuery);
        //                             END ELSE BEGIN
        //                                 Line_AdvAmt := LineAmtLOA * AdvPercnt / 100;           // line adv amount
        //                                 IF SalesLine."Retention Portion" > 0 THEN BEGIN
        //                                     Line_Retention_Percnt := SalesLine."Retention Portion";
        //                                     Line_RetentionAmt := (LineAmtLOA * SalesLine."Retention Portion" / 100);
        //                                     Line_SupplyAmt := (LineAmtLOA - (LineAmtLOA * AdvPercnt / 100) - (LineAmtLOA * SalesLine."Retention Portion" / 100));
        //                                 END ELSE
        //                                     Line_SupplyAmt := (LineAmtLOA - (LineAmtLOA * AdvPercnt / 100));
        //                                 SQLQuery := ' INSERT INTO MRP_SALE_ORDER_LINES(SALE_ORDER_ID,LINE_NO,ITEM_NO,ITEM_DESCRIPTION,QUANTITY,BILLED_QTY,AMOUNT,UNIT_PRICE,RETENTION_PERCNTG, ' +
        //                                            ' RETENTION_AMOUNT,SUPPLY_PERCNTG,SUPPLY_AMOUNT,ADVANCE_PERCNTG,ADVANCE_AMOUNT,INSTALLATION_STATUS) VALUES(' + DELCHR(FORMAT(NewSaleOrderId), '=', ',') + ', ' +
        //                                            DELCHR(FORMAT(LinNo), '=', ',') + ', ''' + FORMAT(SalesLine."No.") + ''', ''' + FORMAT(SalesLine.Description) + ''', ' + DELCHR(FORMAT(ROUND(Line_Qty, 0.01)), '=', ',') +
        //                                            ' , ' + DELCHR(FORMAT(ROUND(Line_BiildQty, 0.01)), '=', ',') + ', ' + DELCHR(FORMAT(ROUND(LineAmtLOA, 1, '=')), '=', ',') + ', ' + DELCHR(FORMAT(ROUND(Line_UnitPrice, 1, '=')), '=', ',') + ', ' +
        //                                            DELCHR(FORMAT(ROUND(Line_Retention_Percnt)), '=', ',') + ', ' + DELCHR(FORMAT(ROUND(Line_RetentionAmt, 1, '=')), '=', ',') + ', ' + DELCHR(FORMAT(ROUND(Line_Supply_Percnt, 1, '=')), '=', ',') +
        //                                            ' , ' + DELCHR(FORMAT(ROUND(Line_SupplyAmt, 1, '=')), '=', ',') + ', ' + DELCHR(FORMAT(ROUND(AdvPercnt)), '=', ',') + ', ' + DELCHR(FORMAT(ROUND(Line_AdvAmt, 1, '=')), '=', ',') + ', ''S'') ';
        //                                 //   MESSAGE(SQLQuery);
        //                                 SQLConnection.Execute(SQLQuery);
        //                             END;
        //                         END;
        //                     END
        //                     ELSE
        //                         IF SalesLine.Type = SalesLine.Type::"G/L Account" THEN BEGIN     // if line is g/l account
        //                             Line_InstAmt := ROUND(SalesLine.Quantity * SalesLine."Unitcost(LOA)" / CurrencyFactor, 1);
        //                             SQLQuery := ' INSERT INTO MRP_SALE_ORDER_LINES(SALE_ORDER_ID,LINE_NO,ITEM_NO,ITEM_DESCRIPTION,QUANTITY,BILLED_QTY,AMOUNT,UNIT_PRICE,INSTALLATION_STATUS) ' +
        //                                        ' VALUES(' + DELCHR(FORMAT(NewSaleOrderId), '=', ',') + ', ' + DELCHR(FORMAT(LinNo), '=', ',') + ', ''' + FORMAT(SalesLine."No.") + ''', ''' + FORMAT(SalesLine.Description) + ''', ' +
        //                                        DELCHR(FORMAT(ROUND(Line_Qty, 0.01)), '=', ',') + ', ' + DELCHR(FORMAT(ROUND(Line_BiildQty, 0.01)), '=', ',') + ', ' + DELCHR(FORMAT(ROUND(LineAmtLOA, 1, '=')), '=', ',') +
        //                                        ' , ' + DELCHR(FORMAT(ROUND(Line_UnitPrice, 1, '=')), '=', ',') + ', ''I'') ';
        //                             // MESSAGE(SQLQuery);
        //                             SQLConnection.Execute(SQLQuery);
        //                         END;
        //                 UNTIL SalesLine.NEXT = 0;
        //         IF AdvPaymentAmt > 0 THEN   // if adv already paid in ERP insert adv payment in CF
        //         BEGIN
        //             IF AdvPaymentAmt > AdvAmt THEN
        //                 AdvPaymentAmt := AdvAmt;
        //             /*
        //             SQLQuery:= ' insert into MRP_ARR_PAYMENT(AR_PAYMENT_ID,SALE_ORDER_ID,PAYMENT_DATE,AMOUNT,USERID,CREATION_DATE,ADVANCE_FLAG '+
        //                        ' ) values(ARR_PAYMENT_SEQ.NEXTVAL,'+DELCHR(FORMAT(NewSaleOrderId),'=',',')+',to_date('''+FORMAT(AdvPaymentDate,0,'<Day>-<Month Text,3>-<Year4>')+
        //                        ''',''dd-mon-yyyy''), '+DELCHR(FORMAT(ROUND(AdvPaymentAmt,1,'=')),'=',',')+', ''Auto'', sysdate,2)';
        //             // MESSAGE(SQLQuery);
        //             SQLConnection.Execute(SQLQuery);
        //             */ // Commented By Pranavi on 06-Mar-2017 for not pay amount but place in today
        //                //>>Added By Pranavi on 06-Mar-2017 for not pay amount but place in today
        //             SQLQuery := 'select nvl(ORD_ADVANCE_ID_SEQ.NEXTVAL,1) LastOrdAdvId from dual';
        //             RecordSet2 := SQLConnection.Execute(SQLQuery, RowCount2);
        //             IF NOT ((RecordSet2.BOF) OR (RecordSet2.EOF)) THEN
        //                 RecordSet2.MoveFirst;
        //             WHILE NOT RecordSet2.EOF DO BEGIN
        //                 EVALUATE(LastOrdAdvId, FORMAT(RecordSet2.Fields.Item('LastOrdAdvId').Value));
        //                 RowCount2 := RowCount2 + 1;
        //                 RecordSet2.MoveNext;
        //             END;
        //             ActPeriodActYearCalc(TODAY);
        //             SQLQuery := 'insert into mrp_arr_ord_advance(ORD_ADVANCE_ID,SALE_ORDER_ID,EXP_ADVANCE_AMOUNT,ACCTPERIOD, ' +
        //                        ' ACCT_YEAR,EXP_RECEIVED_DATE,ACTINACT,ORDER_FLAG) values (' + DELCHR(FORMAT(LastOrdAdvId), '=', ',') + ', ' +
        //                        DELCHR(FORMAT(NewSaleOrderId), '=', ',') + ',' + DELCHR(FORMAT(ROUND(ABS(AdvPaymentAmt), 1, '=')), '=', ',') +
        //                        ', ' + DELCHR(FORMAT(PeriodNum), '=', ',') + ', ' + DELCHR(FORMAT(AccountYear), '=', ',') + ', sysdate, 1, 0)';
        //             // MESSAGE(SQLQuery);
        //             SQLConnection.Execute(SQLQuery, RowCount);
        //             SQLQuery := 'insert into MRP_ORDER_PLAN_CHANGES(PLAN_CHANGE_ID,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,CREATION_DATE, ' +
        //                        ' USERID,ORD_ADVANCE_ID,PLAN_TYPE,REMARKS) values(ORDER_PLANCHANGES_SEQ.NEXTVAL, ' + DELCHR(FORMAT(NewSaleOrderId), '=', ',') +
        //                        ', sysdate, ' + DELCHR(FORMAT(ROUND(AdvPaymentAmt, 1, '=')), '=', ',') + ', sysdate, ''Auto'',' + DELCHR(FORMAT(LastOrdAdvId), '=', ',') +
        //                        ', ''Auto Paid'',''Amount moved to today as it is paid in ERP'')';
        //             // MESSAGE(SQLQuery);
        //             SQLConnection.Execute(SQLQuery, RowCount);
        //             //<<Added By Pranavi on 06-Mar-2017 for not pay amount but place in today
        //         END;

        //         IF SalesHeader."SD Status" <> SalesHeader."SD Status"::NA THEN   // SD is applicable
        //             SecDepostitCreationInCashFLow(NewSaleOrderId, SalesHeader, CustId);    // security deposit creation

        //     END
        //     ELSE     // if sale order already present in sale order table in c/f update details
        //         IF Is_Ordr_Aftr_Int = 'YES' THEN  // applicable only if order is after payment terms intergration
        //         BEGIN
        //             // Start--Deletion of Items in CF if item deleted in ERP
        //             SQLQuery := 'select * from MRP_SALE_ORDER_LINES where (SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ')';
        //             // MESSAGE(SQLQuery);
        //             RecordSet2 := SQLConnection.Execute(SQLQuery, RowCount2);
        //             IF NOT ((RecordSet2.BOF) OR (RecordSet2.EOF)) THEN
        //                 RecordSet2.MoveFirst;
        //             WHILE NOT RecordSet2.EOF DO BEGIN
        //                 SLGRec.RESET;
        //                 SLGRec.SETRANGE(SLGRec."Document No.", SalesHeader."No.");
        //                 SLGRec.SETFILTER(SLGRec."Line No.", DELCHR(FORMAT(RecordSet2.Fields.Item('LINE_NO').Value), '=', ','));
        //                 IF NOT SLGRec.FINDFIRST THEN BEGIN
        //                     Ordr_Tot_Amt := 0;
        //                     Ordr_Sup_Amt := 0;
        //                     Ordr_Ret_Amt := 0;
        //                     Ordr_Inst_Amt := 0;
        //                     // Start--update pln_changes amounts
        //                     SQLQuery := 'select nvl(sum(sale_order_amount),0) as tot_amt,nvl(sum(supplyamount),0) sup_amt, nvl(sum(retentionamount),0) ret_amt, ' +
        //                                'nvl(sum(installamount),0) inst_amt, nvl(sum(adv_amount),0) adv_amt from MRP_SALE_ORDER where sale_order_id = ' + FORMAT(SaleOrderId);
        //                     // MESSAGE(SQLQuery);
        //                     RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                     IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                         RecordSet.MoveFirst;
        //                     WHILE NOT RecordSet.EOF DO BEGIN
        //                         EVALUATE(Ordr_Tot_Amt, FORMAT(RecordSet.Fields.Item('tot_amt').Value));
        //                         EVALUATE(Ordr_Sup_Amt, FORMAT(RecordSet.Fields.Item('sup_amt').Value));
        //                         EVALUATE(Ordr_Ret_Amt, FORMAT(RecordSet.Fields.Item('ret_amt').Value));
        //                         EVALUATE(Ordr_Inst_Amt, FORMAT(RecordSet.Fields.Item('inst_amt').Value));
        //                         EVALUATE(Ord_Adv_Amt, FORMAT(RecordSet.Fields.Item('adv_amt').Value));
        //                         RowCount := RowCount + 1;
        //                         RecordSet.MoveNext;
        //                     END;
        //                     SQLQuery := 'select nvl(sum(amount),0) inv_amt from MRP_ARR_INVOICE where sale_order_id = ' + FORMAT(SaleOrderId);
        //                     // MESSAGE(SQLQuery);
        //                     RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                     IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                         RecordSet.MoveFirst;
        //                     WHILE NOT RecordSet.EOF DO BEGIN
        //                         EVALUATE(Tot_Inv_Amt, FORMAT(RecordSet.Fields.Item('inv_amt').Value));
        //                         RowCount := RowCount + 1;
        //                         RecordSet.MoveNext;
        //                     END;
        //                     SQLQuery := 'select nvl(sum(amount),0) instl_inv_amt from MRP_ARR_INSTALL_INVOICE where sale_order_id = ' + FORMAT(SaleOrderId);
        //                     // MESSAGE(SQLQuery);
        //                     RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                     IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                         RecordSet.MoveFirst;
        //                     WHILE NOT RecordSet.EOF DO BEGIN
        //                         EVALUATE(Tot_Inst_Inv_Amt, FORMAT(RecordSet.Fields.Item('instl_inv_amt').Value));
        //                         RowCount := RowCount + 1;
        //                         RecordSet.MoveNext;
        //                     END;
        //                     SQLQuery := 'SELECT nvl(sum(amount),0) adv_paid_amt FROM MRP_ARR_PAYMENT WHERE SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ' AND ADVANCE_FLAG = 2';
        //                     // MESSAGE(SQLQuery);
        //                     RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                     IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                         RecordSet.MoveFirst;
        //                     WHILE NOT RecordSet.EOF DO BEGIN
        //                         EVALUATE(Tot_Adv_Paid_Amt, FORMAT(RecordSet.Fields.Item('adv_paid_amt').Value));
        //                         RowCount := RowCount + 1;
        //                         RecordSet.MoveNext;
        //                     END;
        //                     //>>Added By Pranavi on 06-Mar-2017 for not pay amount but place in today
        //                     SQLQuery := 'select plan_change_id,sale_order_id,payment_realize_date,planned_amount,response_section,remarks,creation_date,userid,ord_advance_id,' +
        //                                 'invoice_id,plan_type,planchngid,plan_type from (' +
        //                                 'select * from  MRP_ORDER_PLAN_CHANGES b,(select max(plan_change_id) PlanChngId ' +
        //                                 ' from MRP_ORDER_PLAN_CHANGES where SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ' group by SALE_ORDER_ID,ord_advance_id) a ' +
        //                                 ' where a.planchngid=b.plan_change_id and b.planned_amount > 0) where plan_type = ''Auto Paid''';
        //                     //MESSAGE(SQLQuery);
        //                     temp_PlnAmt := 0;
        //                     RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                     IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                         RecordSet.MoveFirst;
        //                     WHILE NOT RecordSet.EOF DO BEGIN
        //                         temp_PlnAmt := 0;
        //                         EVALUATE(temp_PlnAmt, FORMAT(RecordSet.Fields.Item('planned_amount').Value));
        //                         Tot_Adv_Paid_Amt := Tot_Adv_Paid_Amt + temp_PlnAmt;
        //                         RowCount := RowCount + 1;
        //                         RecordSet.MoveNext;
        //                     END;
        //                     //<<Added By Pranavi on 06-Mar-2017 for not pay amount but place in today
        //                     // order on hand plan changes amount
        //                     SQLQuery := 'select * from  MRP_ORDER_PLAN_CHANGES b,(select max(plan_change_id) PlanChngId ' +
        //                                 ' from MRP_ORDER_PLAN_CHANGES where SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ' group by SALE_ORDER_ID,ord_advance_id) a ' +
        //                                 ' where a.planchngid=b.plan_change_id and b.planned_amount > 0 and (b.plan_type is null or b.plan_type <> ''Auto Paid'')';
        //                     // MESSAGE(SQLQuery);
        //                     Ordr_PlnChanges_amt := 0;
        //                     temp_PlnAmt := 0;
        //                     RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                     IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                         RecordSet.MoveFirst;
        //                     WHILE NOT RecordSet.EOF DO BEGIN
        //                         temp_PlnAmt := 0;
        //                         EVALUATE(temp_PlnAmt, FORMAT(RecordSet.Fields.Item('planned_amount').Value));
        //                         Ordr_PlnChanges_amt := Ordr_PlnChanges_amt + temp_PlnAmt;
        //                         RowCount := RowCount + 1;
        //                         RecordSet.MoveNext;
        //                     END;
        //                     // inst on hand plan changes amount
        //                     SQLQuery := 'select * from  MRP_ORDER_INSTALL_PLAN_CHANGES b,' +
        //                                ' (select SALE_ORDER_ID,sl_no,max(plan_change_id) PlanChngId from ' +
        //                                ' MRP_ORDER_INSTALL_PLAN_CHANGES where SALE_ORDER_ID = ' + FORMAT(SaleOrderId) +
        //                                ' group by SALE_ORDER_ID,sl_no) a where a.planchngid=b.plan_change_id and b.planned_amount > 0';
        //                     // MESSAGE(SQLQuery);
        //                     Inst_PlnChanges_Amt := 0;
        //                     temp_PlnAmt := 0;
        //                     RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                     IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                         RecordSet.MoveFirst;
        //                     WHILE NOT RecordSet.EOF DO BEGIN
        //                         temp_PlnAmt := 0;
        //                         EVALUATE(temp_PlnAmt, FORMAT(RecordSet.Fields.Item('planned_amount').Value));
        //                         Inst_PlnChanges_Amt := Inst_PlnChanges_Amt + temp_PlnAmt;
        //                         RowCount := RowCount + 1;
        //                         RecordSet.MoveNext;
        //                     END;
        //                     Sup_UnPlnnd_Amt := Ordr_Sup_Amt + Ord_Adv_Amt - Tot_Adv_Paid_Amt - Ordr_PlnChanges_amt - Tot_Inv_Amt;
        //                     Ret_UnPlnnd_Amt := (Ordr_Ret_Amt + Ordr_Inst_Amt) - Inst_PlnChanges_Amt - Tot_Inst_Inv_Amt;
        //                     Inst_UnPlnnd_Amt := (Ordr_Ret_Amt + Ordr_Inst_Amt) - Inst_PlnChanges_Amt - Tot_Inst_Inv_Amt;
        //                     // END--update pln_changes_amt
        //                     // Update sale order amounts by subtracting deleted line amount
        //                     IF FORMAT(RecordSet2.Fields.Item('INSTALLATION_STATUS').Value) = 'I' THEN BEGIN
        //                         Temp_Amount := 0;
        //                         EVALUATE(Temp_Amount, FORMAT(RecordSet2.Fields.Item('AMOUNT').Value));
        //                         IF (ROUND(Inst_UnPlnnd_Amt, 1, '=') < ROUND(Temp_Amount, 1, '=')) AND (ROUND(Temp_Amount, 1, '=') > 0) THEN BEGIN
        //                             SQLQuery := 'select * from  MRP_ORDER_INSTALL_PLAN_CHANGES b,(select SALE_ORDER_ID,sl_no,max(plan_change_id) PlanChngId from ' +
        //                                         ' MRP_ORDER_INSTALL_PLAN_CHANGES where SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ' group by SALE_ORDER_ID,sl_no) a ' +
        //                                         ' where a.planchngid=b.plan_change_id and b.planned_amount > 0 order by payment_realize_date desc,planned_amount desc';
        //                             // MESSAGE(SQLQuery);
        //                             RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                             IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                                 RecordSet.MoveFirst;
        //                             TestAmt := 0;
        //                             Enf := FALSE;
        //                             TestAmt := Temp_Amount - Inst_UnPlnnd_Amt;
        //                             WHILE NOT RecordSet.EOF AND (NOT Enf) AND (ROUND(TestAmt, 1, '=') > 0) DO BEGIN
        //                                 EVALUATE(TempAmt, FORMAT(RecordSet.Fields.Item('planned_amount').Value));
        //                                 IF (TestAmt >= TempAmt) THEN BEGIN
        //                                     SQLQuery := 'insert into MRP_ORDER_INSTALL_PLAN_CHANGES(PLAN_CHANGE_ID,SL_NO,SALE_ORDER_ID, ' +
        //                                                ' PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,CREATION_DATE,USERID) ' +
        //                                                ' values((select nvl(max(PLAN_CHANGE_ID)+1,0) from MRP_ORDER_INSTALL_PLAN_CHANGES), ' +
        //                                                FORMAT(RecordSet.Fields.Item('SL_NO').Value) + ', ' + DELCHR(FORMAT(RecordSet.Fields.Item('SALE_ORDER_ID').Value), '=', ',') +
        //                                                ', sysdate, 0,sysdate,''Auto'')';
        //                                     // MESSAGE(SQLQuery);
        //                                     SQLConnection.Execute(SQLQuery, RowCount);
        //                                     TestAmt := TestAmt - TempAmt;
        //                                 END ELSE BEGIN
        //                                     Last_Inst_OnHnd_Pln_Chgs_SLNO := 0;
        //                                     SQLQuery := 'select nvl(max(sl_no)+1,1) last_slno from MRP_ORDER_INSTALL_PLAN_CHANGES where SALE_ORDER_ID = ' +
        //                                                DELCHR(FORMAT(RecordSet.Fields.Item('SALE_ORDER_ID').Value), '=', ',');
        //                                     // MESSAGE(SQLQuery);
        //                                     RecordSet1 := SQLConnection.Execute(SQLQuery, RowCount1);
        //                                     IF NOT ((RecordSet1.BOF) OR (RecordSet1.EOF)) THEN
        //                                         RecordSet1.MoveFirst;
        //                                     WHILE NOT RecordSet1.EOF DO BEGIN
        //                                         EVALUATE(Last_Inst_OnHnd_Pln_Chgs_SLNO, FORMAT(RecordSet1.Fields.Item('last_slno').Value));
        //                                         RowCount1 := RowCount1 + 1;
        //                                         RecordSet1.MoveNext;
        //                                     END;
        //                                     SQLQuery := 'insert into MRP_ORDER_INSTALL_PLAN_CHANGES(PLAN_CHANGE_ID,SL_NO,SALE_ORDER_ID, ' +
        //                                                ' PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,CREATION_DATE,USERID) ' +
        //                                                ' values((select nvl(max(PLAN_CHANGE_ID)+1,0) from MRP_ORDER_INSTALL_PLAN_CHANGES), ' +
        //                                                FORMAT(Last_Inst_OnHnd_Pln_Chgs_SLNO) + ', ' + DELCHR(FORMAT(RecordSet.Fields.Item('SALE_ORDER_ID').Value), '=', ',') +
        //                                                ', sysdate, ' + DELCHR(FORMAT(ROUND(TestAmt, 1, '=')), '=', ',') + ',sysdate,''Auto'')';
        //                                     // MESSAGE(SQLQuery);
        //                                     SQLConnection.Execute(SQLQuery, RowCount);
        //                                     SQLQuery := 'insert into MRP_ORDER_INSTALL_PLAN_CHANGES(PLAN_CHANGE_ID,SL_NO,SALE_ORDER_ID, ' +
        //                                                ' PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,CREATION_DATE,USERID) ' +
        //                                                ' values((select nvl(max(PLAN_CHANGE_ID)+1,0) from MRP_ORDER_INSTALL_PLAN_CHANGES), ' +
        //                                                FORMAT(Last_Inst_OnHnd_Pln_Chgs_SLNO) + ', ' + DELCHR(FORMAT(RecordSet.Fields.Item('SALE_ORDER_ID').Value), '=', ',') +
        //                                                ', sysdate, 0,sysdate,''Auto'')';
        //                                     // MESSAGE(SQLQuery);
        //                                     SQLConnection.Execute(SQLQuery, RowCount);
        //                                     SQLQuery := 'update MRP_ORDER_INSTALL_PLAN_CHANGES set PLANNED_AMOUNT = ' + DELCHR(FORMAT(ROUND(TempAmt - TestAmt, 1, '=')), '=', ',') +
        //                                                ' where PLAN_CHANGE_ID = ' + DELCHR(FORMAT(RecordSet.Fields.Item('PLAN_CHANGE_ID').Value), '=', ',');
        //                                     // MESSAGE(SQLQuery);
        //                                     SQLConnection.Execute(SQLQuery, RowCount);
        //                                     Enf := TRUE;
        //                                 END;
        //                                 RowCount := RowCount + 1;
        //                                 RecordSet.MoveNext;
        //                             END;
        //                         END;
        //                         SQLQuery := 'UPDATE MRP_SALE_ORDER SET SALE_ORDER_AMOUNT = SALE_ORDER_AMOUNT-' + DELCHR(FORMAT(RecordSet2.Fields.Item('AMOUNT').Value), '=', ',') +
        //                                    ' , INSTALLAMOUNT = INSTALLAMOUNT - ' + DELCHR(FORMAT(RecordSet2.Fields.Item('AMOUNT').Value), '=', ',') +
        //                                    ' WHERE SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ' AND INT_SAL_ORD_NO = ''' + SalesHeader."No." + '''';
        //                         // MESSAGE(SQLQuery);
        //                         SQLConnection.Execute(SQLQuery);
        //                     END ELSE BEGIN  // if deleted line is item
        //                         Temp_Amount := 0;
        //                         EVALUATE(Temp_Amount, FORMAT(RecordSet2.Fields.Item('SUPPLY_AMOUNT').Value));
        //                         Temp_Tot_Adv_Paid_Amt := 0;
        //                         SQLQuery := 'SELECT nvl(sum(amount),0) adv_paid_amt FROM MRP_ARR_PAYMENT WHERE SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ' AND ADVANCE_FLAG = 2';
        //                         // MESSAGE(SQLQuery);
        //                         RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                         IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                             RecordSet.MoveFirst;
        //                         WHILE NOT RecordSet.EOF DO BEGIN
        //                             EVALUATE(Temp_Tot_Adv_Paid_Amt, FORMAT(RecordSet.Fields.Item('adv_paid_amt').Value));
        //                             RowCount := RowCount + 1;
        //                             RecordSet.MoveNext;
        //                         END;
        //                         //>>Added By Pranavi on 06-Mar-2017 for not pay amount but place in today
        //                         SQLQuery := 'select plan_change_id,sale_order_id,payment_realize_date,planned_amount,response_section,remarks,creation_date,userid,ord_advance_id,' +
        //                                     'invoice_id,plan_type,planchngid,plan_type from (' +
        //                                     'select * from  MRP_ORDER_PLAN_CHANGES b,(select max(plan_change_id) PlanChngId ' +
        //                                     ' from MRP_ORDER_PLAN_CHANGES where SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ' group by SALE_ORDER_ID,ord_advance_id) a ' +
        //                                     ' where a.planchngid=b.plan_change_id and b.planned_amount > 0) where plan_type = ''Auto Paid''';
        //                         //MESSAGE(SQLQuery);
        //                         temp_PlnAmt := 0;
        //                         RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                         IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                             RecordSet.MoveFirst;
        //                         WHILE NOT RecordSet.EOF DO BEGIN
        //                             temp_PlnAmt := 0;
        //                             EVALUATE(temp_PlnAmt, FORMAT(RecordSet.Fields.Item('planned_amount').Value));
        //                             Temp_Tot_Adv_Paid_Amt := Temp_Tot_Adv_Paid_Amt + temp_PlnAmt;
        //                             RowCount := RowCount + 1;
        //                             RecordSet.MoveNext;
        //                         END;
        //                         //<<Added By Pranavi on 06-Mar-2017 for not pay amount but place in today
        //                         temp_del_line_adv_amt := 0;
        //                         EVALUATE(temp_del_line_adv_amt, FORMAT(RecordSet2.Fields.Item('advance_amount').Value));
        //                         IF ROUND(temp_del_line_adv_amt, 1, '=') > ROUND(Temp_Tot_Adv_Paid_Amt, 1, '=') THEN BEGIN
        //                             Temp_Amount := ROUND(Temp_Amount + temp_del_line_adv_amt - Temp_Tot_Adv_Paid_Amt, 1, '=');
        //                         END;
        //                         IF (ROUND(Sup_UnPlnnd_Amt, 1, '=') < ROUND(Temp_Amount, 1, '=')) AND (ROUND(Temp_Amount, 1, '=') > 0) THEN BEGIN
        //                             // order on hand plan changes amount
        //                             SQLQuery := 'select * from  MRP_ORDER_PLAN_CHANGES b,(select max(plan_change_id) PlanChngId ' +
        //                                         ' from MRP_ORDER_PLAN_CHANGES where SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ' group by SALE_ORDER_ID,ord_advance_id) a ' +
        //                                         ' where a.planchngid=b.plan_change_id and b.planned_amount > 0 and (b.plan_type is null or b.plan_type <> ''Auto Paid'') ' +
        //                                         ' order by b.payment_realize_date desc,b.planned_amount desc';
        //                             // MESSAGE(SQLQuery);
        //                             RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                             IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                                 RecordSet.MoveFirst;
        //                             TestAmt := 0;
        //                             Enf := FALSE;
        //                             TestAmt := Temp_Amount - Sup_UnPlnnd_Amt;
        //                             WHILE NOT RecordSet.EOF AND (NOT Enf) AND (TestAmt > 0) DO BEGIN
        //                                 EVALUATE(TempAmt, FORMAT(RecordSet.Fields.Item('planned_amount').Value));
        //                                 IF (TestAmt >= TempAmt) THEN BEGIN
        //                                     SQLQuery := 'insert into MRP_ORDER_PLAN_CHANGES(PLAN_CHANGE_ID,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,CREATION_DATE, ' +
        //                                                ' USERID,ORD_ADVANCE_ID) values(ORDER_PLANCHANGES_SEQ.NEXTVAL, ' + DELCHR(FORMAT(RecordSet.Fields.Item('SALE_ORDER_ID').Value), '=', ',') +
        //                                                ' , sysdate, 0, sysdate, ''Auto'',' + DELCHR(FORMAT(RecordSet.Fields.Item('ORD_ADVANCE_ID').Value), '=', ',') + ')';
        //                                     // MESSAGE(SQLQuery);
        //                                     SQLConnection.Execute(SQLQuery, RowCount);

        //                                     SQLQuery := 'update mrp_arr_ord_advance set order_flag = 1 where ORD_ADVANCE_ID = ' + DELCHR(FORMAT(RecordSet.Fields.Item('ORD_ADVANCE_ID').Value), '=', ',');
        //                                     // MESSAGE(SQLQuery);
        //                                     SQLConnection.Execute(SQLQuery, RowCount);

        //                                     TestAmt := TestAmt - TempAmt;
        //                                 END ELSE BEGIN
        //                                     SQLQuery := 'select nvl(ORD_ADVANCE_ID_SEQ.NEXTVAL,1) LastOrdAdvId from dual';
        //                                     RecordSet1 := SQLConnection.Execute(SQLQuery, RowCount);
        //                                     IF NOT ((RecordSet1.BOF) OR (RecordSet1.EOF)) THEN
        //                                         RecordSet1.MoveFirst;
        //                                     WHILE NOT RecordSet1.EOF DO BEGIN
        //                                         EVALUATE(LastOrdAdvId, FORMAT(RecordSet1.Fields.Item('LastOrdAdvId').Value));
        //                                         RowCount1 := RowCount1 + 1;
        //                                         RecordSet1.MoveNext;
        //                                     END;
        //                                     SQLQuery := 'insert into mrp_arr_ord_advance(ORD_ADVANCE_ID,SALE_ORDER_ID,EXP_ADVANCE_AMOUNT,ACCTPERIOD, ' +
        //                                                ' ACCT_YEAR,EXP_RECEIVED_DATE,ACTINACT,ORDER_FLAG) values (' + DELCHR(FORMAT(ROUND(LastOrdAdvId)), '=', ',') + ', ' +
        //                                                DELCHR(FORMAT(RecordSet.Fields.Item('SALE_ORDER_ID').Value), '=', ',') + ',' + DELCHR(FORMAT(ROUND(TestAmt, 1, '=')), '=', ',') +
        //                                                ', (select ACCTPERIOD from mrp_arr_ord_advance where ORD_ADVANCE_ID = ' + DELCHR(FORMAT(RecordSet.Fields.Item('ORD_ADVANCE_ID').Value), '=', ',') +
        //                                                '), (select ACCT_YEAR from mrp_arr_ord_advance where ORD_ADVANCE_ID = ' + DELCHR(FORMAT(RecordSet.Fields.Item('ORD_ADVANCE_ID').Value), '=', ',') +
        //                                                '), (select EXP_RECEIVED_DATE from mrp_arr_ord_advance where ORD_ADVANCE_ID = ' + DELCHR(FORMAT(RecordSet.Fields.Item('ORD_ADVANCE_ID').Value), '=', ',') + '), 1, 1)';
        //                                     // MESSAGE(SQLQuery);
        //                                     SQLConnection.Execute(SQLQuery, RowCount);
        //                                     SQLQuery := 'insert into MRP_ORDER_PLAN_CHANGES(PLAN_CHANGE_ID,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,CREATION_DATE,' +
        //                                                ' USERID,ORD_ADVANCE_ID) values(ORDER_PLANCHANGES_SEQ.NEXTVAL, ' + DELCHR(FORMAT(RecordSet.Fields.Item('SALE_ORDER_ID').Value), '=', ',') +
        //                                                ', sysdate, ' + DELCHR(FORMAT(ROUND(TestAmt, 1, '=')), '=', ',') + ', sysdate, ''Auto'',' + DELCHR(FORMAT(LastOrdAdvId), '=', ',') + ')';
        //                                     // MESSAGE(SQLQuery);
        //                                     SQLConnection.Execute(SQLQuery, RowCount);
        //                                     SQLQuery := 'insert into MRP_ORDER_PLAN_CHANGES(PLAN_CHANGE_ID,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,CREATION_DATE,' +
        //                                                ' USERID,ORD_ADVANCE_ID) values(ORDER_PLANCHANGES_SEQ.NEXTVAL, ' + DELCHR(FORMAT(RecordSet.Fields.Item('SALE_ORDER_ID').Value), '=', ',') +
        //                                                ', sysdate, 0, sysdate, ''Auto'',' + DELCHR(FORMAT(LastOrdAdvId), '=', ',') + ')';
        //                                     // MESSAGE(SQLQuery);
        //                                     SQLConnection.Execute(SQLQuery, RowCount);

        //                                     SQLQuery := 'update MRP_ORDER_PLAN_CHANGES set PLANNED_AMOUNT = ' + DELCHR(FORMAT(ROUND(TempAmt - TestAmt, 1, '=')), '=', ',') +
        //                                                ' where PLAN_CHANGE_ID = ' + DELCHR(FORMAT(RecordSet.Fields.Item('PLAN_CHANGE_ID').Value), '=', ',');
        //                                     // MESSAGE(SQLQuery);
        //                                     SQLConnection.Execute(SQLQuery, RowCount);

        //                                     SQLQuery := 'update mrp_arr_ord_advance set EXP_ADVANCE_AMOUNT = ' + DELCHR(FORMAT(ROUND(TempAmt - TestAmt, 1, '=')), '=', ',') +
        //                                                ' where ORD_ADVANCE_ID = ' + DELCHR(FORMAT(RecordSet.Fields.Item('ORD_ADVANCE_ID').Value), '=', ',');
        //                                     // MESSAGE(SQLQuery);
        //                                     SQLConnection.Execute(SQLQuery, RowCount);
        //                                     Enf := TRUE;
        //                                 END;
        //                                 RowCount := RowCount + 1;
        //                                 RecordSet.MoveNext;
        //                             END;  //End--order on hand pln chnges loop
        //                         END;
        //                         Temp_Amount := 0;
        //                         EVALUATE(Temp_Amount, FORMAT(RecordSet2.Fields.Item('RETENTION_AMOUNT').Value));
        //                         IF (ROUND(Ret_UnPlnnd_Amt, 1, '=') < ROUND(Temp_Amount, 1, '=')) AND (ROUND(Temp_Amount, 1, '=') > 0) THEN BEGIN
        //                             SQLQuery := 'select * from  MRP_ORDER_INSTALL_PLAN_CHANGES b,(select SALE_ORDER_ID,sl_no,max(plan_change_id) PlanChngId from ' +
        //                                         ' MRP_ORDER_INSTALL_PLAN_CHANGES where SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ' group by SALE_ORDER_ID,sl_no) a ' +
        //                                         ' where a.planchngid=b.plan_change_id and b.planned_amount > 0 order by payment_realize_date desc,planned_amount desc';
        //                             // MESSAGE(SQLQuery);
        //                             RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                             IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                                 RecordSet.MoveFirst;
        //                             TestAmt := 0;
        //                             Enf := FALSE;
        //                             TestAmt := ROUND(Temp_Amount - Ret_UnPlnnd_Amt, 1, '=');
        //                             WHILE NOT RecordSet.EOF AND (NOT Enf) AND (TestAmt > 0) DO BEGIN
        //                                 EVALUATE(TempAmt, FORMAT(RecordSet.Fields.Item('planned_amount').Value));
        //                                 IF (TestAmt >= TempAmt) THEN BEGIN
        //                                     SQLQuery := 'insert into MRP_ORDER_INSTALL_PLAN_CHANGES(PLAN_CHANGE_ID,SL_NO,SALE_ORDER_ID, ' +
        //                                                ' PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,CREATION_DATE,USERID) ' +
        //                                                ' values((select nvl(max(PLAN_CHANGE_ID)+1,0) from MRP_ORDER_INSTALL_PLAN_CHANGES), ' +
        //                                                FORMAT(RecordSet.Fields.Item('SL_NO').Value) + ', ' + DELCHR(FORMAT(RecordSet.Fields.Item('SALE_ORDER_ID').Value), '=', ',') +
        //                                                ', sysdate, 0,sysdate,''Auto'')';
        //                                     // MESSAGE(SQLQuery);
        //                                     SQLConnection.Execute(SQLQuery, RowCount);
        //                                     TestAmt := TestAmt - TempAmt;
        //                                 END ELSE BEGIN
        //                                     Last_Inst_OnHnd_Pln_Chgs_SLNO := 0;
        //                                     SQLQuery := 'select nvl(max(sl_no)+1,1) last_slno from MRP_ORDER_INSTALL_PLAN_CHANGES where SALE_ORDER_ID = ' +
        //                                                DELCHR(FORMAT(RecordSet.Fields.Item('SALE_ORDER_ID').Value), '=', ',');
        //                                     // MESSAGE(SQLQuery);
        //                                     RecordSet1 := SQLConnection.Execute(SQLQuery, RowCount1);
        //                                     IF NOT ((RecordSet1.BOF) OR (RecordSet1.EOF)) THEN
        //                                         RecordSet1.MoveFirst;
        //                                     WHILE NOT RecordSet1.EOF DO BEGIN
        //                                         EVALUATE(Last_Inst_OnHnd_Pln_Chgs_SLNO, FORMAT(RecordSet1.Fields.Item('last_slno').Value));
        //                                         RowCount1 := RowCount1 + 1;
        //                                         RecordSet1.MoveNext;
        //                                     END;
        //                                     SQLQuery := 'insert into MRP_ORDER_INSTALL_PLAN_CHANGES(PLAN_CHANGE_ID,SL_NO,SALE_ORDER_ID, ' +
        //                                                ' PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,CREATION_DATE,USERID) ' +
        //                                                ' values((select nvl(max(PLAN_CHANGE_ID)+1,0) from MRP_ORDER_INSTALL_PLAN_CHANGES), ' +
        //                                                FORMAT(Last_Inst_OnHnd_Pln_Chgs_SLNO) + ', ' + DELCHR(FORMAT(RecordSet.Fields.Item('SALE_ORDER_ID').Value), '=', ',') +
        //                                                ', sysdate, ' + DELCHR(FORMAT(ROUND(TestAmt, 1, '=')), '=', ',') + ',sysdate,''Auto'')';
        //                                     // MESSAGE(SQLQuery);
        //                                     SQLConnection.Execute(SQLQuery, RowCount);
        //                                     SQLQuery := 'insert into MRP_ORDER_INSTALL_PLAN_CHANGES(PLAN_CHANGE_ID,SL_NO,SALE_ORDER_ID, ' +
        //                                                ' PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,CREATION_DATE,USERID) ' +
        //                                                ' values((select nvl(max(PLAN_CHANGE_ID)+1,0) from MRP_ORDER_INSTALL_PLAN_CHANGES), ' +
        //                                                FORMAT(ROUND(Last_Inst_OnHnd_Pln_Chgs_SLNO)) + ', ' + DELCHR(FORMAT(RecordSet.Fields.Item('SALE_ORDER_ID').Value), '=', ',') +
        //                                                ', sysdate, 0,sysdate,''Auto'')';
        //                                     // MESSAGE(SQLQuery);
        //                                     SQLConnection.Execute(SQLQuery, RowCount);
        //                                     SQLQuery := 'update MRP_ORDER_INSTALL_PLAN_CHANGES set PLANNED_AMOUNT = ' + DELCHR(FORMAT(ROUND(TempAmt - TestAmt, 1, '=')), '=', ',') +
        //                                                ' where PLAN_CHANGE_ID = ' + DELCHR(FORMAT(RecordSet.Fields.Item('PLAN_CHANGE_ID').Value), '=', ',');
        //                                     // MESSAGE(SQLQuery);
        //                                     SQLConnection.Execute(SQLQuery, RowCount);
        //                                     Enf := TRUE;
        //                                 END;
        //                                 RowCount := RowCount + 1;
        //                                 RecordSet.MoveNext;
        //                             END;
        //                         END;
        //                         //Start--update sale order amounts
        //                         SQLQuery := 'UPDATE MRP_SALE_ORDER SET SALE_ORDER_AMOUNT = SALE_ORDER_AMOUNT-' + DELCHR(FORMAT(RecordSet2.Fields.Item('AMOUNT').Value), '=', ',') +
        //                                    ', SUPPLYAMOUNT = SUPPLYAMOUNT-' + DELCHR(FORMAT(RecordSet2.Fields.Item('SUPPLY_AMOUNT').Value), '=', ',') +
        //                                    ', ADV_AMOUNT = ADV_AMOUNT-' + DELCHR(FORMAT(RecordSet2.Fields.Item('ADVANCE_AMOUNT').Value), '=', ',') +
        //                                    ', RETENTIONAMOUNT = RETENTIONAMOUNT-' + DELCHR(FORMAT(RecordSet2.Fields.Item('RETENTION_AMOUNT').Value), '=', ',') +
        //                                    ' WHERE SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ' AND INT_SAL_ORD_NO = ''' + SalesHeader."No." + '''';
        //                         // MESSAGE(SQLQuery);
        //                         SQLConnection.Execute(SQLQuery);
        //                     END;
        //                     // Delete line lines table in cf
        //                     SQLQuery := 'delete from MRP_SALE_ORDER_LINES where (SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ') and (LINE_NO = ' +
        //                                DELCHR(FORMAT(RecordSet2.Fields.Item('LINE_NO').Value), '=', ',') + ')';
        //                     // MESSAGE(SQLQuery);
        //                     SQLConnection.Execute(SQLQuery);
        //                 END;
        //                 RowCount2 := RowCount2 + 1;
        //                 RecordSet2.MoveNext;
        //             END;
        //             // End--Deletion of Items in CF if item deleted in ERP
        //             // Start--Sales Lines Updatation
        //             Instl_DiffAmt := 0;
        //             Supply_DiffAmt := 0;
        //             SalesLine.RESET;
        //             SalesLine.SETRANGE(SalesLine."Document Type", SalesLine."Document Type"::Order);
        //             SalesLine.SETRANGE(SalesLine."Document No.", SalesHeader."No.");
        //             SalesLine.SETFILTER(SalesLine."No.", '<>%1', '');
        //             SalesLine.SETFILTER(SalesLine.Quantity, '>%1', 0);
        //             IF SalesLine.FINDSET THEN  // process each line one by one
        //                     REPEAT
        //                         LineAmtLOA := 0;
        //                         DiffQty := 0;
        //                         LineAmtLOA := ROUND(SalesLine.Quantity * SalesLine."Unitcost(LOA)" / CurrencyFactor, 1, '=');
        //                         EVALUATE(LinNo, FORMAT(SalesLine."Line No."));
        //                         Line_Qty := ROUND(SalesLine.Quantity, 0.01);
        //                         Line_BiildQty := ROUND(SalesLine."Quantity Invoiced", 0.01);
        //                         Line_Supply_Percnt := SalesLine."Supply Portion";
        //                         Line_Retention_Percnt := SalesLine."Retention Portion";
        //                         Line_UnitPrice := ROUND(SalesLine."Unitcost(LOA)" / CurrencyFactor, 0.01);
        //                         IF SalesLine.Type = SalesLine.Type::Item THEN BEGIN   // if line is item
        //                             IF Item_Grp.GET(SalesLine."No.") THEN   // if item find in item table
        //                             BEGIN
        //                                 IF (COPYSTR(SalesLine."No.", 1, 4) = 'INST') AND (Item_Grp."Item Sub Sub Group Code" = 'INSTALLATION') THEN   // if installation item
        //                                 BEGIN
        //                                     Line_InstAmt := ROUND(SalesLine.Quantity * SalesLine."Unitcost(LOA)" / CurrencyFactor, 1, '=');
        //                                     IsLineNo := 0;
        //                                     SQLQuery := 'select * from MRP_SALE_ORDER_LINES where (SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ') AND (LINE_NO = ' +
        //                                                DELCHR(FORMAT(LinNo), '=', ',') + ') AND (ITEM_NO =''' + FORMAT(SalesLine."No.") + ''')';
        //                                     RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                                     IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                                         RecordSet.MoveFirst;
        //                                     WHILE NOT RecordSet.EOF DO BEGIN
        //                                         EVALUATE(IsLineNo, FORMAT(RecordSet.Fields.Item('LINE_NO').Value));
        //                                         EVALUATE(CF_Line_Qty, FORMAT(RecordSet.Fields.Item('QUANTITY').Value));
        //                                         RowCount := RowCount + 1;
        //                                         RecordSet.MoveNext;
        //                                     END;
        //                                     IF IsLineNo <> 0 THEN BEGIN
        //                                         SQLQuery := 'UPDATE MRP_SALE_ORDER_LINES SET ITEM_NO = ''' + FORMAT(SalesLine."No.") + ''', ITEM_DESCRIPTION = ''' + FORMAT(SalesLine.Description) +
        //                                                    ''', QUANTITY = ' + DELCHR(FORMAT(ROUND(Line_Qty, 0.01)), '=', ',') +
        //                                                    ', BILLED_QTY = ' + DELCHR(FORMAT(ROUND(Line_BiildQty, 0.01)), '=', ',') + ', AMOUNT = ' + DELCHR(FORMAT(ROUND(LineAmtLOA, 1, '=')), '=', ',') + ', UNIT_PRICE = ' + DELCHR(FORMAT(ROUND(Line_UnitPrice, 1, '=')), '=', ',') +
        //                                                    ', INSTALLATION_STATUS = ''I'' WHERE (SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ' AND LINE_NO = ' + DELCHR(FORMAT(LinNo), '=', ',') + ')';
        //                                         // MESSAGE(SQLQuery);
        //                                         SQLConnection.Execute(SQLQuery);
        //                                         IF CF_Line_Qty > SalesLine.Quantity THEN BEGIN
        //                                             TempAmt := 0;
        //                                             TestAmt := 0;
        //                                             DiffQty := CF_Line_Qty - SalesLine.Quantity;
        //                                             Instl_DiffAmt := Instl_DiffAmt + ROUND(DiffQty * SalesLine."Unitcost(LOA)" / CurrencyFactor, 0.01);
        //                                             IF Instl_DiffAmt > Inst_UnPlnnd_Amt THEN BEGIN
        //                                                 // install order on hand plan changes
        //                                                 SQLQuery := 'select * from  MRP_ORDER_INSTALL_PLAN_CHANGES b,(select SALE_ORDER_ID,sl_no,max(plan_change_id) PlanChngId from ' +
        //                                                             ' MRP_ORDER_INSTALL_PLAN_CHANGES where SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ' group by SALE_ORDER_ID,sl_no) a ' +
        //                                                             ' where a.planchngid=b.plan_change_id and b.planned_amount > 0 order by payment_realize_date desc,planned_amount desc';
        //                                                 // MESSAGE(SQLQuery);
        //                                                 RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                                                 IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                                                     RecordSet.MoveFirst;
        //                                                 TestAmt := 0;
        //                                                 Enf := FALSE;
        //                                                 TestAmt := Instl_DiffAmt - Inst_UnPlnnd_Amt;
        //                                                 WHILE NOT RecordSet.EOF AND (NOT Enf) AND (TestAmt > 0) DO BEGIN
        //                                                     EVALUATE(TempAmt, FORMAT(RecordSet.Fields.Item('planned_amount').Value));
        //                                                     IF (TestAmt >= TempAmt) THEN BEGIN
        //                                                         SQLQuery := 'insert into MRP_ORDER_INSTALL_PLAN_CHANGES(PLAN_CHANGE_ID,SL_NO,SALE_ORDER_ID, ' +
        //                                                                    ' PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,CREATION_DATE,USERID) ' +
        //                                                                    ' values((select nvl(max(PLAN_CHANGE_ID)+1,0) from MRP_ORDER_INSTALL_PLAN_CHANGES), ' +
        //                                                                    FORMAT(RecordSet.Fields.Item('SL_NO').Value) + ', ' + DELCHR(FORMAT(RecordSet.Fields.Item('SALE_ORDER_ID').Value), '=', ',') +
        //                                                                    ', sysdate, 0,sysdate,''Auto'')';
        //                                                         // MESSAGE(SQLQuery);
        //                                                         SQLConnection.Execute(SQLQuery, RowCount);
        //                                                         TestAmt := TestAmt - TempAmt;
        //                                                     END ELSE BEGIN
        //                                                         SQLQuery := 'select nvl(max(sl_no)+1,1) last_slno from MRP_ORDER_INSTALL_PLAN_CHANGES where SALE_ORDER_ID = ' +
        //                                                                    DELCHR(FORMAT(RecordSet.Fields.Item('SALE_ORDER_ID').Value), '=', ',');
        //                                                         // MESSAGE(SQLQuery);
        //                                                         Last_Inst_OnHnd_Pln_Chgs_SLNO := 0;
        //                                                         RecordSet1 := SQLConnection.Execute(SQLQuery, RowCount1);
        //                                                         IF NOT ((RecordSet1.BOF) OR (RecordSet1.EOF)) THEN
        //                                                             RecordSet1.MoveFirst;
        //                                                         WHILE NOT RecordSet1.EOF DO BEGIN
        //                                                             EVALUATE(Last_Inst_OnHnd_Pln_Chgs_SLNO, FORMAT(RecordSet1.Fields.Item('last_slno').Value));
        //                                                             RowCount1 := RowCount1 + 1;
        //                                                             RecordSet1.MoveNext;
        //                                                         END;
        //                                                         SQLQuery := 'insert into MRP_ORDER_INSTALL_PLAN_CHANGES(PLAN_CHANGE_ID,SL_NO,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT, ' +
        //                                                                    ' CREATION_DATE,USERID) values((select nvl(max(PLAN_CHANGE_ID)+1,0) from MRP_ORDER_INSTALL_PLAN_CHANGES), ' +
        //                                                                    FORMAT(Last_Inst_OnHnd_Pln_Chgs_SLNO) + ', ' + DELCHR(FORMAT(RecordSet.Fields.Item('SALE_ORDER_ID').Value), '=', ',') +
        //                                                                    ', sysdate, ' + DELCHR(FORMAT(ROUND(TestAmt, 1, '=')), '=', ',') + ',sysdate,''Auto'')';
        //                                                         // MESSAGE(SQLQuery);
        //                                                         SQLConnection.Execute(SQLQuery, RowCount);
        //                                                         SQLQuery := 'insert into MRP_ORDER_INSTALL_PLAN_CHANGES(PLAN_CHANGE_ID,SL_NO,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT, ' +
        //                                                                    ' CREATION_DATE,USERID) values((select nvl(max(PLAN_CHANGE_ID)+1,0) from MRP_ORDER_INSTALL_PLAN_CHANGES), ' +
        //                                                                    FORMAT(Last_Inst_OnHnd_Pln_Chgs_SLNO) + ', ' + DELCHR(FORMAT(RecordSet.Fields.Item('SALE_ORDER_ID').Value), '=', ',') +
        //                                                                    ', sysdate, 0,sysdate,''Auto'')';
        //                                                         // MESSAGE(SQLQuery);
        //                                                         SQLConnection.Execute(SQLQuery, RowCount);
        //                                                         SQLQuery := 'update MRP_ORDER_INSTALL_PLAN_CHANGES set PLANNED_AMOUNT = ' + DELCHR(FORMAT(ROUND(TempAmt - TestAmt, 1, '=')), '=', ',') +
        //                                                                    ' where PLAN_CHANGE_ID = ' + DELCHR(FORMAT(RecordSet.Fields.Item('PLAN_CHANGE_ID').Value), '=', ',');
        //                                                         // MESSAGE(SQLQuery);
        //                                                         SQLConnection.Execute(SQLQuery, RowCount);
        //                                                         Enf := TRUE;
        //                                                     END;
        //                                                     RowCount := RowCount + 1;
        //                                                     RecordSet.MoveNext;
        //                                                 END;
        //                                             END;
        //                                         END;
        //                                     END ELSE BEGIN
        //                                         SQLQuery := 'INSERT INTO MRP_SALE_ORDER_LINES(SALE_ORDER_ID,LINE_NO,ITEM_NO,ITEM_DESCRIPTION,QUANTITY,BILLED_QTY,AMOUNT,UNIT_PRICE,INSTALLATION_STATUS)' +
        //                                                    ' VALUES(' + FORMAT(SaleOrderId) + ', ' + DELCHR(FORMAT(LinNo), '=', ',') + ', ''' + FORMAT(SalesLine."No.") + ''', ''' + FORMAT(SalesLine.Description) + ''', ' +
        //                                                    DELCHR(FORMAT(ROUND(Line_Qty)), '=', ',') + ', ' + DELCHR(FORMAT(ROUND(Line_BiildQty)), '=', ',') + ', ' + DELCHR(FORMAT(ROUND(LineAmtLOA, 1, '=')), '=', ',') + ', ' +
        //                                                    DELCHR(FORMAT(ROUND(Line_UnitPrice, 1, '=')), '=', ',') + ', ''I'')';
        //                                         // MESSAGE(SQLQuery);
        //                                         SQLConnection.Execute(SQLQuery);
        //                                     END;
        //                                 END ELSE BEGIN    // if supply item
        //                                     Line_AdvAmt := LineAmtLOA * AdvPercnt / 100;
        //                                     TempAmt := 0;
        //                                     TestAmt := 0;
        //                                     IF SalesLine."Retention Portion" > 0 THEN BEGIN
        //                                         Line_Retention_Percnt := SalesLine."Retention Portion";
        //                                         Line_RetentionAmt := (LineAmtLOA * SalesLine."Retention Portion" / 100);
        //                                         Line_SupplyAmt := (LineAmtLOA - (LineAmtLOA * AdvPercnt / 100) - (LineAmtLOA * SalesLine."Retention Portion" / 100));
        //                                     END ELSE
        //                                         Line_SupplyAmt := (LineAmtLOA - (LineAmtLOA * AdvPercnt / 100));
        //                                     IsLineNo := 0;
        //                                     SQLQuery := 'select * from MRP_SALE_ORDER_LINES where (SALE_ORDER_ID = ' + DELCHR(FORMAT(SaleOrderId), '=', ',') + ') AND (LINE_NO = ' +
        //                                                DELCHR(FORMAT(LinNo), '=', ',') + ')';
        //                                     RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                                     IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                                         RecordSet.MoveFirst;
        //                                     WHILE NOT RecordSet.EOF DO BEGIN
        //                                         EVALUATE(IsLineNo, FORMAT(RecordSet.Fields.Item('LINE_NO').Value));
        //                                         EVALUATE(CF_Line_Qty, FORMAT(RecordSet.Fields.Item('QUANTITY').Value));
        //                                         RowCount := RowCount + 1;
        //                                         RecordSet.MoveNext;
        //                                     END;
        //                                     IF IsLineNo <> 0 THEN BEGIN   // if line exist in CF then update line details
        //                                         SQLQuery := ' UPDATE MRP_SALE_ORDER_LINES SET ITEM_NO =''' + FORMAT(SalesLine."No.") + ''', ITEM_DESCRIPTION = ''' + FORMAT(SalesLine.Description) +
        //                                                    ''', QUANTITY  = ' + DELCHR(FORMAT(ROUND(Line_Qty, 0.01)), '=', ',') + ', ' +
        //                                                    ' BILLED_QTY = ' + DELCHR(FORMAT(ROUND(Line_BiildQty, 0.01)), '=', ',') + ', AMOUNT = ' + DELCHR(FORMAT(ROUND(LineAmtLOA, 1, '=')), '=', ',') + ', UNIT_PRICE = ' + DELCHR(FORMAT(ROUND(Line_UnitPrice, 1, '=')), '=', ',') + ', ' +
        //                                                    ' RETENTION_PERCNTG = ' + DELCHR(FORMAT(ROUND(Line_Retention_Percnt, 1, '=')), '=', ',') + ', RETENTION_AMOUNT = ' + DELCHR(FORMAT(ROUND(Line_RetentionAmt, 1, '=')), '=', ',') + ', SUPPLY_PERCNTG = ' +
        //                                                    DELCHR(FORMAT(ROUND(Line_Supply_Percnt, 0.01)), '=', ',') + ', SUPPLY_AMOUNT = ' + DELCHR(FORMAT(ROUND(Line_SupplyAmt, 1, '=')), '=', ',') + ', ADVANCE_PERCNTG = ' + DELCHR(FORMAT(ROUND(AdvPercnt, 0.01)), '=', ',') + ', ADVANCE_AMOUNT = ' +
        //                                                    DELCHR(FORMAT(ROUND(Line_AdvAmt, 1, '=')), '=', ',') + ', INSTALLATION_STATUS =  ''S'' WHERE (SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ') AND (LINE_NO = ' + DELCHR(FORMAT(LinNo), '=', ',') + ')';
        //                                         // MESSAGE(SQLQuery);
        //                                         SQLConnection.Execute(SQLQuery);
        //                                         IF CF_Line_Qty > SalesLine.Quantity THEN    // if line qty is modified update the qty and amounts respectivly
        //                                         BEGIN
        //                                             DiffQty := CF_Line_Qty - SalesLine.Quantity;  // differenct of qty in CF and ERP
        //                                             DiffLineAmt := ROUND(DiffQty * SalesLine."Unitcost(LOA)" / CurrencyFactor, 0.01);   // diff of amount in CF and ERP
        //                                             IF SalesLine."Retention Portion" > 0 THEN BEGIN
        //                                                 Ret_Diff_Amt := (ROUND(DiffQty * SalesLine."Unitcost(LOA)" / CurrencyFactor, 0.01) * SalesLine."Retention Portion" / 100); // diff of Ret_amt in CF and ERP inf exist
        //                                                 Supply_DiffAmt := (DiffLineAmt - (DiffLineAmt * AdvPercnt / 100) - (DiffLineAmt * SalesLine."Retention Portion" / 100)); // diff of sup_amt in CF and ERP
        //                                             END ELSE
        //                                                 Supply_DiffAmt := (DiffLineAmt - (DiffLineAmt * AdvPercnt / 100));   // diff of sup_amt in CF and ERP
        //                                             SQLQuery := ' select nvl(sum(sale_order_amount),0) as tot_amt,nvl(sum(supplyamount),0) sup_amt, nvl(sum(retentionamount),0) ret_amt, ' +
        //                                                        ' nvl(sum(installamount),0) inst_amt, nvl(sum(adv_amount),0) adv_amt from MRP_SALE_ORDER where sale_order_id = ' + FORMAT(SaleOrderId);
        //                                             // MESSAGE(SQLQuery);
        //                                             RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                                             IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                                                 RecordSet.MoveFirst;
        //                                             WHILE NOT RecordSet.EOF DO BEGIN
        //                                                 EVALUATE(Ordr_Tot_Amt, FORMAT(RecordSet.Fields.Item('tot_amt').Value));
        //                                                 EVALUATE(Ordr_Sup_Amt, FORMAT(RecordSet.Fields.Item('sup_amt').Value));
        //                                                 EVALUATE(Ordr_Ret_Amt, FORMAT(RecordSet.Fields.Item('ret_amt').Value));
        //                                                 EVALUATE(Ordr_Inst_Amt, FORMAT(RecordSet.Fields.Item('inst_amt').Value));
        //                                                 EVALUATE(Ord_Adv_Amt, FORMAT(RecordSet.Fields.Item('adv_amt').Value));
        //                                                 RowCount := RowCount + 1;
        //                                                 RecordSet.MoveNext;
        //                                             END;
        //                                             SQLQuery := 'select nvl(sum(amount),0) inv_amt from MRP_ARR_INVOICE where sale_order_id = ' + FORMAT(SaleOrderId);
        //                                             // MESSAGE(SQLQuery);
        //                                             RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                                             IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                                                 RecordSet.MoveFirst;
        //                                             WHILE NOT RecordSet.EOF DO BEGIN
        //                                                 EVALUATE(Tot_Inv_Amt, FORMAT(RecordSet.Fields.Item('inv_amt').Value));
        //                                                 RowCount := RowCount + 1;
        //                                                 RecordSet.MoveNext;
        //                                             END;
        //                                             SQLQuery := 'select nvl(sum(amount),0) instl_inv_amt from MRP_ARR_INSTALL_INVOICE where sale_order_id = ' + FORMAT(SaleOrderId);
        //                                             // MESSAGE(SQLQuery);
        //                                             RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                                             IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                                                 RecordSet.MoveFirst;
        //                                             WHILE NOT RecordSet.EOF DO BEGIN
        //                                                 EVALUATE(Tot_Inst_Inv_Amt, FORMAT(RecordSet.Fields.Item('instl_inv_amt').Value));
        //                                                 RowCount := RowCount + 1;
        //                                                 RecordSet.MoveNext;
        //                                             END;
        //                                             SQLQuery := 'SELECT nvl(sum(amount),0) adv_paid_amt FROM MRP_ARR_PAYMENT WHERE SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ' AND ADVANCE_FLAG = 2';
        //                                             // MESSAGE(SQLQuery);
        //                                             RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                                             IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                                                 RecordSet.MoveFirst;
        //                                             WHILE NOT RecordSet.EOF DO BEGIN
        //                                                 EVALUATE(Tot_Adv_Paid_Amt, FORMAT(RecordSet.Fields.Item('adv_paid_amt').Value));
        //                                                 RowCount := RowCount + 1;
        //                                                 RecordSet.MoveNext;
        //                                             END;
        //                                             //>>Added By Pranavi on 06-Mar-2017 for not pay amount but place in today
        //                                             SQLQuery := 'select plan_change_id,sale_order_id,payment_realize_date,planned_amount,response_section,remarks,creation_date,userid,ord_advance_id,' +
        //                                                         'invoice_id,plan_type,planchngid,plan_type from (' +
        //                                                         'select * from  MRP_ORDER_PLAN_CHANGES b,(select max(plan_change_id) PlanChngId ' +
        //                                                         ' from MRP_ORDER_PLAN_CHANGES where SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ' group by SALE_ORDER_ID,ord_advance_id) a ' +
        //                                                         ' where a.planchngid=b.plan_change_id and b.planned_amount > 0) where plan_type = ''Auto Paid''';
        //                                             //MESSAGE(SQLQuery);
        //                                             Ordr_PlnChanges_amt := 0;
        //                                             temp_PlnAmt := 0;
        //                                             RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                                             IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                                                 RecordSet.MoveFirst;
        //                                             WHILE NOT RecordSet.EOF DO BEGIN
        //                                                 temp_PlnAmt := 0;
        //                                                 EVALUATE(temp_PlnAmt, FORMAT(RecordSet.Fields.Item('planned_amount').Value));
        //                                                 Tot_Adv_Paid_Amt := Tot_Adv_Paid_Amt + temp_PlnAmt;
        //                                                 RowCount := RowCount + 1;
        //                                                 RecordSet.MoveNext;
        //                                             END;
        //                                             //<<Added By Pranavi on 06-Mar-2017 for not pay amount but place in today
        //                                             IF (DiffLineAmt * AdvPercnt / 100) > Tot_Adv_Paid_Amt THEN BEGIN
        //                                                 Supply_DiffAmt := Supply_DiffAmt + (DiffLineAmt * AdvPercnt / 100) - Tot_Adv_Paid_Amt;
        //                                             END;
        //                                             // order on hand plan changes amount
        //                                             SQLQuery := ' select * from  MRP_ORDER_PLAN_CHANGES b,(select max(plan_change_id) PlanChngId ' +
        //                                                         ' from MRP_ORDER_PLAN_CHANGES where SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ' group by SALE_ORDER_ID,ord_advance_id) a ' +
        //                                                         ' where a.planchngid=b.plan_change_id and b.planned_amount > 0 and (b.plan_type is null or b.plan_type <> ''Auto Paid'')';
        //                                             // MESSAGE(SQLQuery);
        //                                             Ordr_PlnChanges_amt := 0;
        //                                             temp_PlnAmt := 0;
        //                                             RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                                             IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                                                 RecordSet.MoveFirst;
        //                                             WHILE NOT RecordSet.EOF DO BEGIN
        //                                                 temp_PlnAmt := 0;
        //                                                 EVALUATE(temp_PlnAmt, FORMAT(RecordSet.Fields.Item('planned_amount').Value));
        //                                                 Ordr_PlnChanges_amt := Ordr_PlnChanges_amt + temp_PlnAmt;
        //                                                 RowCount := RowCount + 1;
        //                                                 RecordSet.MoveNext;
        //                                             END;
        //                                             // inst on hand plan changes amount
        //                                             SQLQuery := ' select * from  MRP_ORDER_INSTALL_PLAN_CHANGES b, ' +
        //                                                        ' (select SALE_ORDER_ID,sl_no,max(plan_change_id) PlanChngId from ' +
        //                                                        ' MRP_ORDER_INSTALL_PLAN_CHANGES where SALE_ORDER_ID = ' + FORMAT(SaleOrderId) +
        //                                                        ' group by SALE_ORDER_ID,sl_no) a where a.planchngid=b.plan_change_id and b.planned_amount > 0';
        //                                             // MESSAGE(SQLQuery);
        //                                             Inst_PlnChanges_Amt := 0;
        //                                             temp_PlnAmt := 0;
        //                                             RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                                             IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                                                 RecordSet.MoveFirst;
        //                                             WHILE NOT RecordSet.EOF DO BEGIN
        //                                                 temp_PlnAmt := 0;
        //                                                 EVALUATE(temp_PlnAmt, FORMAT(RecordSet.Fields.Item('planned_amount').Value));
        //                                                 Inst_PlnChanges_Amt := Inst_PlnChanges_Amt + temp_PlnAmt;
        //                                                 RowCount := RowCount + 1;
        //                                                 RecordSet.MoveNext;
        //                                             END;
        //                                             Sup_UnPlnnd_Amt := Ordr_Sup_Amt + Ord_Adv_Amt - Tot_Adv_Paid_Amt - Ordr_PlnChanges_amt - Tot_Inv_Amt;
        //                                             Ret_UnPlnnd_Amt := (Ordr_Ret_Amt + Ordr_Inst_Amt) - Inst_PlnChanges_Amt - Tot_Inst_Inv_Amt;
        //                                             Inst_UnPlnnd_Amt := (Ordr_Ret_Amt + Ordr_Inst_Amt) - Inst_PlnChanges_Amt - Tot_Inst_Inv_Amt;
        //                                             IF Supply_DiffAmt > Sup_UnPlnnd_Amt THEN BEGIN
        //                                                 // order on hand plan changes amount
        //                                                 SQLQuery := ' select * from  MRP_ORDER_PLAN_CHANGES b,(select max(plan_change_id) PlanChngId ' +
        //                                                             ' from MRP_ORDER_PLAN_CHANGES where SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ' group by SALE_ORDER_ID,ord_advance_id) a ' +
        //                                                             ' where a.planchngid=b.plan_change_id and b.planned_amount > 0 and (b.plan_type is null or b.plan_type <> ''Auto Paid'')' +
        //                                                             ' order by b.payment_realize_date desc,b.planned_amount desc';
        //                                                 // MESSAGE(SQLQuery);
        //                                                 RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                                                 IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                                                     RecordSet.MoveFirst;
        //                                                 TestAmt := 0;
        //                                                 Enf := FALSE;
        //                                                 TestAmt := Supply_DiffAmt - Sup_UnPlnnd_Amt;
        //                                                 WHILE NOT RecordSet.EOF AND (NOT Enf) AND (TestAmt > 0) DO BEGIN
        //                                                     EVALUATE(TempAmt, FORMAT(RecordSet.Fields.Item('planned_amount').Value));
        //                                                     IF (TestAmt >= TempAmt) THEN BEGIN
        //                                                         SQLQuery := ' insert into MRP_ORDER_PLAN_CHANGES(PLAN_CHANGE_ID,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,CREATION_DATE, ' +
        //                                                                    ' USERID,ORD_ADVANCE_ID) values(ORDER_PLANCHANGES_SEQ.NEXTVAL, ' + DELCHR(FORMAT(RecordSet.Fields.Item('SALE_ORDER_ID').Value), '=', ',') +
        //                                                                    ' , sysdate, 0, sysdate, ''Auto'',' + DELCHR(FORMAT(RecordSet.Fields.Item('ORD_ADVANCE_ID').Value), '=', ',') + ')';
        //                                                         // MESSAGE(SQLQuery);
        //                                                         SQLConnection.Execute(SQLQuery, RowCount);
        //                                                         SQLQuery := 'update mrp_arr_ord_advance set order_flag = 1 where ord_advance_id = ' + DELCHR(FORMAT(RecordSet.Fields.Item('ORD_ADVANCE_ID').Value), '=', ',');
        //                                                         // MESSAGE(SQLQuery);
        //                                                         SQLConnection.Execute(SQLQuery, RowCount);
        //                                                         TestAmt := TestAmt - TempAmt;
        //                                                     END ELSE BEGIN
        //                                                         SQLQuery := 'select nvl(ORD_ADVANCE_ID_SEQ.NEXTVAL,1) LastOrdAdvId from dual';
        //                                                         RecordSet1 := SQLConnection.Execute(SQLQuery, RowCount);
        //                                                         IF NOT ((RecordSet1.BOF) OR (RecordSet1.EOF)) THEN
        //                                                             RecordSet1.MoveFirst;
        //                                                         WHILE NOT RecordSet1.EOF DO BEGIN
        //                                                             EVALUATE(LastOrdAdvId, FORMAT(RecordSet1.Fields.Item('LastOrdAdvId').Value));
        //                                                             RowCount1 := RowCount1 + 1;
        //                                                             RecordSet1.MoveNext;
        //                                                         END;
        //                                                         SQLQuery := 'insert into mrp_arr_ord_advance(ORD_ADVANCE_ID,SALE_ORDER_ID,EXP_ADVANCE_AMOUNT,ACCTPERIOD, ' +
        //                                                                    ' ACCT_YEAR,EXP_RECEIVED_DATE,ACTINACT,ORDER_FLAG) values (' + DELCHR(FORMAT(LastOrdAdvId), '=', ',') + ', ' +
        //                                                                    DELCHR(FORMAT(RecordSet.Fields.Item('SALE_ORDER_ID').Value), '=', ',') + ',' + DELCHR(FORMAT(ROUND(TestAmt, 1, '=')), '=', ',') +
        //                                                                    ', (select ACCTPERIOD from mrp_arr_ord_advance where ORD_ADVANCE_ID = ' + DELCHR(FORMAT(RecordSet.Fields.Item('ORD_ADVANCE_ID').Value), '=', ',') +
        //                                                                    '), (select ACCT_YEAR from mrp_arr_ord_advance where ORD_ADVANCE_ID = ' + DELCHR(FORMAT(RecordSet.Fields.Item('ORD_ADVANCE_ID').Value), '=', ',') +
        //                                                                    '), (select EXP_RECEIVED_DATE from mrp_arr_ord_advance where ORD_ADVANCE_ID = ' + DELCHR(FORMAT(RecordSet.Fields.Item('ORD_ADVANCE_ID').Value), '=', ',') + '), 1, 1)';
        //                                                         // MESSAGE(SQLQuery);
        //                                                         SQLConnection.Execute(SQLQuery, RowCount);
        //                                                         SQLQuery := 'insert into MRP_ORDER_PLAN_CHANGES(PLAN_CHANGE_ID,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,CREATION_DATE, ' +
        //                                                                    'USERID,ORD_ADVANCE_ID) values(ORDER_PLANCHANGES_SEQ.NEXTVAL, ' + DELCHR(FORMAT(RecordSet.Fields.Item('SALE_ORDER_ID').Value), '=', ',') +
        //                                                                    ', sysdate, ' + DELCHR(FORMAT(ROUND(TestAmt, 1, '=')), '=', ',') + ', sysdate, ''Auto'',' + DELCHR(FORMAT(LastOrdAdvId), '=', ',') + ')';
        //                                                         // MESSAGE(SQLQuery);
        //                                                         SQLConnection.Execute(SQLQuery, RowCount);
        //                                                         SQLQuery := 'insert into MRP_ORDER_PLAN_CHANGES(PLAN_CHANGE_ID,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,CREATION_DATE, ' +
        //                                                                    'USERID,ORD_ADVANCE_ID) values(ORDER_PLANCHANGES_SEQ.NEXTVAL, ' + DELCHR(FORMAT(RecordSet.Fields.Item('SALE_ORDER_ID').Value), '=', ',') +
        //                                                                    ', sysdate, 0, sysdate, ''Auto'',' + DELCHR(FORMAT(LastOrdAdvId), '=', ',') + ')';
        //                                                         // MESSAGE(SQLQuery);
        //                                                         SQLConnection.Execute(SQLQuery, RowCount);

        //                                                         SQLQuery := 'update MRP_ORDER_PLAN_CHANGES set PLANNED_AMOUNT = ' + DELCHR(FORMAT(ROUND(TempAmt - TestAmt, 1, '=')), '=', ',') +
        //                                                                    ' where PLAN_CHANGE_ID = ' + DELCHR(FORMAT(RecordSet.Fields.Item('PLAN_CHANGE_ID').Value), '=', ',');
        //                                                         // MESSAGE(SQLQuery);
        //                                                         SQLConnection.Execute(SQLQuery, RowCount);

        //                                                         SQLQuery := 'update mrp_arr_ord_advance set EXP_ADVANCE_AMOUNT = ' + DELCHR(FORMAT(ROUND(TempAmt - TestAmt, 1, '=')), '=', ',') +
        //                                                                    ' where ORD_ADVANCE_ID = ' + DELCHR(FORMAT(RecordSet.Fields.Item('ORD_ADVANCE_ID').Value), '=', ',');
        //                                                         // MESSAGE(SQLQuery);
        //                                                         SQLConnection.Execute(SQLQuery, RowCount);
        //                                                         Enf := TRUE;
        //                                                     END;
        //                                                     RowCount := RowCount + 1;
        //                                                     RecordSet.MoveNext;
        //                                                 END;
        //                                             END;
        //                                             IF Ret_Diff_Amt > Ret_UnPlnnd_Amt THEN BEGIN
        //                                                 // install order on hand plan changes
        //                                                 SQLQuery := ' select * from  MRP_ORDER_INSTALL_PLAN_CHANGES b,(select SALE_ORDER_ID,sl_no,max(plan_change_id) PlanChngId from ' +
        //                                                             ' MRP_ORDER_INSTALL_PLAN_CHANGES where SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ' group by SALE_ORDER_ID,sl_no) a ' +
        //                                                             ' where a.planchngid=b.plan_change_id and b.planned_amount > 0 order by payment_realize_date desc,planned_amount desc';
        //                                                 // MESSAGE(SQLQuery);
        //                                                 RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                                                 IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                                                     RecordSet.MoveFirst;
        //                                                 TestAmt := 0;
        //                                                 Enf := FALSE;
        //                                                 TestAmt := Ret_Diff_Amt - Ret_UnPlnnd_Amt;
        //                                                 WHILE NOT RecordSet.EOF AND (NOT Enf) AND (TestAmt > 0) DO BEGIN
        //                                                     EVALUATE(TempAmt, FORMAT(RecordSet.Fields.Item('planned_amount').Value));
        //                                                     IF (TestAmt >= TempAmt) THEN BEGIN
        //                                                         SQLQuery := 'insert into MRP_ORDER_INSTALL_PLAN_CHANGES(PLAN_CHANGE_ID,SL_NO,SALE_ORDER_ID, ' +
        //                                                                    ' PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,CREATION_DATE,USERID) ' +
        //                                                                    ' values((select nvl(max(PLAN_CHANGE_ID)+1,0) from MRP_ORDER_INSTALL_PLAN_CHANGES), ' +
        //                                                                    FORMAT(RecordSet.Fields.Item('SL_NO').Value) + ', ' + DELCHR(FORMAT(RecordSet.Fields.Item('SALE_ORDER_ID').Value), '=', ',') +
        //                                                                    ', sysdate, 0, sysdate, ''Auto'')';
        //                                                         // MESSAGE(SQLQuery);
        //                                                         SQLConnection.Execute(SQLQuery, RowCount);
        //                                                         TestAmt := TestAmt - TempAmt;
        //                                                     END ELSE BEGIN
        //                                                         SQLQuery := 'select nvl(max(sl_no)+1,1) last_slno from MRP_ORDER_INSTALL_PLAN_CHANGES where SALE_ORDER_ID = ' +
        //                                                                    DELCHR(FORMAT(RecordSet.Fields.Item('SALE_ORDER_ID').Value), '=', ',');
        //                                                         // MESSAGE(SQLQuery);
        //                                                         RecordSet1 := SQLConnection.Execute(SQLQuery, RowCount1);
        //                                                         Last_Inst_OnHnd_Pln_Chgs_SLNO := 0;
        //                                                         IF NOT ((RecordSet1.BOF) OR (RecordSet1.EOF)) THEN
        //                                                             RecordSet1.MoveFirst;
        //                                                         WHILE NOT RecordSet1.EOF DO BEGIN
        //                                                             EVALUATE(Last_Inst_OnHnd_Pln_Chgs_SLNO, FORMAT(RecordSet1.Fields.Item('last_slno').Value));
        //                                                             RowCount1 := RowCount1 + 1;
        //                                                             RecordSet1.MoveNext;
        //                                                         END;
        //                                                         SQLQuery := 'insert into MRP_ORDER_INSTALL_PLAN_CHANGES(PLAN_CHANGE_ID,SL_NO,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT, ' +
        //                                                                    ' CREATION_DATE,USERID) values((select nvl(max(PLAN_CHANGE_ID)+1,0) from MRP_ORDER_INSTALL_PLAN_CHANGES), ' +
        //                                                                    FORMAT(Last_Inst_OnHnd_Pln_Chgs_SLNO) + ', ' + DELCHR(FORMAT(RecordSet.Fields.Item('SALE_ORDER_ID').Value), '=', ',') +
        //                                                                    ', sysdate, ' + DELCHR(FORMAT(ROUND(TestAmt, 1, '=')), '=', ',') + ', sysdate, ''Auto'')';
        //                                                         // MESSAGE(SQLQuery);
        //                                                         SQLConnection.Execute(SQLQuery, RowCount);
        //                                                         SQLQuery := 'insert into MRP_ORDER_INSTALL_PLAN_CHANGES(PLAN_CHANGE_ID,SL_NO,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT, ' +
        //                                                                    ' CREATION_DATE,USERID) values((select nvl(max(PLAN_CHANGE_ID)+1,0) from MRP_ORDER_INSTALL_PLAN_CHANGES), ' +
        //                                                                    FORMAT(Last_Inst_OnHnd_Pln_Chgs_SLNO) + ', ' + DELCHR(FORMAT(RecordSet.Fields.Item('SALE_ORDER_ID').Value), '=', ',') +
        //                                                                    ', sysdate, 0,sysdate,''Auto'')';
        //                                                         // MESSAGE(SQLQuery);
        //                                                         SQLConnection.Execute(SQLQuery, RowCount);
        //                                                         SQLQuery := 'update MRP_ORDER_INSTALL_PLAN_CHANGES set PLANNED_AMOUNT = ' + DELCHR(FORMAT(ROUND(TempAmt - TestAmt, 1, '=')), '=', ',') +
        //                                                                    ' where PLAN_CHANGE_ID = ' + DELCHR(FORMAT(RecordSet.Fields.Item('PLAN_CHANGE_ID').Value), '=', ',');
        //                                                         // MESSAGE(SQLQuery);
        //                                                         SQLConnection.Execute(SQLQuery, RowCount);
        //                                                         Enf := TRUE;
        //                                                     END;
        //                                                     RowCount := RowCount + 1;
        //                                                     RecordSet.MoveNext;
        //                                                 END;
        //                                             END;
        //                                         END;
        //                                     END ELSE BEGIN    // if line does not exist in CF i.e., new line added in ERP
        //                                         SQLQuery := 'INSERT INTO MRP_SALE_ORDER_LINES(SALE_ORDER_ID,LINE_NO,ITEM_NO,ITEM_DESCRIPTION,QUANTITY,BILLED_QTY,AMOUNT,UNIT_PRICE,RETENTION_PERCNTG, ' +
        //                                                    ' RETENTION_AMOUNT,SUPPLY_PERCNTG,SUPPLY_AMOUNT,ADVANCE_PERCNTG,ADVANCE_AMOUNT,INSTALLATION_STATUS) VALUES(' + FORMAT(SaleOrderId) + ', ' +
        //                                                    DELCHR(FORMAT(LinNo), '=', ',') + ', ''' + FORMAT(SalesLine."No.") + ''', ''' + FORMAT(SalesLine.Description) + ''', ' + DELCHR(FORMAT(ROUND(Line_Qty, 0.01)), '=', ',') +
        //                                                    ', ' + DELCHR(FORMAT(ROUND(Line_BiildQty, 0.01)), '=', ',') + ', ' +
        //                                                    DELCHR(FORMAT(ROUND(LineAmtLOA, 1, '=')), '=', ',') + ', ' + DELCHR(FORMAT(ROUND(Line_UnitPrice, 1, '=')), '=', ',') + ', ' + DELCHR(FORMAT(ROUND(Line_Retention_Percnt)), '=', ',') + ', ' +
        //                                                    DELCHR(FORMAT(ROUND(Line_RetentionAmt, 1, '=')), '=', ',') + ', ' + DELCHR(FORMAT(ROUND(Line_Supply_Percnt)), '=', ',') +
        //                                                    ', ' + DELCHR(FORMAT(ROUND(Line_SupplyAmt, 1, '=')), '=', ',') + ', ' + DELCHR(FORMAT(ROUND(AdvPercnt)), '=', ',') + ', ' + DELCHR(FORMAT(ROUND(Line_AdvAmt, 1, '=')), '=', ',') + ', ''S'')';
        //                                         // MESSAGE(SQLQuery);
        //                                         SQLConnection.Execute(SQLQuery);
        //                                     END;
        //                                 END;  // END--if supply item
        //                             END;  // END--If item_Grp.get() funtion
        //                         END //END--if line is item
        //                         ELSE
        //                             IF SalesLine.Type = SalesLine.Type::"G/L Account" THEN BEGIN // Start--If line is G/L Account
        //                                 Line_InstAmt := ROUND(SalesLine.Quantity * SalesLine."Unitcost(LOA)" / CurrencyFactor, 1, '=');
        //                                 IsLineNo := 0;
        //                                 SQLQuery := 'select * from MRP_SALE_ORDER_LINES where (SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ') AND (LINE_NO = ' +
        //                                            DELCHR(FORMAT(LinNo), '=', ',') + ') AND (ITEM_NO =''' + FORMAT(SalesLine."No.") + ''')';
        //                                 RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                                 IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                                     RecordSet.MoveFirst;
        //                                 WHILE NOT RecordSet.EOF DO BEGIN
        //                                     EVALUATE(IsLineNo, FORMAT(RecordSet.Fields.Item('LINE_NO').Value));
        //                                     EVALUATE(CF_Line_Qty, FORMAT(RecordSet.Fields.Item('QUANTITY').Value));
        //                                     RowCount := RowCount + 1;
        //                                     RecordSet.MoveNext;
        //                                 END;
        //                                 IF IsLineNo <> 0 THEN BEGIN
        //                                     SQLQuery := 'UPDATE MRP_SALE_ORDER_LINES SET ITEM_NO = ''' + FORMAT(SalesLine."No.") + ''', ITEM_DESCRIPTION = ''' + FORMAT(SalesLine.Description) +
        //                                                ''', QUANTITY = ' + DELCHR(FORMAT(ROUND(Line_Qty, 0.01)), '=', ',') +
        //                                                ', BILLED_QTY = ' + DELCHR(FORMAT(ROUND(Line_BiildQty, 0.01)), '=', ',') + ', AMOUNT = ' + DELCHR(FORMAT(ROUND(LineAmtLOA, 1, '=')), '=', ',') + ', UNIT_PRICE = ' + DELCHR(FORMAT(ROUND(Line_UnitPrice, 1, '=')), '=', ',') +
        //                                                ', INSTALLATION_STATUS = ''I'' WHERE (SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ' AND LINE_NO = ' + DELCHR(FORMAT(LinNo), '=', ',') + ')';
        //                                     // MESSAGE(SQLQuery);
        //                                     SQLConnection.Execute(SQLQuery);
        //                                     IF CF_Line_Qty > SalesLine.Quantity THEN BEGIN
        //                                         TempAmt := 0;
        //                                         TestAmt := 0;
        //                                         DiffQty := CF_Line_Qty - SalesLine.Quantity;
        //                                         Instl_DiffAmt := Instl_DiffAmt + ROUND(DiffQty * SalesLine."Unitcost(LOA)" / CurrencyFactor, 0.01);
        //                                         IF Instl_DiffAmt > Inst_UnPlnnd_Amt THEN BEGIN
        //                                             // install order on hand plan changes
        //                                             SQLQuery := 'select * from  MRP_ORDER_INSTALL_PLAN_CHANGES b,(select SALE_ORDER_ID,sl_no,max(plan_change_id) PlanChngId from ' +
        //                                                         ' MRP_ORDER_INSTALL_PLAN_CHANGES where SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ' group by SALE_ORDER_ID,sl_no) a ' +
        //                                                         ' where a.planchngid=b.plan_change_id and b.planned_amount > 0 order by payment_realize_date desc,planned_amount desc';
        //                                             // MESSAGE(SQLQuery);
        //                                             RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                                             IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                                                 RecordSet.MoveFirst;
        //                                             TestAmt := 0;
        //                                             Enf := FALSE;
        //                                             TestAmt := Instl_DiffAmt - Inst_UnPlnnd_Amt;
        //                                             WHILE NOT RecordSet.EOF AND (NOT Enf) AND (TestAmt > 0) DO BEGIN
        //                                                 EVALUATE(TempAmt, FORMAT(RecordSet.Fields.Item('planned_amount').Value));
        //                                                 IF (TestAmt >= TempAmt) THEN BEGIN
        //                                                     SQLQuery := 'insert into MRP_ORDER_INSTALL_PLAN_CHANGES(PLAN_CHANGE_ID,SL_NO,SALE_ORDER_ID, ' +
        //                                                                ' PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,CREATION_DATE,USERID) ' +
        //                                                                ' values((select nvl(max(PLAN_CHANGE_ID)+1,0) from MRP_ORDER_INSTALL_PLAN_CHANGES), ' +
        //                                                                FORMAT(RecordSet.Fields.Item('SL_NO').Value) + ', ' + DELCHR(FORMAT(RecordSet.Fields.Item('SALE_ORDER_ID').Value), '=', ',') +
        //                                                                ', sysdate, 0,sysdate,''Auto'')';
        //                                                     // MESSAGE(SQLQuery);
        //                                                     SQLConnection.Execute(SQLQuery, RowCount);
        //                                                     TestAmt := TestAmt - TempAmt;
        //                                                 END ELSE BEGIN
        //                                                     SQLQuery := 'select nvl(max(sl_no)+1,1) last_slno from MRP_ORDER_INSTALL_PLAN_CHANGES where SALE_ORDER_ID = ' +
        //                                                                DELCHR(FORMAT(RecordSet.Fields.Item('SALE_ORDER_ID').Value), '=', ',');
        //                                                     // MESSAGE(SQLQuery);
        //                                                     Last_Inst_OnHnd_Pln_Chgs_SLNO := 0;
        //                                                     RecordSet1 := SQLConnection.Execute(SQLQuery, RowCount1);
        //                                                     IF NOT ((RecordSet1.BOF) OR (RecordSet1.EOF)) THEN
        //                                                         RecordSet1.MoveFirst;
        //                                                     WHILE NOT RecordSet1.EOF DO BEGIN
        //                                                         EVALUATE(Last_Inst_OnHnd_Pln_Chgs_SLNO, FORMAT(RecordSet1.Fields.Item('last_slno').Value));
        //                                                         RowCount1 := RowCount1 + 1;
        //                                                         RecordSet1.MoveNext;
        //                                                     END;
        //                                                     SQLQuery := 'insert into MRP_ORDER_INSTALL_PLAN_CHANGES(PLAN_CHANGE_ID,SL_NO,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT, ' +
        //                                                                ' CREATION_DATE,USERID) values((select nvl(max(PLAN_CHANGE_ID)+1,0) from MRP_ORDER_INSTALL_PLAN_CHANGES), ' +
        //                                                                FORMAT(Last_Inst_OnHnd_Pln_Chgs_SLNO) + ', ' + DELCHR(FORMAT(RecordSet.Fields.Item('SALE_ORDER_ID').Value), '=', ',') +
        //                                                                ', sysdate, ' + DELCHR(FORMAT(ROUND(TestAmt, 1, '=')), '=', ',') + ',sysdate,''Auto'')';
        //                                                     // MESSAGE(SQLQuery);
        //                                                     SQLConnection.Execute(SQLQuery, RowCount);
        //                                                     SQLQuery := 'insert into MRP_ORDER_INSTALL_PLAN_CHANGES(PLAN_CHANGE_ID,SL_NO,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT, ' +
        //                                                                ' CREATION_DATE,USERID) values((select nvl(max(PLAN_CHANGE_ID)+1,0) from MRP_ORDER_INSTALL_PLAN_CHANGES), ' +
        //                                                                FORMAT(Last_Inst_OnHnd_Pln_Chgs_SLNO) + ', ' + DELCHR(FORMAT(RecordSet.Fields.Item('SALE_ORDER_ID').Value), '=', ',') +
        //                                                                ', sysdate, 0,sysdate,''Auto'')';
        //                                                     // MESSAGE(SQLQuery);
        //                                                     SQLConnection.Execute(SQLQuery, RowCount);
        //                                                     SQLQuery := 'update MRP_ORDER_INSTALL_PLAN_CHANGES set PLANNED_AMOUNT = ' + DELCHR(FORMAT(ROUND(TempAmt - TestAmt, 1, '=')), '=', ',') +
        //                                                                ' where PLAN_CHANGE_ID = ' + DELCHR(FORMAT(RecordSet.Fields.Item('PLAN_CHANGE_ID').Value), '=', ',');
        //                                                     // MESSAGE(SQLQuery);
        //                                                     SQLConnection.Execute(SQLQuery, RowCount);
        //                                                     Enf := TRUE;
        //                                                 END;
        //                                                 RowCount := RowCount + 1;
        //                                                 RecordSet.MoveNext;
        //                                             END;
        //                                         END;
        //                                     END;
        //                                 END ELSE BEGIN
        //                                     SQLQuery := 'INSERT INTO MRP_SALE_ORDER_LINES(SALE_ORDER_ID,LINE_NO,ITEM_NO,ITEM_DESCRIPTION,QUANTITY,BILLED_QTY,AMOUNT,UNIT_PRICE,INSTALLATION_STATUS)' +
        //                                                ' VALUES(' + FORMAT(SaleOrderId) + ', ' + DELCHR(FORMAT(LinNo), '=', ',') + ', ''' + FORMAT(SalesLine."No.") + ''', ''' + FORMAT(SalesLine.Description) + ''', ' +
        //                                                DELCHR(FORMAT(ROUND(Line_Qty)), '=', ',') + ', ' + DELCHR(FORMAT(ROUND(Line_BiildQty)), '=', ',') + ', ' + DELCHR(FORMAT(ROUND(LineAmtLOA, 1, '=')), '=', ',') + ', ' +
        //                                                DELCHR(FORMAT(ROUND(Line_UnitPrice, 1, '=')), '=', ',') + ', ''I'')';
        //                                     // MESSAGE(SQLQuery);
        //                                     SQLConnection.Execute(SQLQuery);
        //                                 END;
        //                             END;
        //                     UNTIL SalesLine.NEXT = 0;
        //             // End--Sales Lines Updatation
        //             // Sale Order Updatation
        //             SQLQuery := ' UPDATE MRP_SALE_ORDER SET AR_CUSTOMER_ID = ' + FORMAT(CustId) + ', PURCHASEORDERNO = ''' + CustOrderNo + ''', ' +
        //                        ' PURCHASEORDER_DATE = to_date(''' + FORMAT(CustOrderDate, 0, '<Day>-<Month Text,3>-<Year4>') + ''',''dd-mon-yyyy''), ' +
        //                        ' SALE_ORDER_AMOUNT = ' + DELCHR(FORMAT(ROUND(SaleOrderTotAmt, 1, '=')), '=', ',') + ', SUPPLYAMOUNT = ' + DELCHR(FORMAT(ROUND(SupplyAmt, 1, '=')), '=', ',') + ', INSTALLAMOUNT = ' + DELCHR(FORMAT(ROUND(InstAmt, 1, '=')), '=', ',') + ', ' +
        //                        ' SALESPERSON = ''' + SalesHeader."Salesperson Code" + ''', CSMANAGER =  ''' + CSManager + ''', CSMANAGER_ID = ''' + ERP_CSMangr_ID +
        //                        ''', ADV_AMOUNT = ' + DELCHR(FORMAT(ROUND(AdvAmt, 1, '=')), '=', ',') + ', RETENTIONAMOUNT = ' +
        //                        DELCHR(FORMAT(ROUND(RetentionAmt, 1, '=')), '=', ',') + ' WHERE SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ' AND INT_SAL_ORD_NO = ''' + SalesHeader."No." + ''' AND STATUS = ''N''';
        //             // MESSAGE(SQLQuery);
        //             SQLConnection.Execute(SQLQuery);

        //             // Start--Advance Payment
        //             IF AdvPaymentAmt > 0 THEN BEGIN
        //                 IF (AdvPaymentAmt > AdvAmt) THEN
        //                     AdvPaymentAmt := AdvAmt;
        //                 /*
        //                 AR_Paymnt_Id := 0;
        //                 SQLQuery:= 'SELECT * FROM MRP_ARR_PAYMENT WHERE SALE_ORDER_ID = '+FORMAT(SaleOrderId)+' AND ADVANCE_FLAG = 2';
        //                 RecordSet := SQLConnection.Execute(SQLQuery,RowCount);
        //                 IF NOT( (RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                   RecordSet.MoveFirst;
        //                 WHILE NOT RecordSet.EOF DO
        //                 BEGIN
        //                   AR_Paymnt_Id := RecordSet.Fields.Item('AR_PAYMENT_ID').Value;
        //                   RowCount:=RowCount+1;
        //                   RecordSet.MoveNext;
        //                 END;
        //                 */
        //                 //>>Added By Pranavi on 06-Mar-2017 for not pay amount but place in today
        //                 SQLQuery := 'SELECT nvl(sum(amount),0) adv_paid_amt FROM MRP_ARR_PAYMENT WHERE SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ' AND ADVANCE_FLAG = 2';
        //                 //MESSAGE(SQLQuery);
        //                 temp_PlnAmt := 0;
        //                 Tot_Adv_Paid_Amt := 0;
        //                 Tot_Adv_Paid_Amt := 0;
        //                 RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                 IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                     RecordSet.MoveFirst;
        //                 WHILE NOT RecordSet.EOF DO BEGIN
        //                     temp_PlnAmt := 0;
        //                     EVALUATE(temp_PlnAmt, FORMAT(RecordSet.Fields.Item('adv_paid_amt').Value));
        //                     Tot_Adv_Paid_Amt := Tot_Adv_Paid_Amt + temp_PlnAmt;
        //                     Temp_Adv_Auto_Paid_Amt := Temp_Adv_Auto_Paid_Amt + temp_PlnAmt;
        //                     RowCount := RowCount + 1;
        //                     RecordSet.MoveNext;
        //                 END;
        //                 SQLQuery := 'select plan_change_id,sale_order_id,payment_realize_date,planned_amount,response_section,remarks,creation_date,userid,ord_advance_id,' +
        //                             'invoice_id,plan_type,planchngid,plan_type from (' +
        //                             'select * from  MRP_ORDER_PLAN_CHANGES b,(select max(plan_change_id) PlanChngId ' +
        //                             ' from MRP_ORDER_PLAN_CHANGES where SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ' group by SALE_ORDER_ID,ord_advance_id) a ' +
        //                             ' where a.planchngid=b.plan_change_id and b.planned_amount > 0) where plan_type = ''Auto Paid''';
        //                 //MESSAGE(SQLQuery);
        //                 Temp_Adv_Auto_Planned_Amt := 0;
        //                 temp_PlnAmt := 0;
        //                 RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                 IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                     RecordSet.MoveFirst;
        //                 WHILE NOT RecordSet.EOF DO BEGIN
        //                     temp_PlnAmt := 0;
        //                     EVALUATE(temp_PlnAmt, FORMAT(RecordSet.Fields.Item('planned_amount').Value));
        //                     Temp_Adv_Auto_Planned_Amt := Temp_Adv_Auto_Planned_Amt + temp_PlnAmt;
        //                     Tot_Adv_Paid_Amt := Tot_Adv_Paid_Amt + temp_PlnAmt;
        //                     RowCount := RowCount + 1;
        //                     RecordSet.MoveNext;
        //                 END;
        //                 IF Tot_Adv_Paid_Amt < AdvPaymentAmt THEN BEGIN
        //                     SQLQuery := 'select nvl(ORD_ADVANCE_ID_SEQ.NEXTVAL,1) LastOrdAdvId from dual';
        //                     RecordSet1 := SQLConnection.Execute(SQLQuery, RowCount1);
        //                     IF NOT ((RecordSet1.BOF) OR (RecordSet1.EOF)) THEN
        //                         RecordSet1.MoveFirst;
        //                     WHILE NOT RecordSet1.EOF DO BEGIN
        //                         EVALUATE(LastOrdAdvId, FORMAT(RecordSet1.Fields.Item('LastOrdAdvId').Value));
        //                         RowCount1 := RowCount1 + 1;
        //                         RecordSet1.MoveNext;
        //                     END;
        //                     ActPeriodActYearCalc(TODAY);
        //                     SQLQuery := 'insert into mrp_arr_ord_advance(ORD_ADVANCE_ID,SALE_ORDER_ID,EXP_ADVANCE_AMOUNT,ACCTPERIOD, ' +
        //                                ' ACCT_YEAR,EXP_RECEIVED_DATE,ACTINACT,ORDER_FLAG) values (' + DELCHR(FORMAT(LastOrdAdvId), '=', ',') + ', ' +
        //                                DELCHR(FORMAT(SaleOrderId), '=', ',') + ',' + DELCHR(FORMAT(ROUND(ABS(AdvPaymentAmt - Tot_Adv_Paid_Amt), 1, '=')), '=', ',') +
        //                                ', ' + DELCHR(FORMAT(PeriodNum), '=', ',') + ', ' + DELCHR(FORMAT(AccountYear), '=', ',') + ', sysdate, 1, 0)';
        //                     // MESSAGE(SQLQuery);
        //                     SQLConnection.Execute(SQLQuery, RowCount);
        //                     SQLQuery := 'insert into MRP_ORDER_PLAN_CHANGES(PLAN_CHANGE_ID,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,CREATION_DATE, ' +
        //                                ' USERID,ORD_ADVANCE_ID,PLAN_TYPE,REMARKS) values(ORDER_PLANCHANGES_SEQ.NEXTVAL, ' + DELCHR(FORMAT(SaleOrderId), '=', ',') +
        //                                ', sysdate, ' + DELCHR(FORMAT(ROUND(AdvPaymentAmt - Tot_Adv_Paid_Amt, 1, '=')), '=', ',') + ', sysdate, ''Auto'',' + DELCHR(FORMAT(LastOrdAdvId), '=', ',') +
        //                                ', ''Auto Paid'',''Amount moved to today as it is paid in ERP'')';
        //                     // MESSAGE(SQLQuery);
        //                     SQLConnection.Execute(SQLQuery, RowCount);
        //                 END;
        //                 //<<Added By Pranavi on 06-Mar-2017 for not pay amount but place in today
        //                 /*
        //                 IF AR_Paymnt_Id <> 0 THEN BEGIN
        //                   SQLQuery:= 'UPDATE MRP_ARR_PAYMENT SET AMOUNT = '+DELCHR(FORMAT(ROUND(AdvPaymentAmt,1,'=')),'=',',')+
        //                              ' WHERE SALE_ORDER_ID = '+FORMAT(SaleOrderId)+' AND ADVANCE_FLAG = 2';
        //                   // MESSAGE(SQLQuery);
        //                   SQLConnection.Execute(SQLQuery);
        //                 END ELSE BEGIN
        //                   SQLQuery:= 'insert into MRP_ARR_PAYMENT(AR_PAYMENT_ID,SALE_ORDER_ID,PAYMENT_DATE,AMOUNT,USERID,CREATION_DATE,ADVANCE_FLAG '+
        //                              ') values(ARR_PAYMENT_SEQ.NEXTVAL,'+FORMAT(SaleOrderId)+',to_date('''+FORMAT(AdvPaymentDate,0,'<Day>-<Month Text,3>-<Year4>')+
        //                              ''',''dd-mon-yyyy''), '+DELCHR(FORMAT(ROUND(AdvPaymentAmt,1,'=')),'=',',')+', ''Auto'', sysdate,2)';
        //                   // MESSAGE(SQLQuery);
        //                   SQLConnection.Execute(SQLQuery);
        //                 END;
        //                 */ // Commented By Pranavi on 06-Mar-2017 for not pay amount but place in today
        //             END;
        //             // End--Advance Payment

        //             IF SalesHeader."SD Status" <> SalesHeader."SD Status"::NA THEN
        //                 SecDepostitCreationInCashFLow(SaleOrderId, SalesHeader, CustId);    // security deposit creation
        //         END
        //         ELSE BEGIN  // order before integration
        //             SaleOrderCreationinCashFlow(SalesHeader);
        //             CommitFlag := FALSE;
        //         END;
        // END;

        // IF CommitFlag = TRUE THEN BEGIN
        //     SQLConnection.CommitTrans;
        //     SQLConnection.Close;
        // END;

        // //RecordSet.Close;

        // ConnectionOpen := 0;
        // MESSAGE('Sale Order Created in Cashflow!');

    end;


    procedure PvtSaleOrdrInvoiceCreationinCF(OrderNo: Code[20]; PostingDate: Date; ExtDocNo: Code[10]);
    var
        SIH: Record "Sales Invoice Header";
        SIL: Record "Sales Invoice Line";
        CustId: Integer;
        PT_CF_Id: Integer;
        SaleOrderId: BigInteger;
        UnitPrcLOA: Decimal;
        SH: Record "Sales Header";
        SL: Record "Sales Line";
        NewInvoiceId: Integer;
        NewInstInvoiceId: Integer;
        PT: Record "Payment Terms";
        "PT_Adv%": Decimal;
        "PT_Del%": Decimal;
        "PT_Crd%": Decimal;
        Line_sup_Portion: Decimal;
        Line_Ret_Portion: Decimal;
        PT_Crd_Days: Code[10];
        Date_Aft_Crd_Period: Date;
        Ordr_Tot_Amt: Decimal;
        Ordr_Sup_Amt: Decimal;
        Ordr_Ret_Amt: Decimal;
        Ordr_Inst_Amt: Decimal;
        Ord_Adv_Amt: Decimal;
        Tot_Inv_Amt: Decimal;
        Tot_Inst_Inv_Amt: Decimal;
        Tot_Adv_Paid_Amt: Decimal;
        Ordr_PlnChanges_amt: Decimal;
        Inst_PlnChanges_Amt: Decimal;
        Sup_UnPlnnd_Amt: Decimal;
        Ret_UnPlnnd_Amt: Decimal;
        Inst_UnPlnnd_Amt: Decimal;
        TempAmt: Decimal;
        Enf: Boolean;
        TestAmt: Decimal;
        LastOrdAdvId: Integer;
        temp_PlnAmt: Decimal;
        Last_Inst_OnHnd_Pln_Chgs_SLNO: Integer;
        Is_Ordr_Aftr_Int: Code[10];
    begin
        //MESSAGE('Private Sale Order Invoicing!');
        //Initialization start
        // reurn_due_days := 0;
        // reurn_due_days := payment_terms_based_amount_to_cfl(OrderNo, ExtDocNo, PostingDate); // added by sujani for amount displaying avoidance in TODAY in Cashflow
        // payment_Realization_Date := PostingDate + reurn_due_days; // added by sujani for amount displaying avoidance in TODAY in Cashflow
        // RowCount := 0;
        // SQLQuery := '';
        // //Initializations end

        // IF ISCLEAR(SQLConnection) THEN
        //     CREATE(SQLConnection, FALSE, TRUE);

        // IF ISCLEAR(RecordSet) THEN
        //     CREATE(RecordSet, FALSE, TRUE);

        // IF ConnectionOpen <> 1 THEN BEGIN
        //     SQLConnection.ConnectionString := 'DSN=CASHFLOW;UID=cashflowuser;PASSWORD=firewall123;SERVER=oracle_80;';
        //     SQLConnection.Open;
        //     SQLConnection.BeginTrans;
        //     ConnectionOpen := 1;
        // END;
        // SIH.RESET;
        // SIH.SETRANGE(SIH."Posting Date", PostingDate);
        // SIH.SETRANGE(SIH."Order No.", OrderNo);
        // SIH.SETRANGE(SIH."External Document No.", ExtDocNo);
        // IF SIH.FINDFIRST THEN BEGIN
        //     CustomerCheckInCF(SIH."Sell-to Customer No.");   // Checks if customer exist in CashFLow else insert customer
        //     SQLQuery := 'select * from MRP_AR_CUSTOMER where ERP_CUSID= ''' + SIH."Sell-to Customer No." + '''';
        //     RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //     IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //         RecordSet.MoveFirst;
        //     WHILE NOT RecordSet.EOF DO BEGIN
        //         CustId := RecordSet.Fields.Item('AR_CUSTOMER_ID').Value;
        //         RowCount := RowCount + 1;
        //         RecordSet.MoveNext;
        //     END;
        //     PT_CF_Id := 0;
        //     SQLQuery := 'SELECT * FROM PAYMENT_TERMS WHERE (ACTINACT = 1) AND (PAYMENT_TERM_CODE = ''' + SIH."Payment Terms Code" + ''')';
        //     RecordSet := SQLConnection.Execute(SQLQuery);
        //     IF NOT (RecordSet.EOF OR RecordSet.BOF) THEN BEGIN
        //         EVALUATE(PT_CF_Id, FORMAT(RecordSet.Fields.Item('TERM_ID').Value));
        //     END;
        //     // End by Pranavi
        //     IF PT_CF_Id = 0 THEN ERROR('Payment term not found in cashflow!\Please forward payment terms to cashflow!');
        //     SQLQuery := 'SELECT * FROM MRP_SALE_ORDER WHERE INT_SAL_ORD_NO = ''' + SIH."Order No." + ''' AND STATUS = ''N''';
        //     //  MESSAGE(SQLQuery);
        //     RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //     IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //         RecordSet.MoveFirst;
        //     WHILE NOT RecordSet.EOF DO BEGIN
        //         SaleOrderId := RecordSet.Fields.Item('SALE_ORDER_ID').Value;
        //         IF FORMAT(RecordSet.Fields.Item('IS_ORDR_AFT_INTEGRTION').Value) = '1' THEN
        //             Is_Ordr_Aftr_Int := 'YES'
        //         ELSE
        //             Is_Ordr_Aftr_Int := 'NO';
        //         RowCount := RowCount + 1;
        //         RecordSet.MoveNext;
        //     END;
        //     IF SaleOrderId <> 0 THEN    // check if sale order present in sale order table in c/f then insert order
        //     BEGIN
        //         IF Is_Ordr_Aftr_Int = 'YES' THEN  // only if order is aft integration
        //         BEGIN
        //             SIL.RESET;
        //             SIL.SETRANGE(SIL."Document No.", SIH."No.");
        //             SIL.SETFILTER(SIL.Quantity, '>%1', 0);
        //             IF SIL.FINDSET THEN
        //                     REPEAT
        //                         Ordr_Tot_Amt := 0;
        //                         Ordr_Sup_Amt := 0;
        //                         Ordr_Ret_Amt := 0;
        //                         Ordr_Inst_Amt := 0;
        //                         // Start--update pln_changes amounts
        //                         SQLQuery := 'select nvl(sum(sale_order_amount),0) as tot_amt,nvl(sum(supplyamount),0) sup_amt, nvl(sum(retentionamount),0) ret_amt, ' +
        //                                    'nvl(sum(installamount),0) inst_amt, nvl(sum(adv_amount),0) adv_amt from MRP_SALE_ORDER where sale_order_id = ' + FORMAT(SaleOrderId);
        //                         //MESSAGE(SQLQuery);
        //                         RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                         IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                             RecordSet.MoveFirst;
        //                         WHILE NOT RecordSet.EOF DO BEGIN
        //                             EVALUATE(Ordr_Tot_Amt, FORMAT(RecordSet.Fields.Item('tot_amt').Value));
        //                             EVALUATE(Ordr_Sup_Amt, FORMAT(RecordSet.Fields.Item('sup_amt').Value));
        //                             EVALUATE(Ordr_Ret_Amt, FORMAT(RecordSet.Fields.Item('ret_amt').Value));
        //                             EVALUATE(Ordr_Inst_Amt, FORMAT(RecordSet.Fields.Item('inst_amt').Value));
        //                             EVALUATE(Ord_Adv_Amt, FORMAT(RecordSet.Fields.Item('adv_amt').Value));
        //                             RowCount := RowCount + 1;
        //                             RecordSet.MoveNext;
        //                         END;
        //                         SQLQuery := 'select nvl(sum(amount),0) inv_amt from MRP_ARR_INVOICE where sale_order_id = ' + FORMAT(SaleOrderId);
        //                         //MESSAGE(SQLQuery);
        //                         RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                         IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                             RecordSet.MoveFirst;
        //                         WHILE NOT RecordSet.EOF DO BEGIN
        //                             EVALUATE(Tot_Inv_Amt, FORMAT(RecordSet.Fields.Item('inv_amt').Value));
        //                             RowCount := RowCount + 1;
        //                             RecordSet.MoveNext;
        //                         END;
        //                         SQLQuery := 'select nvl(sum(amount),0) instl_inv_amt from MRP_ARR_INSTALL_INVOICE where sale_order_id = ' + FORMAT(SaleOrderId);
        //                         //MESSAGE(SQLQuery);
        //                         RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                         IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                             RecordSet.MoveFirst;
        //                         WHILE NOT RecordSet.EOF DO BEGIN
        //                             EVALUATE(Tot_Inst_Inv_Amt, FORMAT(RecordSet.Fields.Item('instl_inv_amt').Value));
        //                             RowCount := RowCount + 1;
        //                             RecordSet.MoveNext;
        //                         END;
        //                         SQLQuery := 'SELECT nvl(sum(amount),0) adv_paid_amt FROM MRP_ARR_PAYMENT WHERE SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ' AND ADVANCE_FLAG = 2';
        //                         //MESSAGE(SQLQuery);
        //                         RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                         IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                             RecordSet.MoveFirst;
        //                         WHILE NOT RecordSet.EOF DO BEGIN
        //                             EVALUATE(Tot_Adv_Paid_Amt, FORMAT(RecordSet.Fields.Item('adv_paid_amt').Value));
        //                             RowCount := RowCount + 1;
        //                             RecordSet.MoveNext;
        //                         END;
        //                         //>>Added By Pranavi on 06-Mar-2017 for not pay amount but place in today
        //                         SQLQuery := 'select plan_change_id,sale_order_id,payment_realize_date,planned_amount,response_section,remarks,creation_date,userid,ord_advance_id,' +
        //                                     'invoice_id,plan_type,planchngid,plan_type from (' +
        //                                     'select * from  MRP_ORDER_PLAN_CHANGES b,(select max(plan_change_id) PlanChngId ' +
        //                                     ' from MRP_ORDER_PLAN_CHANGES where SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ' group by SALE_ORDER_ID,ord_advance_id) a ' +
        //                                     ' where a.planchngid=b.plan_change_id and b.planned_amount > 0) where plan_type = ''Auto Paid''';
        //                         //MESSAGE(SQLQuery);
        //                         temp_PlnAmt := 0;
        //                         RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                         IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                             RecordSet.MoveFirst;
        //                         WHILE NOT RecordSet.EOF DO BEGIN
        //                             temp_PlnAmt := 0;
        //                             EVALUATE(temp_PlnAmt, FORMAT(RecordSet.Fields.Item('planned_amount').Value));
        //                             Tot_Adv_Paid_Amt := Tot_Adv_Paid_Amt + temp_PlnAmt;
        //                             RowCount := RowCount + 1;
        //                             RecordSet.MoveNext;
        //                         END;
        //                         //<<Added By Pranavi on 06-Mar-2017 for not pay amount but place in today
        //                         // order on hand plan changes amount
        //                         SQLQuery := 'select * from  MRP_ORDER_PLAN_CHANGES b,(select max(plan_change_id) PlanChngId ' +
        //                                     ' from MRP_ORDER_PLAN_CHANGES where SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ' group by SALE_ORDER_ID,ord_advance_id) a ' +
        //                                     ' where a.planchngid=b.plan_change_id and b.planned_amount > 0 and (b.plan_type is null or b.plan_type <> ''Auto Paid'') ';
        //                         //MESSAGE(SQLQuery);
        //                         Ordr_PlnChanges_amt := 0;
        //                         temp_PlnAmt := 0;
        //                         RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                         IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                             RecordSet.MoveFirst;
        //                         WHILE NOT RecordSet.EOF DO BEGIN
        //                             temp_PlnAmt := 0;
        //                             EVALUATE(temp_PlnAmt, FORMAT(RecordSet.Fields.Item('planned_amount').Value));
        //                             Ordr_PlnChanges_amt := Ordr_PlnChanges_amt + temp_PlnAmt;
        //                             RowCount := RowCount + 1;
        //                             RecordSet.MoveNext;
        //                         END;
        //                         // inst on hand plan changes amount
        //                         SQLQuery := 'select * from  MRP_ORDER_INSTALL_PLAN_CHANGES b,' +
        //                                    ' (select SALE_ORDER_ID,sl_no,max(plan_change_id) PlanChngId from ' +
        //                                    ' MRP_ORDER_INSTALL_PLAN_CHANGES where SALE_ORDER_ID = ' + FORMAT(SaleOrderId) +
        //                                    ' group by SALE_ORDER_ID,sl_no) a where a.planchngid=b.plan_change_id and b.planned_amount > 0';
        //                         //MESSAGE(SQLQuery);
        //                         Inst_PlnChanges_Amt := 0;
        //                         temp_PlnAmt := 0;
        //                         RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                         IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                             RecordSet.MoveFirst;
        //                         WHILE NOT RecordSet.EOF DO BEGIN
        //                             temp_PlnAmt := 0;
        //                             EVALUATE(temp_PlnAmt, FORMAT(RecordSet.Fields.Item('planned_amount').Value));
        //                             Inst_PlnChanges_Amt := Inst_PlnChanges_Amt + temp_PlnAmt;
        //                             RowCount := RowCount + 1;
        //                             RecordSet.MoveNext;
        //                         END;
        //                         Sup_UnPlnnd_Amt := Ordr_Sup_Amt + Ord_Adv_Amt - Tot_Adv_Paid_Amt - Ordr_PlnChanges_amt - Tot_Inv_Amt;
        //                         Ret_UnPlnnd_Amt := (Ordr_Ret_Amt + Ordr_Inst_Amt) - Inst_PlnChanges_Amt - Tot_Inst_Inv_Amt;
        //                         Inst_UnPlnnd_Amt := (Ordr_Ret_Amt + Ordr_Inst_Amt) - Inst_PlnChanges_Amt - Tot_Inst_Inv_Amt;
        //                         SL.RESET;
        //                         SL.SETRANGE(SL."Document No.", SIH."Order No.");
        //                         SL.SETRANGE(SL."Line No.", SIL."Order Line No.");
        //                         SL.SETRANGE(SL."No.", SIL."No.");
        //                         IF SL.FINDFIRST THEN BEGIN
        //                             IF SIH."Currency Factor" > 0 THEN
        //                                 UnitPrcLOA := SL."Unitcost(LOA)" * SIH."Currency Factor"  // Currency Factor added by vishnu on 31-01-2020
        //                             ELSE
        //                                 UnitPrcLOA := SL."Unitcost(LOA)";
        //                         END
        //                         ELSE BEGIN
        //                             SQLQuery := 'select nvl(unit_price,0) unit_price from MRP_SALE_ORDER_LINES where sale_order_id = ' + DELCHR(FORMAT(SaleOrderId), '=', ',') + ' and line_no = ' + DELCHR(FORMAT(SIL."Order Line No."), '=', ',');
        //                             //MESSAGE(SQLQuery);
        //                             RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                             IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                                 RecordSet.MoveFirst;
        //                             WHILE NOT RecordSet.EOF DO BEGIN
        //                                 UnitPrcLOA := RecordSet.Fields.Item('unit_price').Value;
        //                                 RowCount := RowCount + 1;
        //                                 RecordSet.MoveNext;
        //                             END;
        //                         END;
        //                         PT.RESET;
        //                         PT.SETRANGE(PT.Code, SIH."Payment Terms Code");
        //                         IF PT.FINDFIRST THEN BEGIN
        //                             IF PT."Stage 1" = PT."Stage 1"::Advance THEN
        //                                 "PT_Adv%" := PT."Percentage 1"
        //                             ELSE
        //                                 IF PT."Stage 1" IN [PT."Stage 1"::Delivery, PT."Stage 1"::Against_RDSO_IC] THEN
        //                                     "PT_Del%" := PT."Percentage 1"
        //                                 ELSE
        //                                     IF PT."Stage 1" = PT."Stage 1"::Credit THEN BEGIN
        //                                         "PT_Crd%" := PT."Percentage 1";
        //                                         PT_Crd_Days := FORMAT(PT."Due Date Calculation");
        //                                         Date_Aft_Crd_Period := CALCDATE('+' + PT_Crd_Days, SIH."Posting Date");
        //                                     END;

        //                             IF PT."Stage 2" IN [PT."Stage 2"::Delivery, PT."Stage 2"::Against_RDSO_IC] THEN
        //                                 "PT_Del%" := PT."Percentage 2"
        //                             ELSE
        //                                 IF PT."Stage 2" = PT."Stage 2"::Credit THEN BEGIN
        //                                     "PT_Crd%" := PT."Percentage 2";
        //                                     PT_Crd_Days := FORMAT(PT."Due Date Calculation");
        //                                     Date_Aft_Crd_Period := CALCDATE('+' + PT_Crd_Days, SIH."Posting Date");
        //                                 END;

        //                             IF PT."Stage 3" IN [PT."Stage 3"::Delivery, PT."Stage 3"::Against_RDSO_IC] THEN
        //                                 "PT_Del%" := PT."Percentage 3"
        //                             ELSE
        //                                 IF PT."Stage 3" = PT."Stage 3"::Credit THEN BEGIN
        //                                     "PT_Crd%" := PT."Percentage 3";
        //                                     PT_Crd_Days := FORMAT(PT."Due Date Calculation");
        //                                     Date_Aft_Crd_Period := CALCDATE('+' + PT_Crd_Days, SIH."Posting Date");
        //                                 END;
        //                         END;
        //                         IF SIL.Type = SIL.Type::Item THEN BEGIN
        //                             NewInvoiceId := 0;
        //                             SQLQuery := 'select nvl(ARR_INVOICE_SEQ.NEXTVAL,1) lastinvoiceid from dual';
        //                             //MESSAGE(SQLQuery);
        //                             RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                             IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                                 RecordSet.MoveFirst;
        //                             WHILE NOT RecordSet.EOF DO BEGIN
        //                                 EVALUATE(NewInvoiceId, FORMAT(RecordSet.Fields.Item('lastinvoiceid').Value));
        //                                 RowCount := RowCount + 1;
        //                                 RecordSet.MoveNext;
        //                             END;
        //                             Line_sup_Portion := SIL."Supply Portion";
        //                             Line_Ret_Portion := SIL."Retention Portion";
        //                             IF "PT_Del%" > 0 THEN BEGIN
        //                                 SQLQuery := 'insert into MRP_ARR_INVOICE(AR_INVOICE_ID,SALE_ORDER_ID,INVOICE_DATE,AMOUNT,USERID,CREATION_DATE,ORDERDATE,INVOICEAMOUNT,INVOICED_QTY, ' +
        //                                             ' ERP_INVOICE_NO,LINE_NO) values(' + FORMAT(NewInvoiceId) + ',' + FORMAT(SaleOrderId) + ', to_date(''' + FORMAT(SIH."Posting Date", 0, '<Day>-<Month Text,3>-<Year4>') +
        //                                             ''',''dd-mon-yyyy''),' + DELCHR(FORMAT(ROUND(UnitPrcLOA * SIL.Quantity * "PT_Del%" / 100, 1, '=')), '=', ',') + ', ''Auto'', sysdate, ' + 'to_date(''' +
        //                                             FORMAT(SIH."Order Date", 0, '<Day>-<Month Text,3>-<Year4>') + ''',''dd-mon-yyyy''), ' + DELCHR(FORMAT(ROUND(UnitPrcLOA * SIL.Quantity * "PT_Del%" / 100, 1, '=')), '=', ',') + ', ' +
        //                                             DELCHR(FORMAT(ROUND(SIL.Quantity)), '=', ',') + ', ''' + SIH."External Document No." + ''', ' + DELCHR(FORMAT(SIL."Order Line No."), '=', ',') + ')';
        //                                 MESSAGE(SQLQuery);
        //                                 SQLConnection.Execute(SQLQuery, RowCount);

        //                                 SQLQuery := 'insert into MRP_PLAN_CHANGES(PLAN_CHANGE_ID,SL_NO,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,RESPONSE_SECTION, ' +
        //                                             ' CREATION_DATE,USERID,BASEPLAN,INVOICE_ID) values(PLAN_CHANGE_SEQ.NEXTVAL, ' +
        //                                             ' (select nvl(max(sl_no)+1,1) slno from MRP_PLAN_CHANGES where SALE_ORDER_ID = ' + FORMAT(SaleOrderId) +
        //                                             ' ), ' + FORMAT(SaleOrderId) + ', to_date(''' + FORMAT(payment_Realization_Date, 0, '<Day>-<Month Text,3>-<Year4>') +
        //                                             //  ' ), '+FORMAT(SaleOrderId)+', to_date('''+FORMAT(SIH."Posting Date",0,'<Day>-<Month Text,3>-<Year4>')+ // commented by sujani to add payment_Realization_Date
        //                                             ''',''dd-mon-yyyy''), ' + DELCHR(FORMAT(ROUND(UnitPrcLOA * SIL.Quantity * "PT_Del%" / 100, 1, '=')), '=', ',') + ', ''SAL'', sysdate, ''Auto'', 1, ' + FORMAT(NewInvoiceId) + ')';
        //                                 //MESSAGE(SQLQuery);
        //                                 SQLConnection.Execute(SQLQuery, RowCount);
        //                                 /*
        //                                 IF ROUND(UnitPrcLOA*SIL.Quantity*"PT_Del%"/100,1,'=') > ROUND(Sup_UnPlnnd_Amt,1,'=') THEN
        //                                 BEGIN
        //                                 */
        //                                 // order on hand plan changes amount
        //                                 SQLQuery := ' select * from  MRP_ORDER_PLAN_CHANGES b,(select max(plan_change_id) PlanChngId ' +
        //                                             ' from MRP_ORDER_PLAN_CHANGES where SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ' group by SALE_ORDER_ID,ord_advance_id) a ' +
        //                                             ' where a.planchngid=b.plan_change_id and b.planned_amount > 0 and (b.plan_type is null or b.plan_type <> ''Auto Paid'') ' +
        //                                             ' order by b.payment_realize_date desc,b.planned_amount desc';
        //                                 //MESSAGE(SQLQuery);
        //                                 RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                                 IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                                     RecordSet.MoveFirst;
        //                                 TestAmt := 0;
        //                                 Enf := FALSE;
        //                                 // TestAmt := ROUND(UnitPrcLOA*SIL.Quantity*"PT_Del%"/100,0.01)-Sup_UnPlnnd_Amt;
        //                                 TestAmt := ROUND(UnitPrcLOA * SIL.Quantity * "PT_Del%" / 100, 1, '=');
        //                                 WHILE NOT RecordSet.EOF AND (NOT Enf) AND (TestAmt > 0) DO BEGIN
        //                                     EVALUATE(TempAmt, FORMAT(RecordSet.Fields.Item('planned_amount').Value));
        //                                     IF (ROUND(TestAmt, 1, '=') >= ROUND(TempAmt, 1, '=')) THEN BEGIN
        //                                         SQLQuery := ' insert into MRP_ORDER_PLAN_CHANGES(PLAN_CHANGE_ID,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,CREATION_DATE, ' +
        //                                                    ' USERID,ORD_ADVANCE_ID,INVOICE_ID) values(ORDER_PLANCHANGES_SEQ.NEXTVAL, ' + DELCHR(FORMAT(RecordSet.Fields.Item('SALE_ORDER_ID').Value), '=', ',') +
        //                                                    ' , sysdate, 0, sysdate, ''Auto'',' + DELCHR(FORMAT(RecordSet.Fields.Item('ORD_ADVANCE_ID').Value), '=', ',') + ', ' + FORMAT(NewInvoiceId) + ')';
        //                                         //MESSAGE(SQLQuery);
        //                                         SQLConnection.Execute(SQLQuery, RowCount);
        //                                         SQLQuery := 'update mrp_arr_ord_advance set order_flag = 1 where ord_advance_id = ' + DELCHR(FORMAT(RecordSet.Fields.Item('ORD_ADVANCE_ID').Value), '=', ',');
        //                                         //MESSAGE(SQLQuery);
        //                                         SQLConnection.Execute(SQLQuery, RowCount);
        //                                         TestAmt := TestAmt - TempAmt;
        //                                     END ELSE BEGIN
        //                                         SQLQuery := 'select nvl(ORD_ADVANCE_ID_SEQ.NEXTVAL,1) LastOrdAdvId from dual';
        //                                         RecordSet1 := SQLConnection.Execute(SQLQuery, RowCount);
        //                                         IF NOT ((RecordSet1.BOF) OR (RecordSet1.EOF)) THEN
        //                                             RecordSet1.MoveFirst;
        //                                         WHILE NOT RecordSet1.EOF DO BEGIN
        //                                             EVALUATE(LastOrdAdvId, FORMAT(RecordSet1.Fields.Item('LastOrdAdvId').Value));
        //                                             RowCount1 := RowCount1 + 1;
        //                                             RecordSet1.MoveNext;
        //                                         END;
        //                                         SQLQuery := 'insert into mrp_arr_ord_advance(ORD_ADVANCE_ID,SALE_ORDER_ID,EXP_ADVANCE_AMOUNT,ACCTPERIOD, ' +
        //                                                    ' ACCT_YEAR,EXP_RECEIVED_DATE,ACTINACT,ORDER_FLAG) values (' + DELCHR(FORMAT(LastOrdAdvId), '=', ',') + ', ' +
        //                                                    DELCHR(FORMAT(RecordSet.Fields.Item('SALE_ORDER_ID').Value), '=', ',') + ',' + DELCHR(FORMAT(ROUND(TestAmt, 1, '=')), '=', ',') +
        //                                                    ', (select ACCTPERIOD from mrp_arr_ord_advance where ORD_ADVANCE_ID = ' + DELCHR(FORMAT(RecordSet.Fields.Item('ORD_ADVANCE_ID').Value), '=', ',') +
        //                                                    '), (select ACCT_YEAR from mrp_arr_ord_advance where ORD_ADVANCE_ID = ' + DELCHR(FORMAT(RecordSet.Fields.Item('ORD_ADVANCE_ID').Value), '=', ',') +
        //                                                    '), (select EXP_RECEIVED_DATE from mrp_arr_ord_advance where ORD_ADVANCE_ID = ' + DELCHR(FORMAT(RecordSet.Fields.Item('ORD_ADVANCE_ID').Value), '=', ',') + '), 1, 1)';
        //                                         //MESSAGE(SQLQuery);
        //                                         SQLConnection.Execute(SQLQuery, RowCount);
        //                                         SQLQuery := 'insert into MRP_ORDER_PLAN_CHANGES(PLAN_CHANGE_ID,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,CREATION_DATE, ' +
        //                                                    'USERID,ORD_ADVANCE_ID) values(ORDER_PLANCHANGES_SEQ.NEXTVAL, ' + DELCHR(FORMAT(RecordSet.Fields.Item('SALE_ORDER_ID').Value), '=', ',') +
        //                                                    ', sysdate, ' + DELCHR(FORMAT(ROUND(TestAmt, 1, '=')), '=', ',') + ', sysdate, ''Auto'',' + DELCHR(FORMAT(LastOrdAdvId), '=', ',') + ')';
        //                                         //MESSAGE(SQLQuery);
        //                                         SQLConnection.Execute(SQLQuery, RowCount);
        //                                         SQLQuery := 'insert into MRP_ORDER_PLAN_CHANGES(PLAN_CHANGE_ID,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,CREATION_DATE, ' +
        //                                                    'USERID,ORD_ADVANCE_ID,INVOICE_ID) values(ORDER_PLANCHANGES_SEQ.NEXTVAL, ' + DELCHR(FORMAT(RecordSet.Fields.Item('SALE_ORDER_ID').Value), '=', ',') +
        //                                                    ', sysdate, 0, sysdate, ''Auto'',' + DELCHR(FORMAT(LastOrdAdvId), '=', ',') + ', ' + FORMAT(NewInvoiceId) + ')';
        //                                         //MESSAGE(SQLQuery);
        //                                         SQLConnection.Execute(SQLQuery, RowCount);

        //                                         SQLQuery := 'update MRP_ORDER_PLAN_CHANGES set PLANNED_AMOUNT = ' + DELCHR(FORMAT(ROUND(TempAmt - TestAmt, 1, '=')), '=', ',') +
        //                                                    ' where PLAN_CHANGE_ID = ' + DELCHR(FORMAT(RecordSet.Fields.Item('PLAN_CHANGE_ID').Value), '=', ',');
        //                                         //MESSAGE(SQLQuery);
        //                                         SQLConnection.Execute(SQLQuery, RowCount);

        //                                         SQLQuery := 'update mrp_arr_ord_advance set EXP_ADVANCE_AMOUNT = ' + DELCHR(FORMAT(ROUND(TempAmt - TestAmt, 1, '=')), '=', ',') +
        //                                                    ' where ORD_ADVANCE_ID = ' + DELCHR(FORMAT(RecordSet.Fields.Item('ORD_ADVANCE_ID').Value), '=', ',');
        //                                         //MESSAGE(SQLQuery);
        //                                         SQLConnection.Execute(SQLQuery, RowCount);
        //                                         Enf := TRUE;
        //                                     END;
        //                                     RowCount := RowCount + 1;
        //                                     RecordSet.MoveNext;
        //                                 END;
        //                                 // Sup_UnPlnnd_Amt := 0;
        //                                 //END ELSE Sup_UnPlnnd_Amt := Sup_UnPlnnd_Amt-ROUND(UnitPrcLOA*SIL.Quantity*"PT_Del%"/100,0.01);
        //                             END;
        //                             IF ROUND(Line_Ret_Portion, 1, '=') > 0 THEN BEGIN
        //                                 NewInstInvoiceId := 0;
        //                                 SQLQuery := 'select nvl(ARR_INVOICE_SEQ.NEXTVAL,1) lastinstinvid from dual';
        //                                 //MESSAGE(SQLQuery);
        //                                 RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                                 IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                                     RecordSet.MoveFirst;
        //                                 WHILE NOT RecordSet.EOF DO BEGIN
        //                                     EVALUATE(NewInstInvoiceId, DELCHR(FORMAT(RecordSet.Fields.Item('lastinstinvid').Value), '=', ','));
        //                                     RowCount := RowCount + 1;
        //                                     RecordSet.MoveNext;
        //                                 END;
        //                                 SQLQuery := 'insert into MRP_ARR_INSTALL_INVOICE(AR_INVOICE_ID,SALE_ORDER_ID,INVOICE_DATE,AMOUNT,USERID,CREATION_DATE,INSTALL_PERCENT, ' +
        //                                             ' AMOUNTTYPE,INVOICED_QTY,ERP_INVOICE_NO,LINE_NO) values (' + FORMAT(NewInstInvoiceId) + ', ' + FORMAT(SaleOrderId) + ', to_date(''' +
        //                                             FORMAT(SIH."Posting Date", 0, '<Day>-<Month Text,3>-<Year4>') + ''',''dd-mon-yyyy''), ' + DELCHR(FORMAT(ROUND(UnitPrcLOA * SIL.Quantity * "PT_Crd%" / 100, 1, '=')), '=', ',') +
        //                                             ', ''Auto'', sysdate,' + FORMAT(ROUND(SIL."Retention Portion")) + ', ''R'', ' + DELCHR(FORMAT(ROUND(SIL.Quantity)), '=', ',') + ', ''' + SIH."External Document No." + ''',' +
        //                                             DELCHR(FORMAT(SIL."Order Line No."), '=', ',') + ')';
        //                                 //MESSAGE(SQLQuery);
        //                                 SQLConnection.Execute(SQLQuery, RowCount);

        //                                 SQLQuery := 'insert into MRP_ARR_INSTALL_INVOICE(AR_INVOICE_ID,SALE_ORDER_ID,INVOICE_DATE,AMOUNT,USERID,CREATION_DATE,INSTALL_PERCENT, ' +
        //                                             ' AMOUNTTYPE,INVOICED_QTY,ERP_INVOICE_NO,LINE_NO) values (' + FORMAT(NewInstInvoiceId + 1) + ', ' + FORMAT(SaleOrderId) + ', to_date(''' +
        //                                             FORMAT(SIH."Posting Date", 0, '<Day>-<Month Text,3>-<Year4>') + ''',''dd-mon-yyyy''), ''''' +
        //                                             ', ''Auto'', sysdate,'''', ''I'', '''', ''' + SIH."External Document No." + ''',' + DELCHR(FORMAT(SIL."Order Line No."), '=', ',') + ')';
        //                                 //MESSAGE(SQLQuery);
        //                                 SQLConnection.Execute(SQLQuery, RowCount);

        //                                 SQLQuery := 'insert into MRP_INSTAL_PLAN_CHANGES(PLAN_CHANGE_ID,SL_NO,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT, ' +
        //                                             ' RESPONSE_SECTION,CREATION_DATE,USERID,RETENTIONAMT,BASEPLAN,INVOICE_ID) ' +
        //                                             ' values(INSTALL_PLAN_CHANGE_SEQ.NEXTVAL,(select nvl(max(sl_no)+1,1) slno from MRP_INSTAL_PLAN_CHANGES ' +
        //                                             ' where sale_order_id = ' + FORMAT(SaleOrderId) + '),' + FORMAT(SaleOrderId) +
        //                                             ', to_date(''' + FORMAT(SIH."Posting Date", 0, '<Day>-<Month Text,3>-<Year4>') + ''',''dd-mon-yyyy''),' +
        //                                             DELCHR(FORMAT(ROUND(UnitPrcLOA * SIL.Quantity * "PT_Crd%" / 100, 1, '=')), '=', ',') + ', ''CS'', sysdate, ''Auto'', ' +
        //                                             DELCHR(FORMAT(ROUND(UnitPrcLOA * SIL.Quantity * "PT_Crd%" / 100, 1, '=')), '=', ',') + ', 1,' + FORMAT(NewInstInvoiceId) + ')';
        //                                 //MESSAGE(SQLQuery);
        //                                 SQLConnection.Execute(SQLQuery, RowCount);
        //                                 /*
        //                                 IF ROUND(UnitPrcLOA*SIL.Quantity*"PT_Crd%"/100,1,'=') > ROUND(Ret_UnPlnnd_Amt,1,'=') THEN
        //                                 BEGIN
        //                                 */
        //                                 // install order on hand plan changes
        //                                 SQLQuery := ' select * from  MRP_ORDER_INSTALL_PLAN_CHANGES b,(select SALE_ORDER_ID,sl_no,max(plan_change_id) PlanChngId from ' +
        //                                             ' MRP_ORDER_INSTALL_PLAN_CHANGES where SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ' group by SALE_ORDER_ID,sl_no) a ' +
        //                                             ' where a.planchngid=b.plan_change_id and b.planned_amount > 0 order by payment_realize_date desc,planned_amount desc';
        //                                 //MESSAGE(SQLQuery);
        //                                 RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                                 IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                                     RecordSet.MoveFirst;
        //                                 TestAmt := 0;
        //                                 Enf := FALSE;
        //                                 //TestAmt := ROUND(UnitPrcLOA*SIL.Quantity*"PT_Crd%"/100,0.01) - Ret_UnPlnnd_Amt;
        //                                 TestAmt := ROUND(UnitPrcLOA * SIL.Quantity * "PT_Crd%" / 100, 1, '=');
        //                                 WHILE NOT RecordSet.EOF AND (NOT Enf) AND (ROUND(TestAmt, 1, '=') > 0) DO BEGIN
        //                                     EVALUATE(TempAmt, FORMAT(RecordSet.Fields.Item('planned_amount').Value));
        //                                     IF (ROUND(TestAmt, 1, '=') >= ROUND(TempAmt, 1, '=')) THEN BEGIN
        //                                         SQLQuery := 'insert into MRP_ORDER_INSTALL_PLAN_CHANGES(PLAN_CHANGE_ID,SL_NO,SALE_ORDER_ID, ' +
        //                                                    ' PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,CREATION_DATE,USERID,INVOICE_ID) ' +
        //                                                    ' values((select nvl(max(PLAN_CHANGE_ID)+1,0) from MRP_ORDER_INSTALL_PLAN_CHANGES), ' +
        //                                                    DELCHR(FORMAT(RecordSet.Fields.Item('SL_NO').Value), '=', ',') + ', ' + DELCHR(FORMAT(RecordSet.Fields.Item('SALE_ORDER_ID').Value), '=', ',') +
        //                                                    ', sysdate, 0, sysdate, ''Auto'', ' + DELCHR(FORMAT(NewInstInvoiceId), '=', ',') + ')';
        //                                         //MESSAGE(SQLQuery);
        //                                         SQLConnection.Execute(SQLQuery, RowCount);
        //                                         TestAmt := TestAmt - TempAmt;
        //                                     END ELSE BEGIN
        //                                         SQLQuery := 'select nvl(max(sl_no)+1,1) last_slno from MRP_ORDER_INSTALL_PLAN_CHANGES where SALE_ORDER_ID = ' +
        //                                                    DELCHR(FORMAT(RecordSet.Fields.Item('SALE_ORDER_ID').Value), '=', ',');
        //                                         //MESSAGE(SQLQuery);
        //                                         RecordSet1 := SQLConnection.Execute(SQLQuery, RowCount1);
        //                                         Last_Inst_OnHnd_Pln_Chgs_SLNO := 0;
        //                                         IF NOT ((RecordSet1.BOF) OR (RecordSet1.EOF)) THEN
        //                                             RecordSet1.MoveFirst;
        //                                         WHILE NOT RecordSet1.EOF DO BEGIN
        //                                             EVALUATE(Last_Inst_OnHnd_Pln_Chgs_SLNO, FORMAT(RecordSet1.Fields.Item('last_slno').Value));
        //                                             RowCount1 := RowCount1 + 1;
        //                                             RecordSet1.MoveNext;
        //                                         END;
        //                                         SQLQuery := 'insert into MRP_ORDER_INSTALL_PLAN_CHANGES(PLAN_CHANGE_ID,SL_NO,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT, ' +
        //                                                    ' CREATION_DATE,USERID) values((select nvl(max(PLAN_CHANGE_ID)+1,0) from MRP_ORDER_INSTALL_PLAN_CHANGES), ' +
        //                                                    FORMAT(Last_Inst_OnHnd_Pln_Chgs_SLNO) + ', ' + DELCHR(FORMAT(RecordSet.Fields.Item('SALE_ORDER_ID').Value), '=', ',') +
        //                                                    ', sysdate, ' + DELCHR(FORMAT(ROUND(TestAmt, 1, '=')), '=', ',') + ', sysdate, ''Auto'')';
        //                                         //MESSAGE(SQLQuery);
        //                                         SQLConnection.Execute(SQLQuery, RowCount);
        //                                         SQLQuery := 'insert into MRP_ORDER_INSTALL_PLAN_CHANGES(PLAN_CHANGE_ID,SL_NO,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT, ' +
        //                                                    ' CREATION_DATE,USERID,INVOICE_ID) values((select nvl(max(PLAN_CHANGE_ID)+1,0) from MRP_ORDER_INSTALL_PLAN_CHANGES), ' +
        //                                                    FORMAT(Last_Inst_OnHnd_Pln_Chgs_SLNO) + ', ' + DELCHR(FORMAT(RecordSet.Fields.Item('SALE_ORDER_ID').Value), '=', ',') +
        //                                                    ', sysdate, 0,sysdate,''Auto'', ' + DELCHR(FORMAT(NewInstInvoiceId), '=', ',') + ')';
        //                                         //MESSAGE(SQLQuery);
        //                                         SQLConnection.Execute(SQLQuery, RowCount);
        //                                         SQLQuery := 'update MRP_ORDER_INSTALL_PLAN_CHANGES set PLANNED_AMOUNT = ' + DELCHR(FORMAT(ROUND(TempAmt - TestAmt, 1, '=')), '=', ',') +
        //                                                    ' where PLAN_CHANGE_ID = ' + DELCHR(FORMAT(RecordSet.Fields.Item('PLAN_CHANGE_ID').Value), '=', ',');
        //                                         //MESSAGE(SQLQuery);
        //                                         SQLConnection.Execute(SQLQuery, RowCount);
        //                                         Enf := TRUE;
        //                                     END;
        //                                     RowCount := RowCount + 1;
        //                                     RecordSet.MoveNext;
        //                                 END;
        //                                 //Ret_UnPlnnd_Amt := 0;
        //                                 //END ELSE Ret_UnPlnnd_Amt := Ret_UnPlnnd_Amt - ROUND(UnitPrcLOA*SIL.Quantity*"PT_Crd%"/100,0.01);
        //                             END;
        //                             IF ("PT_Crd%" > 0) AND (Line_Ret_Portion = 0) THEN BEGIN
        //                                 NewInvoiceId := 0;
        //                                 SQLQuery := 'select nvl(ARR_INVOICE_SEQ.NEXTVAL,1) lastinvoiceid from dual';
        //                                 //MESSAGE(SQLQuery);
        //                                 RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                                 IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                                     RecordSet.MoveFirst;
        //                                 WHILE NOT RecordSet.EOF DO BEGIN
        //                                     EVALUATE(NewInvoiceId, FORMAT(RecordSet.Fields.Item('lastinvoiceid').Value));
        //                                     RowCount := RowCount + 1;
        //                                     RecordSet.MoveNext;
        //                                 END;
        //                                 SQLQuery := 'insert into MRP_ARR_INVOICE(AR_INVOICE_ID,SALE_ORDER_ID,INVOICE_DATE,AMOUNT,USERID,CREATION_DATE,ORDERDATE,INVOICEAMOUNT,INVOICED_QTY, ' +
        //                                             ' ERP_INVOICE_NO,LINE_NO) values(' + FORMAT(NewInvoiceId) + ',' + FORMAT(SaleOrderId) + ',to_date(''' + FORMAT(SIH."Posting Date", 0, '<Day>-<Month Text,3>-<Year4>') +
        //                                             ''',''dd-mon-yyyy''),' + DELCHR(FORMAT(ROUND(UnitPrcLOA * SIL.Quantity * "PT_Crd%" / 100, 1, '=')), '=', ',') + ', ''Auto'', sysdate, ' + 'to_date(''' +
        //                                             FORMAT(SIH."Order Date", 0, '<Day>-<Month Text,3>-<Year4>') + ''',''dd-mon-yyyy''), ' + DELCHR(FORMAT(ROUND(UnitPrcLOA * SIL.Quantity * "PT_Crd%" / 100, 1, '=')), '=', ',') + ', ' +
        //                                             DELCHR(FORMAT(SIL.Quantity), '=', ',') + ', ''' + SIH."External Document No." + ''', ' + DELCHR(FORMAT(SIL."Order Line No."), '=', ',') + ')';
        //                                 //MESSAGE(SQLQuery);
        //                                 SQLConnection.Execute(SQLQuery, RowCount);

        //                                 SQLQuery := 'insert into MRP_PLAN_CHANGES(PLAN_CHANGE_ID,SL_NO,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,RESPONSE_SECTION, ' +
        //                                             'CREATION_DATE,USERID,BASEPLAN,INVOICE_ID) values(PLAN_CHANGE_SEQ.NEXTVAL, ' +
        //                                             '(select nvl(max(sl_no)+1,1) slno from MRP_PLAN_CHANGES where SALE_ORDER_ID = ' + FORMAT(SaleOrderId) +
        //                                             '),' + FORMAT(SaleOrderId) + ', to_date(''' + FORMAT(Date_Aft_Crd_Period, 0, '<Day>-<Month Text,3>-<Year4>') +
        //                                             ''',''dd-mon-yyyy''), ' + DELCHR(FORMAT(ROUND(UnitPrcLOA * SIL.Quantity * "PT_Crd%" / 100, 1, '=')), '=', ',') + ', ''SAL'', sysdate, ''Auto'', 1, ' + FORMAT(NewInvoiceId) + ')';

        //                                 //MESSAGE(SQLQuery);
        //                                 SQLConnection.Execute(SQLQuery, RowCount);
        //                                 /*
        //                                 IF ROUND(UnitPrcLOA*SIL.Quantity*"PT_Crd%"/100,1,'=') > ROUND(Sup_UnPlnnd_Amt,1,'=') THEN
        //                                 BEGIN
        //                                 */
        //                                 // order on hand plan changes amount
        //                                 SQLQuery := ' select * from  MRP_ORDER_PLAN_CHANGES b,(select max(plan_change_id) PlanChngId ' +
        //                                             ' from MRP_ORDER_PLAN_CHANGES where SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ' group by SALE_ORDER_ID,ord_advance_id) a ' +
        //                                             ' where a.planchngid=b.plan_change_id and b.planned_amount > 0 and (b.plan_type is null or b.plan_type <> ''Auto Paid'') ' +
        //                                             ' order by b.payment_realize_date desc,b.planned_amount desc';
        //                                 //MESSAGE(SQLQuery);
        //                                 RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                                 IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                                     RecordSet.MoveFirst;
        //                                 TestAmt := 0;
        //                                 Enf := FALSE;
        //                                 //TestAmt := ROUND(UnitPrcLOA*SIL.Quantity*"PT_Crd%"/100,0.01)-Sup_UnPlnnd_Amt;
        //                                 TestAmt := ROUND(UnitPrcLOA * SIL.Quantity * "PT_Crd%" / 100, 1, '=');
        //                                 WHILE NOT RecordSet.EOF AND (NOT Enf) AND (TestAmt > 0) DO BEGIN
        //                                     EVALUATE(TempAmt, FORMAT(RecordSet.Fields.Item('planned_amount').Value));
        //                                     IF (ROUND(TestAmt, 1, '=') >= ROUND(TempAmt, 1, '=')) THEN BEGIN
        //                                         SQLQuery := ' insert into MRP_ORDER_PLAN_CHANGES(PLAN_CHANGE_ID,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,CREATION_DATE, ' +
        //                                                    ' USERID,ORD_ADVANCE_ID,INVOICE_ID) values(ORDER_PLANCHANGES_SEQ.NEXTVAL, ' + DELCHR(FORMAT(RecordSet.Fields.Item('SALE_ORDER_ID').Value), '=', ',') +
        //                                                    ' , sysdate, 0, sysdate, ''Auto'',' + DELCHR(FORMAT(RecordSet.Fields.Item('ORD_ADVANCE_ID').Value), '=', ',') + ', ' + FORMAT(NewInvoiceId) + ')';
        //                                         //MESSAGE(SQLQuery);
        //                                         SQLConnection.Execute(SQLQuery, RowCount);
        //                                         SQLQuery := 'update mrp_arr_ord_advance set order_flag = 1 where ord_advance_id = ' + DELCHR(FORMAT(RecordSet.Fields.Item('ORD_ADVANCE_ID').Value), '=', ',');
        //                                         //MESSAGE(SQLQuery);
        //                                         SQLConnection.Execute(SQLQuery, RowCount);
        //                                         TestAmt := TestAmt - TempAmt;
        //                                     END ELSE BEGIN
        //                                         SQLQuery := 'select nvl(ORD_ADVANCE_ID_SEQ.NEXTVAL,1) LastOrdAdvId from dual';
        //                                         RecordSet1 := SQLConnection.Execute(SQLQuery, RowCount);
        //                                         IF NOT ((RecordSet1.BOF) OR (RecordSet1.EOF)) THEN
        //                                             RecordSet1.MoveFirst;
        //                                         WHILE NOT RecordSet1.EOF DO BEGIN
        //                                             EVALUATE(LastOrdAdvId, FORMAT(RecordSet1.Fields.Item('LastOrdAdvId').Value));
        //                                             RowCount1 := RowCount1 + 1;
        //                                             RecordSet1.MoveNext;
        //                                         END;
        //                                         SQLQuery := 'insert into mrp_arr_ord_advance(ORD_ADVANCE_ID,SALE_ORDER_ID,EXP_ADVANCE_AMOUNT,ACCTPERIOD, ' +
        //                                                    ' ACCT_YEAR,EXP_RECEIVED_DATE,ACTINACT,ORDER_FLAG) values (' + DELCHR(FORMAT(LastOrdAdvId), '=', ',') + ', ' +
        //                                                    DELCHR(FORMAT(RecordSet.Fields.Item('SALE_ORDER_ID').Value), '=', ',') + ',' + DELCHR(FORMAT(ROUND(TestAmt, 1, '=')), '=', ',') +
        //                                                    ', (select ACCTPERIOD from mrp_arr_ord_advance where ORD_ADVANCE_ID = ' + DELCHR(FORMAT(RecordSet.Fields.Item('ORD_ADVANCE_ID').Value), '=', ',') +
        //                                                    '), (select ACCT_YEAR from mrp_arr_ord_advance where ORD_ADVANCE_ID = ' + DELCHR(FORMAT(RecordSet.Fields.Item('ORD_ADVANCE_ID').Value), '=', ',') +
        //                                                    '), (select EXP_RECEIVED_DATE from mrp_arr_ord_advance where ORD_ADVANCE_ID = ' + DELCHR(FORMAT(RecordSet.Fields.Item('ORD_ADVANCE_ID').Value), '=', ',') + '), 1, 1)';
        //                                         //MESSAGE(SQLQuery);
        //                                         SQLConnection.Execute(SQLQuery, RowCount);
        //                                         SQLQuery := 'insert into MRP_ORDER_PLAN_CHANGES(PLAN_CHANGE_ID,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,CREATION_DATE, ' +
        //                                                    'USERID,ORD_ADVANCE_ID) values(ORDER_PLANCHANGES_SEQ.NEXTVAL, ' + DELCHR(FORMAT(RecordSet.Fields.Item('SALE_ORDER_ID').Value), '=', ',') +
        //                                                    ', sysdate, ' + DELCHR(FORMAT(ROUND(TestAmt, 1, '=')), '=', ',') + ', sysdate, ''Auto'',' + DELCHR(FORMAT(LastOrdAdvId), '=', ',') + ')';
        //                                         //MESSAGE(SQLQuery);
        //                                         SQLConnection.Execute(SQLQuery, RowCount);
        //                                         SQLQuery := 'insert into MRP_ORDER_PLAN_CHANGES(PLAN_CHANGE_ID,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,CREATION_DATE, ' +
        //                                                    'USERID,ORD_ADVANCE_ID,INVOICE_ID) values(ORDER_PLANCHANGES_SEQ.NEXTVAL, ' + DELCHR(FORMAT(RecordSet.Fields.Item('SALE_ORDER_ID').Value), '=', ',') +
        //                                                    ', sysdate, 0, sysdate, ''Auto'',' + DELCHR(FORMAT(LastOrdAdvId), '=', ',') + ', ' + FORMAT(NewInvoiceId) + ')';
        //                                         //MESSAGE(SQLQuery);
        //                                         SQLConnection.Execute(SQLQuery, RowCount);

        //                                         SQLQuery := 'update MRP_ORDER_PLAN_CHANGES set PLANNED_AMOUNT = ' + DELCHR(FORMAT(ROUND(TempAmt - TestAmt, 1, '=')), '=', ',') +
        //                                                    ' where PLAN_CHANGE_ID = ' + DELCHR(FORMAT(RecordSet.Fields.Item('PLAN_CHANGE_ID').Value), '=', ',');
        //                                         //MESSAGE(SQLQuery);
        //                                         SQLConnection.Execute(SQLQuery, RowCount);

        //                                         SQLQuery := 'update mrp_arr_ord_advance set EXP_ADVANCE_AMOUNT = ' + DELCHR(FORMAT(ROUND(TempAmt - TestAmt, 1, '=')), '=', ',') +
        //                                                    ' where ORD_ADVANCE_ID = ' + DELCHR(FORMAT(RecordSet.Fields.Item('ORD_ADVANCE_ID').Value), '=', ',');
        //                                         //MESSAGE(SQLQuery);
        //                                         SQLConnection.Execute(SQLQuery, RowCount);
        //                                         Enf := TRUE;
        //                                     END;
        //                                     RowCount := RowCount + 1;
        //                                     RecordSet.MoveNext;
        //                                 END;
        //                                 //Sup_UnPlnnd_Amt := 0;
        //                                 //END ELSE Sup_UnPlnnd_Amt := Sup_UnPlnnd_Amt-ROUND(UnitPrcLOA*SIL.Quantity*"PT_Crd%"/100,0.01);
        //                             END;
        //                         END ELSE
        //                             IF SIL.Type = SIL.Type::"G/L Account" THEN BEGIN
        //                                 NewInstInvoiceId := 0;
        //                                 SQLQuery := 'select nvl(ARR_INVOICE_SEQ.NEXTVAL,1) lastinstinvid from dual';
        //                                 //MESSAGE(SQLQuery);
        //                                 RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                                 IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                                     RecordSet.MoveFirst;
        //                                 WHILE NOT RecordSet.EOF DO BEGIN
        //                                     EVALUATE(NewInstInvoiceId, DELCHR(FORMAT(RecordSet.Fields.Item('lastinstinvid').Value), '=', ','));
        //                                     RowCount := RowCount + 1;
        //                                     RecordSet.MoveNext;
        //                                 END;
        //                                 SQLQuery := 'insert into MRP_ARR_INSTALL_INVOICE(AR_INVOICE_ID,SALE_ORDER_ID,INVOICE_DATE,AMOUNT,USERID,CREATION_DATE,INSTALL_PERCENT, ' +
        //                                             ' AMOUNTTYPE,INVOICED_QTY,ERP_INVOICE_NO,LINE_NO) values (' + DELCHR(FORMAT(NewInstInvoiceId), '=', ',') + ', ' + FORMAT(SaleOrderId) + ', to_date(''' +
        //                                             FORMAT(SIH."Posting Date", 0, '<Day>-<Month Text,3>-<Year4>') + ''',''dd-mon-yyyy''),' + DELCHR(FORMAT(ROUND(UnitPrcLOA * SIL.Quantity, 1, '=')), '=', ',') +
        //                                             ', ''Auto'',sysdate,' + FORMAT(ROUND(SIL."Retention Portion")) + ',''I'',' + DELCHR(FORMAT(ROUND(SIL.Quantity)), '=', ',') + ',''' + SIH."External Document No." + ''', ' +
        //                                             DELCHR(FORMAT(SIL."Order Line No."), '=', ',') + ')';
        //                                 //MESSAGE(SQLQuery);
        //                                 SQLConnection.Execute(SQLQuery, RowCount);

        //                                 SQLQuery := 'insert into MRP_ARR_INSTALL_INVOICE(AR_INVOICE_ID,SALE_ORDER_ID,INVOICE_DATE,AMOUNT,USERID,CREATION_DATE,INSTALL_PERCENT, ' +
        //                                             ' AMOUNTTYPE,INVOICED_QTY,ERP_INVOICE_NO,LINE_NO) values (' + DELCHR(FORMAT(NewInstInvoiceId + 1), '=', ',') + ', ' + FORMAT(SaleOrderId) +
        //                                             ', to_date(''' + FORMAT(SIH."Posting Date", 0, '<Day>-<Month Text,3>-<Year4>') + ''',''dd-mon-yyyy''), ''''' +
        //                                             ', ''Auto'', sysdate, '''', ''R'', '''', ''' + SIH."External Document No." + ''', ' + DELCHR(FORMAT(SIL."Order Line No."), '=', ',') + ')';
        //                                 //MESSAGE(SQLQuery);
        //                                 SQLConnection.Execute(SQLQuery, RowCount);


        //                                 SQLQuery := 'insert into MRP_INSTAL_PLAN_CHANGES(PLAN_CHANGE_ID,SL_NO,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT, ' +
        //                                             ' RESPONSE_SECTION,CREATION_DATE,USERID,INSTALLAMT,BASEPLAN,INVOICE_ID) ' +
        //                                             ' values(INSTALL_PLAN_CHANGE_SEQ.NEXTVAL, (select nvl(max(sl_no)+1,1) slno from MRP_INSTAL_PLAN_CHANGES ' +
        //                                             ' where sale_order_id = ' + FORMAT(SaleOrderId) + '),' + FORMAT(SaleOrderId) +
        //                                             ', to_date(''' + FORMAT(SIH."Posting Date", 0, '<Day>-<Month Text,3>-<Year4>') + ''',''dd-mon-yyyy''), ' +
        //                                             DELCHR(FORMAT(ROUND(UnitPrcLOA * SIL.Quantity, 1, '=')), '=', ',') + ', ''CS'', sysdate, ''Auto'', ' + DELCHR(FORMAT(ROUND(UnitPrcLOA * SIL.Quantity, 1, '=')), '=', ',') +
        //                                             ', 1,' + FORMAT(NewInstInvoiceId) + ')';
        //                                 //MESSAGE(SQLQuery);
        //                                 SQLConnection.Execute(SQLQuery, RowCount);
        //                                 TempAmt := 0;
        //                                 TestAmt := 0;
        //                                 /*
        //                                 IF ROUND(UnitPrcLOA*SIL.Quantity,1,'=') > ROUND(Inst_UnPlnnd_Amt,1,'=') THEN
        //                                 BEGIN
        //                                 */
        //                                 // install order on hand plan changes
        //                                 SQLQuery := 'select * from  MRP_ORDER_INSTALL_PLAN_CHANGES b,(select SALE_ORDER_ID,sl_no,max(plan_change_id) PlanChngId from ' +
        //                                             ' MRP_ORDER_INSTALL_PLAN_CHANGES where SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ' group by SALE_ORDER_ID,sl_no) a ' +
        //                                             ' where a.planchngid=b.plan_change_id and b.planned_amount > 0 order by payment_realize_date desc,planned_amount desc';
        //                                 //MESSAGE(SQLQuery);
        //                                 RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                                 IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                                     RecordSet.MoveFirst;
        //                                 TestAmt := 0;
        //                                 Enf := FALSE;
        //                                 //TestAmt := ROUND(UnitPrcLOA*SIL.Quantity,0.01) - Inst_UnPlnnd_Amt;
        //                                 TestAmt := ROUND(UnitPrcLOA * SIL.Quantity, 1, '=');
        //                                 WHILE NOT RecordSet.EOF AND (NOT Enf) AND (ROUND(TestAmt, 1, '=') > 0) DO BEGIN
        //                                     EVALUATE(TempAmt, FORMAT(RecordSet.Fields.Item('planned_amount').Value));
        //                                     IF (ROUND(TestAmt, 1, '=') >= ROUND(TempAmt, 1, '=')) THEN BEGIN
        //                                         SQLQuery := 'insert into MRP_ORDER_INSTALL_PLAN_CHANGES(PLAN_CHANGE_ID,SL_NO,SALE_ORDER_ID, ' +
        //                                                    ' PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,CREATION_DATE,USERID,INVOICE_ID) ' +
        //                                                    ' values((select nvl(max(PLAN_CHANGE_ID)+1,0) from MRP_ORDER_INSTALL_PLAN_CHANGES), ' +
        //                                                    DELCHR(FORMAT(RecordSet.Fields.Item('SL_NO').Value), '=', ',') + ', ' + DELCHR(FORMAT(RecordSet.Fields.Item('SALE_ORDER_ID').Value), '=', ',') +
        //                                                    ', sysdate, 0,sysdate,''Auto'', ' + DELCHR(FORMAT(NewInstInvoiceId), '=', ',') + ')';
        //                                         //MESSAGE(SQLQuery);
        //                                         SQLConnection.Execute(SQLQuery, RowCount);
        //                                         TestAmt := TestAmt - TempAmt;
        //                                     END ELSE BEGIN
        //                                         SQLQuery := 'select nvl(max(sl_no)+1,1) last_slno from MRP_ORDER_INSTALL_PLAN_CHANGES where SALE_ORDER_ID = ' +
        //                                                    DELCHR(FORMAT(RecordSet.Fields.Item('SALE_ORDER_ID').Value), '=', ',');
        //                                         //MESSAGE(SQLQuery);
        //                                         Last_Inst_OnHnd_Pln_Chgs_SLNO := 0;
        //                                         RecordSet1 := SQLConnection.Execute(SQLQuery, RowCount1);
        //                                         IF NOT ((RecordSet1.BOF) OR (RecordSet1.EOF)) THEN
        //                                             RecordSet1.MoveFirst;
        //                                         WHILE NOT RecordSet1.EOF DO BEGIN
        //                                             EVALUATE(Last_Inst_OnHnd_Pln_Chgs_SLNO, FORMAT(RecordSet1.Fields.Item('last_slno').Value));
        //                                             RowCount1 := RowCount1 + 1;
        //                                             RecordSet1.MoveNext;
        //                                         END;
        //                                         SQLQuery := 'insert into MRP_ORDER_INSTALL_PLAN_CHANGES(PLAN_CHANGE_ID,SL_NO,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT, ' +
        //                                                    ' CREATION_DATE,USERID) values((select nvl(max(PLAN_CHANGE_ID)+1,0) from MRP_ORDER_INSTALL_PLAN_CHANGES), ' +
        //                                                    DELCHR(FORMAT(Last_Inst_OnHnd_Pln_Chgs_SLNO), '=', ',') + ', ' + DELCHR(FORMAT(RecordSet.Fields.Item('SALE_ORDER_ID').Value), '=', ',') +
        //                                                    ', sysdate, ' + DELCHR(FORMAT(ROUND(TestAmt, 1, '=')), '=', ',') + ',sysdate,''Auto'')';
        //                                         //MESSAGE(SQLQuery);
        //                                         SQLConnection.Execute(SQLQuery, RowCount);
        //                                         SQLQuery := 'insert into MRP_ORDER_INSTALL_PLAN_CHANGES(PLAN_CHANGE_ID,SL_NO,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT, ' +
        //                                                    ' CREATION_DATE,USERID,INVOICE_ID) values((select nvl(max(PLAN_CHANGE_ID)+1,0) from MRP_ORDER_INSTALL_PLAN_CHANGES), ' +
        //                                                    DELCHR(FORMAT(Last_Inst_OnHnd_Pln_Chgs_SLNO), '=', ',') + ', ' + DELCHR(FORMAT(RecordSet.Fields.Item('SALE_ORDER_ID').Value), '=', ',') +
        //                                                    ', sysdate, 0,sysdate,''Auto'', ' + DELCHR(FORMAT(NewInstInvoiceId), '=', ',') + ')';
        //                                         //MESSAGE(SQLQuery);
        //                                         SQLConnection.Execute(SQLQuery, RowCount);
        //                                         SQLQuery := 'update MRP_ORDER_INSTALL_PLAN_CHANGES set PLANNED_AMOUNT = ' + DELCHR(FORMAT(ROUND(TempAmt - TestAmt, 1, '=')), '=', ',') +
        //                                                    ' where PLAN_CHANGE_ID = ' + DELCHR(FORMAT(RecordSet.Fields.Item('PLAN_CHANGE_ID').Value), '=', ',');
        //                                         //MESSAGE(SQLQuery);
        //                                         SQLConnection.Execute(SQLQuery, RowCount);
        //                                         Enf := TRUE;
        //                                     END;
        //                                     RowCount := RowCount + 1;
        //                                     RecordSet.MoveNext;
        //                                 END;
        //                                 //Inst_UnPlnnd_Amt:=0;
        //                                 //END ELSE Inst_UnPlnnd_Amt:=Inst_UnPlnnd_Amt-ROUND(UnitPrcLOA*SIL.Quantity,0.01);
        //                             END;
        //                         SQLQuery := 'update MRP_SALE_ORDER_LINES set billed_qty = billed_qty + ' + DELCHR(FORMAT(ROUND(SIL.Quantity, 0.01)), '=', ',') +
        //                                     ' where (sale_order_id = ' + FORMAT(SaleOrderId) + ' and line_no = ' + DELCHR(FORMAT(SIL."Order Line No."), '=', ',') +
        //                                     ' and item_no = ''' + SIL."No." + ''')';
        //                         //MESSAGE(SQLQuery);
        //                         SQLConnection.Execute(SQLQuery, RowCount);
        //                     UNTIL SIL.NEXT = 0;
        //         END;  // end--only if order is aft integration
        //     END ELSE
        //         ERROR('Sale Order Does not exist in CashFlow. Please release the order to forward the order to cashflow!');
        // END;
        // SQLConnection.CommitTrans;
        // RecordSet.Close;
        // SQLConnection.Close;
        // ConnectionOpen := 0;
        // MESSAGE('Sale Order Invoiced in Cashflow!');

    end;


    procedure testconnection();
    begin
        // MESSAGE('test connection!');
        // IF ISCLEAR(SQLConnection) THEN
        //     CREATE(SQLConnection, FALSE, TRUE);
        // /*
        // IF ISCLEAR(RecordSet) THEN
        //   CREATE(RecordSet,FALSE,TRUE);
        // */
        // IF ConnectionOpen <> 1 THEN BEGIN
        //     SQLConnection.ConnectionString := 'DSN=CASHFLOW;UID=cashflowuser;PASSWORD=firewall123;SERVER=oracle_80;';
        //     SQLConnection.Open;
        //     SQLConnection.BeginTrans;
        //     ConnectionOpen := 1;
        // END;

        // SQLConnection.CommitTrans;
        // //RecordSet.Close;
        // SQLConnection.Close;
        // ConnectionOpen := 0;
        // MESSAGE('Sale Order Invoiced in Cashflow!');

    end;


    procedure PvtAdvOrderPaymentinCF(GenJernlLine: Record "Gen. Journal Line");
    var
        AR_Paymnt_Id: Integer;
        SaleOrderId: Integer;
        SH: Record "Sales Header";
        Ordr_Tot_Amt: Decimal;
        Ordr_Sup_Amt: Decimal;
        Ordr_Ret_Amt: Decimal;
        Ordr_Inst_Amt: Decimal;
        Ord_Adv_Amt: Decimal;
        Tot_Inv_Amt: Decimal;
        Tot_Inst_Inv_Amt: Decimal;
        Ordr_PlnChanges_amt: Decimal;
        Inst_PlnChanges_Amt: Decimal;
        Tot_Adv_Paid_Amt: Decimal;
        Sup_UnPlnnd_Amt: Decimal;
        Ret_UnPlnnd_Amt: Decimal;
        Inst_UnPlnnd_Amt: Decimal;
        TempAmt: Decimal;
        Enf: Boolean;
        TestAmt: Decimal;
        LastOrdAdvId: Integer;
        temp_PlnAmt: Decimal;
        Is_Ordr_Aftr_Int: Code[10];
        CF_Ord_Adv_Amt: Decimal;
    begin
        // IF GenJernlLine."Payment Type" = GenJernlLine."Payment Type"::Advance THEN BEGIN
        //     SH.RESET;
        //     SH.SETRANGE(SH."No.", GenJernlLine."Sale Order No");
        //     IF SH.FINDFIRST THEN
        //         IF (SH."Customer Posting Group" IN ['PRIVATE', 'OTHERS', 'EXPORT']) AND NOT (SH."Sell-to Customer No." IN ['CUST00536', 'CUST01164']) AND (SH.Order_After_CF_Integration = TRUE) THEN BEGIN
        //             IF ISCLEAR(SQLConnection) THEN
        //                 CREATE(SQLConnection, FALSE, TRUE);

        //             IF ISCLEAR(RecordSet) THEN
        //                 CREATE(RecordSet, FALSE, TRUE);

        //             IF ConnectionOpen <> 1 THEN BEGIN
        //                 SQLConnection.ConnectionString := 'DSN=CASHFLOW;UID=cashflowuser;PASSWORD=firewall123;SERVER=oracle_80;';
        //                 SQLConnection.Open;
        //                 SQLConnection.BeginTrans;
        //                 ConnectionOpen := 1;
        //             END;
        //             SQLQuery := 'SELECT * FROM MRP_SALE_ORDER WHERE INT_SAL_ORD_NO = ''' + GenJernlLine."Sale Order No" + ''' AND STATUS = ''N''';
        //             //MESSAGE(SQLQuery);
        //             RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //             IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                 RecordSet.MoveFirst;
        //             WHILE NOT RecordSet.EOF DO BEGIN
        //                 SaleOrderId := RecordSet.Fields.Item('SALE_ORDER_ID').Value;
        //                 IF FORMAT(RecordSet.Fields.Item('IS_ORDR_AFT_INTEGRTION').Value) = '1' THEN
        //                     Is_Ordr_Aftr_Int := 'YES'
        //                 ELSE
        //                     Is_Ordr_Aftr_Int := 'NO';
        //                 IF FORMAT(RecordSet.Fields.Item('ADV_AMOUNT').Value) <> '' THEN
        //                     EVALUATE(CF_Ord_Adv_Amt, FORMAT(RecordSet.Fields.Item('ADV_AMOUNT').Value))
        //                 ELSE
        //                     CF_Ord_Adv_Amt := 0;
        //                 RowCount := RowCount + 1;
        //                 RecordSet.MoveNext;
        //             END;
        //             IF SaleOrderId <> 0 THEN BEGIN  // check if sale order present in sale order table in c/f then insert order
        //                 IF (Is_Ordr_Aftr_Int = 'YES') /*AND (CF_Ord_Adv_Amt > 0)*/ THEN BEGIN// only if order is aft integration
        //                     AR_Paymnt_Id := 0;
        //                     SQLQuery := 'SELECT * FROM MRP_ARR_PAYMENT WHERE SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ' AND ADVANCE_FLAG = 2';
        //                     RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                     IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                         RecordSet.MoveFirst;
        //                     WHILE NOT RecordSet.EOF DO BEGIN
        //                         AR_Paymnt_Id := RecordSet.Fields.Item('AR_PAYMENT_ID').Value;
        //                         RowCount := RowCount + 1;
        //                         RecordSet.MoveNext;
        //                     END;
        //                     // Start--update pln_changes amounts
        //                     Ordr_Tot_Amt := 0;
        //                     Ordr_Sup_Amt := 0;
        //                     Ordr_Ret_Amt := 0;
        //                     Ordr_Inst_Amt := 0;
        //                     Tot_Adv_Paid_Amt := 0;
        //                     SQLQuery := 'select nvl(sum(sale_order_amount),0) as tot_amt,nvl(sum(supplyamount),0) sup_amt, nvl(sum(retentionamount),0) ret_amt, ' +
        //                                'nvl(sum(installamount),0) inst_amt, nvl(sum(adv_amount),0) adv_amt from MRP_SALE_ORDER where sale_order_id = ' + FORMAT(SaleOrderId);
        //                     //MESSAGE(SQLQuery);
        //                     RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                     IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                         RecordSet.MoveFirst;
        //                     WHILE NOT RecordSet.EOF DO BEGIN
        //                         EVALUATE(Ordr_Tot_Amt, FORMAT(RecordSet.Fields.Item('tot_amt').Value));
        //                         EVALUATE(Ordr_Sup_Amt, FORMAT(RecordSet.Fields.Item('sup_amt').Value));
        //                         EVALUATE(Ord_Adv_Amt, FORMAT(RecordSet.Fields.Item('adv_amt').Value));
        //                         RowCount := RowCount + 1;
        //                         RecordSet.MoveNext;
        //                     END;
        //                     SQLQuery := 'select nvl(sum(amount),0) inv_amt from MRP_ARR_INVOICE where sale_order_id = ' + FORMAT(SaleOrderId);
        //                     //MESSAGE(SQLQuery);
        //                     RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                     IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                         RecordSet.MoveFirst;
        //                     WHILE NOT RecordSet.EOF DO BEGIN
        //                         EVALUATE(Tot_Inv_Amt, FORMAT(RecordSet.Fields.Item('inv_amt').Value));
        //                         RowCount := RowCount + 1;
        //                         RecordSet.MoveNext;
        //                     END;
        //                     SQLQuery := 'SELECT nvl(sum(amount),0) adv_paid_amt FROM MRP_ARR_PAYMENT WHERE SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ' AND ADVANCE_FLAG = 2';
        //                     //MESSAGE(SQLQuery);
        //                     RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                     IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                         RecordSet.MoveFirst;
        //                     WHILE NOT RecordSet.EOF DO BEGIN
        //                         EVALUATE(Tot_Adv_Paid_Amt, FORMAT(RecordSet.Fields.Item('adv_paid_amt').Value));
        //                         RowCount := RowCount + 1;
        //                         RecordSet.MoveNext;
        //                     END;
        //                     // order on hand plan changes amount
        //                     SQLQuery := 'select * from  MRP_ORDER_PLAN_CHANGES b,(select SALE_ORDER_ID,ord_advance_id,max(plan_change_id) PlanChngId ' +
        //                                 ' from MRP_ORDER_PLAN_CHANGES where SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ' group by SALE_ORDER_ID,ord_advance_id) a ' +
        //                                 ' where a.planchngid=b.plan_change_id and b.planned_amount > 0';
        //                     //MESSAGE(SQLQuery);
        //                     Ordr_PlnChanges_amt := 0;
        //                     temp_PlnAmt := 0;
        //                     RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                     IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                         RecordSet.MoveFirst;
        //                     WHILE NOT RecordSet.EOF DO BEGIN
        //                         temp_PlnAmt := 0;
        //                         EVALUATE(temp_PlnAmt, FORMAT(RecordSet.Fields.Item('planned_amount').Value));
        //                         Ordr_PlnChanges_amt := Ordr_PlnChanges_amt + temp_PlnAmt;
        //                         RowCount := RowCount + 1;
        //                         RecordSet.MoveNext;
        //                     END;
        //                     Sup_UnPlnnd_Amt := ROUND(Ordr_Sup_Amt + Ord_Adv_Amt - Tot_Adv_Paid_Amt - Ordr_PlnChanges_amt - Tot_Inv_Amt, 1, '=');
        //                     IF ROUND(Sup_UnPlnnd_Amt, 1, '=') < ABS(ROUND(GenJernlLine.Amount, 1, '=')) THEN BEGIN
        //                         // order on hand plan changes amount
        //                         SQLQuery := 'select * from  MRP_ORDER_PLAN_CHANGES b,(select SALE_ORDER_ID,ord_advance_id,max(plan_change_id) PlanChngId ' +
        //                                     ' from MRP_ORDER_PLAN_CHANGES where SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ' group by SALE_ORDER_ID,ord_advance_id) a ' +
        //                                     ' where a.planchngid=b.plan_change_id and b.planned_amount > 0 order by b.payment_realize_date desc,b.planned_amount desc';
        //                         //MESSAGE(SQLQuery);
        //                         RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                         IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                             RecordSet.MoveFirst;
        //                         TestAmt := 0;
        //                         Enf := FALSE;
        //                         TestAmt := ROUND(ABS(GenJernlLine.Amount) - Sup_UnPlnnd_Amt, 1, '=');
        //                         WHILE NOT RecordSet.EOF AND (NOT Enf) AND (ROUND(TestAmt, 1, '=') > 0) DO BEGIN
        //                             EVALUATE(TempAmt, FORMAT(RecordSet.Fields.Item('planned_amount').Value));
        //                             IF (ROUND(TestAmt, 1, '=') >= ROUND(TempAmt, 1, '=')) THEN BEGIN
        //                                 SQLQuery := 'insert into MRP_ORDER_PLAN_CHANGES(PLAN_CHANGE_ID,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,CREATION_DATE, ' +
        //                                            ' USERID,ORD_ADVANCE_ID) values(ORDER_PLANCHANGES_SEQ.NEXTVAL, ' + DELCHR(FORMAT(RecordSet.Fields.Item('SALE_ORDER_ID').Value), '=', ',') +
        //                                            ', sysdate, 0, sysdate, ''Auto'',' + DELCHR(FORMAT(RecordSet.Fields.Item('ORD_ADVANCE_ID').Value), '=', ',') + ')';
        //                                 //MESSAGE(SQLQuery);
        //                                 SQLConnection.Execute(SQLQuery, RowCount);

        //                                 SQLQuery := 'update mrp_arr_ord_advance set order_flag = 1 where ORD_ADVANCE_ID = ' + DELCHR(FORMAT(RecordSet.Fields.Item('ORD_ADVANCE_ID').Value), '=', ',');
        //                                 //MESSAGE(SQLQuery);
        //                                 SQLConnection.Execute(SQLQuery, RowCount);

        //                                 TestAmt := TestAmt - TempAmt;
        //                             END ELSE BEGIN
        //                                 SQLQuery := 'select nvl(ORD_ADVANCE_ID_SEQ.NEXTVAL,1) LastOrdAdvId from dual';
        //                                 RecordSet1 := SQLConnection.Execute(SQLQuery, RowCount1);
        //                                 IF NOT ((RecordSet1.BOF) OR (RecordSet1.EOF)) THEN
        //                                     RecordSet1.MoveFirst;
        //                                 WHILE NOT RecordSet1.EOF DO BEGIN
        //                                     EVALUATE(LastOrdAdvId, FORMAT(RecordSet1.Fields.Item('LastOrdAdvId').Value));
        //                                     RowCount1 := RowCount1 + 1;
        //                                     RecordSet1.MoveNext;
        //                                 END;
        //                                 SQLQuery := 'insert into mrp_arr_ord_advance(ORD_ADVANCE_ID,SALE_ORDER_ID,EXP_ADVANCE_AMOUNT,ACCTPERIOD, ' +
        //                                            ' ACCT_YEAR,EXP_RECEIVED_DATE,ACTINACT,ORDER_FLAG) values (' + DELCHR(FORMAT(LastOrdAdvId), '=', ',') + ', ' +
        //                                            DELCHR(FORMAT(RecordSet.Fields.Item('SALE_ORDER_ID').Value), '=', ',') + ',' + DELCHR(FORMAT(ROUND(ABS(TestAmt), 1, '=')), '=', ',') +
        //                                            ', (select ACCTPERIOD from mrp_arr_ord_advance where ORD_ADVANCE_ID = ' + DELCHR(FORMAT(RecordSet.Fields.Item('ORD_ADVANCE_ID').Value), '=', ',') +
        //                                            '), (select ACCT_YEAR from mrp_arr_ord_advance where ORD_ADVANCE_ID = ' + DELCHR(FORMAT(RecordSet.Fields.Item('ORD_ADVANCE_ID').Value), '=', ',') +
        //                                            '), (select EXP_RECEIVED_DATE from mrp_arr_ord_advance where ORD_ADVANCE_ID = ' + DELCHR(FORMAT(RecordSet.Fields.Item('ORD_ADVANCE_ID').Value), '=', ',') + '), 1, 1)';
        //                                 //MESSAGE(SQLQuery);
        //                                 SQLConnection.Execute(SQLQuery, RowCount);
        //                                 SQLQuery := 'insert into MRP_ORDER_PLAN_CHANGES(PLAN_CHANGE_ID,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,CREATION_DATE, ' +
        //                                            ' USERID,ORD_ADVANCE_ID) values(ORDER_PLANCHANGES_SEQ.NEXTVAL, ' + DELCHR(FORMAT(RecordSet.Fields.Item('SALE_ORDER_ID').Value), '=', ',') +
        //                                            ', sysdate, ' + DELCHR(FORMAT(ROUND(TestAmt, 1, '=')), '=', ',') + ', sysdate, ''Auto'',' + DELCHR(FORMAT(LastOrdAdvId), '=', ',') + ')';
        //                                 //MESSAGE(SQLQuery);
        //                                 SQLConnection.Execute(SQLQuery, RowCount);
        //                                 SQLQuery := 'insert into MRP_ORDER_PLAN_CHANGES(PLAN_CHANGE_ID,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,CREATION_DATE, ' +
        //                                            ' USERID,ORD_ADVANCE_ID) values(ORDER_PLANCHANGES_SEQ.NEXTVAL, ' + DELCHR(FORMAT(RecordSet.Fields.Item('SALE_ORDER_ID').Value), '=', ',') +
        //                                            ', sysdate, 0, sysdate, ''Auto'',' + DELCHR(FORMAT(LastOrdAdvId), '=', ',') + ')';
        //                                 //MESSAGE(SQLQuery);
        //                                 SQLConnection.Execute(SQLQuery, RowCount);

        //                                 SQLQuery := 'update MRP_ORDER_PLAN_CHANGES set PLANNED_AMOUNT = ' + DELCHR(FORMAT(ROUND(TempAmt - TestAmt, 1, '=')), '=', ',') +
        //                                            ' where PLAN_CHANGE_ID = ' + DELCHR(FORMAT(RecordSet.Fields.Item('PLAN_CHANGE_ID').Value), '=', ',');
        //                                 //MESSAGE(SQLQuery);
        //                                 SQLConnection.Execute(SQLQuery, RowCount);

        //                                 SQLQuery := 'update mrp_arr_ord_advance set EXP_ADVANCE_AMOUNT = ' + DELCHR(FORMAT(ROUND(TempAmt - TestAmt, 1, '=')), '=', ',') +
        //                                            ' where ORD_ADVANCE_ID = ' + DELCHR(FORMAT(RecordSet.Fields.Item('ORD_ADVANCE_ID').Value), '=', ',');
        //                                 //MESSAGE(SQLQuery);
        //                                 SQLConnection.Execute(SQLQuery, RowCount);
        //                                 Enf := TRUE;
        //                             END;
        //                             RowCount := RowCount + 1;
        //                             RecordSet.MoveNext;
        //                         END;  //End--order on hand pln chnges loop
        //                     END;
        //                     IF AR_Paymnt_Id <> 0 THEN BEGIN
        //                         SQLQuery := 'UPDATE MRP_ARR_PAYMENT SET AMOUNT = nvl(AMOUNT,0) + ' + DELCHR(FORMAT(ROUND(ABS(GenJernlLine.Amount), 1, '=')), '=', ',') +
        //                                    ' WHERE SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ' AND ADVANCE_FLAG = 2';
        //                         //MESSAGE(SQLQuery);
        //                         SQLConnection.Execute(SQLQuery);
        //                     END ELSE BEGIN
        //                         SQLQuery := 'insert into MRP_ARR_PAYMENT(AR_PAYMENT_ID,SALE_ORDER_ID,PAYMENT_DATE,AMOUNT,USERID,CREATION_DATE,ADVANCE_FLAG' +
        //                                    ') values(ARR_PAYMENT_SEQ.NEXTVAL,' + FORMAT(SaleOrderId) + ',to_date(''' + FORMAT(GenJernlLine."Posting Date", 0, '<Day>-<Month Text,3>-<Year4>') +
        //                                    ''',''dd-mon-yyyy''), ' + DELCHR(FORMAT(ABS(ROUND(GenJernlLine.Amount, 1, '='))), '=', ',') + ', ''Auto'', sysdate,2)';
        //                         //MESSAGE(SQLQuery);
        //                         SQLConnection.Execute(SQLQuery);
        //                     END;
        //                 END;  // end--only if order is aft integration
        //             END;
        //             SQLConnection.CommitTrans;
        //             //RecordSet.Close;
        //             SQLConnection.Close;
        //             ConnectionOpen := 0;
        //             //      MESSAGE('Sale Order Invoiced in Cashflow!');
        //         END;
        // END;

    end;


    procedure PvtAdvOrderPaymentinCF_1(GenJernlLine: Record "Gen. Journal Line");
    var
        AR_Paymnt_Id: Integer;
        SaleOrderId: Integer;
        SH: Record "Sales Header";
        Ordr_Tot_Amt: Decimal;
        Ordr_Sup_Amt: Decimal;
        Ordr_Ret_Amt: Decimal;
        Ordr_Inst_Amt: Decimal;
        Ord_Adv_Amt: Decimal;
        Tot_Inv_Amt: Decimal;
        Tot_Inst_Inv_Amt: Decimal;
        Ordr_PlnChanges_amt: Decimal;
        Inst_PlnChanges_Amt: Decimal;
        Tot_Adv_Paid_Amt: Decimal;
        Sup_UnPlnnd_Amt: Decimal;
        Ret_UnPlnnd_Amt: Decimal;
        Inst_UnPlnnd_Amt: Decimal;
        TempAmt: Decimal;
        Enf: Boolean;
        TestAmt: Decimal;
        LastOrdAdvId: Integer;
        temp_PlnAmt: Decimal;
        Is_Ordr_Aftr_Int: Code[10];
        CF_Ord_Adv_Amt: Decimal;
    begin
        // IF GenJernlLine."Payment Type" = GenJernlLine."Payment Type"::Advance THEN BEGIN
        //     SH.RESET;
        //     SH.SETRANGE(SH."No.", GenJernlLine."Sale Order No");
        //     IF SH.FINDFIRST THEN
        //         IF (SH."Customer Posting Group" IN ['PRIVATE', 'OTHERS', 'EXPORT']) AND NOT (SH."Sell-to Customer No." IN ['CUST00536', 'CUST01164']) AND (SH.Order_After_CF_Integration = TRUE) THEN BEGIN
        //             IF ISCLEAR(SQLConnection) THEN
        //                 CREATE(SQLConnection, FALSE, TRUE);

        //             IF ISCLEAR(RecordSet) THEN
        //                 CREATE(RecordSet, FALSE, TRUE);

        //             IF ConnectionOpen <> 1 THEN BEGIN
        //                 SQLConnection.ConnectionString := 'DSN=CASHFLOW;UID=cashflowuser;PASSWORD=firewall123;SERVER=oracle_80;';
        //                 SQLConnection.Open;
        //                 SQLConnection.BeginTrans;
        //                 ConnectionOpen := 1;
        //             END;
        //             SQLQuery := 'SELECT * FROM MRP_SALE_ORDER WHERE INT_SAL_ORD_NO = ''' + GenJernlLine."Sale Order No" + ''' AND STATUS = ''N''';
        //             //MESSAGE(SQLQuery);
        //             RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //             IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                 RecordSet.MoveFirst;
        //             WHILE NOT RecordSet.EOF DO BEGIN
        //                 SaleOrderId := RecordSet.Fields.Item('SALE_ORDER_ID').Value;
        //                 IF FORMAT(RecordSet.Fields.Item('IS_ORDR_AFT_INTEGRTION').Value) = '1' THEN
        //                     Is_Ordr_Aftr_Int := 'YES'
        //                 ELSE
        //                     Is_Ordr_Aftr_Int := 'NO';
        //                 IF FORMAT(RecordSet.Fields.Item('ADV_AMOUNT').Value) <> '' THEN
        //                     EVALUATE(CF_Ord_Adv_Amt, FORMAT(RecordSet.Fields.Item('ADV_AMOUNT').Value))
        //                 ELSE
        //                     CF_Ord_Adv_Amt := 0;
        //                 RowCount := RowCount + 1;
        //                 RecordSet.MoveNext;
        //             END;
        //             IF SaleOrderId <> 0 THEN BEGIN  // check if sale order present in sale order table in c/f then insert order
        //                 IF (Is_Ordr_Aftr_Int = 'YES') /*AND (CF_Ord_Adv_Amt > 0)*/ THEN BEGIN// only if order is aft integration
        //                                                                                      /*
        //                                                                                      AR_Paymnt_Id := 0;
        //                                                                                      SQLQuery:= 'SELECT * FROM MRP_ARR_PAYMENT WHERE SALE_ORDER_ID = '+FORMAT(SaleOrderId)+' AND ADVANCE_FLAG = 2';
        //                                                                                      RecordSet := SQLConnection.Execute(SQLQuery,RowCount);
        //                                                                                      IF NOT( (RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                                                                                        RecordSet.MoveFirst;
        //                                                                                      WHILE NOT RecordSet.EOF DO
        //                                                                                      BEGIN
        //                                                                                        AR_Paymnt_Id := RecordSet.Fields.Item('AR_PAYMENT_ID').Value;
        //                                                                                        RowCount:=RowCount+1;
        //                                                                                        RecordSet.MoveNext;
        //                                                                                      END;
        //                                                                                      */ // Commented By Pranavi on 06-Mar-2017 for not pay amount but place in today
        //                                                                                         // Start--update pln_changes amounts
        //                     Ordr_Tot_Amt := 0;
        //                     Ordr_Sup_Amt := 0;
        //                     Ordr_Ret_Amt := 0;
        //                     Ordr_Inst_Amt := 0;
        //                     Tot_Adv_Paid_Amt := 0;
        //                     SQLQuery := 'select nvl(sum(sale_order_amount),0) as tot_amt,nvl(sum(supplyamount),0) sup_amt, nvl(sum(retentionamount),0) ret_amt, ' +
        //                                'nvl(sum(installamount),0) inst_amt, nvl(sum(adv_amount),0) adv_amt from MRP_SALE_ORDER where sale_order_id = ' + FORMAT(SaleOrderId);
        //                     //MESSAGE(SQLQuery);
        //                     RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                     IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                         RecordSet.MoveFirst;
        //                     WHILE NOT RecordSet.EOF DO BEGIN
        //                         EVALUATE(Ordr_Tot_Amt, FORMAT(RecordSet.Fields.Item('tot_amt').Value));
        //                         EVALUATE(Ordr_Sup_Amt, FORMAT(RecordSet.Fields.Item('sup_amt').Value));
        //                         EVALUATE(Ord_Adv_Amt, FORMAT(RecordSet.Fields.Item('adv_amt').Value));
        //                         RowCount := RowCount + 1;
        //                         RecordSet.MoveNext;
        //                     END;
        //                     SQLQuery := 'select nvl(sum(amount),0) inv_amt from MRP_ARR_INVOICE where sale_order_id = ' + FORMAT(SaleOrderId);
        //                     //MESSAGE(SQLQuery);
        //                     RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                     IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                         RecordSet.MoveFirst;
        //                     WHILE NOT RecordSet.EOF DO BEGIN
        //                         EVALUATE(Tot_Inv_Amt, FORMAT(RecordSet.Fields.Item('inv_amt').Value));
        //                         RowCount := RowCount + 1;
        //                         RecordSet.MoveNext;
        //                     END;

        //                     SQLQuery := 'SELECT nvl(sum(amount),0) adv_paid_amt FROM MRP_ARR_PAYMENT WHERE SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ' AND ADVANCE_FLAG = 2';
        //                     //MESSAGE(SQLQuery);
        //                     temp_PlnAmt := 0;
        //                     RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                     IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                         RecordSet.MoveFirst;
        //                     WHILE NOT RecordSet.EOF DO BEGIN
        //                         temp_PlnAmt := 0;
        //                         EVALUATE(temp_PlnAmt, FORMAT(RecordSet.Fields.Item('adv_paid_amt').Value));
        //                         Tot_Adv_Paid_Amt := Tot_Adv_Paid_Amt + temp_PlnAmt;
        //                         RowCount := RowCount + 1;
        //                         RecordSet.MoveNext;
        //                     END;
        //                     //>>Added By Pranavi on 06-Mar-2017 for not pay amount but place in today
        //                     SQLQuery := 'select plan_change_id,sale_order_id,payment_realize_date,planned_amount,response_section,remarks,creation_date,userid,ord_advance_id,' +
        //                                 'invoice_id,plan_type,planchngid,plan_type from (' +
        //                                 'select * from  MRP_ORDER_PLAN_CHANGES b,(select max(plan_change_id) PlanChngId ' +
        //                                 ' from MRP_ORDER_PLAN_CHANGES where SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ' group by SALE_ORDER_ID,ord_advance_id) a ' +
        //                                 ' where a.planchngid=b.plan_change_id and b.planned_amount > 0) where plan_type = ''Auto Paid''';
        //                     //MESSAGE(SQLQuery);
        //                     Ordr_PlnChanges_amt := 0;
        //                     temp_PlnAmt := 0;
        //                     RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                     IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                         RecordSet.MoveFirst;
        //                     WHILE NOT RecordSet.EOF DO BEGIN
        //                         temp_PlnAmt := 0;
        //                         EVALUATE(temp_PlnAmt, FORMAT(RecordSet.Fields.Item('planned_amount').Value));
        //                         Tot_Adv_Paid_Amt := Tot_Adv_Paid_Amt + temp_PlnAmt;
        //                         RowCount := RowCount + 1;
        //                         RecordSet.MoveNext;
        //                     END;
        //                     //<<Added By Pranavi on 06-Mar-2017 for not pay amount but place in today
        //                     // order on hand plan changes amount
        //                     SQLQuery := 'select plan_change_id,sale_order_id,payment_realize_date,planned_amount,response_section,remarks,creation_date,userid,ord_advance_id,' +
        //                                 'invoice_id,plan_type,planchngid,plan_type from (' +
        //                                 'select * from  MRP_ORDER_PLAN_CHANGES b,(select max(plan_change_id) PlanChngId ' +
        //                                 ' from MRP_ORDER_PLAN_CHANGES where SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ' group by SALE_ORDER_ID,ord_advance_id) a ' +
        //                                 ' where a.planchngid=b.plan_change_id and b.planned_amount > 0) where (plan_type is null or plan_type <> ''Auto Paid'')';
        //                     //MESSAGE(SQLQuery);
        //                     Ordr_PlnChanges_amt := 0;
        //                     temp_PlnAmt := 0;
        //                     RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                     IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                         RecordSet.MoveFirst;
        //                     WHILE NOT RecordSet.EOF DO BEGIN
        //                         temp_PlnAmt := 0;
        //                         EVALUATE(temp_PlnAmt, FORMAT(RecordSet.Fields.Item('planned_amount').Value));
        //                         Ordr_PlnChanges_amt := Ordr_PlnChanges_amt + temp_PlnAmt;
        //                         RowCount := RowCount + 1;
        //                         RecordSet.MoveNext;
        //                     END;
        //                     Sup_UnPlnnd_Amt := ROUND(Ordr_Sup_Amt + Ord_Adv_Amt - Tot_Adv_Paid_Amt - Ordr_PlnChanges_amt - Tot_Inv_Amt, 1, '=');
        //                     IF ROUND(Sup_UnPlnnd_Amt, 1, '=') < ABS(ROUND(GenJernlLine.Amount, 1, '=')) THEN BEGIN
        //                         TestAmt := 0;
        //                         IF (ABS(ROUND(GenJernlLine.Amount, 1, '=')) > 0) AND (ROUND(Sup_UnPlnnd_Amt, 1, '=') > 0) THEN BEGIN
        //                             TestAmt := ROUND(Sup_UnPlnnd_Amt, 1, '=');
        //                             SQLQuery := 'select nvl(ORD_ADVANCE_ID_SEQ.NEXTVAL,1) LastOrdAdvId from dual';
        //                             RecordSet1 := SQLConnection.Execute(SQLQuery, RowCount1);
        //                             IF NOT ((RecordSet1.BOF) OR (RecordSet1.EOF)) THEN
        //                                 RecordSet1.MoveFirst;
        //                             WHILE NOT RecordSet1.EOF DO BEGIN
        //                                 EVALUATE(LastOrdAdvId, FORMAT(RecordSet1.Fields.Item('LastOrdAdvId').Value));
        //                                 RowCount1 := RowCount1 + 1;
        //                                 RecordSet1.MoveNext;
        //                             END;
        //                             ActPeriodActYearCalc(TODAY - 8);
        //                             PeriodNum := 0; // Added By Pranavi on 06-Mar-2017 for not pay amount but place in today
        //                             SQLQuery := 'insert into mrp_arr_ord_advance(ORD_ADVANCE_ID,SALE_ORDER_ID,EXP_ADVANCE_AMOUNT,ACCTPERIOD, ' +
        //                                        ' ACCT_YEAR,EXP_RECEIVED_DATE,ACTINACT,ORDER_FLAG) values (' + DELCHR(FORMAT(LastOrdAdvId), '=', ',') + ', ' +
        //                                        DELCHR(FORMAT(RecordSet.Fields.Item('SALE_ORDER_ID').Value), '=', ',') + ',' + DELCHR(FORMAT(ROUND(ABS(TestAmt), 1, '=')), '=', ',') +
        //                                        ', ' + DELCHR(FORMAT(PeriodNum), '=', ',') + ', ' + DELCHR(FORMAT(AccountYear), '=', ',') +
        //                                        ', (select EXP_RECEIVED_DATE from mrp_arr_ord_advance where ORD_ADVANCE_ID = ' + DELCHR(FORMAT(RecordSet.Fields.Item('ORD_ADVANCE_ID').Value), '=', ',') + '), 1, 0)';
        //                             // MESSAGE(SQLQuery);
        //                             SQLConnection.Execute(SQLQuery, RowCount);
        //                             SQLQuery := 'insert into MRP_ORDER_PLAN_CHANGES(PLAN_CHANGE_ID,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,CREATION_DATE, ' +
        //                                        ' USERID,ORD_ADVANCE_ID,PLAN_TYPE,REMARKS) values(ORDER_PLANCHANGES_SEQ.NEXTVAL, ' + DELCHR(FORMAT(RecordSet.Fields.Item('SALE_ORDER_ID').Value), '=', ',') +
        //                                        ', sysdate-8, ' + DELCHR(FORMAT(ROUND(TestAmt, 1, '=')), '=', ',') + ', sysdate, ''Auto'',' + DELCHR(FORMAT(LastOrdAdvId), '=', ',') + ', ''Auto Paid'', ''Amount Coming TODAY'')';
        //                             // MESSAGE(SQLQuery);
        //                             SQLConnection.Execute(SQLQuery, RowCount);
        //                         END;
        //                         // order on rhand plan changes amount
        //                         SQLQuery := 'select * from  MRP_ORDER_PLAN_CHANGES b,(select max(plan_change_id) PlanChngId ' +
        //                                     ' from MRP_ORDER_PLAN_CHANGES where SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ' group by SALE_ORDER_ID,ord_advance_id) a ' +
        //                                     ' where a.planchngid=b.plan_change_id and b.planned_amount > 0 and (b.plan_type is null or b.plan_type <> ''Auto Paid'') ' +
        //                                     ' order by b.payment_realize_date desc,b.planned_amount desc';
        //                         //MESSAGE(SQLQuery);
        //                         RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                         IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                             RecordSet.MoveFirst;
        //                         TestAmt := 0;
        //                         Enf := FALSE;
        //                         TestAmt := ROUND(ABS(GenJernlLine.Amount) - Sup_UnPlnnd_Amt, 1, '=');
        //                         WHILE NOT RecordSet.EOF AND (NOT Enf) AND (ROUND(TestAmt, 1, '=') > 0) DO BEGIN
        //                             EVALUATE(TempAmt, FORMAT(RecordSet.Fields.Item('planned_amount').Value));
        //                             IF (ROUND(TestAmt, 1, '=') >= ROUND(TempAmt, 1, '=')) THEN BEGIN
        //                                 /*
        //                                 SQLQuery:= 'insert into MRP_ORDER_PLAN_CHANGES(PLAN_CHANGE_ID,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,CREATION_DATE, '+
        //                                            ' USERID,ORD_ADVANCE_ID) values(ORDER_PLANCHANGES_SEQ.NEXTVAL, '+DELCHR(FORMAT(RecordSet.Fields.Item('SALE_ORDER_ID').Value),'=',',')+
        //                                            ', sysdate, 0, sysdate, ''Auto'','+DELCHR(FORMAT(RecordSet.Fields.Item('ORD_ADVANCE_ID').Value),'=',',')+')';
        //                                 */ // Commented By Pranavi on 06-Mar-2017 for not pay amount but place in today
        //                                 SQLQuery := 'insert into MRP_ORDER_PLAN_CHANGES(PLAN_CHANGE_ID,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,CREATION_DATE, ' +
        //                                            ' USERID,ORD_ADVANCE_ID,PLAN_TYPE,REMARKS) values(ORDER_PLANCHANGES_SEQ.NEXTVAL, ' + DELCHR(FORMAT(RecordSet.Fields.Item('SALE_ORDER_ID').Value), '=', ',') +
        //                                            ', sysdate-8, ' + DELCHR(FORMAT(TempAmt), '=', ',') + ', sysdate, ''Auto'',' + DELCHR(FORMAT(RecordSet.Fields.Item('ORD_ADVANCE_ID').Value), '=', ',') +
        //                                            ', ''Auto Paid'', ''Amount Coming TODAY'')';
        //                                 //<<Added By Pranavi on 06-Mar-2017 for not pay amount but place in today
        //                                 //MESSAGE(SQLQuery);
        //                                 SQLConnection.Execute(SQLQuery, RowCount);
        //                                 ActPeriodActYearCalc(TODAY - 8);
        //                                 PeriodNum := 0; // Added By Pranavi on 06-Mar-2017 for not pay amount but place in today
        //                                 SQLQuery := 'update mrp_arr_ord_advance set ACCTPERIOD = ' + DELCHR(FORMAT(PeriodNum), '=', ',') + ', ACCT_YEAR = ' + DELCHR(FORMAT(AccountYear), '=', ',') +
        //                                            ' where ORD_ADVANCE_ID = ' + DELCHR(FORMAT(RecordSet.Fields.Item('ORD_ADVANCE_ID').Value), '=', ',');
        //                                 SQLConnection.Execute(SQLQuery, RowCount);
        //                                 /*
        //                                 SQLQuery:= 'update mrp_arr_ord_advance set order_flag = 1 where ORD_ADVANCE_ID = '+DELCHR(FORMAT(RecordSet.Fields.Item('ORD_ADVANCE_ID').Value),'=',',');

        //                                 // MESSAGE(SQLQuery);
        //                                 SQLConnection.Execute(SQLQuery,RowCount);
        //                                 */ // Commented By Pranavi on 06-Mar-2017 for not pay amount but place in today
        //                                 TestAmt := TestAmt - TempAmt;
        //                             END ELSE BEGIN
        //                                 SQLQuery := 'select nvl(ORD_ADVANCE_ID_SEQ.NEXTVAL,1) LastOrdAdvId from dual';
        //                                 RecordSet1 := SQLConnection.Execute(SQLQuery, RowCount1);
        //                                 IF NOT ((RecordSet1.BOF) OR (RecordSet1.EOF)) THEN
        //                                     RecordSet1.MoveFirst;
        //                                 WHILE NOT RecordSet1.EOF DO BEGIN
        //                                     EVALUATE(LastOrdAdvId, FORMAT(RecordSet1.Fields.Item('LastOrdAdvId').Value));
        //                                     RowCount1 := RowCount1 + 1;
        //                                     RecordSet1.MoveNext;
        //                                 END;
        //                                 /*
        //                                 SQLQuery:= 'insert into mrp_arr_ord_advance(ORD_ADVANCE_ID,SALE_ORDER_ID,EXP_ADVANCE_AMOUNT,ACCTPERIOD, '+
        //                                            ' ACCT_YEAR,EXP_RECEIVED_DATE,ACTINACT,ORDER_FLAG) values ('+DELCHR(FORMAT(LastOrdAdvId),'=',',')+', '+
        //                                            DELCHR(FORMAT(RecordSet.Fields.Item('SALE_ORDER_ID').Value),'=',',')+','+DELCHR(FORMAT(ROUND(ABS(TestAmt),1,'=')),'=',',')+
        //                                            ', (select ACCTPERIOD from mrp_arr_ord_advance where ORD_ADVANCE_ID = '+DELCHR(FORMAT(RecordSet.Fields.Item('ORD_ADVANCE_ID').Value),'=',',')+
        //                                            '), (select ACCT_YEAR from mrp_arr_ord_advance where ORD_ADVANCE_ID = '+DELCHR(FORMAT(RecordSet.Fields.Item('ORD_ADVANCE_ID').Value),'=',',')+
        //                                            '), (select EXP_RECEIVED_DATE from mrp_arr_ord_advance where ORD_ADVANCE_ID = '+DELCHR(FORMAT(RecordSet.Fields.Item('ORD_ADVANCE_ID').Value),'=',',')+'), 1, 1)';
        //                                 */
        //                                 ActPeriodActYearCalc(TODAY - 8);
        //                                 PeriodNum := 0; // Added By Pranavi on 06-Mar-2017 for not pay amount but place in today
        //                                 SQLQuery := 'insert into mrp_arr_ord_advance(ORD_ADVANCE_ID,SALE_ORDER_ID,EXP_ADVANCE_AMOUNT,ACCTPERIOD, ' +
        //                                            ' ACCT_YEAR,EXP_RECEIVED_DATE,ACTINACT,ORDER_FLAG) values (' + DELCHR(FORMAT(LastOrdAdvId), '=', ',') + ', ' +
        //                                            DELCHR(FORMAT(RecordSet.Fields.Item('SALE_ORDER_ID').Value), '=', ',') + ',' + DELCHR(FORMAT(ROUND(ABS(TestAmt), 1, '=')), '=', ',') +
        //                                            ', ' + DELCHR(FORMAT(PeriodNum), '=', ',') + ', ' + DELCHR(FORMAT(AccountYear), '=', ',') +
        //                                            ', (select EXP_RECEIVED_DATE from mrp_arr_ord_advance where ORD_ADVANCE_ID = ' + DELCHR(FORMAT(RecordSet.Fields.Item('ORD_ADVANCE_ID').Value), '=', ',') + '), 1, 0)';

        //                                 // MESSAGE(SQLQuery);
        //                                 SQLConnection.Execute(SQLQuery, RowCount);
        //                                 SQLQuery := 'insert into MRP_ORDER_PLAN_CHANGES(PLAN_CHANGE_ID,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,CREATION_DATE, ' +
        //                                            ' USERID,ORD_ADVANCE_ID,PLAN_TYPE,REMARKS) values(ORDER_PLANCHANGES_SEQ.NEXTVAL, ' + DELCHR(FORMAT(RecordSet.Fields.Item('SALE_ORDER_ID').Value), '=', ',') +
        //                                            ', sysdate-8, ' + DELCHR(FORMAT(ROUND(TestAmt, 1, '=')), '=', ',') + ', sysdate, ''Auto'',' + DELCHR(FORMAT(LastOrdAdvId), '=', ',') + ', ''Auto Paid'', ''Amount Coming TODAY'')';
        //                                 // MESSAGE(SQLQuery);
        //                                 SQLConnection.Execute(SQLQuery, RowCount);
        //                                 /*
        //                                 SQLQuery:= 'insert into MRP_ORDER_PLAN_CHANGES(PLAN_CHANGE_ID,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,CREATION_DATE, '+
        //                                            ' USERID,ORD_ADVANCE_ID) values(ORDER_PLANCHANGES_SEQ.NEXTVAL, '+DELCHR(FORMAT(RecordSet.Fields.Item('SALE_ORDER_ID').Value),'=',',')+
        //                                            ', sysdate, 0, sysdate, ''Auto'','+DELCHR(FORMAT(LastOrdAdvId),'=',',')+')';
        //                                 //MESSAGE(SQLQuery);
        //                                 SQLConnection.Execute(SQLQuery,RowCount);
        //                                 */ // Commented By Pranavi on 06-Mar-2017 for not pay amount but place in today
        //                                 SQLQuery := 'update MRP_ORDER_PLAN_CHANGES set PLANNED_AMOUNT = ' + DELCHR(FORMAT(ROUND(TempAmt - TestAmt, 1, '=')), '=', ',') +
        //                                            ' where PLAN_CHANGE_ID = ' + DELCHR(FORMAT(RecordSet.Fields.Item('PLAN_CHANGE_ID').Value), '=', ',');
        //                                 //MESSAGE(SQLQuery);
        //                                 SQLConnection.Execute(SQLQuery, RowCount);

        //                                 SQLQuery := 'update mrp_arr_ord_advance set EXP_ADVANCE_AMOUNT = ' + DELCHR(FORMAT(ROUND(TempAmt - TestAmt, 1, '=')), '=', ',') +
        //                                            ' where ORD_ADVANCE_ID = ' + DELCHR(FORMAT(RecordSet.Fields.Item('ORD_ADVANCE_ID').Value), '=', ',');
        //                                 //MESSAGE(SQLQuery);
        //                                 SQLConnection.Execute(SQLQuery, RowCount);
        //                                 Enf := TRUE;
        //                             END;
        //                             RowCount := RowCount + 1;
        //                             RecordSet.MoveNext;
        //                         END;  //End--order on hand pln chnges loop
        //                     END ELSE BEGIN
        //                         SQLQuery := 'select nvl(ORD_ADVANCE_ID_SEQ.NEXTVAL,1) LastOrdAdvId from dual';
        //                         RecordSet1 := SQLConnection.Execute(SQLQuery, RowCount1);
        //                         IF NOT ((RecordSet1.BOF) OR (RecordSet1.EOF)) THEN
        //                             RecordSet1.MoveFirst;
        //                         WHILE NOT RecordSet1.EOF DO BEGIN
        //                             EVALUATE(LastOrdAdvId, FORMAT(RecordSet1.Fields.Item('LastOrdAdvId').Value));
        //                             RowCount1 := RowCount1 + 1;
        //                             RecordSet1.MoveNext;
        //                         END;
        //                         ActPeriodActYearCalc(TODAY - 8);
        //                         PeriodNum := 0; // Added By Pranavi on 06-Mar-2017 for not pay amount but place in today
        //                         SQLQuery := 'insert into mrp_arr_ord_advance(ORD_ADVANCE_ID,SALE_ORDER_ID,EXP_ADVANCE_AMOUNT,ACCTPERIOD, ' +
        //                                    ' ACCT_YEAR,EXP_RECEIVED_DATE,ACTINACT,ORDER_FLAG) values (' + DELCHR(FORMAT(LastOrdAdvId), '=', ',') + ', ' +
        //                                    DELCHR(FORMAT(RecordSet.Fields.Item('SALE_ORDER_ID').Value), '=', ',') + ',' + DELCHR(FORMAT(ROUND(ABS(GenJernlLine.Amount), 1, '=')), '=', ',') +
        //                                    ', ' + DELCHR(FORMAT(PeriodNum), '=', ',') + ', ' + DELCHR(FORMAT(AccountYear), '=', ',') +
        //                                    ', (select EXP_RECEIVED_DATE from mrp_arr_ord_advance where ORD_ADVANCE_ID = ' + DELCHR(FORMAT(RecordSet.Fields.Item('ORD_ADVANCE_ID').Value), '=', ',') + '), 1, 0)';
        //                         // MESSAGE(SQLQuery);
        //                         SQLConnection.Execute(SQLQuery, RowCount);
        //                         SQLQuery := 'insert into MRP_ORDER_PLAN_CHANGES(PLAN_CHANGE_ID,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,CREATION_DATE, ' +
        //                                    ' USERID,ORD_ADVANCE_ID,PLAN_TYPE,REMARKS) values(ORDER_PLANCHANGES_SEQ.NEXTVAL, ' + DELCHR(FORMAT(RecordSet.Fields.Item('SALE_ORDER_ID').Value), '=', ',') +
        //                                    ', sysdate-8, ' + DELCHR(FORMAT(ROUND(GenJernlLine.Amount, 1, '=')), '=', ',') + ', sysdate, ''Auto'',' + DELCHR(FORMAT(LastOrdAdvId), '=', ',') + ', ''Auto Paid'', ''Amount Coming TODAY'')';
        //                         // MESSAGE(SQLQuery);
        //                         SQLConnection.Execute(SQLQuery, RowCount);
        //                     END;
        //                     /*
        //                     IF AR_Paymnt_Id <> 0 THEN BEGIN
        //                       SQLQuery:= 'UPDATE MRP_ARR_PAYMENT SET AMOUNT = nvl(AMOUNT,0) + '+DELCHR(FORMAT(ROUND(ABS(GenJernlLine.Amount),1,'=')),'=',',')+
        //                                  ' WHERE SALE_ORDER_ID = '+FORMAT(SaleOrderId)+' AND ADVANCE_FLAG = 2';
        //                       //MESSAGE(SQLQuery);
        //                       SQLConnection.Execute(SQLQuery);
        //                     END ELSE BEGIN
        //                       SQLQuery:= 'insert into MRP_ARR_PAYMENT(AR_PAYMENT_ID,SALE_ORDER_ID,PAYMENT_DATE,AMOUNT,USERID,CREATION_DATE,ADVANCE_FLAG'+
        //                                  ') values(ARR_PAYMENT_SEQ.NEXTVAL,'+FORMAT(SaleOrderId)+',to_date('''+FORMAT(GenJernlLine."Posting Date",0,'<Day>-<Month Text,3>-<Year4>')+
        //                                  ''',''dd-mon-yyyy''), '+DELCHR(FORMAT(ABS(ROUND(GenJernlLine.Amount,1,'='))),'=',',')+', ''Auto'', sysdate,2)';
        //                       //MESSAGE(SQLQuery);
        //                       SQLConnection.Execute(SQLQuery);
        //                     END;
        //                     */ // Commented By Pranavi on 06-Mar-2017 for not pay amount but place in today
        //                 END;  // end--only if order is aft integration
        //             END;
        //             SQLConnection.CommitTrans;
        //             //RecordSet.Close;
        //             SQLConnection.Close;
        //             ConnectionOpen := 0;
        //             //      MESSAGE('Sale Order Invoiced in Cashflow!');
        //         END;
        // END;

    end;


    procedure PvtOrderInvoicePaymentInCF(CLE: Record "Cust. Ledger Entry"; Amount: Decimal);
    var
        SIH: Record "Sales Invoice Header";
        SH: Record "Sales Header";
        SaleOrderId: Integer;
        SIL: Record "Sales Invoice Line";
        SL: Record "Sales Line";
        PT: Record "Payment Terms";
        PlndAmnt: Decimal;
        TotPlndAmnt: Decimal;
        Pay_Amount: Decimal;
        PaymentId: Integer;
        Temp_SL_No: Integer;
        Is_Ordr_Aftr_Int: Code[10];
        Tot_Inv_Amt: Decimal;
        InvAmt: Decimal;
        InvPayAmt: Decimal;
        Tot_InvPayAmt: Decimal;
        Tot_Recvbl_Amt: Decimal;
        Tol_Inst_Recvbl_Amt: Decimal;
        Tot_Recvbl_PlndAmnt: Decimal;
        TotInst_Recvbl_PlndAmnt: Decimal;
        InvoiceAmt: Decimal;
        PlnndAmt: Decimal;
        temppp_amt: Decimal;
        Adv_Cons_Amt: Decimal;
        Tmp_UnitPrice: Decimal;
        Tmp_Adv_Perct: Decimal;
        Tmp_Inv_Qty: Decimal;
        Tmp_Inv_Adv_Amt: Decimal;
        tmp_invamt: Decimal;
        Tmp_Nxt_Inv_Amt: Decimal;
        TmpInvAmt: Decimal;
        Tmp_InvPayAmt: Decimal;
        Tmp_Tot_InvPayAmt: Decimal;
        Tmp_Aply_Amt: Decimal;
        Tmp_Aply_Amt_Tot: Decimal;
        Paid_Amt: Decimal;
        Inst_Paid_Amt: Decimal;
    begin
        //  MESSAGE('Invoice Payment In CashFlow!');



        // IF (ROUND(Amount, 1, '=') > 0) AND NOT (CLE."Customer No." IN ['CUST00536', 'CUST01164']) AND (CLE."Customer Posting Group" IN ['PRIVATE', 'OTHERS', 'EXPORT']) THEN BEGIN // if posting grp is private
        //     SIH.RESET;
        //     SIH.SETRANGE(SIH."No.", CLE."Document No.");
        //     IF SIH.FINDFIRST THEN    // if invoice found in erp
        //     BEGIN

        //         reurn_due_days := 0;
        //         reurn_due_days := payment_terms_based_amount_to_cfl(SIH."Order No.", SIH."External Document No.", SIH."Posting Date"); // added by sujani for amount displaying avoidance in TODAY in Cashflow
        //         payment_Realization_Date := SIH."Posting Date" + reurn_due_days; // added by sujani for amount displaying avoidance in TODAY in Cashflow

        //         IF ISCLEAR(SQLConnection) THEN
        //             CREATE(SQLConnection, FALSE, TRUE);

        //         IF ISCLEAR(RecordSet) THEN
        //             CREATE(RecordSet, FALSE, TRUE);

        //         IF ISCLEAR(RecordSet1) THEN
        //             CREATE(RecordSet1, FALSE, TRUE);

        //         IF ConnectionOpen <> 1 THEN BEGIN
        //             SQLConnection.ConnectionString := 'DSN=CASHFLOW;UID=cashflowuser;PASSWORD=firewall123;SERVER=oracle_80;';
        //             SQLConnection.Open;
        //             SQLConnection.BeginTrans;
        //             ConnectionOpen := 1;
        //         END;

        //         SQLQuery := 'SELECT * FROM MRP_SALE_ORDER WHERE INT_SAL_ORD_NO = ''' + SIH."Order No." + ''' AND STATUS = ''N''';
        //         //MESSAGE(SQLQuery);
        //         RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //         IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //             RecordSet.MoveFirst;
        //         WHILE NOT RecordSet.EOF DO BEGIN
        //             SaleOrderId := RecordSet.Fields.Item('SALE_ORDER_ID').Value;
        //             IF FORMAT(RecordSet.Fields.Item('IS_ORDR_AFT_INTEGRTION').Value) = '1' THEN
        //                 Is_Ordr_Aftr_Int := 'YES'
        //             ELSE
        //                 Is_Ordr_Aftr_Int := 'NO';
        //             RowCount := RowCount + 1;
        //             RecordSet.MoveNext;
        //         END;
        //         IF SaleOrderId <> 0 THEN BEGIN  // check if sale order present in sale order table in cf
        //             IF Is_Ordr_Aftr_Int = 'YES' THEN  // only if order is aft integration
        //             BEGIN
        //                 IF COPYSTR(SIH."External Document No.", 1, 2) <> 'IN' THEN BEGIN
        //                     TotPlndAmnt := 0;
        //                     Tot_Inv_Amt := 0;
        //                     Tot_Recvbl_Amt := 0;
        //                     Tol_Inst_Recvbl_Amt := 0;
        //                     Tot_Recvbl_PlndAmnt := 0;
        //                     TotInst_Recvbl_PlndAmnt := 0;
        //                     SQLQuery := 'select * from MRP_ARR_INVOICE where SALE_ORDER_ID  = ' + FORMAT(SaleOrderId) + ' and INVOICE_DATE = to_date(''' +
        //                                 FORMAT(SIH."Posting Date", 0, '<Day>-<Month Text,3>-<Year4>') +
        //                                 ''',''dd-mon-yyyy'') and ERP_INVOICE_NO = ''' + DELCHR(SIH."External Document No.", '=', ',') + ''' order by LINE_NO,AR_INVOICE_ID';
        //                     //MESSAGE(SQLQuery);
        //                     RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                     IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                         RecordSet.MoveFirst;
        //                     WHILE NOT RecordSet.EOF DO BEGIN
        //                         InvAmt := 0;
        //                         EVALUATE(InvAmt, FORMAT(RecordSet.Fields.Item('amount').Value));
        //                         SQLQuery := 'select * from  MRP_PLAN_CHANGES b, (select SALE_ORDER_ID,sl_no,max(plan_change_id) PlanChngId from MRP_PLAN_CHANGES where ' +
        //                                    ' SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ' and invoice_id = ' + DELCHR(FORMAT(RecordSet.Fields.Item('AR_INVOICE_ID').Value), '=', ',') + ' ' +
        //                                    ' group by SALE_ORDER_ID,sl_no) a where a.planchngid=b.plan_change_id and b.planned_amount > 0';
        //                         //MESSAGE(SQLQuery);
        //                         RecordSet1 := SQLConnection.Execute(SQLQuery, RowCount1);
        //                         PlndAmnt := 0;
        //                         IF NOT ((RecordSet1.BOF) OR (RecordSet1.EOF)) THEN
        //                             RecordSet1.MoveFirst;
        //                         WHILE NOT RecordSet1.EOF DO BEGIN
        //                             PlndAmnt := 0;
        //                             EVALUATE(PlndAmnt, FORMAT(RecordSet1.Fields.Item('planned_amount').Value));
        //                             TotPlndAmnt := TotPlndAmnt + PlndAmnt;
        //                             Tot_Recvbl_PlndAmnt := Tot_Recvbl_PlndAmnt + PlndAmnt;
        //                             RowCount1 := RowCount1 + 1;
        //                             RecordSet1.MoveNext;
        //                         END;
        //                         SQLQuery := 'select nvl(sum(PLANNED_AMOUNT),0) PLANNED_AMOUNT from MRP_PLAN_CHANGES where PLAN_CHANGE_ID in ( ' +
        //                                    'select  max(pl.PLAN_CHANGE_ID) from  MRP_PLAN_CHANGES pl ,(select sl_no,SALE_ORDER_ID,PLAN_CHANGE_ID ' +
        //                                    'from MRP_PLAN_CHANGES pl1 where planned_amount= 0  and payment_id is not null and invoice_id = ' +
        //                                    DELCHR(FORMAT(RecordSet.Fields.Item('AR_INVOICE_ID').Value), '=', ',') + ' and SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ') a ' +
        //                                    'where  a.sl_no=pl.sl_no and pl.PLAN_CHANGE_ID < a.PLAN_CHANGE_ID and a.SALE_ORDER_ID=pl.SALE_ORDER_ID) ';
        //                         //MESSAGE(SQLQuery);
        //                         RecordSet1 := SQLConnection.Execute(SQLQuery, RowCount1);
        //                         InvPayAmt := 0;
        //                         Tot_InvPayAmt := 0;
        //                         IF NOT ((RecordSet1.BOF) OR (RecordSet1.EOF)) THEN
        //                             RecordSet1.MoveFirst;
        //                         WHILE NOT RecordSet1.EOF DO BEGIN
        //                             InvPayAmt := 0;
        //                             EVALUATE(InvPayAmt, FORMAT(RecordSet1.Fields.Item('planned_amount').Value));
        //                             Tot_InvPayAmt := Tot_InvPayAmt + InvPayAmt;
        //                             RowCount1 := RowCount1 + 1;
        //                             RecordSet1.MoveNext;
        //                         END;
        //                         Tot_Inv_Amt := Tot_Inv_Amt + InvAmt - Tot_InvPayAmt;
        //                         Tot_Recvbl_Amt := Tot_Recvbl_Amt + InvAmt - Tot_InvPayAmt;
        //                         RowCount := RowCount + 1;
        //                         RecordSet.MoveNext;
        //                     END;
        //                     SQLQuery := 'select * from MRP_ARR_INSTALL_INVOICE where SALE_ORDER_ID  = ' + FORMAT(SaleOrderId) + ' and INVOICE_DATE = to_date(''' +
        //                                 FORMAT(SIH."Posting Date", 0, '<Day>-<Month Text,3>-<Year4>') + ''',''dd-mon-yyyy'') and ERP_INVOICE_NO = ''' +
        //                                 DELCHR(SIH."External Document No.", '=', ',') + ''' and AMOUNTTYPE = ''R'' and amount is not null order by LINE_NO,AR_INVOICE_ID';
        //                     //MESSAGE(SQLQuery);
        //                     RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                     IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                         RecordSet.MoveFirst;
        //                     WHILE NOT RecordSet.EOF DO BEGIN   // invoice loop
        //                         InvAmt := 0;
        //                         EVALUATE(InvAmt, FORMAT(RecordSet.Fields.Item('amount').Value));
        //                         SQLQuery := 'select * from  MRP_INSTAL_PLAN_CHANGES b,(select SALE_ORDER_ID,sl_no,max(plan_change_id) PlanChngId from MRP_INSTAL_PLAN_CHANGES where ' +
        //                                    ' SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ' and invoice_id =' + DELCHR(FORMAT(RecordSet.Fields.Item('AR_INVOICE_ID').Value), '=', ',') +
        //                                    ' group by SALE_ORDER_ID,sl_no) a where a.planchngid=b.plan_change_id and b.planned_amount > 0';
        //                         //MESSAGE(SQLQuery);
        //                         RecordSet1 := SQLConnection.Execute(SQLQuery, RowCount1);
        //                         PlndAmnt := 0;
        //                         IF NOT ((RecordSet1.BOF) OR (RecordSet1.EOF)) THEN
        //                             RecordSet1.MoveFirst;
        //                         WHILE NOT RecordSet1.EOF DO BEGIN   // begin of instl pln changes loop
        //                             PlndAmnt := 0;
        //                             EVALUATE(PlndAmnt, FORMAT(RecordSet1.Fields.Item('planned_amount').Value));
        //                             TotPlndAmnt := TotPlndAmnt + PlndAmnt;
        //                             TotInst_Recvbl_PlndAmnt := TotInst_Recvbl_PlndAmnt + PlndAmnt;
        //                             RowCount1 := RowCount1 + 1;
        //                             RecordSet1.MoveNext;
        //                         END;
        //                         SQLQuery := 'select nvl(sum(PLANNED_AMOUNT),0) PLANNED_AMOUNT   from MRP_INSTAL_PLAN_CHANGES where PLAN_CHANGE_ID in ( ' +
        //                                    'select  max(pl.PLAN_CHANGE_ID) from  MRP_INSTAL_PLAN_CHANGES pl ,(select sl_no,SALE_ORDER_ID,PLAN_CHANGE_ID ' +
        //                                    'from MRP_INSTAL_PLAN_CHANGES pl1 where planned_amount= 0  and payment_id is not null and invoice_id = ' +
        //                                    DELCHR(FORMAT(RecordSet.Fields.Item('AR_INVOICE_ID').Value), '=', ',') + ' and SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ') a ' +
        //                                    'where  a.sl_no=pl.sl_no and pl.PLAN_CHANGE_ID < a.PLAN_CHANGE_ID and a.SALE_ORDER_ID=pl.SALE_ORDER_ID) ';
        //                         //MESSAGE(SQLQuery);
        //                         RecordSet1 := SQLConnection.Execute(SQLQuery, RowCount1);
        //                         InvPayAmt := 0;
        //                         Tot_InvPayAmt := 0;
        //                         IF NOT ((RecordSet1.BOF) OR (RecordSet1.EOF)) THEN
        //                             RecordSet1.MoveFirst;
        //                         WHILE NOT RecordSet1.EOF DO BEGIN
        //                             InvPayAmt := 0;
        //                             EVALUATE(InvPayAmt, FORMAT(RecordSet1.Fields.Item('planned_amount').Value));
        //                             Tot_InvPayAmt := Tot_InvPayAmt + InvPayAmt;
        //                             RowCount1 := RowCount1 + 1;
        //                             RecordSet1.MoveNext;
        //                         END;
        //                         Tot_Inv_Amt := Tot_Inv_Amt + InvAmt - Tot_InvPayAmt;
        //                         Tol_Inst_Recvbl_Amt := Tol_Inst_Recvbl_Amt + InvAmt - Tot_InvPayAmt;
        //                         RowCount := RowCount + 1;
        //                         RecordSet.MoveNext;
        //                     END;
        //                     /*
        //                     IF Tot_Inv_Amt > 0 THEN BEGIN
        //                       IF (Tot_Inv_Amt >= Amount) THEN
        //                         Pay_Amount := Amount
        //                       ELSE
        //                         Pay_Amount := Tot_Inv_Amt;
        //                     END ELSE
        //                       Pay_Amount := 0;
        //                     */
        //                     IF Tot_Recvbl_Amt + Tol_Inst_Recvbl_Amt > 0 THEN BEGIN
        //                         IF (Tot_Recvbl_Amt + Tol_Inst_Recvbl_Amt >= Amount) THEN BEGIN
        //                             Pay_Amount := Amount;
        //                             Amount := 0;
        //                         END
        //                         ELSE BEGIN
        //                             Pay_Amount := Tot_Recvbl_Amt + Tol_Inst_Recvbl_Amt;
        //                             Amount := Amount - Pay_Amount;
        //                         END;
        //                     END ELSE
        //                         Pay_Amount := 0;

        //                     IF ROUND(Pay_Amount, 1, '=') > 0 THEN BEGIN
        //                         SQLQuery := 'select nvl(ARR_PAYMENT_SEQ.NEXTVAL,1) payid from dual';
        //                         //MESSAGE(SQLQuery);
        //                         RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                         IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                             RecordSet.MoveFirst;
        //                         WHILE NOT RecordSet.EOF DO BEGIN
        //                             EVALUATE(PaymentId, FORMAT(RecordSet.Fields.Item('payid').Value));
        //                             RowCount := RowCount + 1;
        //                             RecordSet.MoveNext;
        //                         END;
        //                         // insert payment record
        //                         SQLQuery := 'insert into MRP_ARR_PAYMENT(AR_PAYMENT_ID,SALE_ORDER_ID,PAYMENT_DATE,AMOUNT,USERID,CREATION_DATE) values(' + FORMAT(PaymentId) + ', ' +
        //                                    FORMAT(SaleOrderId) + ', to_date(''' + FORMAT(CLE."Posting Date", 0, '<Day>-<Month Text,3>-<Year4>') + ''',''dd-mon-yyyy''),' +
        //                                    DELCHR(FORMAT(ROUND(Pay_Amount, 1, '=')), '=', ',') + ', ''Auto'', sysdate)';
        //                         //MESSAGE(SQLQuery);
        //                         SQLConnection.Execute(SQLQuery);

        //                         SQLQuery := 'select * from MRP_ARR_INVOICE where SALE_ORDER_ID  = ' + FORMAT(SaleOrderId) + ' and INVOICE_DATE = to_date(''' +
        //                                     FORMAT(SIH."Posting Date", 0, '<Day>-<Month Text,3>-<Year4>') +
        //                                     ''',''dd-mon-yyyy'') and ERP_INVOICE_NO = ''' + DELCHR(SIH."External Document No.", '=', ',') + ''' order by LINE_NO,AR_INVOICE_ID';
        //                         //MESSAGE(SQLQuery);
        //                         RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                         IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                             RecordSet.MoveFirst;
        //                         WHILE NOT RecordSet.EOF DO BEGIN   // invoice loop
        //                             InvoiceAmt := 0;
        //                             Adv_Cons_Amt := 0;
        //                             Tmp_UnitPrice := 0;
        //                             Tmp_Adv_Perct := 0;
        //                             Tmp_Inv_Qty := 0;
        //                             Tmp_Inv_Adv_Amt := 0;
        //                             IF FORMAT(RecordSet.Fields.Item('amount').Value) <> '' THEN
        //                                 EVALUATE(InvoiceAmt, FORMAT(RecordSet.Fields.Item('amount').Value))
        //                             ELSE
        //                                 InvoiceAmt := 0;
        //                             //EVALUATE(InvoiceAmt,FORMAT(RecordSet.Fields.Item('amount').Value));
        //                             IF FORMAT(RecordSet.Fields.Item('ADV_AMOUNT_CONSIDERED').Value) <> '' THEN
        //                                 EVALUATE(Adv_Cons_Amt, FORMAT(RecordSet.Fields.Item('ADV_AMOUNT_CONSIDERED').Value))
        //                             ELSE
        //                                 Adv_Cons_Amt := 0;
        //                             SQLQuery := 'select nvl(sum(PLANNED_AMOUNT),0) PLANNED_AMOUNT from MRP_PLAN_CHANGES where PLAN_CHANGE_ID in ( ' +
        //                                        'select  max(pl.PLAN_CHANGE_ID) from  MRP_PLAN_CHANGES pl ,(select sl_no,SALE_ORDER_ID,PLAN_CHANGE_ID ' +
        //                                        'from MRP_PLAN_CHANGES pl1 where planned_amount= 0  and payment_id is not null and invoice_id = ' +
        //                                        DELCHR(FORMAT(RecordSet.Fields.Item('AR_INVOICE_ID').Value), '=', ',') + ' and SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ') a ' +
        //                                        'where  a.sl_no=pl.sl_no and pl.PLAN_CHANGE_ID < a.PLAN_CHANGE_ID and a.SALE_ORDER_ID=pl.SALE_ORDER_ID) ';
        //                             //MESSAGE(SQLQuery);
        //                             RecordSet1 := SQLConnection.Execute(SQLQuery, RowCount1);
        //                             InvPayAmt := 0;
        //                             Tot_InvPayAmt := 0;
        //                             IF NOT ((RecordSet1.BOF) OR (RecordSet1.EOF)) THEN
        //                                 RecordSet1.MoveFirst;
        //                             WHILE NOT RecordSet1.EOF DO BEGIN
        //                                 InvPayAmt := 0;
        //                                 EVALUATE(InvPayAmt, FORMAT(RecordSet1.Fields.Item('planned_amount').Value));
        //                                 Tot_InvPayAmt := Tot_InvPayAmt + InvPayAmt;
        //                                 RowCount1 := RowCount1 + 1;
        //                                 RecordSet1.MoveNext;
        //                             END;
        //                             InvoiceAmt := InvoiceAmt - Tot_InvPayAmt;
        //                             SQLQuery := 'select nvl(unit_price,0) unit_price,nvl(advance_percntg,0) advance_percntg from mrp_sale_order_lines where sale_order_id = ' +
        //                                         FORMAT(SaleOrderId) + ' and LINE_NO = ' + DELCHR(FORMAT(RecordSet.Fields.Item('LINE_NO').Value), '=', ',');
        //                             //MESSAGE(SQLQuery);
        //                             RecordSet1 := SQLConnection.Execute(SQLQuery, RowCount1);
        //                             IF NOT ((RecordSet1.BOF) OR (RecordSet1.EOF)) THEN
        //                                 RecordSet1.MoveFirst;
        //                             WHILE NOT RecordSet1.EOF DO BEGIN
        //                                 EVALUATE(Tmp_UnitPrice, FORMAT(RecordSet1.Fields.Item('unit_price').Value));
        //                                 EVALUATE(Tmp_Adv_Perct, FORMAT(RecordSet1.Fields.Item('advance_percntg').Value));
        //                                 RowCount1 := RowCount1 + 1;
        //                                 RecordSet1.MoveNext;
        //                             END;
        //                             EVALUATE(Tmp_Inv_Qty, FORMAT(RecordSet.Fields.Item('INVOICED_QTY').Value));
        //                             Tmp_Inv_Adv_Amt := ROUND((Tmp_Inv_Qty * Tmp_UnitPrice * Tmp_Adv_Perct) / 100, 1, '=');
        //                             IF ROUND(Tmp_Inv_Adv_Amt - Adv_Cons_Amt, 1, '=') > 0 THEN BEGIN
        //                                 Tmp_Nxt_Inv_Amt := 0;
        //                                 SQLQuery := 'select * from MRP_ARR_INVOICE where SALE_ORDER_ID  = ' + FORMAT(SaleOrderId) + ' and INVOICE_DATE = to_date(''' +
        //                                           FORMAT(SIH."Posting Date", 0, '<Day>-<Month Text,3>-<Year4>') + ''',''dd-mon-yyyy'') and ERP_INVOICE_NO = ''' +
        //                                           DELCHR(SIH."External Document No.", '=', ',') + ''' and LINE_NO = ' + DELCHR(FORMAT(RecordSet.Fields.Item('LINE_NO').Value), '=', ',') +
        //                                           ' and AR_INVOICE_ID <> ' + DELCHR(FORMAT(RecordSet.Fields.Item('AR_INVOICE_ID').Value), '=', ',');
        //                                 //MESSAGE(SQLQuery);
        //                                 RecordSet1 := SQLConnection.Execute(SQLQuery, RowCount1);
        //                                 IF NOT ((RecordSet1.BOF) OR (RecordSet1.EOF)) THEN
        //                                     RecordSet1.MoveFirst;
        //                                 WHILE NOT RecordSet1.EOF DO BEGIN
        //                                     tmp_invamt := 0;
        //                                     EVALUATE(tmp_invamt, FORMAT(RecordSet1.Fields.Item('AMOUNT').Value));
        //                                     SQLQuery := 'select nvl(sum(PLANNED_AMOUNT),0) PLANNED_AMOUNT from MRP_PLAN_CHANGES where PLAN_CHANGE_ID in ( ' +
        //                                                'select  max(pl.PLAN_CHANGE_ID) from  MRP_PLAN_CHANGES pl ,(select sl_no,SALE_ORDER_ID,PLAN_CHANGE_ID ' +
        //                                                'from MRP_PLAN_CHANGES pl1 where planned_amount= 0  and payment_id is not null and invoice_id = ' +
        //                                                DELCHR(FORMAT(RecordSet1.Fields.Item('AR_INVOICE_ID').Value), '=', ',') + ' and SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ') a ' +
        //                                                'where  a.sl_no=pl.sl_no and pl.PLAN_CHANGE_ID < a.PLAN_CHANGE_ID and a.SALE_ORDER_ID=pl.SALE_ORDER_ID) ';
        //                                     //MESSAGE(SQLQuery);
        //                                     RecordSet2 := SQLConnection.Execute(SQLQuery, RowCount2);
        //                                     Tmp_InvPayAmt := 0;
        //                                     Tmp_Tot_InvPayAmt := 0;
        //                                     IF NOT ((RecordSet2.BOF) OR (RecordSet2.EOF)) THEN
        //                                         RecordSet2.MoveFirst;
        //                                     WHILE NOT RecordSet2.EOF DO BEGIN
        //                                         Tmp_InvPayAmt := 0;
        //                                         EVALUATE(Tmp_InvPayAmt, FORMAT(RecordSet2.Fields.Item('planned_amount').Value));
        //                                         Tmp_Tot_InvPayAmt := Tmp_Tot_InvPayAmt + Tmp_InvPayAmt;
        //                                         RowCount2 := RowCount2 + 1;
        //                                         RecordSet2.MoveNext;
        //                                     END;
        //                                     Tmp_Nxt_Inv_Amt := Tmp_Nxt_Inv_Amt + tmp_invamt - Tmp_Tot_InvPayAmt;
        //                                     RowCount1 := RowCount1 + 1;
        //                                     RecordSet1.MoveNext;
        //                                 END;
        //                                 //retention invoices
        //                                 SQLQuery := 'select * from mrp_arr_install_invoice where SALE_ORDER_ID  = ' + FORMAT(SaleOrderId) + ' and INVOICE_DATE = to_date(''' +
        //                                           FORMAT(SIH."Posting Date", 0, '<Day>-<Month Text,3>-<Year4>') + ''',''dd-mon-yyyy'') and ERP_INVOICE_NO = ''' +
        //                                           DELCHR(SIH."External Document No.", '=', ',') + ''' and LINE_NO = ' + DELCHR(FORMAT(RecordSet.Fields.Item('LINE_NO').Value), '=', ',') + ' and amount is not null';
        //                                 //MESSAGE(SQLQuery);
        //                                 RecordSet1 := SQLConnection.Execute(SQLQuery, RowCount1);
        //                                 IF NOT ((RecordSet1.BOF) OR (RecordSet1.EOF)) THEN
        //                                     RecordSet1.MoveFirst;
        //                                 WHILE NOT RecordSet1.EOF DO BEGIN
        //                                     tmp_invamt := 0;
        //                                     EVALUATE(tmp_invamt, FORMAT(RecordSet1.Fields.Item('AMOUNT').Value));
        //                                     SQLQuery := 'select nvl(sum(PLANNED_AMOUNT),0) PLANNED_AMOUNT from mrp_instal_plan_changes where PLAN_CHANGE_ID in ( ' +
        //                                                'select  max(pl.PLAN_CHANGE_ID) from  mrp_instal_plan_changes pl ,(select sl_no,SALE_ORDER_ID,PLAN_CHANGE_ID ' +
        //                                                'from mrp_instal_plan_changes pl1 where planned_amount= 0  and payment_id is not null and invoice_id = ' +
        //                                                DELCHR(FORMAT(RecordSet1.Fields.Item('AR_INVOICE_ID').Value), '=', ',') + ' and SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ') a ' +
        //                                                'where  a.sl_no=pl.sl_no and pl.PLAN_CHANGE_ID < a.PLAN_CHANGE_ID and a.SALE_ORDER_ID=pl.SALE_ORDER_ID) ';
        //                                     //MESSAGE(SQLQuery);
        //                                     RecordSet2 := SQLConnection.Execute(SQLQuery, RowCount2);
        //                                     Tmp_InvPayAmt := 0;
        //                                     Tmp_Tot_InvPayAmt := 0;
        //                                     IF NOT ((RecordSet2.BOF) OR (RecordSet2.EOF)) THEN
        //                                         RecordSet2.MoveFirst;
        //                                     WHILE NOT RecordSet2.EOF DO BEGIN
        //                                         Tmp_InvPayAmt := 0;
        //                                         EVALUATE(Tmp_InvPayAmt, FORMAT(RecordSet2.Fields.Item('planned_amount').Value));
        //                                         Tmp_Tot_InvPayAmt := Tmp_Tot_InvPayAmt + Tmp_InvPayAmt;
        //                                         RowCount2 := RowCount2 + 1;
        //                                         RecordSet2.MoveNext;
        //                                     END;
        //                                     Tmp_Nxt_Inv_Amt := Tmp_Nxt_Inv_Amt + tmp_invamt - Tmp_Tot_InvPayAmt;
        //                                     RowCount1 := RowCount1 + 1;
        //                                     RecordSet1.MoveNext;
        //                                 END;
        //                                 IF ROUND(Tmp_Inv_Adv_Amt - Adv_Cons_Amt, 1, '=') > ROUND(Tmp_Nxt_Inv_Amt, 1, '=') THEN BEGIN
        //                                     Tmp_Aply_Amt := Tmp_Inv_Adv_Amt - Adv_Cons_Amt - Tmp_Nxt_Inv_Amt;
        //                                     Tmp_Aply_Amt_Tot := Tmp_Aply_Amt_Tot + Tmp_Aply_Amt;
        //                                     SQLQuery := 'update mrp_arr_invoice set ADV_AMOUNT_CONSIDERED = nvl(ADV_AMOUNT_CONSIDERED,0) + ' + DELCHR(FORMAT(ROUND(Tmp_Aply_Amt, 1, '=')), '=', ',') + ' where SALE_ORDER_ID = ' +
        //                                                FORMAT(SaleOrderId) + ' and ERP_INVOICE_NO = ''' + DELCHR(FORMAT(RecordSet.Fields.Item('ERP_INVOICE_NO').Value), '=', ',') +
        //                                                ''' and LINE_NO = ' + DELCHR(FORMAT(RecordSet.Fields.Item('LINE_NO').Value), '=', ',');
        //                                     /*if USERID = 'EFFTRONICS\PRANAVI' then
        //                                       message(SQLQuery);*/
        //                                     SQLConnection.Execute(SQLQuery);
        //                                     SQLQuery := 'update mrp_arr_install_invoice set ADV_AMOUNT_CONSIDERED = nvl(ADV_AMOUNT_CONSIDERED,0) + ' + DELCHR(FORMAT(ROUND(Tmp_Aply_Amt, 1, '=')), '=', ',') + ' where SALE_ORDER_ID = ' +
        //                                                FORMAT(SaleOrderId) + ' and ERP_INVOICE_NO = ''' + DELCHR(FORMAT(RecordSet.Fields.Item('ERP_INVOICE_NO').Value), '=', ',') +
        //                                                ''' and LINE_NO = ' + DELCHR(FORMAT(RecordSet.Fields.Item('LINE_NO').Value), '=', ',');
        //                                     /*if USERID = 'EFFTRONICS\PRANAVI' then
        //                                       message(SQLQuery);*/
        //                                     SQLConnection.Execute(SQLQuery);
        //                                     //Pay_Amount:=Pay_Amount-Tmp_Aply_Amt;
        //                                     //Tmp_Aply_Amt:=0;
        //                                 END ELSE BEGIN
        //                                     Tmp_Aply_Amt := Tmp_Inv_Adv_Amt - Adv_Cons_Amt;
        //                                     Tmp_Aply_Amt_Tot := Tmp_Aply_Amt_Tot + Tmp_Aply_Amt;
        //                                     SQLQuery := 'update mrp_arr_invoice set ADV_AMOUNT_CONSIDERED = nvl(ADV_AMOUNT_CONSIDERED,0) + ' + DELCHR(FORMAT(ROUND(Tmp_Aply_Amt, 1, '=')), '=', ',') + ' where SALE_ORDER_ID = ' +
        //                                                FORMAT(SaleOrderId) + ' and ERP_INVOICE_NO = ''' + DELCHR(FORMAT(RecordSet.Fields.Item('ERP_INVOICE_NO').Value), '=', ',') +
        //                                                ''' and LINE_NO = ' + DELCHR(FORMAT(RecordSet.Fields.Item('LINE_NO').Value), '=', ',');
        //                                     /*if USERID = 'EFFTRONICS\PRANAVI' then
        //                                       message(SQLQuery);*/
        //                                     SQLConnection.Execute(SQLQuery);
        //                                     SQLQuery := 'update mrp_arr_install_invoice set ADV_AMOUNT_CONSIDERED = nvl(ADV_AMOUNT_CONSIDERED,0) + ' + DELCHR(FORMAT(ROUND(Tmp_Aply_Amt, 1, '=')), '=', ',') + ' where SALE_ORDER_ID = ' +
        //                                                FORMAT(SaleOrderId) + ' and ERP_INVOICE_NO = ''' + DELCHR(FORMAT(RecordSet.Fields.Item('ERP_INVOICE_NO').Value), '=', ',') +
        //                                                ''' and LINE_NO = ' + DELCHR(FORMAT(RecordSet.Fields.Item('LINE_NO').Value), '=', ',');
        //                                     /*if USERID = 'EFFTRONICS\PRANAVI' then
        //                                       message(SQLQuery);*/
        //                                     SQLConnection.Execute(SQLQuery);
        //                                     //Pay_Amount:=Pay_Amount-Tmp_Aply_Amt;
        //                                     //Tmp_Aply_Amt:=0;
        //                                 END;
        //                             END;
        //                             //InvoiceAmt
        //                             SQLQuery := 'select * from  MRP_PLAN_CHANGES b, (select SALE_ORDER_ID,sl_no,max(plan_change_id) PlanChngId from MRP_PLAN_CHANGES where ' +
        //                                        ' SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ' and invoice_id = ' + DELCHR(FORMAT(RecordSet.Fields.Item('AR_INVOICE_ID').Value), '=', ',') +
        //                                        ' group by SALE_ORDER_ID,sl_no) a where a.planchngid=b.plan_change_id and b.planned_amount > 0';
        //                             //MESSAGE(SQLQuery);
        //                             RecordSet1 := SQLConnection.Execute(SQLQuery, RowCount1);
        //                             PlndAmnt := 0;
        //                             PlnndAmt := 0;
        //                             IF NOT ((RecordSet1.BOF) OR (RecordSet1.EOF)) THEN
        //                                 RecordSet1.MoveFirst;
        //                             WHILE NOT RecordSet1.EOF DO BEGIN   // receivables pln changes loop begin
        //                                 EVALUATE(PlndAmnt, FORMAT(RecordSet1.Fields.Item('planned_amount').Value));
        //                                 PlnndAmt := PlnndAmt + PlndAmnt;
        //                                 IF (ROUND(Pay_Amount, 1, '=') > 0) AND (ROUND(PlndAmnt, 1, '=') > 0) THEN BEGIN
        //                                     IF (ROUND(Pay_Amount, 1, '=') >= ROUND(PlndAmnt, 1, '=')) THEN  // if paymentamount >= planned amount
        //                                     BEGIN
        //                                         IF ROUND(Tmp_Aply_Amt, 1, '=') > 0 THEN BEGIN
        //                                             IF ROUND(PlndAmnt, 1, '=') >= ROUND(Tmp_Aply_Amt, 1, '=') THEN BEGIN
        //                                                 Pay_Amount := Pay_Amount - PlndAmnt;
        //                                                 PlndAmnt := PlndAmnt - Tmp_Aply_Amt;
        //                                                 Tmp_Aply_Amt := 0;
        //                                                 IF PlndAmnt > 0 THEN BEGIN
        //                                                     SQLQuery := 'select nvl(max(sl_no)+1,1) newslno from MRP_PLAN_CHANGES where SALE_ORDER_ID = ' + FORMAT(SaleOrderId) +
        //                                                                ' and INVOICE_ID = ' + DELCHR(FORMAT(RecordSet1.Fields.Item('invoice_id').Value), '=', ',');
        //                                                     //MESSAGE(SQLQuery);
        //                                                     RecordSet2 := SQLConnection.Execute(SQLQuery, RowCount2);
        //                                                     IF NOT ((RecordSet2.BOF) OR (RecordSet2.EOF)) THEN
        //                                                         RecordSet2.MoveFirst;
        //                                                     WHILE NOT RecordSet2.EOF DO BEGIN
        //                                                         EVALUATE(Temp_SL_No, FORMAT(RecordSet2.Fields.Item('newslno').Value));
        //                                                         RowCount2 := RowCount2 + 1;
        //                                                         RecordSet2.MoveNext;
        //                                                     END;
        //                                                     SQLQuery := 'insert into MRP_PLAN_CHANGES(PLAN_CHANGE_ID,SL_NO,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,RESPONSE_SECTION, ' +
        //                                                                ' CREATION_DATE,USERID,INVOICE_ID,SPLITEDFROM) values(PLAN_CHANGE_SEQ.NEXTVAL,' +
        //                                                                FORMAT(Temp_SL_No) + ',' + FORMAT(SaleOrderId) +
        //                                                                ',to_date(''' + FORMAT(payment_Realization_Date, 0, '<Day>-<Month Text,3>-<Year4>') +
        //                                                                ''',''dd-mon-yyyy''),' + // added by sujani for payment relaization date in cashflow
        //                                                                                         // ' CREATION_DATE,USERID,INVOICE_ID,SPLITEDFROM) values(PLAN_CHANGE_SEQ.NEXTVAL,'+FORMAT(Temp_SL_No)+','+FORMAT(SaleOrderId)+',sysdate, '+
        //                                                                DELCHR(FORMAT(ROUND(PlndAmnt - Tmp_Aply_Amt, 1, '=')), '=', ',') + ',''SAL'',sysdate,''Auto'', ' + DELCHR(FORMAT(RecordSet1.Fields.Item('invoice_id').Value), '=', ',') +
        //                                                                ', ' + DELCHR(FORMAT(RecordSet1.Fields.Item('SL_NO').Value), '=', ',') + ')';
        //                                                     //MESSAGE(SQLQuery);
        //                                                     SQLConnection.Execute(SQLQuery);

        //                                                     SQLQuery := 'insert into MRP_PLAN_CHANGES(PLAN_CHANGE_ID,SL_NO,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,RESPONSE_SECTION, ' +
        //                                                                ' CREATION_DATE,USERID,PAYMENT_ID,INVOICE_ID) values(PLAN_CHANGE_SEQ.NEXTVAL,' + FORMAT(Temp_SL_No) + ',' + FORMAT(SaleOrderId) +
        //                                                                 ',to_date(''' + FORMAT(payment_Realization_Date, 0, '<Day>-<Month Text,3>-<Year4>') +
        //                                                                ''',''dd-mon-yyyy''),' +
        //                                                                //', sysdate,'+ //added by sujani

        //                                                                '0,''SAL'',sysdate,''Auto'',' + FORMAT(PaymentId) + ',' + DELCHR(FORMAT(RecordSet1.Fields.Item('invoice_id').Value), '=', ',') + ')';
        //                                                     //MESSAGE(SQLQuery);
        //                                                     SQLConnection.Execute(SQLQuery);

        //                                                     SQLQuery := 'update MRP_PLAN_CHANGES set PLANNED_AMOUNT = ' + DELCHR(FORMAT(ROUND(Tmp_Aply_Amt, 1, '=')), '=', ',') + ' where PLAN_CHANGE_ID = ' +
        //                                                                DELCHR(FORMAT(RecordSet1.Fields.Item('PLAN_CHANGE_ID').Value), '=', ',');
        //                                                     //MESSAGE(SQLQuery);
        //                                                     SQLConnection.Execute(SQLQuery);
        //                                                 END;
        //                                             END ELSE BEGIN
        //                                                 Tmp_Aply_Amt := Tmp_Aply_Amt - PlndAmnt;
        //                                                 Pay_Amount := Pay_Amount - Tmp_Aply_Amt;
        //                                                 PlndAmnt := 0;
        //                                             END;
        //                                         END ELSE BEGIN
        //                                             SQLQuery := 'insert into MRP_PLAN_CHANGES(PLAN_CHANGE_ID,SL_NO,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,RESPONSE_SECTION,CREATION_DATE, ' +
        //                                                        ' USERID,PAYMENT_ID,INVOICE_ID) values(PLAN_CHANGE_SEQ.NEXTVAL,' + DELCHR(FORMAT(RecordSet1.Fields.Item('sl_no').Value), '=', ',') + ',' + FORMAT(SaleOrderId) +
        //                                                        ',to_date(''' + FORMAT(payment_Realization_Date, 0, '<Day>-<Month Text,3>-<Year4>') +
        //                                                            ''',''dd-mon-yyyy''),' +
        //                                                        //', sysdate,'+ added by sujani

        //                                                        '0,''SAL'',sysdate,''Auto'',' + FORMAT(PaymentId) + ',' + DELCHR(FORMAT(RecordSet1.Fields.Item('invoice_id').Value), '=', ',') + ')';
        //                                             //MESSAGE(SQLQuery);
        //                                             SQLConnection.Execute(SQLQuery);
        //                                             Pay_Amount := Pay_Amount - PlndAmnt;
        //                                         END;
        //                                     END ELSE BEGIN  // else part of if paymentamount >= planned amount
        //                                         IF ROUND(Tmp_Aply_Amt, 1, '=') > 0 THEN BEGIN
        //                                             IF ROUND(Pay_Amount, 1, '=') >= ROUND(Tmp_Aply_Amt, 1, '=') THEN BEGIN
        //                                                 Pay_Amount := Pay_Amount - Tmp_Aply_Amt;
        //                                                 Tmp_Aply_Amt := 0;
        //                                                 SQLQuery := 'select nvl(max(sl_no)+1,1) newslno from MRP_PLAN_CHANGES where SALE_ORDER_ID = ' + FORMAT(SaleOrderId) +
        //                                                            ' and INVOICE_ID = ' + DELCHR(FORMAT(RecordSet1.Fields.Item('invoice_id').Value), '=', ',');
        //                                                 //MESSAGE(SQLQuery);
        //                                                 RecordSet2 := SQLConnection.Execute(SQLQuery, RowCount2);
        //                                                 IF NOT ((RecordSet2.BOF) OR (RecordSet2.EOF)) THEN
        //                                                     RecordSet2.MoveFirst;
        //                                                 WHILE NOT RecordSet2.EOF DO BEGIN
        //                                                     EVALUATE(Temp_SL_No, FORMAT(RecordSet2.Fields.Item('newslno').Value));
        //                                                     RowCount2 := RowCount2 + 1;
        //                                                     RecordSet2.MoveNext;
        //                                                 END;
        //                                                 SQLQuery := 'insert into MRP_PLAN_CHANGES(PLAN_CHANGE_ID,SL_NO,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,RESPONSE_SECTION, ' +
        //                                                            ' CREATION_DATE,USERID,INVOICE_ID,SPLITEDFROM) values(PLAN_CHANGE_SEQ.NEXTVAL,' + DELCHR(FORMAT(Temp_SL_No), '=', ',') + ',' + FORMAT(SaleOrderId) +
        //                                                             //',sysdate, '+
        //                                                             ',to_date(''' + FORMAT(payment_Realization_Date, 0, '<Day>-<Month Text,3>-<Year4>') +
        //                                                              ''',''dd-mon-yyyy''),' +
        //                                                            DELCHR(FORMAT(ROUND(Pay_Amount, 1, '=')), '=', ',') + ',''SAL'',sysdate,''Auto'', ' + DELCHR(FORMAT(RecordSet1.Fields.Item('invoice_id').Value), '=', ',') +
        //                                                            ', ' + DELCHR(FORMAT(RecordSet1.Fields.Item('SL_NO').Value), '=', ',') + ')';
        //                                                 //MESSAGE(SQLQuery);
        //                                                 SQLConnection.Execute(SQLQuery);

        //                                                 SQLQuery := 'insert into MRP_PLAN_CHANGES(PLAN_CHANGE_ID,SL_NO,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,RESPONSE_SECTION, ' +
        //                                                            ' CREATION_DATE,USERID,PAYMENT_ID,INVOICE_ID) values(PLAN_CHANGE_SEQ.NEXTVAL,' + FORMAT(Temp_SL_No) + ',' + FORMAT(SaleOrderId) +
        //                                                            ',to_date(''' + FORMAT(payment_Realization_Date, 0, '<Day>-<Month Text,3>-<Year4>') +
        //                                                              ''',''dd-mon-yyyy''),' +
        //                                                            // ', sysdate,'+
        //                                                            '0,''SAL'',sysdate,''Auto'',' + DELCHR(FORMAT(PaymentId), '=', ',') + ',' + DELCHR(FORMAT(RecordSet1.Fields.Item('invoice_id').Value), '=', ',') + ')';
        //                                                 //MESSAGE(SQLQuery);
        //                                                 SQLConnection.Execute(SQLQuery);

        //                                                 SQLQuery := 'update MRP_PLAN_CHANGES set PLANNED_AMOUNT = ' + DELCHR(FORMAT(ROUND(PlndAmnt - Pay_Amount, 1, '=')), '=', ',') + ' where PLAN_CHANGE_ID = ' +
        //                                                            DELCHR(FORMAT(RecordSet1.Fields.Item('PLAN_CHANGE_ID').Value), '=', ',');
        //                                                 //MESSAGE(SQLQuery);
        //                                                 SQLConnection.Execute(SQLQuery);
        //                                                 Pay_Amount := 0;
        //                                             END ELSE BEGIN
        //                                                 Tmp_Aply_Amt := Tmp_Aply_Amt - Pay_Amount;
        //                                                 Pay_Amount := 0;
        //                                             END;
        //                                         END ELSE BEGIN
        //                                             SQLQuery := 'select nvl(max(sl_no)+1,1) newslno from MRP_PLAN_CHANGES where SALE_ORDER_ID = ' + FORMAT(SaleOrderId) +
        //                                                        ' and INVOICE_ID = ' + DELCHR(FORMAT(RecordSet1.Fields.Item('invoice_id').Value), '=', ',');
        //                                             //MESSAGE(SQLQuery);
        //                                             RecordSet2 := SQLConnection.Execute(SQLQuery, RowCount2);
        //                                             IF NOT ((RecordSet2.BOF) OR (RecordSet2.EOF)) THEN
        //                                                 RecordSet2.MoveFirst;
        //                                             WHILE NOT RecordSet2.EOF DO BEGIN
        //                                                 EVALUATE(Temp_SL_No, FORMAT(RecordSet2.Fields.Item('newslno').Value));
        //                                                 RowCount2 := RowCount2 + 1;
        //                                                 RecordSet2.MoveNext;
        //                                             END;
        //                                             SQLQuery := 'insert into MRP_PLAN_CHANGES(PLAN_CHANGE_ID,SL_NO,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,RESPONSE_SECTION, ' +
        //                                                        ' CREATION_DATE,USERID,INVOICE_ID,SPLITEDFROM) values(PLAN_CHANGE_SEQ.NEXTVAL,' + DELCHR(FORMAT(Temp_SL_No), '=', ',') + ',' + FORMAT(SaleOrderId) +
        //                                                        //',sysdate, '+
        //                                                        ',to_date(''' + FORMAT(payment_Realization_Date, 0, '<Day>-<Month Text,3>-<Year4>') +
        //                                                            ''',''dd-mon-yyyy''),' +
        //                                                        DELCHR(FORMAT(ROUND(Pay_Amount, 1, '=')), '=', ',') + ',''SAL'',sysdate,''Auto'', ' + DELCHR(FORMAT(RecordSet1.Fields.Item('invoice_id').Value), '=', ',') +
        //                                                        ', ' + DELCHR(FORMAT(RecordSet1.Fields.Item('SL_NO').Value), '=', ',') + ')';
        //                                             //MESSAGE(SQLQuery);
        //                                             SQLConnection.Execute(SQLQuery);

        //                                             SQLQuery := 'insert into MRP_PLAN_CHANGES(PLAN_CHANGE_ID,SL_NO,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,RESPONSE_SECTION, ' +
        //                                                        ' CREATION_DATE,USERID,PAYMENT_ID,INVOICE_ID) values(PLAN_CHANGE_SEQ.NEXTVAL,' + DELCHR(FORMAT(Temp_SL_No), '=', ',') + ',' + FORMAT(SaleOrderId) +
        //                                                        //', sysdate,'+
        //                                                        ',to_date(''' + FORMAT(payment_Realization_Date, 0, '<Day>-<Month Text,3>-<Year4>') +
        //                                                            ''',''dd-mon-yyyy''),' +
        //                                                        '0,''SAL'',sysdate,''Auto'',' + DELCHR(FORMAT(PaymentId), '=', ',') + ',' + DELCHR(FORMAT(RecordSet1.Fields.Item('invoice_id').Value), '=', ',') + ')';
        //                                             //MESSAGE(SQLQuery);
        //                                             SQLConnection.Execute(SQLQuery);

        //                                             SQLQuery := 'update MRP_PLAN_CHANGES set PLANNED_AMOUNT = ' + DELCHR(FORMAT(ROUND(PlndAmnt - Pay_Amount, 1, '=')), '=', ',') + ' where PLAN_CHANGE_ID = ' +
        //                                                        DELCHR(FORMAT(RecordSet1.Fields.Item('PLAN_CHANGE_ID').Value), '=', ',');
        //                                             //MESSAGE(SQLQuery);
        //                                             SQLConnection.Execute(SQLQuery);
        //                                             Pay_Amount := 0;
        //                                         END;
        //                                     END;  //end of else part of if paymentamount >= planned amount
        //                                 END; // end of if paymentamount > 0
        //                                 RowCount1 := RowCount1 + 1;
        //                                 RecordSet1.MoveNext;
        //                             END;  // end of receivables pln changes loop
        //                             temppp_amt := 0;
        //                             IF (ROUND(InvoiceAmt, 1, '=') > ROUND(PlnndAmt, 1, '=')) AND (ROUND(Pay_Amount, 1, '=') > 0) THEN BEGIN
        //                                 IF ROUND(Pay_Amount, 1, '=') >= ROUND(InvoiceAmt - PlnndAmt, 1, '=') THEN BEGIN
        //                                     temppp_amt := InvoiceAmt - PlnndAmt;
        //                                     Pay_Amount := InvoiceAmt - PlnndAmt;
        //                                 END ELSE BEGIN
        //                                     temppp_amt := Pay_Amount;
        //                                     Pay_Amount := 0;
        //                                 END;
        //                                 IF ROUND(Tmp_Aply_Amt, 1, '=') > 0 THEN BEGIN
        //                                     IF ROUND(temppp_amt, 1, '=') >= ROUND(Tmp_Aply_Amt, 1, '=') THEN BEGIN
        //                                         temppp_amt := temppp_amt - Tmp_Aply_Amt;
        //                                         Tmp_Aply_Amt := 0;
        //                                         SQLQuery := 'insert into MRP_PLAN_CHANGES(PLAN_CHANGE_ID,SL_NO,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,RESPONSE_SECTION, ' +
        //                                                    ' CREATION_DATE,USERID,INVOICE_ID) values(PLAN_CHANGE_SEQ.NEXTVAL,(SELECT nvl(MAX(sl_no)+1,1) from MRP_PLAN_CHANGES where sale_order_id = ' +
        //                                                    DELCHR(FORMAT(SaleOrderId), '=', ',') + ' and invoice_id = ' + DELCHR(FORMAT(RecordSet.Fields.Item('ar_invoice_id').Value), '=', ',') + '),' + DELCHR(FORMAT(SaleOrderId), '=', ',') +
        //                                                    //',sysdate, '+
        //                                                    ',to_date(''' + FORMAT(payment_Realization_Date, 0, '<Day>-<Month Text,3>-<Year4>') +
        //                                                          ''',''dd-mon-yyyy''),' +
        //                                                    DELCHR(FORMAT(ROUND(temppp_amt, 1, '=')), '=', ',') + ',''SAL'',sysdate,''Auto'', ' + DELCHR(FORMAT(RecordSet.Fields.Item('ar_invoice_id').Value), '=', ',') + ')';
        //                                         // MESSAGE(SQLQuery);
        //                                         SQLConnection.Execute(SQLQuery);

        //                                         SQLQuery := 'insert into MRP_PLAN_CHANGES(PLAN_CHANGE_ID,SL_NO,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,RESPONSE_SECTION, ' +
        //                                                    ' CREATION_DATE,USERID,PAYMENT_ID,INVOICE_ID) values(PLAN_CHANGE_SEQ.NEXTVAL,(SELECT nvl(MAX(sl_no)+1,1) ' +
        //                                                    ' from MRP_PLAN_CHANGES where sale_order_id = ' + DELCHR(FORMAT(SaleOrderId), '=', ',') + ' and invoice_id = ' +
        //                                                    DELCHR(FORMAT(RecordSet.Fields.Item('ar_invoice_id').Value), '=', ',') + '),' + DELCHR(FORMAT(SaleOrderId), '=', ',') +
        //                                                    //', sysdate,'+
        //                                                    ',to_date(''' + FORMAT(payment_Realization_Date, 0, '<Day>-<Month Text,3>-<Year4>') +
        //                                                          ''',''dd-mon-yyyy''),' +
        //                                                    '0,''SAL'',sysdate,''Auto'',' + DELCHR(FORMAT(PaymentId), '=', ',') + ',' + DELCHR(FORMAT(RecordSet.Fields.Item('ar_invoice_id').Value), '=', ',') + ')';
        //                                         // MESSAGE(SQLQuery);
        //                                         SQLConnection.Execute(SQLQuery);
        //                                     END ELSE BEGIN
        //                                         Tmp_Aply_Amt := Tmp_Aply_Amt - temppp_amt;
        //                                         temppp_amt := 0;
        //                                     END;
        //                                 END ELSE BEGIN
        //                                     SQLQuery := 'insert into MRP_PLAN_CHANGES(PLAN_CHANGE_ID,SL_NO,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,RESPONSE_SECTION, ' +
        //                                                ' CREATION_DATE,USERID,INVOICE_ID) values(PLAN_CHANGE_SEQ.NEXTVAL,(SELECT nvl(MAX(sl_no)+1,1) from MRP_PLAN_CHANGES where sale_order_id = ' +
        //                                                FORMAT(SaleOrderId) + ' and invoice_id = ' + DELCHR(FORMAT(RecordSet.Fields.Item('ar_invoice_id').Value), '=', ',') + '),' + FORMAT(SaleOrderId) +
        //                                                //',sysdate, '+
        //                                                ',to_date(''' + FORMAT(payment_Realization_Date, 0, '<Day>-<Month Text,3>-<Year4>') +
        //                                                        ''',''dd-mon-yyyy''),' +
        //                                                DELCHR(FORMAT(ROUND(temppp_amt, 1, '=')), '=', ',') + ',''SAL'',sysdate,''Auto'', ' + DELCHR(FORMAT(RecordSet.Fields.Item('ar_invoice_id').Value), '=', ',') + ')';
        //                                     //MESSAGE(SQLQuery);
        //                                     SQLConnection.Execute(SQLQuery);

        //                                     SQLQuery := 'insert into MRP_PLAN_CHANGES(PLAN_CHANGE_ID,SL_NO,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,RESPONSE_SECTION, ' +
        //                                                ' CREATION_DATE,USERID,PAYMENT_ID,INVOICE_ID) values(PLAN_CHANGE_SEQ.NEXTVAL,(SELECT nvl(MAX(sl_no)+1,1) ' +
        //                                                ' from MRP_PLAN_CHANGES where sale_order_id = ' + FORMAT(SaleOrderId) + ' and invoice_id = ' +
        //                                                DELCHR(FORMAT(RecordSet.Fields.Item('ar_invoice_id').Value), '=', ',') + '),' + FORMAT(SaleOrderId) +
        //                                                //', sysdate,'+
        //                                                ',to_date(''' + FORMAT(payment_Realization_Date, 0, '<Day>-<Month Text,3>-<Year4>') +
        //                                                        ''',''dd-mon-yyyy''),' +
        //                                                '0,''SAL'',sysdate,''Auto'',' + DELCHR(FORMAT(PaymentId), '=', ',') + ',' + DELCHR(FORMAT(RecordSet.Fields.Item('ar_invoice_id').Value), '=', ',') + ')';
        //                                     //MESSAGE(SQLQuery);
        //                                     SQLConnection.Execute(SQLQuery);
        //                                 END;
        //                             END;
        //                             RowCount := RowCount + 1;
        //                             RecordSet.MoveNext;
        //                         END;  // end of receivable invoices loop
        //                         IF Tmp_Aply_Amt_Tot > 0 THEN BEGIN
        //                             IF Paid_Amt > Tmp_Aply_Amt_Tot THEN BEGIN
        //                                 SQLQuery := 'update mrp_arr_payment set AMOUNT = nvl(AMOUNT,0) - ' + DELCHR(FORMAT(ROUND(Tmp_Aply_Amt_Tot, 1, '=')), '=', ',') + ' where AR_PAYMENT_ID = ' +
        //                                            DELCHR(FORMAT(PaymentId), '=', ',');
        //                                 //MESSAGE(SQLQuery);
        //                                 SQLConnection.Execute(SQLQuery);
        //                             END ELSE BEGIN
        //                                 SQLQuery := 'delete mrp_arr_payment where AR_PAYMENT_ID = ' + DELCHR(FORMAT(PaymentId), '=', ',');
        //                                 //MESSAGE(SQLQuery);
        //                                 SQLConnection.Execute(SQLQuery);
        //                             END;
        //                         END;
        //                     END;
        //                     /*
        //                     IF Tol_Inst_Recvbl_Amt > 0 THEN BEGIN
        //                       IF (Tol_Inst_Recvbl_Amt >= Amount) THEN
        //                         Pay_Amount := Amount
        //                       ELSE
        //                         Pay_Amount := Tol_Inst_Recvbl_Amt;
        //                     END ELSE
        //                       Pay_Amount := 0;
        //                     */
        //                     Tmp_Aply_Amt_Tot := 0;
        //                     IF ROUND(Pay_Amount, 1, '=') > 0 THEN  // if still payment amount is remaining pay in installtion plan changes
        //                     BEGIN
        //                         SQLQuery := 'select nvl(ARR_INSTALL_PAYMENT_SEQ.NEXTVAL,1) payid from dual';
        //                         //MESSAGE(SQLQuery);
        //                         RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                         IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                             RecordSet.MoveFirst;
        //                         WHILE NOT RecordSet.EOF DO BEGIN
        //                             EVALUATE(PaymentId, FORMAT(RecordSet.Fields.Item('payid').Value));
        //                             RowCount := RowCount + 1;
        //                             RecordSet.MoveNext;
        //                         END;
        //                         // insert payment record
        //                         Inst_Paid_Amt := Pay_Amount;
        //                         SQLQuery := 'insert into mrp_arr_instal_payment(AR_PAYMENT_ID,SALE_ORDER_ID,PAYMENT_DATE,AMOUNT,USERID,CREATION_DATE,AMOUNTTYPE) values(' + FORMAT(PaymentId) + ', ' +
        //                                    FORMAT(SaleOrderId) + ', to_date(''' + FORMAT(CLE."Posting Date", 0, '<Day>-<Month Text,3>-<Year4>') + ''',''dd-mon-yyyy''), ' +
        //                                    DELCHR(FORMAT(ROUND(Pay_Amount, 1, '=')), '=', ',') + ',''Auto'',sysdate,''R'')';
        //                         //MESSAGE(SQLQuery);
        //                         SQLConnection.Execute(SQLQuery);

        //                         SQLQuery := 'select * from MRP_ARR_INSTALL_INVOICE where SALE_ORDER_ID  = ' + FORMAT(SaleOrderId) + ' and INVOICE_DATE = to_date(''' +
        //                                     FORMAT(SIH."Posting Date", 0, '<Day>-<Month Text,3>-<Year4>') + ''',''dd-mon-yyyy'') and ERP_INVOICE_NO = ''' +
        //                                     DELCHR(SIH."External Document No.", '=', ',') + ''' and AMOUNTTYPE = ''R'' and amount is not null order by LINE_NO';
        //                         //MESSAGE(SQLQuery);
        //                         RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                         IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                             RecordSet.MoveFirst;
        //                         WHILE NOT RecordSet.EOF DO BEGIN   // invoice loop
        //                             InvoiceAmt := 0;
        //                             Adv_Cons_Amt := 0;
        //                             Tmp_UnitPrice := 0;
        //                             Tmp_Adv_Perct := 0;
        //                             Tmp_Inv_Qty := 0;
        //                             Tmp_Inv_Adv_Amt := 0;
        //                             IF FORMAT(RecordSet.Fields.Item('amount').Value) <> '' THEN
        //                                 EVALUATE(InvoiceAmt, FORMAT(RecordSet.Fields.Item('amount').Value))
        //                             ELSE
        //                                 InvoiceAmt := 0;
        //                             //EVALUATE(InvoiceAmt,FORMAT(RecordSet.Fields.Item('amount').Value));

        //                             IF FORMAT(RecordSet.Fields.Item('ADV_AMOUNT_CONSIDERED').Value) <> '' THEN
        //                                 EVALUATE(Adv_Cons_Amt, FORMAT(RecordSet.Fields.Item('ADV_AMOUNT_CONSIDERED').Value))
        //                             ELSE
        //                                 Adv_Cons_Amt := 0;
        //                             SQLQuery := 'select nvl(sum(PLANNED_AMOUNT),0) PLANNED_AMOUNT   from MRP_INSTAL_PLAN_CHANGES where PLAN_CHANGE_ID in ( ' +
        //                                        'select  max(pl.PLAN_CHANGE_ID) from  MRP_INSTAL_PLAN_CHANGES pl ,(select sl_no,SALE_ORDER_ID,PLAN_CHANGE_ID ' +
        //                                        'from MRP_INSTAL_PLAN_CHANGES pl1 where planned_amount= 0  and payment_id is not null and invoice_id = ' +
        //                                        DELCHR(FORMAT(RecordSet.Fields.Item('AR_INVOICE_ID').Value), '=', ',') + ' and SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ') a ' +
        //                                        'where  a.sl_no=pl.sl_no and pl.PLAN_CHANGE_ID < a.PLAN_CHANGE_ID and a.SALE_ORDER_ID=pl.SALE_ORDER_ID) ';
        //                             //MESSAGE(SQLQuery);
        //                             RecordSet1 := SQLConnection.Execute(SQLQuery, RowCount1);
        //                             InvPayAmt := 0;
        //                             Tot_InvPayAmt := 0;
        //                             IF NOT ((RecordSet1.BOF) OR (RecordSet1.EOF)) THEN
        //                                 RecordSet1.MoveFirst;
        //                             WHILE NOT RecordSet1.EOF DO BEGIN
        //                                 InvPayAmt := 0;
        //                                 EVALUATE(InvPayAmt, FORMAT(RecordSet1.Fields.Item('planned_amount').Value));
        //                                 Tot_InvPayAmt := Tot_InvPayAmt + InvPayAmt;
        //                                 RowCount1 := RowCount1 + 1;
        //                                 RecordSet1.MoveNext;
        //                             END;
        //                             InvoiceAmt := InvoiceAmt - Tot_InvPayAmt;

        //                             SQLQuery := 'select nvl(unit_price,0) unit_price,nvl(advance_percntg,0) advance_percntg from mrp_sale_order_lines where sale_order_id = ' +
        //                                         FORMAT(SaleOrderId) + ' and LINE_NO = ' + DELCHR(FORMAT(RecordSet.Fields.Item('LINE_NO').Value), '=', ',');
        //                             //MESSAGE(SQLQuery);
        //                             RecordSet1 := SQLConnection.Execute(SQLQuery, RowCount1);
        //                             IF NOT ((RecordSet1.BOF) OR (RecordSet1.EOF)) THEN
        //                                 RecordSet1.MoveFirst;
        //                             WHILE NOT RecordSet1.EOF DO BEGIN
        //                                 EVALUATE(Tmp_UnitPrice, FORMAT(RecordSet1.Fields.Item('unit_price').Value));
        //                                 EVALUATE(Tmp_Adv_Perct, FORMAT(RecordSet1.Fields.Item('advance_percntg').Value));
        //                                 RowCount1 := RowCount1 + 1;
        //                                 RecordSet1.MoveNext;
        //                             END;
        //                             EVALUATE(Tmp_Inv_Qty, FORMAT(RecordSet.Fields.Item('INVOICED_QTY').Value));
        //                             Tmp_Inv_Adv_Amt := (Tmp_Inv_Qty * Tmp_UnitPrice * Tmp_Adv_Perct) / 100;
        //                             IF ROUND(Tmp_Inv_Adv_Amt - Adv_Cons_Amt, 1, '=') > 0 THEN BEGIN
        //                                 Tmp_Nxt_Inv_Amt := 0;
        //                                 //retention invoices
        //                                 SQLQuery := 'select * from mrp_arr_install_invoice where SALE_ORDER_ID  = ' + FORMAT(SaleOrderId) + ' and INVOICE_DATE = to_date(''' +
        //                                             FORMAT(SIH."Posting Date", 0, '<Day>-<Month Text,3>-<Year4>') + ''',''dd-mon-yyyy'') and ERP_INVOICE_NO = ''' +
        //                                             DELCHR(SIH."External Document No.", '=', ',') + ''' and LINE_NO = ' + DELCHR(FORMAT(RecordSet.Fields.Item('LINE_NO').Value), '=', ',') +
        //                                             ' and AR_INVOICE_ID <> ' + DELCHR(FORMAT(RecordSet.Fields.Item('AR_INVOICE_ID').Value), '=', ',') + ' and amount is not null';
        //                                 //MESSAGE(SQLQuery);
        //                                 RecordSet1 := SQLConnection.Execute(SQLQuery, RowCount1);
        //                                 IF NOT ((RecordSet1.BOF) OR (RecordSet1.EOF)) THEN
        //                                     RecordSet1.MoveFirst;
        //                                 WHILE NOT RecordSet1.EOF DO BEGIN
        //                                     tmp_invamt := 0;
        //                                     EVALUATE(tmp_invamt, FORMAT(RecordSet1.Fields.Item('AMOUNT').Value));
        //                                     SQLQuery := 'select nvl(sum(PLANNED_AMOUNT),0) PLANNED_AMOUNT from mrp_instal_plan_changes where PLAN_CHANGE_ID in ( ' +
        //                                                'select  max(pl.PLAN_CHANGE_ID) from  mrp_instal_plan_changes pl ,(select sl_no,SALE_ORDER_ID,PLAN_CHANGE_ID ' +
        //                                                'from mrp_instal_plan_changes pl1 where planned_amount= 0  and payment_id is not null and invoice_id = ' +
        //                                                DELCHR(FORMAT(RecordSet1.Fields.Item('AR_INVOICE_ID').Value), '=', ',') + ' and SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ') a ' +
        //                                                'where  a.sl_no=pl.sl_no and pl.PLAN_CHANGE_ID < a.PLAN_CHANGE_ID and a.SALE_ORDER_ID=pl.SALE_ORDER_ID) ';
        //                                     //MESSAGE(SQLQuery);
        //                                     RecordSet2 := SQLConnection.Execute(SQLQuery, RowCount2);
        //                                     Tmp_InvPayAmt := 0;
        //                                     Tmp_Tot_InvPayAmt := 0;
        //                                     IF NOT ((RecordSet2.BOF) OR (RecordSet2.EOF)) THEN
        //                                         RecordSet2.MoveFirst;
        //                                     WHILE NOT RecordSet2.EOF DO BEGIN
        //                                         Tmp_InvPayAmt := 0;
        //                                         EVALUATE(Tmp_InvPayAmt, FORMAT(RecordSet2.Fields.Item('planned_amount').Value));
        //                                         Tmp_Tot_InvPayAmt := Tmp_Tot_InvPayAmt + Tmp_InvPayAmt;
        //                                         RowCount2 := RowCount2 + 1;
        //                                         RecordSet2.MoveNext;
        //                                     END;
        //                                     Tmp_Nxt_Inv_Amt := Tmp_Nxt_Inv_Amt + tmp_invamt - Tmp_Tot_InvPayAmt;
        //                                     RowCount1 := RowCount1 + 1;
        //                                     RecordSet1.MoveNext;
        //                                 END;
        //                                 IF ROUND(Tmp_Inv_Adv_Amt - Adv_Cons_Amt, 1, '=') > ROUND(Tmp_Nxt_Inv_Amt, 1, '=') THEN BEGIN
        //                                     Tmp_Aply_Amt := Tmp_Inv_Adv_Amt - Adv_Cons_Amt - Tmp_Nxt_Inv_Amt;
        //                                     Tmp_Aply_Amt_Tot := Tmp_Aply_Amt_Tot + Tmp_Aply_Amt;
        //                                     SQLQuery := 'update mrp_arr_invoice set ADV_AMOUNT_CONSIDERED = nvl(ADV_AMOUNT_CONSIDERED,0) + ' + DELCHR(FORMAT(ROUND(Tmp_Aply_Amt, 1, '=')), '=', ',') + ' where SALE_ORDER_ID = ' +
        //                                                FORMAT(SaleOrderId) + ' and ERP_INVOICE_NO = ''' + DELCHR(FORMAT(RecordSet.Fields.Item('ERP_INVOICE_NO').Value), '=', ',') +
        //                                                ''' and LINE_NO = ' + DELCHR(FORMAT(RecordSet.Fields.Item('LINE_NO').Value), '=', ',');
        //                                     /*IF USERID = 'EFFTRONICS\PRANAVI' then
        //                                       message(SQLQuery);*/
        //                                     SQLConnection.Execute(SQLQuery);
        //                                     SQLQuery := 'update mrp_arr_install_invoice set ADV_AMOUNT_CONSIDERED = nvl(ADV_AMOUNT_CONSIDERED,0) + ' + DELCHR(FORMAT(ROUND(Tmp_Aply_Amt, 1, '=')), '=', ',') + ' where SALE_ORDER_ID = ' +
        //                                                FORMAT(SaleOrderId) + ' and ERP_INVOICE_NO = ''' + DELCHR(FORMAT(RecordSet.Fields.Item('ERP_INVOICE_NO').Value), '=', ',') +
        //                                                ''' and LINE_NO = ' + DELCHR(FORMAT(RecordSet.Fields.Item('LINE_NO').Value), '=', ',');
        //                                     /*IF USERID = 'EFFTRONICS\PRANAVI' then
        //                                       message(SQLQuery);*/
        //                                     SQLConnection.Execute(SQLQuery);
        //                                     Pay_Amount := Pay_Amount - Tmp_Aply_Amt;
        //                                 END ELSE BEGIN
        //                                     Tmp_Aply_Amt := Tmp_Inv_Adv_Amt - Adv_Cons_Amt;
        //                                     Tmp_Aply_Amt_Tot := Tmp_Aply_Amt_Tot + Tmp_Aply_Amt;
        //                                     SQLQuery := 'update mrp_arr_invoice set ADV_AMOUNT_CONSIDERED = nvl(ADV_AMOUNT_CONSIDERED,0) + ' + DELCHR(FORMAT(ROUND(Tmp_Aply_Amt, 1, '=')), '=', ',') + ' where SALE_ORDER_ID = ' +
        //                                                FORMAT(SaleOrderId) + ' and ERP_INVOICE_NO = ''' + DELCHR(FORMAT(RecordSet.Fields.Item('ERP_INVOICE_NO').Value), '=', ',') +
        //                                                ''' and LINE_NO = ' + DELCHR(FORMAT(RecordSet.Fields.Item('LINE_NO').Value), '=', ',');
        //                                     /*IF USERID = 'EFFTRONICS\PRANAVI' then
        //                                       message(SQLQuery);*/
        //                                     SQLConnection.Execute(SQLQuery);
        //                                     SQLQuery := 'update mrp_arr_install_invoice set ADV_AMOUNT_CONSIDERED = nvl(ADV_AMOUNT_CONSIDERED,0) + ' + DELCHR(FORMAT(ROUND(Tmp_Aply_Amt, 1, '=')), '=', ',') + ' where SALE_ORDER_ID = ' +
        //                                                FORMAT(SaleOrderId) + ' and ERP_INVOICE_NO = ''' + DELCHR(FORMAT(RecordSet.Fields.Item('ERP_INVOICE_NO').Value), '=', ',') +
        //                                                ''' and LINE_NO = ' + DELCHR(FORMAT(RecordSet.Fields.Item('LINE_NO').Value), '=', ',');
        //                                     /*IF USERID = 'EFFTRONICS\PRANAVI' then
        //                                       message(SQLQuery);*/
        //                                     SQLConnection.Execute(SQLQuery);
        //                                     Pay_Amount := Pay_Amount - Tmp_Aply_Amt;
        //                                 END;
        //                             END;
        //                             SQLQuery := 'select * from  MRP_INSTAL_PLAN_CHANGES b,(select SALE_ORDER_ID,sl_no,max(plan_change_id) PlanChngId from MRP_INSTAL_PLAN_CHANGES where ' +
        //                                        ' SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ' and invoice_id =' + DELCHR(FORMAT(RecordSet.Fields.Item('AR_INVOICE_ID').Value), '=', ',') +
        //                                        ' group by SALE_ORDER_ID,sl_no) a where a.planchngid=b.plan_change_id and b.planned_amount > 0';
        //                             //MESSAGE(SQLQuery);
        //                             RecordSet1 := SQLConnection.Execute(SQLQuery, RowCount1);
        //                             PlnndAmt := 0;
        //                             PlndAmnt := 0;
        //                             IF NOT ((RecordSet1.BOF) OR (RecordSet1.EOF)) THEN
        //                                 RecordSet1.MoveFirst;
        //                             WHILE NOT RecordSet1.EOF DO BEGIN   // begin of instl pln changes loop
        //                                 EVALUATE(PlndAmnt, FORMAT(RecordSet1.Fields.Item('planned_amount').Value));
        //                                 PlnndAmt := PlnndAmt + PlndAmnt;
        //                                 IF (ROUND(Pay_Amount, 1, '=') >= ROUND(PlndAmnt, 1, '=')) THEN BEGIN  // if payment amount > plan change amount
        //                                     IF ROUND(Tmp_Aply_Amt, 1, '=') > 0 THEN BEGIN
        //                                         IF ROUND(PlndAmnt, 1, '=') >= ROUND(Tmp_Aply_Amt, 1, '=') THEN BEGIN
        //                                             PlndAmnt := PlndAmnt - Tmp_Aply_Amt;
        //                                             Tmp_Aply_Amt := 0;
        //                                             SQLQuery := 'select nvl(max(sl_no)+1,1) newslno from MRP_INSTAL_PLAN_CHANGES where SALE_ORDER_ID = ' + FORMAT(SaleOrderId) +
        //                                                        ' and INVOICE_ID = ' + DELCHR(FORMAT(RecordSet1.Fields.Item('invoice_id').Value), '=', ',');
        //                                             //MESSAGE(SQLQuery);
        //                                             RecordSet2 := SQLConnection.Execute(SQLQuery, RowCount2);
        //                                             IF NOT ((RecordSet2.BOF) OR (RecordSet2.EOF)) THEN
        //                                                 RecordSet2.MoveFirst;
        //                                             WHILE NOT RecordSet2.EOF DO BEGIN
        //                                                 EVALUATE(Temp_SL_No, FORMAT(RecordSet2.Fields.Item('newslno').Value));
        //                                                 RowCount2 := RowCount2 + 1;
        //                                                 RecordSet2.MoveNext;
        //                                             END;
        //                                             SQLQuery := 'insert into MRP_INSTAL_PLAN_CHANGES(PLAN_CHANGE_ID,SL_NO,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,RESPONSE_SECTION, ' +
        //                                                        ' CREATION_DATE,USERID,INVOICE_ID,SPLITEDFROM) values(INSTALL_PLAN_CHANGE_SEQ.NEXTVAL,' + DELCHR(FORMAT(Temp_SL_No), '=', ',') + ',' + FORMAT(SaleOrderId) + ',sysdate, ' +
        //                                                        DELCHR(FORMAT(ROUND(PlndAmnt - Tmp_Aply_Amt, 1, '=')), '=', ',') + ',''SAL'',sysdate,''Auto'', ' + DELCHR(FORMAT(RecordSet1.Fields.Item('invoice_id').Value), '=', ',') +
        //                                                        ', ' + DELCHR(FORMAT(RecordSet1.Fields.Item('SL_NO').Value), '=', ',') + ')';
        //                                             //MESSAGE(SQLQuery);
        //                                             SQLConnection.Execute(SQLQuery);

        //                                             SQLQuery := 'insert into MRP_INSTAL_PLAN_CHANGES(PLAN_CHANGE_ID,SL_NO,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,RESPONSE_SECTION, ' +
        //                                                        ' CREATION_DATE,USERID,PAYMENT_ID,INVOICE_ID) values(INSTALL_PLAN_CHANGE_SEQ.NEXTVAL,' + DELCHR(FORMAT(Temp_SL_No), '=', ',') + ',' + FORMAT(SaleOrderId) +
        //                                                        ', sysdate,0,''SAL'',sysdate,''Auto'',' + FORMAT(PaymentId) + ',' + DELCHR(FORMAT(RecordSet1.Fields.Item('invoice_id').Value), '=', ',') + ')';
        //                                             //MESSAGE(SQLQuery);
        //                                             SQLConnection.Execute(SQLQuery);

        //                                             SQLQuery := 'update MRP_INSTAL_PLAN_CHANGES set PLANNED_AMOUNT = ' + DELCHR(FORMAT(ROUND(Tmp_Aply_Amt, 1, '=')), '=', ',') + ' where PLAN_CHANGE_ID = ' +
        //                                                        DELCHR(FORMAT(RecordSet1.Fields.Item('PLAN_CHANGE_ID').Value), '=', ',');
        //                                             //MESSAGE(SQLQuery);
        //                                             SQLConnection.Execute(SQLQuery);
        //                                         END ELSE BEGIN
        //                                             Tmp_Aply_Amt := Tmp_Aply_Amt - PlndAmnt;
        //                                             PlndAmnt := 0;
        //                                         END;
        //                                     END ELSE BEGIN
        //                                         SQLQuery := 'insert into MRP_INSTAL_PLAN_CHANGES(PLAN_CHANGE_ID,SL_NO,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,RESPONSE_SECTION,CREATION_DATE, ' +
        //                                                    ' USERID,PAYMENT_ID,INVOICE_ID) values(INSTALL_PLAN_CHANGE_SEQ.NEXTVAL,' + DELCHR(FORMAT(RecordSet1.Fields.Item('sl_no').Value), '=', ',') + ',' + FORMAT(SaleOrderId) +
        //                                                    ', sysdate,0,''SAL'',sysdate,''Auto'',' + DELCHR(FORMAT(PaymentId), '=', ',') + ',' + DELCHR(FORMAT(RecordSet1.Fields.Item('invoice_id').Value), '=', ',') + ')';
        //                                         //MESSAGE(SQLQuery);
        //                                         SQLConnection.Execute(SQLQuery);
        //                                     END;
        //                                     Pay_Amount := Pay_Amount - PlndAmnt;
        //                                 END ELSE BEGIN // else part of if payment amount > plan change amount
        //                                     IF Tmp_Aply_Amt > 0 THEN BEGIN
        //                                         IF Pay_Amount >= Tmp_Aply_Amt THEN BEGIN
        //                                             Pay_Amount := Pay_Amount - Tmp_Aply_Amt;
        //                                             Tmp_Aply_Amt := 0;
        //                                             SQLQuery := 'select nvl(max(sl_no)+1,1) newslno from MRP_INSTAL_PLAN_CHANGES where SALE_ORDER_ID = ' + FORMAT(SaleOrderId) +
        //                                                        ' and INVOICE_ID = ' + DELCHR(FORMAT(RecordSet1.Fields.Item('invoice_id').Value), '=', ',');
        //                                             //MESSAGE(SQLQuery);
        //                                             RecordSet2 := SQLConnection.Execute(SQLQuery, RowCount2);
        //                                             IF NOT ((RecordSet2.BOF) OR (RecordSet2.EOF)) THEN
        //                                                 RecordSet2.MoveFirst;
        //                                             WHILE NOT RecordSet2.EOF DO BEGIN
        //                                                 EVALUATE(Temp_SL_No, FORMAT(RecordSet2.Fields.Item('newslno').Value));
        //                                                 RowCount2 := RowCount2 + 1;
        //                                                 RecordSet2.MoveNext;
        //                                             END;
        //                                             SQLQuery := 'insert into MRP_INSTAL_PLAN_CHANGES(PLAN_CHANGE_ID,SL_NO,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,RESPONSE_SECTION, ' +
        //                                                        ' CREATION_DATE,USERID,INVOICE_ID,SPLITEDFROM) values(INSTALL_PLAN_CHANGE_SEQ.NEXTVAL,' + DELCHR(FORMAT(Temp_SL_No), '=', ',') + ',' + FORMAT(SaleOrderId) + ',sysdate, ' +
        //                                                        DELCHR(FORMAT(ROUND(Pay_Amount, 1, '=')), '=', ',') + ',''SAL'',sysdate,''Auto'', ' + DELCHR(FORMAT(RecordSet1.Fields.Item('invoice_id').Value), '=', ',') +
        //                                                        ', ' + DELCHR(FORMAT(RecordSet1.Fields.Item('SL_NO').Value), '=', ',') + ')';
        //                                             //MESSAGE(SQLQuery);
        //                                             SQLConnection.Execute(SQLQuery);

        //                                             SQLQuery := 'insert into MRP_INSTAL_PLAN_CHANGES(PLAN_CHANGE_ID,SL_NO,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,RESPONSE_SECTION, ' +
        //                                                        ' CREATION_DATE,USERID,PAYMENT_ID,INVOICE_ID) values(INSTALL_PLAN_CHANGE_SEQ.NEXTVAL,' + FORMAT(Temp_SL_No) + ',' + FORMAT(SaleOrderId) +
        //                                                        ', sysdate,0,''SAL'',sysdate,''Auto'',' + DELCHR(FORMAT(PaymentId), '=', ',') + ',' + DELCHR(FORMAT(RecordSet1.Fields.Item('invoice_id').Value), '=', ',') + ')';
        //                                             //MESSAGE(SQLQuery);
        //                                             SQLConnection.Execute(SQLQuery);

        //                                             SQLQuery := 'update MRP_INSTAL_PLAN_CHANGES set PLANNED_AMOUNT = ' + DELCHR(FORMAT(ROUND(PlndAmnt - Pay_Amount, 1, '=')), '=', ',') + ' where PLAN_CHANGE_ID = ' +
        //                                                        DELCHR(FORMAT(RecordSet1.Fields.Item('PLAN_CHANGE_ID').Value), '=', ',');
        //                                             //MESSAGE(SQLQuery);
        //                                             SQLConnection.Execute(SQLQuery);
        //                                             Pay_Amount := 0;
        //                                         END ELSE BEGIN
        //                                             Tmp_Aply_Amt := Tmp_Aply_Amt - Pay_Amount;
        //                                             Pay_Amount := 0;
        //                                         END;
        //                                     END ELSE BEGIN
        //                                         SQLQuery := 'select nvl(max(sl_no)+1,1) newslno from MRP_INSTAL_PLAN_CHANGES where SALE_ORDER_ID = ' + FORMAT(SaleOrderId) +
        //                                                    ' and INVOICE_ID = ' + DELCHR(FORMAT(RecordSet1.Fields.Item('invoice_id').Value), '=', ',');
        //                                         //MESSAGE(SQLQuery);
        //                                         RecordSet2 := SQLConnection.Execute(SQLQuery, RowCount2);
        //                                         IF NOT ((RecordSet2.BOF) OR (RecordSet2.EOF)) THEN
        //                                             RecordSet2.MoveFirst;
        //                                         WHILE NOT RecordSet2.EOF DO BEGIN
        //                                             EVALUATE(Temp_SL_No, FORMAT(RecordSet2.Fields.Item('newslno').Value));
        //                                             RowCount2 := RowCount2 + 1;
        //                                             RecordSet2.MoveNext;
        //                                         END;
        //                                         SQLQuery := 'insert into MRP_INSTAL_PLAN_CHANGES(PLAN_CHANGE_ID,SL_NO,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,RESPONSE_SECTION, ' +
        //                                                    ' CREATION_DATE,USERID,INVOICE_ID,SPLITEDFROM) values(INSTALL_PLAN_CHANGE_SEQ.NEXTVAL,' + DELCHR(FORMAT(Temp_SL_No), '=', ',') + ',' + FORMAT(SaleOrderId) + ',sysdate, ' +
        //                                                    DELCHR(FORMAT(ROUND(Pay_Amount, 1, '=')), '=', ',') + ',''SAL'',sysdate,''Auto'', ' + DELCHR(FORMAT(RecordSet1.Fields.Item('invoice_id').Value), '=', ',') +
        //                                                    ', ' + DELCHR(FORMAT(RecordSet1.Fields.Item('SL_NO').Value), '=', ',') + ')';
        //                                         //MESSAGE(SQLQuery);
        //                                         SQLConnection.Execute(SQLQuery);

        //                                         SQLQuery := 'insert into MRP_INSTAL_PLAN_CHANGES(PLAN_CHANGE_ID,SL_NO,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,RESPONSE_SECTION, ' +
        //                                                    ' CREATION_DATE,USERID,PAYMENT_ID,INVOICE_ID) values(INSTALL_PLAN_CHANGE_SEQ.NEXTVAL,' + FORMAT(Temp_SL_No) + ',' + FORMAT(SaleOrderId) +
        //                                                    ', sysdate,0,''SAL'',sysdate,''Auto'',' + DELCHR(FORMAT(PaymentId), '=', ',') + ',' + DELCHR(FORMAT(RecordSet1.Fields.Item('invoice_id').Value), '=', ',') + ')';
        //                                         //MESSAGE(SQLQuery);
        //                                         SQLConnection.Execute(SQLQuery);

        //                                         SQLQuery := 'update MRP_INSTAL_PLAN_CHANGES set PLANNED_AMOUNT = ' + DELCHR(FORMAT(ROUND(PlndAmnt - Pay_Amount, 1, '=')), '=', ',') + ' where PLAN_CHANGE_ID = ' +
        //                                                    DELCHR(FORMAT(RecordSet1.Fields.Item('PLAN_CHANGE_ID').Value), '=', ',');
        //                                         //MESSAGE(SQLQuery);
        //                                         SQLConnection.Execute(SQLQuery);
        //                                         Pay_Amount := 0;
        //                                     END;
        //                                 END; // end of else part of if payment amount > plan change amount
        //                                 RowCount1 := RowCount1 + 1;
        //                                 RecordSet1.MoveNext;
        //                             END; // end of instl pln changes loop
        //                             temppp_amt := 0;
        //                             IF (InvoiceAmt > PlnndAmt) AND (Pay_Amount > 0) THEN BEGIN
        //                                 IF Pay_Amount >= (InvoiceAmt - PlnndAmt) THEN BEGIN
        //                                     temppp_amt := InvoiceAmt - PlnndAmt;
        //                                     Pay_Amount := InvoiceAmt - PlnndAmt;
        //                                 END ELSE BEGIN
        //                                     temppp_amt := Pay_Amount;
        //                                     Pay_Amount := 0;
        //                                 END;
        //                                 IF Tmp_Aply_Amt > 0 THEN BEGIN
        //                                     IF temppp_amt >= Tmp_Aply_Amt THEN BEGIN
        //                                         temppp_amt := temppp_amt - Tmp_Aply_Amt;
        //                                         Tmp_Aply_Amt := 0;
        //                                         SQLQuery := 'insert into MRP_INSTAL_PLAN_CHANGES(PLAN_CHANGE_ID,SL_NO,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,RESPONSE_SECTION, ' +
        //                                                    ' CREATION_DATE,USERID,INVOICE_ID) values(PLAN_CHANGE_SEQ.NEXTVAL,(SELECT nvl(MAX(sl_no)+1,1) from MRP_INSTAL_PLAN_CHANGES where sale_order_id = ' +
        //                                                    FORMAT(SaleOrderId) + ' and invoice_id = ' + DELCHR(FORMAT(RecordSet.Fields.Item('ar_invoice_id').Value), '=', ',') + '),' + FORMAT(SaleOrderId) + ',sysdate, ' +
        //                                                    DELCHR(FORMAT(ROUND(temppp_amt, 1, '=')), '=', ',') + ',''SAL'',sysdate,''Auto'', ' + DELCHR(FORMAT(RecordSet.Fields.Item('ar_invoice_id').Value), '=', ',');
        //                                         //MESSAGE(SQLQuery);
        //                                         SQLConnection.Execute(SQLQuery);

        //                                         SQLQuery := 'insert into MRP_INSTAL_PLAN_CHANGES(PLAN_CHANGE_ID,SL_NO,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,RESPONSE_SECTION, ' +
        //                                                    ' CREATION_DATE,USERID,PAYMENT_ID,INVOICE_ID) values(PLAN_CHANGE_SEQ.NEXTVAL,(SELECT nvl(MAX(sl_no)+1,1) ' +
        //                                                    ' from MRP_INSTAL_PLAN_CHANGES where sale_order_id = ' + FORMAT(SaleOrderId) + ' and invoice_id = ' +
        //                                                    DELCHR(FORMAT(RecordSet.Fields.Item('ar_invoice_id').Value), '=', ',') + '),' + FORMAT(SaleOrderId) +
        //                                                    ', sysdate,0,''SAL'',sysdate,''Auto'',' + DELCHR(FORMAT(PaymentId), '=', ',') + ',' + DELCHR(FORMAT(RecordSet.Fields.Item('ar_invoice_id').Value), '=', ',') + ')';
        //                                         //MESSAGE(SQLQuery);
        //                                         SQLConnection.Execute(SQLQuery);
        //                                     END ELSE BEGIN
        //                                         Tmp_Aply_Amt := Tmp_Aply_Amt - temppp_amt;
        //                                         temppp_amt := 0;
        //                                     END;
        //                                 END ELSE BEGIN
        //                                     SQLQuery := 'insert into MRP_INSTAL_PLAN_CHANGES(PLAN_CHANGE_ID,SL_NO,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,RESPONSE_SECTION, ' +
        //                                                ' CREATION_DATE,USERID,INVOICE_ID) values(PLAN_CHANGE_SEQ.NEXTVAL,(SELECT nvl(MAX(sl_no)+1,1) from MRP_INSTAL_PLAN_CHANGES where sale_order_id = ' +
        //                                                FORMAT(SaleOrderId) + ' and invoice_id = ' + DELCHR(FORMAT(RecordSet.Fields.Item('ar_invoice_id').Value), '=', ',') + '),' + FORMAT(SaleOrderId) + ',sysdate, ' +
        //                                                DELCHR(FORMAT(ROUND(temppp_amt, 1, '=')), '=', ',') + ',''SAL'',sysdate,''Auto'', ' + DELCHR(FORMAT(RecordSet.Fields.Item('ar_invoice_id').Value), '=', ',');
        //                                     //MESSAGE(SQLQuery);
        //                                     SQLConnection.Execute(SQLQuery);

        //                                     SQLQuery := 'insert into MRP_INSTAL_PLAN_CHANGES(PLAN_CHANGE_ID,SL_NO,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,RESPONSE_SECTION, ' +
        //                                                ' CREATION_DATE,USERID,PAYMENT_ID,INVOICE_ID) values(PLAN_CHANGE_SEQ.NEXTVAL,(SELECT nvl(MAX(sl_no),1) ' +
        //                                                ' from MRP_INSTAL_PLAN_CHANGES where sale_order_id = ' + FORMAT(SaleOrderId) + ' and invoice_id = ' +
        //                                                DELCHR(FORMAT(RecordSet.Fields.Item('ar_invoice_id').Value), '=', ',') + '),' + FORMAT(SaleOrderId) +
        //                                                ', sysdate,0,''SAL'',sysdate,''Auto'',' + DELCHR(FORMAT(PaymentId), '=', ',') + ',' + DELCHR(FORMAT(RecordSet.Fields.Item('ar_invoice_id').Value), '=', ',') + ')';
        //                                     //MESSAGE(SQLQuery);
        //                                     SQLConnection.Execute(SQLQuery);
        //                                 END;
        //                             END;
        //                             RowCount := RowCount + 1;
        //                             RecordSet.MoveNext;
        //                         END;  // end of inst_invoices_loop
        //                     END;  //end of if still payment amount is remaining pay in installtion plan changes
        //                     IF Tmp_Aply_Amt_Tot > 0 THEN BEGIN
        //                         IF Inst_Paid_Amt > Tmp_Aply_Amt_Tot THEN BEGIN
        //                             SQLQuery := 'update mrp_arr_instal_payment set AMOUNT = nvl(AMOUNT,0) - ' + DELCHR(FORMAT(ROUND(Tmp_Aply_Amt_Tot, 1, '=')), '=', ',') + ' where AR_PAYMENT_ID = ' +
        //                                        DELCHR(FORMAT(PaymentId), '=', ',');
        //                             //MESSAGE(SQLQuery);
        //                             SQLConnection.Execute(SQLQuery);
        //                         END ELSE BEGIN
        //                             SQLQuery := 'delete from mrp_arr_instal_payment where AR_PAYMENT_ID = ' + DELCHR(FORMAT(PaymentId), '=', ',');
        //                             //MESSAGE(SQLQuery);
        //                             SQLConnection.Execute(SQLQuery);
        //                         END;
        //                     END;
        //                 END  // end of not instalation invoices
        //                 ELSE BEGIN  // if installation invoice
        //                     TotPlndAmnt := 0;
        //                     SQLQuery := 'select * from MRP_ARR_INSTALL_INVOICE where SALE_ORDER_ID  = ' + FORMAT(SaleOrderId) + ' and INVOICE_DATE = to_date(''' +
        //                                 FORMAT(SIH."Posting Date", 0, '<Day>-<Month Text,3>-<Year4>') + ''',''dd-mon-yyyy'') and ERP_INVOICE_NO = ''' +
        //                                 DELCHR(SIH."External Document No.", '=', ',') + ''' and AMOUNTTYPE = ''I'' and amount is not null order by LINE_NO,AR_INVOICE_ID';
        //                     //MESSAGE(SQLQuery);
        //                     RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                     IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                         RecordSet.MoveFirst;
        //                     WHILE NOT RecordSet.EOF DO  //inst invoice loop
        //                     BEGIN
        //                         InvAmt := 0;
        //                         EVALUATE(InvAmt, FORMAT(RecordSet.Fields.Item('amount').Value));
        //                         SQLQuery := 'select * from  MRP_INSTAL_PLAN_CHANGES b, (select SALE_ORDER_ID,sl_no,max(plan_change_id) PlanChngId from MRP_INSTAL_PLAN_CHANGES where ' +
        //                                    ' SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ' and invoice_id = ' + DELCHR(FORMAT(RecordSet.Fields.Item('AR_INVOICE_ID').Value), '=', ',') + ' ' +
        //                                    ' group by SALE_ORDER_ID,sl_no) a where a.planchngid=b.plan_change_id and b.planned_amount > 0 and b.INSTALLAMT > 0';
        //                         //MESSAGE(SQLQuery);
        //                         RecordSet1 := SQLConnection.Execute(SQLQuery, RowCount1);
        //                         PlndAmnt := 0;
        //                         IF NOT ((RecordSet1.BOF) OR (RecordSet1.EOF)) THEN
        //                             RecordSet1.MoveFirst;
        //                         WHILE NOT RecordSet1.EOF DO BEGIN     // begin of instl pln changes loop
        //                             PlndAmnt := 0;
        //                             EVALUATE(PlndAmnt, FORMAT(RecordSet1.Fields.Item('planned_amount').Value));
        //                             TotPlndAmnt := TotPlndAmnt + PlndAmnt;
        //                             RowCount1 := RowCount1 + 1;
        //                             RecordSet1.MoveNext;
        //                         END;
        //                         SQLQuery := 'select nvl(sum(PLANNED_AMOUNT),0) PLANNED_AMOUNT   from MRP_INSTAL_PLAN_CHANGES where PLAN_CHANGE_ID in ( ' +
        //                                    'select  max(pl.PLAN_CHANGE_ID) from  MRP_INSTAL_PLAN_CHANGES pl ,(select sl_no,SALE_ORDER_ID,PLAN_CHANGE_ID ' +
        //                                    'from MRP_INSTAL_PLAN_CHANGES pl1 where planned_amount= 0  and payment_id is not null and invoice_id = ' +
        //                                    DELCHR(FORMAT(RecordSet.Fields.Item('AR_INVOICE_ID').Value), '=', ',') + ' and SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ') a ' +
        //                                    'where  a.sl_no=pl.sl_no and pl.PLAN_CHANGE_ID < a.PLAN_CHANGE_ID and a.SALE_ORDER_ID=pl.SALE_ORDER_ID) ';
        //                         //MESSAGE(SQLQuery);
        //                         RecordSet1 := SQLConnection.Execute(SQLQuery, RowCount1);
        //                         InvPayAmt := 0;
        //                         Tot_InvPayAmt := 0;
        //                         IF NOT ((RecordSet1.BOF) OR (RecordSet1.EOF)) THEN
        //                             RecordSet1.MoveFirst;
        //                         WHILE NOT RecordSet1.EOF DO BEGIN
        //                             InvPayAmt := 0;
        //                             EVALUATE(InvPayAmt, FORMAT(RecordSet1.Fields.Item('planned_amount').Value));
        //                             Tot_InvPayAmt := Tot_InvPayAmt + InvPayAmt;
        //                             RowCount1 := RowCount1 + 1;
        //                             RecordSet1.MoveNext;
        //                         END;
        //                         Tot_Inv_Amt := Tot_Inv_Amt + InvAmt - Tot_InvPayAmt;
        //                         RowCount := RowCount + 1;
        //                         RecordSet.MoveNext;
        //                     END;
        //                     IF Tot_Inv_Amt > 0 THEN BEGIN
        //                         IF (Tot_Inv_Amt >= Amount) THEN
        //                             Pay_Amount := Amount
        //                         ELSE
        //                             Pay_Amount := Tot_Inv_Amt;
        //                     END ELSE
        //                         Pay_Amount := 0;
        //                     IF Pay_Amount > 0 THEN BEGIN
        //                         SQLQuery := 'select nvl(ARR_INSTALL_PAYMENT_SEQ.NEXTVAL,1) payid from dual';
        //                         //MESSAGE(SQLQuery);
        //                         RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                         IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                             RecordSet.MoveFirst;
        //                         WHILE NOT RecordSet.EOF DO BEGIN
        //                             EVALUATE(PaymentId, FORMAT(RecordSet.Fields.Item('payid').Value));
        //                             RowCount := RowCount + 1;
        //                             RecordSet.MoveNext;
        //                         END;
        //                         // insert payment record
        //                         Paid_Amt := Pay_Amount;
        //                         SQLQuery := 'insert into mrp_arr_instal_payment(AR_PAYMENT_ID,SALE_ORDER_ID,PAYMENT_DATE,AMOUNT,USERID,CREATION_DATE,AMOUNTTYPE) values(' + DELCHR(FORMAT(PaymentId), '=', ',') + ', ' +
        //                                    FORMAT(SaleOrderId) + ', to_date(''' + FORMAT(CLE."Posting Date", 0, '<Day>-<Month Text,3>-<Year4>') + ''',''dd-mon-yyyy''), ' +
        //                                    DELCHR(FORMAT(ROUND(Pay_Amount, 1, '=')), '=', ',') + ',''Auto'',sysdate,''I'')';
        //                         //MESSAGE(SQLQuery);
        //                         SQLConnection.Execute(SQLQuery);

        //                         SQLQuery := 'select * from MRP_ARR_INSTALL_INVOICE where SALE_ORDER_ID  = ' + FORMAT(SaleOrderId) + ' and INVOICE_DATE = to_date(''' +
        //                                     FORMAT(SIH."Posting Date", 0, '<Day>-<Month Text,3>-<Year4>') + ''',''dd-mon-yyyy'') and ERP_INVOICE_NO = ''' +
        //                                     DELCHR(SIH."External Document No.", '=', ',') + ''' and amount is not null order by LINE_NO,AR_INVOICE_ID';
        //                         //MESSAGE(SQLQuery);
        //                         RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                         IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                             RecordSet.MoveFirst;
        //                         WHILE NOT RecordSet.EOF DO BEGIN   // invoice loop
        //                             InvoiceAmt := 0;
        //                             IF FORMAT(RecordSet.Fields.Item('amount').Value) <> '' THEN
        //                                 EVALUATE(InvoiceAmt, FORMAT(RecordSet.Fields.Item('amount').Value))
        //                             ELSE
        //                                 InvoiceAmt := 0;
        //                             //EVALUATE(InvoiceAmt,FORMAT(RecordSet.Fields.Item('amount').Value));
        //                             SQLQuery := 'select nvl(sum(PLANNED_AMOUNT),0) PLANNED_AMOUNT   from MRP_INSTAL_PLAN_CHANGES where PLAN_CHANGE_ID in ( ' +
        //                                        'select  max(pl.PLAN_CHANGE_ID) from  MRP_INSTAL_PLAN_CHANGES pl ,(select sl_no,SALE_ORDER_ID,PLAN_CHANGE_ID ' +
        //                                        'from MRP_INSTAL_PLAN_CHANGES pl1 where planned_amount= 0  and payment_id is not null and invoice_id = ' +
        //                                        DELCHR(FORMAT(RecordSet.Fields.Item('AR_INVOICE_ID').Value), '=', ',') + ' and SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ') a ' +
        //                                        'where  a.sl_no=pl.sl_no and pl.PLAN_CHANGE_ID < a.PLAN_CHANGE_ID and a.SALE_ORDER_ID=pl.SALE_ORDER_ID) ';
        //                             //MESSAGE(SQLQuery);
        //                             RecordSet1 := SQLConnection.Execute(SQLQuery, RowCount1);
        //                             InvPayAmt := 0;
        //                             Tot_InvPayAmt := 0;
        //                             IF NOT ((RecordSet1.BOF) OR (RecordSet1.EOF)) THEN
        //                                 RecordSet1.MoveFirst;
        //                             WHILE NOT RecordSet1.EOF DO BEGIN
        //                                 InvPayAmt := 0;
        //                                 EVALUATE(InvPayAmt, FORMAT(RecordSet1.Fields.Item('planned_amount').Value));
        //                                 Tot_InvPayAmt := Tot_InvPayAmt + InvPayAmt;
        //                                 RowCount1 := RowCount1 + 1;
        //                                 RecordSet1.MoveNext;
        //                             END;
        //                             InvoiceAmt := InvoiceAmt - Tot_InvPayAmt;
        //                             IF Pay_Amount > 0 THEN  // if still payment amount is remaining pay in installtion plan changes
        //                             BEGIN
        //                                 SQLQuery := 'select * from  MRP_INSTAL_PLAN_CHANGES b,(select SALE_ORDER_ID,sl_no,max(plan_change_id) PlanChngId from MRP_INSTAL_PLAN_CHANGES where ' +
        //                                            ' SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ' and invoice_id =' + DELCHR(FORMAT(RecordSet.Fields.Item('AR_INVOICE_ID').Value), '=', ',') +
        //                                            ' group by SALE_ORDER_ID,sl_no) a where a.planchngid=b.plan_change_id and b.planned_amount > 0';
        //                                 //MESSAGE(SQLQuery);
        //                                 RecordSet1 := SQLConnection.Execute(SQLQuery, RowCount1);
        //                                 PlnndAmt := 0;
        //                                 PlndAmnt := 0;
        //                                 IF NOT ((RecordSet1.BOF) OR (RecordSet1.EOF)) THEN
        //                                     RecordSet1.MoveFirst;
        //                                 WHILE NOT RecordSet1.EOF DO BEGIN   // begin of instl pln changes loop
        //                                     IF ROUND(Pay_Amount, 1, '=') > 0 THEN  // if still payment amount is remaining pay in installtion plan changes
        //                                     BEGIN
        //                                         EVALUATE(PlndAmnt, FORMAT(RecordSet1.Fields.Item('planned_amount').Value));
        //                                         PlnndAmt := PlnndAmt + PlndAmnt;
        //                                         IF (ROUND(Pay_Amount, 1, '=') >= ROUND(PlndAmnt, 1, '=')) THEN BEGIN  // if payment amount > plan change amount
        //                                             SQLQuery := 'insert into MRP_INSTAL_PLAN_CHANGES(PLAN_CHANGE_ID,SL_NO,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,RESPONSE_SECTION,CREATION_DATE,' +
        //                                                        ' USERID,PAYMENT_ID,INVOICE_ID) values(INSTALL_PLAN_CHANGE_SEQ.NEXTVAL,' + DELCHR(FORMAT(RecordSet1.Fields.Item('sl_no').Value), '=', ',') + ',' + FORMAT(SaleOrderId) +
        //                                                        ', sysdate,0,''SAL'',sysdate,''Auto'',' + DELCHR(FORMAT(PaymentId), '=', ',') + ',' + DELCHR(FORMAT(RecordSet1.Fields.Item('invoice_id').Value), '=', ',') + ')';
        //                                             //MESSAGE(SQLQuery);
        //                                             SQLConnection.Execute(SQLQuery);
        //                                             Pay_Amount := Pay_Amount - PlndAmnt;
        //                                         END ELSE BEGIN // else part of if payment amount > plan change amount
        //                                             SQLQuery := 'select nvl(max(sl_no)+1,1) newslno from MRP_INSTAL_PLAN_CHANGES where SALE_ORDER_ID = ' + FORMAT(SaleOrderId) +
        //                                                        ' and INVOICE_ID = ' + DELCHR(FORMAT(RecordSet1.Fields.Item('invoice_id').Value), '=', ',');
        //                                             //MESSAGE(SQLQuery);
        //                                             Temp_SL_No := 1;
        //                                             RecordSet2 := SQLConnection.Execute(SQLQuery, RowCount2);
        //                                             IF NOT ((RecordSet2.BOF) OR (RecordSet2.EOF)) THEN
        //                                                 RecordSet2.MoveFirst;
        //                                             WHILE NOT RecordSet2.EOF DO BEGIN
        //                                                 EVALUATE(Temp_SL_No, FORMAT(RecordSet2.Fields.Item('newslno').Value));
        //                                                 RowCount2 := RowCount2 + 1;
        //                                                 RecordSet2.MoveNext;
        //                                             END;
        //                                             SQLQuery := 'insert into MRP_INSTAL_PLAN_CHANGES(PLAN_CHANGE_ID,SL_NO,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,RESPONSE_SECTION, ' +
        //                                                        ' CREATION_DATE,USERID,INVOICE_ID,SPLITEDFROM) values(INSTALL_PLAN_CHANGE_SEQ.NEXTVAL,' + DELCHR(FORMAT(Temp_SL_No), '=', ',') + ',' + FORMAT(SaleOrderId) + ',sysdate, ' +
        //                                                        DELCHR(FORMAT(ROUND(Pay_Amount, 1, '=')), '=', ',') + ',''SAL'',sysdate,''Auto'', ' + DELCHR(FORMAT(RecordSet1.Fields.Item('invoice_id').Value), '=', ',') +
        //                                                        ', ' + DELCHR(FORMAT(RecordSet1.Fields.Item('sl_no').Value), '=', ',') + ')';
        //                                             //MESSAGE(SQLQuery);
        //                                             SQLConnection.Execute(SQLQuery);

        //                                             SQLQuery := 'insert into MRP_INSTAL_PLAN_CHANGES(PLAN_CHANGE_ID,SL_NO,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,RESPONSE_SECTION, ' +
        //                                                        ' CREATION_DATE,USERID,PAYMENT_ID,INVOICE_ID) values(INSTALL_PLAN_CHANGE_SEQ.NEXTVAL,' + DELCHR(FORMAT(Temp_SL_No), '=', ',') + ',' + FORMAT(SaleOrderId) +
        //                                                        ', sysdate,0,''SAL'',sysdate,''Auto'',' + DELCHR(FORMAT(PaymentId), '=', ',') + ',' + DELCHR(FORMAT(RecordSet1.Fields.Item('invoice_id').Value), '=', ',') + ')';
        //                                             //MESSAGE(SQLQuery);
        //                                             SQLConnection.Execute(SQLQuery);

        //                                             SQLQuery := 'update MRP_INSTAL_PLAN_CHANGES set PLANNED_AMOUNT = ' + DELCHR(FORMAT(ROUND(PlndAmnt - Pay_Amount, 1, '=')), '=', ',') + ' where PLAN_CHANGE_ID = ' +
        //                                                        DELCHR(FORMAT(RecordSet1.Fields.Item('PLAN_CHANGE_ID').Value), '=', ',');
        //                                             //MESSAGE(SQLQuery);
        //                                             SQLConnection.Execute(SQLQuery);
        //                                             Pay_Amount := 0;
        //                                         END; // end of else part of if payment amount > plan change amount
        //                                     END;
        //                                     RowCount1 := RowCount1 + 1;
        //                                     RecordSet1.MoveNext;
        //                                 END; // end of instl pln changes loop
        //                                 temppp_amt := 0;
        //                                 IF (InvoiceAmt > PlnndAmt) AND (Pay_Amount > 0) THEN BEGIN
        //                                     IF Pay_Amount >= (InvoiceAmt - PlnndAmt) THEN
        //                                         temppp_amt := InvoiceAmt - PlnndAmt
        //                                     ELSE
        //                                         temppp_amt := Pay_Amount;
        //                                     SQLQuery := 'insert into MRP_INSTAL_PLAN_CHANGES(PLAN_CHANGE_ID,SL_NO,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,RESPONSE_SECTION, ' +
        //                                                ' CREATION_DATE,USERID,INVOICE_ID) values(PLAN_CHANGE_SEQ.NEXTVAL,(SELECT nvl(MAX(sl_no)+1,1) from MRP_INSTAL_PLAN_CHANGES where sale_order_id = ' +
        //                                                FORMAT(SaleOrderId) + ' and invoice_id = ' + DELCHR(FORMAT(RecordSet.Fields.Item('ar_invoice_id').Value), '=', ',') + '),' + FORMAT(SaleOrderId) + ',sysdate, ' +
        //                                                DELCHR(FORMAT(ROUND(temppp_amt, 1, '=')), '=', ',') + ',''SAL'',sysdate,''Auto'', ' + DELCHR(FORMAT(RecordSet.Fields.Item('ar_invoice_id').Value), '=', ',');
        //                                     //MESSAGE(SQLQuery);
        //                                     SQLConnection.Execute(SQLQuery);

        //                                     SQLQuery := 'insert into MRP_INSTAL_PLAN_CHANGES(PLAN_CHANGE_ID,SL_NO,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,RESPONSE_SECTION, ' +
        //                                                ' CREATION_DATE,USERID,PAYMENT_ID,INVOICE_ID) values(PLAN_CHANGE_SEQ.NEXTVAL,(SELECT nvl(MAX(sl_no),1) ' +
        //                                                ' from MRP_INSTAL_PLAN_CHANGES where sale_order_id = ' + FORMAT(SaleOrderId) + ' and invoice_id = ' +
        //                                                DELCHR(FORMAT(RecordSet.Fields.Item('ar_invoice_id').Value), '=', ',') + '),' + FORMAT(SaleOrderId) +
        //                                                ', sysdate,0,''SAL'',sysdate,''Auto'',' + DELCHR(FORMAT(PaymentId), '=', ',') + ',' + DELCHR(FORMAT(RecordSet.Fields.Item('ar_invoice_id').Value), '=', ',') + ')';
        //                                     //MESSAGE(SQLQuery);
        //                                     SQLConnection.Execute(SQLQuery);
        //                                 END;
        //                             END;  //end of if still payment amount is remaining pay in installtion plan changes
        //                             RowCount := RowCount + 1;
        //                             RecordSet.MoveNext;
        //                         END;  // end arr_inst_invoices loop
        //                     END;
        //                 END;  // end of if installation invoice
        //             END;  // end--only if order is aft integration
        //         END;    //end of if sale order exist in cf
        //         SQLConnection.CommitTrans;
        //         //RecordSet.Close;
        //         SQLConnection.Close;
        //         ConnectionOpen := 0;
        //     END; // end of if invoice exist in erp
        // END;  // end of if cust posting grp is private

    end;

    procedure AMC_Bill_Date_Update(SIH: Record "Sales Invoice Header"; Prev_Date: Date);
    var
        SaleOrderId: Integer;
    begin
        // Added by Pranavi on 23-Dec-2016 for AMC Bill date update to Cashflow if changed to clear duplicate invoice creation in CF issue
        // IF ISCLEAR(SQLConnection) THEN
        //     CREATE(SQLConnection, FALSE, TRUE);

        // IF ISCLEAR(RecordSet) THEN
        //     CREATE(RecordSet, FALSE, TRUE);

        // IF ISCLEAR(RecordSet1) THEN
        //     CREATE(RecordSet1, FALSE, TRUE);

        // IF ConnectionOpen <> 1 THEN BEGIN
        //     SQLConnection.ConnectionString := 'DSN=CASHFLOW;UID=cashflowuser;PASSWORD=firewall123;SERVER=oracle_80;';
        //     SQLConnection.Open;
        //     SQLConnection.BeginTrans;
        //     ConnectionOpen := 1;
        // END;

        // SQLQuery := 'select * from mrp_amc_order1 where internal_amc_no = ''' + FORMAT(SIH."Order No.") + '''';
        // //MESSAGE(SQLQuery);
        // RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        // IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //     RecordSet.MoveFirst;
        // WHILE NOT RecordSet.EOF DO BEGIN
        //     SaleOrderId := RecordSet.Fields.Item('AMC_ORDER_ID').Value;
        //     RowCount := RowCount + 1;
        //     RecordSet.MoveNext;
        // END;
        // IF SaleOrderId <> 0 THEN BEGIN
        //     SQLQuery := 'select * from mrp_amc_invoice1 where amc_order_id = ' + DELCHR(FORMAT(SaleOrderId), '=', ',') + ' and extdoc = ''' + DELCHR(FORMAT(SIH."External Document No."), '=', ',') +
        //                 ''' and amc_invoice_date = to_date(''' + FORMAT(Prev_Date, 0, '<Day>-<Month Text,3>-<Year4>') + ''',''dd-mon-yyyy'')';
        //     RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //     IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //         RecordSet.MoveFirst;
        //     WHILE NOT RecordSet.EOF DO BEGIN
        //         SQLQuery := 'update mrp_amc_invoice1 set amc_invoice_date = to_date(''' + FORMAT(SIH."Posting Date", 0, '<Day>-<Month Text,3>-<Year4>') + ''',''dd-mon-yyyy'') ' +
        //                     ' where amc_invoice_id = ' + DELCHR(FORMAT(RecordSet.Fields.Item('amc_invoice_id').Value), '=', ',');
        //         //MESSAGE(SQLQuery);
        //         SQLConnection.Execute(SQLQuery);
        //         RowCount := RowCount + 1;
        //         RecordSet.MoveNext;
        //     END;
        // END;

        // SQLConnection.CommitTrans;
        // RecordSet.Close;
        // SQLConnection.Close;
        // ConnectionOpen := 0;
        // // End by Pranavi
    end;

    procedure Pvt_Remaining_Adv_OrderPaymentinCF(GenJernlLine: Record "Gen. Journal Line");
    var
        AR_Paymnt_Id: Integer;
        SaleOrderId: Integer;
        SH: Record "Sales Header";
        Ordr_Tot_Amt: Decimal;
        Ordr_Sup_Amt: Decimal;
        Ordr_Ret_Amt: Decimal;
        Ordr_Inst_Amt: Decimal;
        Ord_Adv_Amt: Decimal;
        Tot_Inv_Amt: Decimal;
        Tot_Inst_Inv_Amt: Decimal;
        Ordr_PlnChanges_amt: Decimal;
        Inst_PlnChanges_Amt: Decimal;
        Tot_Adv_Paid_Amt: Decimal;
        Sup_UnPlnnd_Amt: Decimal;
        Ret_UnPlnnd_Amt: Decimal;
        Inst_UnPlnnd_Amt: Decimal;
        TempAmt: Decimal;
        Enf: Boolean;
        TestAmt: Decimal;
        LastOrdAdvId: Integer;
        temp_PlnAmt: Decimal;
        Is_Ordr_Aftr_Int: Code[10];
        CF_Ord_Adv_Amt: Decimal;
        Ord_Aftr_Int: Boolean;
        CustomerID: Code[30];
        OrderOk: Boolean;
        SIH: Record "Sales Invoice Header";
        Rem_Adv_Amt: Decimal;
    begin
        // IF GenJernlLine."Payment Type" <> GenJernlLine."Payment Type"::Advance THEN BEGIN
        //     OrderOk := FALSE;
        //     SH.RESET;
        //     SH.SETRANGE(SH."No.", GenJernlLine."Sale Order No");
        //     IF SH.FINDFIRST THEN BEGIN
        //         IF (SH."Customer Posting Group" IN ['PRIVATE', 'OTHERS', 'EXPORT']) AND NOT (SH."Sell-to Customer No." IN ['CUST00536', 'CUST01164']) AND (SH.Order_After_CF_Integration = TRUE) THEN
        //             OrderOk := TRUE;
        //     END ELSE BEGIN
        //         SIH.RESET;
        //         SIH.SETRANGE(SIH."Order No.", GenJernlLine."Sale Order No");
        //         IF SIH.FINDFIRST THEN
        //             IF (SIH."Customer Posting Group" IN ['PRIVATE', 'OTHERS', 'EXPORT']) AND NOT (SIH."Sell-to Customer No." IN ['CUST00536', 'CUST01164']) AND (SIH.Order_After_CF_Integration = TRUE) THEN
        //                 OrderOk := TRUE;
        //     END;
        //     IF OrderOk = TRUE THEN BEGIN
        //         IF ISCLEAR(SQLConnection) THEN
        //             CREATE(SQLConnection, FALSE, TRUE);

        //         IF ISCLEAR(RecordSet) THEN
        //             CREATE(RecordSet, FALSE, TRUE);

        //         IF ConnectionOpen <> 1 THEN BEGIN
        //             SQLConnection.ConnectionString := 'DSN=CASHFLOW;UID=cashflowuser;PASSWORD=firewall123;SERVER=oracle_80;';
        //             SQLConnection.Open;
        //             SQLConnection.BeginTrans;
        //             ConnectionOpen := 1;
        //         END;
        //         SQLQuery := 'SELECT * FROM MRP_SALE_ORDER WHERE INT_SAL_ORD_NO = ''' + GenJernlLine."Sale Order No" + ''' AND STATUS = ''N''';
        //         //MESSAGE(SQLQuery);
        //         RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //         IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //             RecordSet.MoveFirst;
        //         WHILE NOT RecordSet.EOF DO BEGIN
        //             SaleOrderId := RecordSet.Fields.Item('SALE_ORDER_ID').Value;
        //             IF FORMAT(RecordSet.Fields.Item('IS_ORDR_AFT_INTEGRTION').Value) = '1' THEN
        //                 Is_Ordr_Aftr_Int := 'YES'
        //             ELSE
        //                 Is_Ordr_Aftr_Int := 'NO';
        //             IF FORMAT(RecordSet.Fields.Item('ADV_AMOUNT').Value) <> '' THEN
        //                 EVALUATE(CF_Ord_Adv_Amt, FORMAT(RecordSet.Fields.Item('ADV_AMOUNT').Value))
        //             ELSE
        //                 CF_Ord_Adv_Amt := 0;
        //             RowCount := RowCount + 1;
        //             RecordSet.MoveNext;
        //         END;
        //         IF SaleOrderId <> 0 THEN BEGIN  // check if sale order present in sale order table in c/f then insert order
        //             IF (Is_Ordr_Aftr_Int = 'YES') AND (CF_Ord_Adv_Amt > 0) THEN BEGIN // only if order is aft integration
        //                 AR_Paymnt_Id := 0;
        //                 SQLQuery := 'SELECT * FROM MRP_ARR_PAYMENT WHERE SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ' AND ADVANCE_FLAG = 2';
        //                 RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                 IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                     RecordSet.MoveFirst;
        //                 WHILE NOT RecordSet.EOF DO BEGIN
        //                     AR_Paymnt_Id := RecordSet.Fields.Item('AR_PAYMENT_ID').Value;
        //                     RowCount := RowCount + 1;
        //                     RecordSet.MoveNext;
        //                 END;
        //                 // Start--update pln_changes amounts
        //                 Ordr_Tot_Amt := 0;
        //                 Ordr_Sup_Amt := 0;
        //                 Ordr_Ret_Amt := 0;
        //                 Ordr_Inst_Amt := 0;
        //                 Tot_Adv_Paid_Amt := 0;
        //                 SQLQuery := 'select nvl(sum(sale_order_amount),0) as tot_amt,nvl(sum(supplyamount),0) sup_amt, nvl(sum(retentionamount),0) ret_amt, ' +
        //                            'nvl(sum(installamount),0) inst_amt, nvl(sum(adv_amount),0) adv_amt from MRP_SALE_ORDER where sale_order_id = ' + FORMAT(SaleOrderId);
        //                 //MESSAGE(SQLQuery);
        //                 RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                 IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                     RecordSet.MoveFirst;
        //                 WHILE NOT RecordSet.EOF DO BEGIN
        //                     EVALUATE(Ordr_Tot_Amt, FORMAT(RecordSet.Fields.Item('tot_amt').Value));
        //                     EVALUATE(Ordr_Sup_Amt, FORMAT(RecordSet.Fields.Item('sup_amt').Value));
        //                     EVALUATE(Ord_Adv_Amt, FORMAT(RecordSet.Fields.Item('adv_amt').Value));
        //                     RowCount := RowCount + 1;
        //                     RecordSet.MoveNext;
        //                 END;
        //                 SQLQuery := 'select nvl(sum(amount),0) inv_amt from MRP_ARR_INVOICE where sale_order_id = ' + FORMAT(SaleOrderId);
        //                 //MESSAGE(SQLQuery);
        //                 RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                 IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                     RecordSet.MoveFirst;
        //                 WHILE NOT RecordSet.EOF DO BEGIN
        //                     EVALUATE(Tot_Inv_Amt, FORMAT(RecordSet.Fields.Item('inv_amt').Value));
        //                     RowCount := RowCount + 1;
        //                     RecordSet.MoveNext;
        //                 END;
        //                 SQLQuery := 'SELECT nvl(sum(amount),0) adv_paid_amt FROM MRP_ARR_PAYMENT WHERE SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ' AND ADVANCE_FLAG = 2';
        //                 //MESSAGE(SQLQuery);
        //                 RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                 IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                     RecordSet.MoveFirst;
        //                 WHILE NOT RecordSet.EOF DO BEGIN
        //                     EVALUATE(Tot_Adv_Paid_Amt, FORMAT(RecordSet.Fields.Item('adv_paid_amt').Value));
        //                     RowCount := RowCount + 1;
        //                     RecordSet.MoveNext;
        //                 END;

        //                 IF CF_Ord_Adv_Amt > Tot_Adv_Paid_Amt THEN
        //                     Rem_Adv_Amt := CF_Ord_Adv_Amt - Tot_Adv_Paid_Amt
        //                 ELSE
        //                     Rem_Adv_Amt := 0;

        //                 IF ABS(GenJernlLine.Amount) <= Rem_Adv_Amt THEN
        //                     Rem_Adv_Amt := ABS(GenJernlLine.Amount);

        //                 // order on hand plan changes amount
        //                 SQLQuery := 'select * from  MRP_ORDER_PLAN_CHANGES b,(select SALE_ORDER_ID,ord_advance_id,max(plan_change_id) PlanChngId ' +
        //                             ' from MRP_ORDER_PLAN_CHANGES where SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ' group by SALE_ORDER_ID,ord_advance_id) a ' +
        //                             ' where a.planchngid=b.plan_change_id and b.planned_amount > 0';
        //                 //MESSAGE(SQLQuery);
        //                 Ordr_PlnChanges_amt := 0;
        //                 temp_PlnAmt := 0;
        //                 RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                 IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                     RecordSet.MoveFirst;
        //                 WHILE NOT RecordSet.EOF DO BEGIN
        //                     temp_PlnAmt := 0;
        //                     EVALUATE(temp_PlnAmt, FORMAT(RecordSet.Fields.Item('planned_amount').Value));
        //                     Ordr_PlnChanges_amt := Ordr_PlnChanges_amt + temp_PlnAmt;
        //                     RowCount := RowCount + 1;
        //                     RecordSet.MoveNext;
        //                 END;
        //                 Sup_UnPlnnd_Amt := ROUND(Ordr_Sup_Amt + Ord_Adv_Amt - Tot_Adv_Paid_Amt - Ordr_PlnChanges_amt - Tot_Inv_Amt, 1, '=');
        //                 IF Rem_Adv_Amt > 0 THEN BEGIN
        //                     IF ROUND(Sup_UnPlnnd_Amt, 1, '=') < ABS(ROUND(Rem_Adv_Amt, 1, '=')) THEN BEGIN
        //                         // order on hand plan changes amount
        //                         SQLQuery := 'select * from  MRP_ORDER_PLAN_CHANGES b,(select SALE_ORDER_ID,ord_advance_id,max(plan_change_id) PlanChngId ' +
        //                                     ' from MRP_ORDER_PLAN_CHANGES where SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ' group by SALE_ORDER_ID,ord_advance_id) a ' +
        //                                     ' where a.planchngid=b.plan_change_id and b.planned_amount > 0 order by b.payment_realize_date desc,b.planned_amount desc';
        //                         //MESSAGE(SQLQuery);
        //                         RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                         IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                             RecordSet.MoveFirst;
        //                         TestAmt := 0;
        //                         Enf := FALSE;
        //                         TestAmt := ROUND(ABS(Rem_Adv_Amt) - Sup_UnPlnnd_Amt, 1, '=');
        //                         WHILE NOT RecordSet.EOF AND (NOT Enf) AND (ROUND(TestAmt, 1, '=') > 0) DO BEGIN
        //                             EVALUATE(TempAmt, FORMAT(RecordSet.Fields.Item('planned_amount').Value));
        //                             IF (ROUND(TestAmt, 1, '=') >= ROUND(TempAmt, 1, '=')) THEN BEGIN
        //                                 SQLQuery := 'insert into MRP_ORDER_PLAN_CHANGES(PLAN_CHANGE_ID,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,CREATION_DATE, ' +
        //                                            ' USERID,ORD_ADVANCE_ID) values(ORDER_PLANCHANGES_SEQ.NEXTVAL, ' + DELCHR(FORMAT(RecordSet.Fields.Item('SALE_ORDER_ID').Value), '=', ',') +
        //                                            ', sysdate, 0, sysdate, ''Auto'',' + DELCHR(FORMAT(RecordSet.Fields.Item('ORD_ADVANCE_ID').Value), '=', ',') + ')';
        //                                 //MESSAGE(SQLQuery);
        //                                 SQLConnection.Execute(SQLQuery, RowCount);

        //                                 SQLQuery := 'update mrp_arr_ord_advance set order_flag = 1 where ORD_ADVANCE_ID = ' + DELCHR(FORMAT(RecordSet.Fields.Item('ORD_ADVANCE_ID').Value), '=', ',');
        //                                 //MESSAGE(SQLQuery);
        //                                 SQLConnection.Execute(SQLQuery, RowCount);

        //                                 TestAmt := TestAmt - TempAmt;
        //                             END ELSE BEGIN
        //                                 SQLQuery := 'select nvl(ORD_ADVANCE_ID_SEQ.NEXTVAL,1) LastOrdAdvId from dual';
        //                                 RecordSet1 := SQLConnection.Execute(SQLQuery, RowCount1);
        //                                 IF NOT ((RecordSet1.BOF) OR (RecordSet1.EOF)) THEN
        //                                     RecordSet1.MoveFirst;
        //                                 WHILE NOT RecordSet1.EOF DO BEGIN
        //                                     EVALUATE(LastOrdAdvId, FORMAT(RecordSet1.Fields.Item('LastOrdAdvId').Value));
        //                                     RowCount1 := RowCount1 + 1;
        //                                     RecordSet1.MoveNext;
        //                                 END;
        //                                 SQLQuery := 'insert into mrp_arr_ord_advance(ORD_ADVANCE_ID,SALE_ORDER_ID,EXP_ADVANCE_AMOUNT,ACCTPERIOD, ' +
        //                                            ' ACCT_YEAR,EXP_RECEIVED_DATE,ACTINACT,ORDER_FLAG) values (' + DELCHR(FORMAT(LastOrdAdvId), '=', ',') + ', ' +
        //                                            DELCHR(FORMAT(RecordSet.Fields.Item('SALE_ORDER_ID').Value), '=', ',') + ',' + DELCHR(FORMAT(ROUND(ABS(TestAmt), 1, '=')), '=', ',') +
        //                                            ', (select ACCTPERIOD from mrp_arr_ord_advance where ORD_ADVANCE_ID = ' + DELCHR(FORMAT(RecordSet.Fields.Item('ORD_ADVANCE_ID').Value), '=', ',') +
        //                                            '), (select ACCT_YEAR from mrp_arr_ord_advance where ORD_ADVANCE_ID = ' + DELCHR(FORMAT(RecordSet.Fields.Item('ORD_ADVANCE_ID').Value), '=', ',') +
        //                                            '), (select EXP_RECEIVED_DATE from mrp_arr_ord_advance where ORD_ADVANCE_ID = ' + DELCHR(FORMAT(RecordSet.Fields.Item('ORD_ADVANCE_ID').Value), '=', ',') + '), 1, 1)';
        //                                 //MESSAGE(SQLQuery);
        //                                 SQLConnection.Execute(SQLQuery, RowCount);
        //                                 SQLQuery := 'insert into MRP_ORDER_PLAN_CHANGES(PLAN_CHANGE_ID,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,CREATION_DATE, ' +
        //                                            ' USERID,ORD_ADVANCE_ID) values(ORDER_PLANCHANGES_SEQ.NEXTVAL, ' + DELCHR(FORMAT(RecordSet.Fields.Item('SALE_ORDER_ID').Value), '=', ',') +
        //                                            ', sysdate, ' + DELCHR(FORMAT(ROUND(TestAmt, 1, '=')), '=', ',') + ', sysdate, ''Auto'',' + DELCHR(FORMAT(LastOrdAdvId), '=', ',') + ')';
        //                                 //MESSAGE(SQLQuery);
        //                                 SQLConnection.Execute(SQLQuery, RowCount);
        //                                 SQLQuery := 'insert into MRP_ORDER_PLAN_CHANGES(PLAN_CHANGE_ID,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,CREATION_DATE, ' +
        //                                            ' USERID,ORD_ADVANCE_ID) values(ORDER_PLANCHANGES_SEQ.NEXTVAL, ' + DELCHR(FORMAT(RecordSet.Fields.Item('SALE_ORDER_ID').Value), '=', ',') +
        //                                            ', sysdate, 0, sysdate, ''Auto'',' + DELCHR(FORMAT(LastOrdAdvId), '=', ',') + ')';
        //                                 //MESSAGE(SQLQuery);
        //                                 SQLConnection.Execute(SQLQuery, RowCount);

        //                                 SQLQuery := 'update MRP_ORDER_PLAN_CHANGES set PLANNED_AMOUNT = ' + DELCHR(FORMAT(ROUND(TempAmt - TestAmt, 1, '=')), '=', ',') +
        //                                            ' where PLAN_CHANGE_ID = ' + DELCHR(FORMAT(RecordSet.Fields.Item('PLAN_CHANGE_ID').Value), '=', ',');
        //                                 //MESSAGE(SQLQuery);
        //                                 SQLConnection.Execute(SQLQuery, RowCount);

        //                                 SQLQuery := 'update mrp_arr_ord_advance set EXP_ADVANCE_AMOUNT = ' + DELCHR(FORMAT(ROUND(TempAmt - TestAmt, 1, '=')), '=', ',') +
        //                                            ' where ORD_ADVANCE_ID = ' + DELCHR(FORMAT(RecordSet.Fields.Item('ORD_ADVANCE_ID').Value), '=', ',');
        //                                 //MESSAGE(SQLQuery);
        //                                 SQLConnection.Execute(SQLQuery, RowCount);
        //                                 Enf := TRUE;
        //                             END;
        //                             RowCount := RowCount + 1;
        //                             RecordSet.MoveNext;
        //                         END;  //End--order on hand pln chnges loop
        //                     END;
        //                     IF AR_Paymnt_Id <> 0 THEN BEGIN
        //                         SQLQuery := 'UPDATE MRP_ARR_PAYMENT SET AMOUNT = nvl(AMOUNT,0) + ' + DELCHR(FORMAT(ROUND(ABS(Rem_Adv_Amt), 1, '=')), '=', ',') +
        //                                    ' WHERE SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ' AND ADVANCE_FLAG = 2';
        //                         //MESSAGE(SQLQuery);
        //                         SQLConnection.Execute(SQLQuery);
        //                     END ELSE BEGIN
        //                         SQLQuery := 'insert into MRP_ARR_PAYMENT(AR_PAYMENT_ID,SALE_ORDER_ID,PAYMENT_DATE,AMOUNT,USERID,CREATION_DATE,ADVANCE_FLAG' +
        //                                    ') values(ARR_PAYMENT_SEQ.NEXTVAL,' + FORMAT(SaleOrderId) + ',to_date(''' + FORMAT(GenJernlLine."Posting Date", 0, '<Day>-<Month Text,3>-<Year4>') +
        //                                    ''',''dd-mon-yyyy''), ' + DELCHR(FORMAT(ABS(ROUND(Rem_Adv_Amt, 1, '='))), '=', ',') + ', ''Auto'', sysdate,2)';
        //                         //MESSAGE(SQLQuery);
        //                         SQLConnection.Execute(SQLQuery);
        //                     END;
        //                 END;
        //             END;  // end--only if order is aft integration
        //         END; // check if sale order present in sale order table in c/f then insert order
        //         SQLConnection.CommitTrans;
        //         //RecordSet.Close;
        //         SQLConnection.Close;
        //         ConnectionOpen := 0;
        //         // MESSAGE('Sale Order Invoiced in Cashflow!');
        //     END;  // end of OrderOk
        // END;  // end of if <>Advance
    end;

    procedure PvtOrderInvoicePaymentInCF_1(CLE: Record "Cust. Ledger Entry"; Amount: Decimal);
    var
        SIH: Record "Sales Invoice Header";
        SH: Record "Sales Header";
        SaleOrderId: Integer;
        SIL: Record "Sales Invoice Line";
        SL: Record "Sales Line";
        PT: Record "Payment Terms";
        PlndAmnt: Decimal;
        TotPlndAmnt: Decimal;
        Pay_Amount: Decimal;
        PaymentId: Integer;
        Temp_SL_No: Integer;
        Is_Ordr_Aftr_Int: Code[10];
        Tot_Inv_Amt: Decimal;
        InvAmt: Decimal;
        InvPayAmt: Decimal;
        Tot_InvPayAmt: Decimal;
        Tot_Recvbl_Amt: Decimal;
        Tol_Inst_Recvbl_Amt: Decimal;
        Tot_Recvbl_PlndAmnt: Decimal;
        TotInst_Recvbl_PlndAmnt: Decimal;
        InvoiceAmt: Decimal;
        PlnndAmt: Decimal;
        temppp_amt: Decimal;
        Adv_Cons_Amt: Decimal;
        Tmp_UnitPrice: Decimal;
        Tmp_Adv_Perct: Decimal;
        Tmp_Inv_Qty: Decimal;
        Tmp_Inv_Adv_Amt: Decimal;
        tmp_invamt: Decimal;
        Tmp_Nxt_Inv_Amt: Decimal;
        TmpInvAmt: Decimal;
        Tmp_InvPayAmt: Decimal;
        Tmp_Tot_InvPayAmt: Decimal;
        Tmp_Aply_Amt: Decimal;
        Tmp_Aply_Amt_Tot: Decimal;
        Paid_Amt: Decimal;
        Inst_Paid_Amt: Decimal;
    begin
        // MESSAGE('Invoice Payment In CashFlow!');
        ///  IF (ROUND(Amount, 1, '=') > 0) AND NOT (CLE."Customer No." IN ['CUST00536', 'CUST01164']) AND (CLE."Customer Posting Group" IN ['PRIVATE', 'OTHERS', 'EXPORT']) THEN BEGIN // if posting grp is private
        // SIH.RESET;
        // SIH.SETRANGE(SIH."No.", CLE."Document No.");
        // IF SIH.FINDFIRST THEN    // if invoice found in erp
        // BEGIN

        //     reurn_due_days := 0;
        //     reurn_due_days := payment_terms_based_amount_to_cfl(SIH."Order No.", SIH."External Document No.", SIH."Posting Date"); // added by sujani for amount displaying avoidance in TODAY in Cashflow
        //     payment_Realization_Date := SIH."Posting Date" + reurn_due_days; // added by sujani for amount displaying avoidance in TODAY in Cashflow

        //     // IF ISCLEAR(SQLConnection) THEN
        //     //     CREATE(SQLConnection, FALSE, TRUE);

        //     // IF ISCLEAR(RecordSet) THEN
        //     //     CREATE(RecordSet, FALSE, TRUE);

        //     // IF ISCLEAR(RecordSet1) THEN
        //     //     CREATE(RecordSet1, FALSE, TRUE);

        //     // IF ConnectionOpen <> 1 THEN BEGIN
        //     //     SQLConnection.ConnectionString := 'DSN=CASHFLOW;UID=cashflowuser;PASSWORD=firewall123;SERVER=oracle_80;';
        //     //     SQLConnection.Open;
        //     //     SQLConnection.BeginTrans;
        //     //     ConnectionOpen := 1;
        //     // END;

        //     SQLQuery := 'SELECT * FROM MRP_SALE_ORDER WHERE INT_SAL_ORD_NO = ''' + SIH."Order No." + ''' AND STATUS = ''N''';
        //     //MESSAGE(SQLQuery);
        //     RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //     IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //         RecordSet.MoveFirst;
        //     WHILE NOT RecordSet.EOF DO BEGIN
        //         SaleOrderId := RecordSet.Fields.Item('SALE_ORDER_ID').Value;
        //         IF FORMAT(RecordSet.Fields.Item('IS_ORDR_AFT_INTEGRTION').Value) = '1' THEN
        //             Is_Ordr_Aftr_Int := 'YES'
        //         ELSE
        //             Is_Ordr_Aftr_Int := 'NO';
        //         RowCount := RowCount + 1;
        //         RecordSet.MoveNext;
        //     END;
        //     IF SaleOrderId <> 0 THEN BEGIN  // check if sale order present in sale order table in cf
        //         IF Is_Ordr_Aftr_Int = 'YES' THEN  // only if order is aft integration
        //         BEGIN
        //             IF COPYSTR(SIH."External Document No.", 1, 2) <> 'IN' THEN BEGIN    // if supply bill
        //                 TotPlndAmnt := 0;
        //                 Tot_Inv_Amt := 0;
        //                 Tot_Recvbl_Amt := 0;
        //                 Tol_Inst_Recvbl_Amt := 0;
        //                 Tot_Recvbl_PlndAmnt := 0;
        //                 TotInst_Recvbl_PlndAmnt := 0;
        //                 SQLQuery := 'select * from MRP_ARR_INVOICE where SALE_ORDER_ID  = ' + FORMAT(SaleOrderId) + ' and INVOICE_DATE = to_date(''' +
        //                             FORMAT(SIH."Posting Date", 0, '<Day>-<Month Text,3>-<Year4>') +
        //                             ''',''dd-mon-yyyy'') and ERP_INVOICE_NO = ''' + DELCHR(SIH."External Document No.", '=', ',') + ''' order by LINE_NO,AR_INVOICE_ID';
        //                 //MESSAGE(SQLQuery);
        //                 RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                 IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                     RecordSet.MoveFirst;
        //                 WHILE NOT RecordSet.EOF DO BEGIN
        //                     InvAmt := 0;
        //                     EVALUATE(InvAmt, FORMAT(RecordSet.Fields.Item('amount').Value));
        //                     SQLQuery := 'select * from  MRP_PLAN_CHANGES b, (select SALE_ORDER_ID,sl_no,max(plan_change_id) PlanChngId from MRP_PLAN_CHANGES where ' +
        //                                ' SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ' and invoice_id = ' + DELCHR(FORMAT(RecordSet.Fields.Item('AR_INVOICE_ID').Value), '=', ',') + ' ' +
        //                                ' group by SALE_ORDER_ID,sl_no) a where a.planchngid=b.plan_change_id and b.planned_amount > 0';
        //                     //MESSAGE(SQLQuery);
        //                     RecordSet1 := SQLConnection.Execute(SQLQuery, RowCount1);
        //                     PlndAmnt := 0;
        //                     IF NOT ((RecordSet1.BOF) OR (RecordSet1.EOF)) THEN
        //                         RecordSet1.MoveFirst;
        //                     WHILE NOT RecordSet1.EOF DO BEGIN
        //                         PlndAmnt := 0;
        //                         EVALUATE(PlndAmnt, FORMAT(RecordSet1.Fields.Item('planned_amount').Value));
        //                         TotPlndAmnt := TotPlndAmnt + PlndAmnt;
        //                         Tot_Recvbl_PlndAmnt := Tot_Recvbl_PlndAmnt + PlndAmnt;
        //                         RowCount1 := RowCount1 + 1;
        //                         RecordSet1.MoveNext;
        //                     END;
        //                     SQLQuery := 'select nvl(sum(PLANNED_AMOUNT),0) PLANNED_AMOUNT from MRP_PLAN_CHANGES where PLAN_CHANGE_ID in ( ' +
        //                                'select  max(pl.PLAN_CHANGE_ID) from  MRP_PLAN_CHANGES pl ,(select sl_no,SALE_ORDER_ID,PLAN_CHANGE_ID ' +
        //                                'from MRP_PLAN_CHANGES pl1 where planned_amount= 0  and payment_id is not null and invoice_id = ' +
        //                                DELCHR(FORMAT(RecordSet.Fields.Item('AR_INVOICE_ID').Value), '=', ',') + ' and SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ') a ' +
        //                                'where  a.sl_no=pl.sl_no and pl.PLAN_CHANGE_ID < a.PLAN_CHANGE_ID and a.SALE_ORDER_ID=pl.SALE_ORDER_ID) ';
        //                     //MESSAGE(SQLQuery);
        //                     RecordSet1 := SQLConnection.Execute(SQLQuery, RowCount1);
        //                     InvPayAmt := 0;
        //                     Tot_InvPayAmt := 0;
        //                     IF NOT ((RecordSet1.BOF) OR (RecordSet1.EOF)) THEN
        //                         RecordSet1.MoveFirst;
        //                     WHILE NOT RecordSet1.EOF DO BEGIN
        //                         InvPayAmt := 0;
        //                         EVALUATE(InvPayAmt, FORMAT(RecordSet1.Fields.Item('planned_amount').Value));
        //                         Tot_InvPayAmt := Tot_InvPayAmt + InvPayAmt;
        //                         RowCount1 := RowCount1 + 1;
        //                         RecordSet1.MoveNext;
        //                     END;
        //                     Tot_Inv_Amt := Tot_Inv_Amt + InvAmt - Tot_InvPayAmt;
        //                     Tot_Recvbl_Amt := Tot_Recvbl_Amt + InvAmt - Tot_InvPayAmt;
        //                     RowCount := RowCount + 1;
        //                     RecordSet.MoveNext;
        //                 END;
        //                 SQLQuery := 'select * from MRP_ARR_INSTALL_INVOICE where SALE_ORDER_ID  = ' + FORMAT(SaleOrderId) + ' and INVOICE_DATE = to_date(''' +
        //                             FORMAT(SIH."Posting Date", 0, '<Day>-<Month Text,3>-<Year4>') + ''',''dd-mon-yyyy'') and ERP_INVOICE_NO = ''' +
        //                             DELCHR(SIH."External Document No.", '=', ',') + ''' and AMOUNTTYPE = ''R'' and amount is not null order by LINE_NO,AR_INVOICE_ID';
        //                 //MESSAGE(SQLQuery);
        //                 RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                 IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                     RecordSet.MoveFirst;
        //                 WHILE NOT RecordSet.EOF DO BEGIN   // invoice loop
        //                     InvAmt := 0;
        //                     EVALUATE(InvAmt, FORMAT(RecordSet.Fields.Item('amount').Value));
        //                     SQLQuery := 'select * from  MRP_INSTAL_PLAN_CHANGES b,(select SALE_ORDER_ID,sl_no,max(plan_change_id) PlanChngId from MRP_INSTAL_PLAN_CHANGES where ' +
        //                                ' SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ' and invoice_id =' + DELCHR(FORMAT(RecordSet.Fields.Item('AR_INVOICE_ID').Value), '=', ',') +
        //                                ' group by SALE_ORDER_ID,sl_no) a where a.planchngid=b.plan_change_id and b.planned_amount > 0';
        //                     //MESSAGE(SQLQuery);
        //                     RecordSet1 := SQLConnection.Execute(SQLQuery, RowCount1);
        //                     PlndAmnt := 0;
        //                     IF NOT ((RecordSet1.BOF) OR (RecordSet1.EOF)) THEN
        //                         RecordSet1.MoveFirst;
        //                     WHILE NOT RecordSet1.EOF DO BEGIN   // begin of instl pln changes loop
        //                         PlndAmnt := 0;
        //                         EVALUATE(PlndAmnt, FORMAT(RecordSet1.Fields.Item('planned_amount').Value));
        //                         TotPlndAmnt := TotPlndAmnt + PlndAmnt;
        //                         TotInst_Recvbl_PlndAmnt := TotInst_Recvbl_PlndAmnt + PlndAmnt;
        //                         RowCount1 := RowCount1 + 1;
        //                         RecordSet1.MoveNext;
        //                     END;
        //                     SQLQuery := 'select nvl(sum(PLANNED_AMOUNT),0) PLANNED_AMOUNT   from MRP_INSTAL_PLAN_CHANGES where PLAN_CHANGE_ID in ( ' +
        //                                'select  max(pl.PLAN_CHANGE_ID) from  MRP_INSTAL_PLAN_CHANGES pl ,(select sl_no,SALE_ORDER_ID,PLAN_CHANGE_ID ' +
        //                                'from MRP_INSTAL_PLAN_CHANGES pl1 where planned_amount= 0  and payment_id is not null and invoice_id = ' +
        //                                DELCHR(FORMAT(RecordSet.Fields.Item('AR_INVOICE_ID').Value), '=', ',') + ' and SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ') a ' +
        //                                'where  a.sl_no=pl.sl_no and pl.PLAN_CHANGE_ID < a.PLAN_CHANGE_ID and a.SALE_ORDER_ID=pl.SALE_ORDER_ID) ';
        //                     //MESSAGE(SQLQuery);
        //                     RecordSet1 := SQLConnection.Execute(SQLQuery, RowCount1);
        //                     InvPayAmt := 0;
        //                     Tot_InvPayAmt := 0;
        //                     IF NOT ((RecordSet1.BOF) OR (RecordSet1.EOF)) THEN
        //                         RecordSet1.MoveFirst;
        //                     WHILE NOT RecordSet1.EOF DO BEGIN
        //                         InvPayAmt := 0;
        //                         EVALUATE(InvPayAmt, FORMAT(RecordSet1.Fields.Item('planned_amount').Value));
        //                         Tot_InvPayAmt := Tot_InvPayAmt + InvPayAmt;
        //                         RowCount1 := RowCount1 + 1;
        //                         RecordSet1.MoveNext;
        //                     END;
        //                     Tot_Inv_Amt := Tot_Inv_Amt + InvAmt - Tot_InvPayAmt;
        //                     Tol_Inst_Recvbl_Amt := Tol_Inst_Recvbl_Amt + InvAmt - Tot_InvPayAmt;
        //                     RowCount := RowCount + 1;
        //                     RecordSet.MoveNext;
        //                 END;
        //                 /*
        //                 IF Tot_Inv_Amt > 0 THEN BEGIN
        //                   IF (Tot_Inv_Amt >= Amount) THEN
        //                     Pay_Amount := Amount
        //                   ELSE
        //                     Pay_Amount := Tot_Inv_Amt;
        //                 END ELSE
        //                   Pay_Amount := 0;
        //                 */
        //                 IF Tot_Recvbl_Amt + Tol_Inst_Recvbl_Amt > 0 THEN BEGIN  // if Receivable amt exist
        //                     IF (Tot_Recvbl_Amt + Tol_Inst_Recvbl_Amt >= Amount) THEN BEGIN    // if Receivable amt > ERP_Paying Amt then only pay upto ERP_Paying Amt
        //                         Pay_Amount := Amount;
        //                         Amount := 0;
        //                     END
        //                     ELSE BEGIN                     // if Receivable amt < ERP_Paying Amt then only pay upto Receivable Amt
        //                         Pay_Amount := Tot_Recvbl_Amt + Tol_Inst_Recvbl_Amt;
        //                         Amount := Amount - Pay_Amount;
        //                     END;
        //                 END ELSE     // if there is no Receivable amt then no need to pay amt
        //                     Pay_Amount := 0;

        //                 IF ROUND(Pay_Amount, 1, '=') > 0 THEN BEGIN
        //                     SQLQuery := 'select nvl(ARR_PAYMENT_SEQ.NEXTVAL,1) payid from dual';
        //                     //MESSAGE(SQLQuery);
        //                     RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                     IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                         RecordSet.MoveFirst;
        //                     WHILE NOT RecordSet.EOF DO BEGIN
        //                         EVALUATE(PaymentId, FORMAT(RecordSet.Fields.Item('payid').Value));
        //                         RowCount := RowCount + 1;
        //                         RecordSet.MoveNext;
        //                     END;
        //                     // insert payment record
        //                     SQLQuery := 'insert into MRP_ARR_PAYMENT(AR_PAYMENT_ID,SALE_ORDER_ID,PAYMENT_DATE,AMOUNT,USERID,CREATION_DATE) values(' + FORMAT(PaymentId) + ', ' +
        //                                FORMAT(SaleOrderId) + ', to_date(''' + FORMAT(CLE."Posting Date", 0, '<Day>-<Month Text,3>-<Year4>') + ''',''dd-mon-yyyy''),' +
        //                                DELCHR(FORMAT(ROUND(Pay_Amount, 1, '=')), '=', ',') + ', ''Auto'', sysdate)';
        //                     //MESSAGE(SQLQuery);
        //                     SQLConnection.Execute(SQLQuery);

        //                     SQLQuery := 'select * from MRP_ARR_INVOICE where SALE_ORDER_ID  = ' + FORMAT(SaleOrderId) + ' and INVOICE_DATE = to_date(''' +
        //                                 FORMAT(SIH."Posting Date", 0, '<Day>-<Month Text,3>-<Year4>') +
        //                                 ''',''dd-mon-yyyy'') and ERP_INVOICE_NO = ''' + DELCHR(SIH."External Document No.", '=', ',') + ''' order by LINE_NO,AR_INVOICE_ID';
        //                     //MESSAGE(SQLQuery);
        //                     RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                     IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                         RecordSet.MoveFirst;
        //                     WHILE NOT RecordSet.EOF DO BEGIN   // invoice loop
        //                         InvoiceAmt := 0;
        //                         Adv_Cons_Amt := 0;
        //                         Tmp_UnitPrice := 0;
        //                         Tmp_Adv_Perct := 0;
        //                         Tmp_Inv_Qty := 0;
        //                         Tmp_Inv_Adv_Amt := 0;
        //                         IF FORMAT(RecordSet.Fields.Item('amount').Value) <> '' THEN
        //                             EVALUATE(InvoiceAmt, FORMAT(RecordSet.Fields.Item('amount').Value))
        //                         ELSE
        //                             InvoiceAmt := 0;
        //                         //EVALUATE(InvoiceAmt,FORMAT(RecordSet.Fields.Item('amount').Value));
        //                         IF FORMAT(RecordSet.Fields.Item('ADV_AMOUNT_CONSIDERED').Value) <> '' THEN
        //                             EVALUATE(Adv_Cons_Amt, FORMAT(RecordSet.Fields.Item('ADV_AMOUNT_CONSIDERED').Value))
        //                         ELSE
        //                             Adv_Cons_Amt := 0;
        //                         SQLQuery := 'select nvl(sum(PLANNED_AMOUNT),0) PLANNED_AMOUNT from MRP_PLAN_CHANGES where PLAN_CHANGE_ID in ( ' +
        //                                    'select  max(pl.PLAN_CHANGE_ID) from  MRP_PLAN_CHANGES pl ,(select sl_no,SALE_ORDER_ID,PLAN_CHANGE_ID ' +
        //                                    'from MRP_PLAN_CHANGES pl1 where planned_amount= 0  and payment_id is not null and invoice_id = ' +
        //                                    DELCHR(FORMAT(RecordSet.Fields.Item('AR_INVOICE_ID').Value), '=', ',') + ' and SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ') a ' +
        //                                    'where  a.sl_no=pl.sl_no and pl.PLAN_CHANGE_ID < a.PLAN_CHANGE_ID and a.SALE_ORDER_ID=pl.SALE_ORDER_ID) ';
        //                         //MESSAGE(SQLQuery);
        //                         RecordSet1 := SQLConnection.Execute(SQLQuery, RowCount1);
        //                         InvPayAmt := 0;
        //                         Tot_InvPayAmt := 0;
        //                         IF NOT ((RecordSet1.BOF) OR (RecordSet1.EOF)) THEN
        //                             RecordSet1.MoveFirst;
        //                         WHILE NOT RecordSet1.EOF DO BEGIN
        //                             InvPayAmt := 0;
        //                             EVALUATE(InvPayAmt, FORMAT(RecordSet1.Fields.Item('planned_amount').Value));
        //                             Tot_InvPayAmt := Tot_InvPayAmt + InvPayAmt;
        //                             RowCount1 := RowCount1 + 1;
        //                             RecordSet1.MoveNext;
        //                         END;
        //                         InvoiceAmt := InvoiceAmt - Tot_InvPayAmt;
        //                         SQLQuery := 'select nvl(unit_price,0) unit_price,nvl(advance_percntg,0) advance_percntg from mrp_sale_order_lines where sale_order_id = ' +
        //                                     FORMAT(SaleOrderId) + ' and LINE_NO = ' + DELCHR(FORMAT(RecordSet.Fields.Item('LINE_NO').Value), '=', ',');
        //                         //MESSAGE(SQLQuery);
        //                         RecordSet1 := SQLConnection.Execute(SQLQuery, RowCount1);
        //                         IF NOT ((RecordSet1.BOF) OR (RecordSet1.EOF)) THEN
        //                             RecordSet1.MoveFirst;
        //                         WHILE NOT RecordSet1.EOF DO BEGIN
        //                             EVALUATE(Tmp_UnitPrice, FORMAT(RecordSet1.Fields.Item('unit_price').Value));
        //                             EVALUATE(Tmp_Adv_Perct, FORMAT(RecordSet1.Fields.Item('advance_percntg').Value));
        //                             RowCount1 := RowCount1 + 1;
        //                             RecordSet1.MoveNext;
        //                         END;
        //                         EVALUATE(Tmp_Inv_Qty, FORMAT(RecordSet.Fields.Item('INVOICED_QTY').Value));
        //                         Tmp_Inv_Adv_Amt := ROUND((Tmp_Inv_Qty * Tmp_UnitPrice * Tmp_Adv_Perct) / 100, 1, '=');

        //                         Tmp_Aply_Amt := 0;

        //                         IF ROUND(Tmp_Inv_Adv_Amt - Adv_Cons_Amt, 1, '=') > 0 THEN BEGIN
        //                             Tmp_Nxt_Inv_Amt := 0;
        //                             SQLQuery := 'select * from MRP_ARR_INVOICE where SALE_ORDER_ID  = ' + FORMAT(SaleOrderId) + ' and INVOICE_DATE = to_date(''' +
        //                                       FORMAT(SIH."Posting Date", 0, '<Day>-<Month Text,3>-<Year4>') + ''',''dd-mon-yyyy'') and ERP_INVOICE_NO = ''' +
        //                                       DELCHR(SIH."External Document No.", '=', ',') + ''' and LINE_NO = ' + DELCHR(FORMAT(RecordSet.Fields.Item('LINE_NO').Value), '=', ',') +
        //                                       ' and AR_INVOICE_ID <> ' + DELCHR(FORMAT(RecordSet.Fields.Item('AR_INVOICE_ID').Value), '=', ',');
        //                             //MESSAGE(SQLQuery);
        //                             RecordSet1 := SQLConnection.Execute(SQLQuery, RowCount1);
        //                             IF NOT ((RecordSet1.BOF) OR (RecordSet1.EOF)) THEN
        //                                 RecordSet1.MoveFirst;
        //                             WHILE NOT RecordSet1.EOF DO BEGIN
        //                                 tmp_invamt := 0;
        //                                 EVALUATE(tmp_invamt, FORMAT(RecordSet1.Fields.Item('AMOUNT').Value));
        //                                 SQLQuery := 'select nvl(sum(PLANNED_AMOUNT),0) PLANNED_AMOUNT from MRP_PLAN_CHANGES where PLAN_CHANGE_ID in ( ' +
        //                                            'select  max(pl.PLAN_CHANGE_ID) from  MRP_PLAN_CHANGES pl ,(select sl_no,SALE_ORDER_ID,PLAN_CHANGE_ID ' +
        //                                            'from MRP_PLAN_CHANGES pl1 where planned_amount= 0  and payment_id is not null and invoice_id = ' +
        //                                            DELCHR(FORMAT(RecordSet1.Fields.Item('AR_INVOICE_ID').Value), '=', ',') + ' and SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ') a ' +
        //                                            'where  a.sl_no=pl.sl_no and pl.PLAN_CHANGE_ID < a.PLAN_CHANGE_ID and a.SALE_ORDER_ID=pl.SALE_ORDER_ID) ';
        //                                 //MESSAGE(SQLQuery);
        //                                 RecordSet2 := SQLConnection.Execute(SQLQuery, RowCount2);
        //                                 Tmp_InvPayAmt := 0;
        //                                 Tmp_Tot_InvPayAmt := 0;
        //                                 IF NOT ((RecordSet2.BOF) OR (RecordSet2.EOF)) THEN
        //                                     RecordSet2.MoveFirst;
        //                                 WHILE NOT RecordSet2.EOF DO BEGIN
        //                                     Tmp_InvPayAmt := 0;
        //                                     EVALUATE(Tmp_InvPayAmt, FORMAT(RecordSet2.Fields.Item('planned_amount').Value));
        //                                     Tmp_Tot_InvPayAmt := Tmp_Tot_InvPayAmt + Tmp_InvPayAmt;
        //                                     RowCount2 := RowCount2 + 1;
        //                                     RecordSet2.MoveNext;
        //                                 END;
        //                                 Tmp_Nxt_Inv_Amt := Tmp_Nxt_Inv_Amt + tmp_invamt - Tmp_Tot_InvPayAmt;
        //                                 RowCount1 := RowCount1 + 1;
        //                                 RecordSet1.MoveNext;
        //                             END;
        //                             //retention invoices
        //                             SQLQuery := 'select * from mrp_arr_install_invoice where SALE_ORDER_ID  = ' + FORMAT(SaleOrderId) + ' and INVOICE_DATE = to_date(''' +
        //                                       FORMAT(SIH."Posting Date", 0, '<Day>-<Month Text,3>-<Year4>') + ''',''dd-mon-yyyy'') and ERP_INVOICE_NO = ''' +
        //                                       DELCHR(SIH."External Document No.", '=', ',') + ''' and LINE_NO = ' + DELCHR(FORMAT(RecordSet.Fields.Item('LINE_NO').Value), '=', ',') + ' and amount is not null';
        //                             //MESSAGE(SQLQuery);
        //                             RecordSet1 := SQLConnection.Execute(SQLQuery, RowCount1);
        //                             IF NOT ((RecordSet1.BOF) OR (RecordSet1.EOF)) THEN
        //                                 RecordSet1.MoveFirst;
        //                             WHILE NOT RecordSet1.EOF DO BEGIN
        //                                 tmp_invamt := 0;
        //                                 EVALUATE(tmp_invamt, FORMAT(RecordSet1.Fields.Item('AMOUNT').Value));
        //                                 SQLQuery := 'select nvl(sum(PLANNED_AMOUNT),0) PLANNED_AMOUNT from mrp_instal_plan_changes where PLAN_CHANGE_ID in ( ' +
        //                                            'select  max(pl.PLAN_CHANGE_ID) from  mrp_instal_plan_changes pl ,(select sl_no,SALE_ORDER_ID,PLAN_CHANGE_ID ' +
        //                                            'from mrp_instal_plan_changes pl1 where planned_amount= 0  and payment_id is not null and invoice_id = ' +
        //                                            DELCHR(FORMAT(RecordSet1.Fields.Item('AR_INVOICE_ID').Value), '=', ',') + ' and SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ') a ' +
        //                                            'where  a.sl_no=pl.sl_no and pl.PLAN_CHANGE_ID < a.PLAN_CHANGE_ID and a.SALE_ORDER_ID=pl.SALE_ORDER_ID) ';
        //                                 //MESSAGE(SQLQuery);
        //                                 RecordSet2 := SQLConnection.Execute(SQLQuery, RowCount2);
        //                                 Tmp_InvPayAmt := 0;
        //                                 Tmp_Tot_InvPayAmt := 0;
        //                                 IF NOT ((RecordSet2.BOF) OR (RecordSet2.EOF)) THEN
        //                                     RecordSet2.MoveFirst;
        //                                 WHILE NOT RecordSet2.EOF DO BEGIN
        //                                     Tmp_InvPayAmt := 0;
        //                                     EVALUATE(Tmp_InvPayAmt, FORMAT(RecordSet2.Fields.Item('planned_amount').Value));
        //                                     Tmp_Tot_InvPayAmt := Tmp_Tot_InvPayAmt + Tmp_InvPayAmt;
        //                                     RowCount2 := RowCount2 + 1;
        //                                     RecordSet2.MoveNext;
        //                                 END;
        //                                 Tmp_Nxt_Inv_Amt := Tmp_Nxt_Inv_Amt + tmp_invamt - Tmp_Tot_InvPayAmt;
        //                                 RowCount1 := RowCount1 + 1;
        //                                 RecordSet1.MoveNext;
        //                             END;
        //                             Tmp_Aply_Amt := 0;
        //                             IF ROUND(Tmp_Inv_Adv_Amt - Adv_Cons_Amt, 1, '=') > ROUND(Pay_Amount, 1, '=') THEN
        //                                 Tmp_Aply_Amt := ROUND(Pay_Amount, 1, '=')
        //                             ELSE
        //                                 Tmp_Aply_Amt := ROUND(Tmp_Inv_Adv_Amt - Adv_Cons_Amt, 1, '=');
        //                             Tmp_Aply_Amt_Tot := Tmp_Aply_Amt_Tot + Tmp_Aply_Amt;
        //                             /*
        //                             IF ROUND(Tmp_Inv_Adv_Amt-Adv_Cons_Amt,1,'=') > ROUND(Tmp_Nxt_Inv_Amt,1,'=') THEN
        //                             BEGIN
        //                               Tmp_Aply_Amt := Tmp_Inv_Adv_Amt-Adv_Cons_Amt-Tmp_Nxt_Inv_Amt;
        //                               Tmp_Aply_Amt_Tot := Tmp_Aply_Amt_Tot+Tmp_Aply_Amt;
        //                               SQLQuery:= 'update mrp_arr_invoice set ADV_AMOUNT_CONSIDERED = nvl(ADV_AMOUNT_CONSIDERED,0) + '+DELCHR(FORMAT(ROUND(Tmp_Aply_Amt,1,'=')),'=',',')+' where SALE_ORDER_ID = '+
        //                                          FORMAT(SaleOrderId)+' and ERP_INVOICE_NO = '+DELCHR(FORMAT(RecordSet.Fields.Item('ERP_INVOICE_NO').Value),'=',',')+
        //                                          ' and LINE_NO = '+DELCHR(FORMAT(RecordSet.Fields.Item('LINE_NO').Value),'=',',');
        //                               {if USERID = 'EFFTRONICS\PRANAVI' then
        //                                 message(SQLQuery);}
        //                               SQLConnection.Execute(SQLQuery);
        //                               SQLQuery:= 'update mrp_arr_install_invoice set ADV_AMOUNT_CONSIDERED = nvl(ADV_AMOUNT_CONSIDERED,0) + '+DELCHR(FORMAT(ROUND(Tmp_Aply_Amt,1,'=')),'=',',')+' where SALE_ORDER_ID = '+
        //                                          FORMAT(SaleOrderId)+' and ERP_INVOICE_NO = '+DELCHR(FORMAT(RecordSet.Fields.Item('ERP_INVOICE_NO').Value),'=',',')+
        //                                          ' and LINE_NO = '+DELCHR(FORMAT(RecordSet.Fields.Item('LINE_NO').Value),'=',',');
        //                               {if USERID = 'EFFTRONICS\PRANAVI' then
        //                                 message(SQLQuery);}
        //                               SQLConnection.Execute(SQLQuery);
        //                               //Pay_Amount:=Pay_Amount-Tmp_Aply_Amt;
        //                               //Tmp_Aply_Amt:=0;
        //                             END ELSE BEGIN
        //                               Tmp_Aply_Amt := Tmp_Inv_Adv_Amt-Adv_Cons_Amt;
        //                               Tmp_Aply_Amt_Tot := Tmp_Aply_Amt_Tot+Tmp_Aply_Amt;
        //                               SQLQuery:= 'update mrp_arr_invoice set ADV_AMOUNT_CONSIDERED = nvl(ADV_AMOUNT_CONSIDERED,0) + '+DELCHR(FORMAT(ROUND(Tmp_Aply_Amt,1,'=')),'=',',')+' where SALE_ORDER_ID = '+
        //                                          FORMAT(SaleOrderId)+' and ERP_INVOICE_NO = '+DELCHR(FORMAT(RecordSet.Fields.Item('ERP_INVOICE_NO').Value),'=',',')+
        //                                          ' and LINE_NO = '+DELCHR(FORMAT(RecordSet.Fields.Item('LINE_NO').Value),'=',',');
        //                               {if USERID = 'EFFTRONICS\PRANAVI' then
        //                                 message(SQLQuery);}
        //                               SQLConnection.Execute(SQLQuery);
        //                               SQLQuery:= 'update mrp_arr_install_invoice set ADV_AMOUNT_CONSIDERED = nvl(ADV_AMOUNT_CONSIDERED,0) + '+DELCHR(FORMAT(ROUND(Tmp_Aply_Amt,1,'=')),'=',',')+' where SALE_ORDER_ID = '+
        //                                          FORMAT(SaleOrderId)+' and ERP_INVOICE_NO = '+DELCHR(FORMAT(RecordSet.Fields.Item('ERP_INVOICE_NO').Value),'=',',')+
        //                                          ' and LINE_NO = '+DELCHR(FORMAT(RecordSet.Fields.Item('LINE_NO').Value),'=',',');
        //                               {if USERID = 'EFFTRONICS\PRANAVI' then
        //                                 message(SQLQuery);}
        //                               SQLConnection.Execute(SQLQuery);
        //                               //Pay_Amount:=Pay_Amount-Tmp_Aply_Amt;
        //                               //Tmp_Aply_Amt:=0;
        //                             END;
        //                             */
        //                             SQLQuery := 'update mrp_arr_invoice set ADV_AMOUNT_CONSIDERED = nvl(ADV_AMOUNT_CONSIDERED,0) + ' + DELCHR(FORMAT(ROUND(Tmp_Aply_Amt, 1, '=')), '=', ',') + ' where SALE_ORDER_ID = ' +
        //                                        FORMAT(SaleOrderId) + ' and ERP_INVOICE_NO = ''' + DELCHR(FORMAT(RecordSet.Fields.Item('ERP_INVOICE_NO').Value), '=', ',') +
        //                                        ''' and LINE_NO = ' + DELCHR(FORMAT(RecordSet.Fields.Item('LINE_NO').Value), '=', ',');
        //                             SQLConnection.Execute(SQLQuery);
        //                             SQLQuery := 'update mrp_arr_install_invoice set ADV_AMOUNT_CONSIDERED = nvl(ADV_AMOUNT_CONSIDERED,0) + ' + DELCHR(FORMAT(ROUND(Tmp_Aply_Amt, 1, '=')), '=', ',') + ' where SALE_ORDER_ID = ' +
        //                                        FORMAT(SaleOrderId) + ' and ERP_INVOICE_NO = ' + DELCHR(FORMAT(RecordSet.Fields.Item('ERP_INVOICE_NO').Value), '=', ',') +
        //                                        ' and LINE_NO = ' + DELCHR(FORMAT(RecordSet.Fields.Item('LINE_NO').Value), '=', ',');
        //                             SQLConnection.Execute(SQLQuery);
        //                         END;
        //                         //InvoiceAmt
        //                         SQLQuery := 'select * from  MRP_PLAN_CHANGES b, (select SALE_ORDER_ID,sl_no,max(plan_change_id) PlanChngId from MRP_PLAN_CHANGES where ' +
        //                                    ' SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ' and invoice_id = ' + DELCHR(FORMAT(RecordSet.Fields.Item('AR_INVOICE_ID').Value), '=', ',') +
        //                                    ' group by SALE_ORDER_ID,sl_no) a where a.planchngid=b.plan_change_id and b.planned_amount > 0';
        //                         //MESSAGE(SQLQuery);
        //                         RecordSet1 := SQLConnection.Execute(SQLQuery, RowCount1);
        //                         PlndAmnt := 0;
        //                         PlnndAmt := 0;
        //                         IF NOT ((RecordSet1.BOF) OR (RecordSet1.EOF)) THEN
        //                             RecordSet1.MoveFirst;
        //                         WHILE NOT RecordSet1.EOF DO BEGIN   // receivables pln changes loop begin
        //                             EVALUATE(PlndAmnt, FORMAT(RecordSet1.Fields.Item('planned_amount').Value));
        //                             PlnndAmt := PlnndAmt + PlndAmnt;
        //                             IF (ROUND(Pay_Amount, 1, '=') > 0) AND (ROUND(PlndAmnt, 1, '=') > 0) THEN BEGIN
        //                                 IF (ROUND(Pay_Amount, 1, '=') >= ROUND(PlndAmnt, 1, '=')) THEN  // if paymentamount >= planned amount
        //                                 BEGIN
        //                                     IF ROUND(Tmp_Aply_Amt, 1, '=') > 0 THEN BEGIN
        //                                         IF (ROUND(PlndAmnt, 1, '=') >= ROUND(Tmp_Aply_Amt, 1, '=')) AND (ROUND(Pay_Amount, 1, '=') > 0) THEN BEGIN
        //                                             Pay_Amount := Pay_Amount - PlndAmnt;
        //                                             PlndAmnt := PlndAmnt - Tmp_Aply_Amt;
        //                                             Tmp_Aply_Amt := 0;
        //                                             IF PlndAmnt > 0 THEN BEGIN
        //                                                 SQLQuery := 'select nvl(max(sl_no)+1,1) newslno from MRP_PLAN_CHANGES where SALE_ORDER_ID = ' + FORMAT(SaleOrderId);
        //                                                 /*' and INVOICE_ID = '+DELCHR(FORMAT(RecordSet1.Fields.Item('invoice_id').Value),'=',',');*///commented by pranavi on 31-dec-2016
        //                                                                                                                                             //MESSAGE(SQLQuery);
        //                                                 RecordSet2 := SQLConnection.Execute(SQLQuery, RowCount2);
        //                                                 IF NOT ((RecordSet2.BOF) OR (RecordSet2.EOF)) THEN
        //                                                     RecordSet2.MoveFirst;
        //                                                 WHILE NOT RecordSet2.EOF DO BEGIN
        //                                                     EVALUATE(Temp_SL_No, FORMAT(RecordSet2.Fields.Item('newslno').Value));
        //                                                     RowCount2 := RowCount2 + 1;
        //                                                     RecordSet2.MoveNext;
        //                                                 END;
        //                                                 SQLQuery := 'insert into MRP_PLAN_CHANGES(PLAN_CHANGE_ID,SL_NO,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,RESPONSE_SECTION, ' +
        //                                                            ' CREATION_DATE,USERID,INVOICE_ID,SPLITEDFROM) values(PLAN_CHANGE_SEQ.NEXTVAL,' + FORMAT(Temp_SL_No) + ',' + FORMAT(SaleOrderId) +
        //                                                            ',to_date(''' + FORMAT(payment_Realization_Date, 0, '<Day>-<Month Text,3>-<Year4>') +
        //                                                            ''',''dd-mon-yyyy''),' +
        //                                                            //',sysdate, '+
        //                                                            DELCHR(FORMAT(ROUND(PlndAmnt - Tmp_Aply_Amt, 1, '=')), '=', ',') + ',''SAL'',sysdate,''Auto'', ' + DELCHR(FORMAT(RecordSet1.Fields.Item('invoice_id').Value), '=', ',') +
        //                                                            ', ' + DELCHR(FORMAT(RecordSet1.Fields.Item('SL_NO').Value), '=', ',') + ')';
        //                                                 //MESSAGE(SQLQuery);
        //                                                 SQLConnection.Execute(SQLQuery);

        //                                                 SQLQuery := 'insert into MRP_PLAN_CHANGES(PLAN_CHANGE_ID,SL_NO,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,RESPONSE_SECTION, ' +
        //                                                            ' CREATION_DATE,USERID,PAYMENT_ID,INVOICE_ID) values(PLAN_CHANGE_SEQ.NEXTVAL,' + FORMAT(Temp_SL_No) + ',' + FORMAT(SaleOrderId) +
        //                                                            //', sysdate,'+
        //                                                            ',to_date(''' + FORMAT(payment_Realization_Date, 0, '<Day>-<Month Text,3>-<Year4>') +
        //                                                            ''',''dd-mon-yyyy''),' +
        //                                                            '0,''SAL'',sysdate,''Auto'',' + FORMAT(PaymentId) + ',' + DELCHR(FORMAT(RecordSet1.Fields.Item('invoice_id').Value), '=', ',') + ')';
        //                                                 //MESSAGE(SQLQuery);
        //                                                 SQLConnection.Execute(SQLQuery);

        //                                                 SQLQuery := 'update MRP_PLAN_CHANGES set PLANNED_AMOUNT = ' + DELCHR(FORMAT(ROUND(Tmp_Aply_Amt, 1, '=')), '=', ',') + ' where PLAN_CHANGE_ID = ' +
        //                                                            DELCHR(FORMAT(RecordSet1.Fields.Item('PLAN_CHANGE_ID').Value), '=', ',');
        //                                                 //MESSAGE(SQLQuery);
        //                                                 SQLConnection.Execute(SQLQuery);
        //                                             END;
        //                                         END ELSE BEGIN
        //                                             Tmp_Aply_Amt := Tmp_Aply_Amt - PlndAmnt;
        //                                             Pay_Amount := Pay_Amount - Tmp_Aply_Amt;
        //                                             PlndAmnt := 0;
        //                                         END;
        //                                     END ELSE BEGIN
        //                                         SQLQuery := 'insert into MRP_PLAN_CHANGES(PLAN_CHANGE_ID,SL_NO,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,RESPONSE_SECTION,CREATION_DATE, ' +
        //                                                    ' USERID,PAYMENT_ID,INVOICE_ID) values(PLAN_CHANGE_SEQ.NEXTVAL,' + DELCHR(FORMAT(RecordSet1.Fields.Item('sl_no').Value), '=', ',') + ',' + FORMAT(SaleOrderId) +
        //                                                    //', sysdate,'+
        //                                                    ',to_date(''' + FORMAT(payment_Realization_Date, 0, '<Day>-<Month Text,3>-<Year4>') +
        //                                                        ''',''dd-mon-yyyy''),' +
        //                                                    '0,''SAL'',sysdate,''Auto'',' + FORMAT(PaymentId) + ',' + DELCHR(FORMAT(RecordSet1.Fields.Item('invoice_id').Value), '=', ',') + ')';
        //                                         //MESSAGE(SQLQuery);
        //                                         SQLConnection.Execute(SQLQuery);
        //                                         Pay_Amount := Pay_Amount - PlndAmnt;
        //                                     END;
        //                                 END ELSE BEGIN  // else part of if paymentamount >= planned amount
        //                                     IF ROUND(Tmp_Aply_Amt, 1, '=') > 0 THEN BEGIN
        //                                         IF ROUND(Pay_Amount, 1, '=') >= ROUND(Tmp_Aply_Amt, 1, '=') THEN BEGIN
        //                                             Pay_Amount := Pay_Amount - Tmp_Aply_Amt;
        //                                             Tmp_Aply_Amt := 0;
        //                                             SQLQuery := 'select nvl(max(sl_no)+1,1) newslno from MRP_PLAN_CHANGES where SALE_ORDER_ID = ' + FORMAT(SaleOrderId);//commented by pranavi on 31-dec-2016
        //                                                                                                                                                                 /*' and INVOICE_ID = '+DELCHR(FORMAT(RecordSet1.Fields.Item('invoice_id').Value),'=',',');*/
        //                                                                                                                                                                 //MESSAGE(SQLQuery);
        //                                             RecordSet2 := SQLConnection.Execute(SQLQuery, RowCount2);
        //                                             IF NOT ((RecordSet2.BOF) OR (RecordSet2.EOF)) THEN
        //                                                 RecordSet2.MoveFirst;
        //                                             WHILE NOT RecordSet2.EOF DO BEGIN
        //                                                 EVALUATE(Temp_SL_No, FORMAT(RecordSet2.Fields.Item('newslno').Value));
        //                                                 RowCount2 := RowCount2 + 1;
        //                                                 RecordSet2.MoveNext;
        //                                             END;
        //                                             SQLQuery := 'insert into MRP_PLAN_CHANGES(PLAN_CHANGE_ID,SL_NO,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,RESPONSE_SECTION, ' +
        //                                                        ' CREATION_DATE,USERID,INVOICE_ID,SPLITEDFROM) values(PLAN_CHANGE_SEQ.NEXTVAL,' + DELCHR(FORMAT(Temp_SL_No), '=', ',') + ',' + FORMAT(SaleOrderId) +
        //                                                        //',sysdate, '+
        //                                                        ',to_date(''' + FORMAT(payment_Realization_Date, 0, '<Day>-<Month Text,3>-<Year4>') +
        //                                                          ''',''dd-mon-yyyy''),' +
        //                                                        DELCHR(FORMAT(ROUND(Pay_Amount, 1, '=')), '=', ',') + ',''SAL'',sysdate,''Auto'', ' + DELCHR(FORMAT(RecordSet1.Fields.Item('invoice_id').Value), '=', ',') +
        //                                                        ', ' + DELCHR(FORMAT(RecordSet1.Fields.Item('SL_NO').Value), '=', ',') + ')';
        //                                             //MESSAGE(SQLQuery);
        //                                             SQLConnection.Execute(SQLQuery);

        //                                             SQLQuery := 'insert into MRP_PLAN_CHANGES(PLAN_CHANGE_ID,SL_NO,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,RESPONSE_SECTION, ' +
        //                                                        ' CREATION_DATE,USERID,PAYMENT_ID,INVOICE_ID) values(PLAN_CHANGE_SEQ.NEXTVAL,' + FORMAT(Temp_SL_No) + ',' + FORMAT(SaleOrderId) +
        //                                                        //', sysdate,'+
        //                                                        ',to_date(''' + FORMAT(payment_Realization_Date, 0, '<Day>-<Month Text,3>-<Year4>') +
        //                                                          ''',''dd-mon-yyyy''),' +
        //                                                        '0,''SAL'',sysdate,''Auto'',' + DELCHR(FORMAT(PaymentId), '=', ',') + ',' + DELCHR(FORMAT(RecordSet1.Fields.Item('invoice_id').Value), '=', ',') + ')';
        //                                             //MESSAGE(SQLQuery);
        //                                             SQLConnection.Execute(SQLQuery);

        //                                             SQLQuery := 'update MRP_PLAN_CHANGES set PLANNED_AMOUNT = ' + DELCHR(FORMAT(ROUND(PlndAmnt - Pay_Amount, 1, '=')), '=', ',') + ' where PLAN_CHANGE_ID = ' +
        //                                                        DELCHR(FORMAT(RecordSet1.Fields.Item('PLAN_CHANGE_ID').Value), '=', ',');
        //                                             //MESSAGE(SQLQuery);
        //                                             SQLConnection.Execute(SQLQuery);
        //                                             Pay_Amount := 0;
        //                                         END ELSE BEGIN
        //                                             Tmp_Aply_Amt := Tmp_Aply_Amt - Pay_Amount;
        //                                             Pay_Amount := 0;
        //                                         END;
        //                                     END ELSE BEGIN
        //                                         SQLQuery := 'select nvl(max(sl_no)+1,1) newslno from MRP_PLAN_CHANGES where SALE_ORDER_ID = ' + FORMAT(SaleOrderId);
        //                                         /*' and INVOICE_ID = '+DELCHR(FORMAT(RecordSet1.Fields.Item('invoice_id').Value),'=',',');*///commented by pranavi on 31-dec-2016
        //                                                                                                                                     //MESSAGE(SQLQuery);
        //                                         RecordSet2 := SQLConnection.Execute(SQLQuery, RowCount2);
        //                                         IF NOT ((RecordSet2.BOF) OR (RecordSet2.EOF)) THEN
        //                                             RecordSet2.MoveFirst;
        //                                         WHILE NOT RecordSet2.EOF DO BEGIN
        //                                             EVALUATE(Temp_SL_No, FORMAT(RecordSet2.Fields.Item('newslno').Value));
        //                                             RowCount2 := RowCount2 + 1;
        //                                             RecordSet2.MoveNext;
        //                                         END;
        //                                         SQLQuery := 'insert into MRP_PLAN_CHANGES(PLAN_CHANGE_ID,SL_NO,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,RESPONSE_SECTION, ' +
        //                                                    ' CREATION_DATE,USERID,INVOICE_ID,SPLITEDFROM) values(PLAN_CHANGE_SEQ.NEXTVAL,' + DELCHR(FORMAT(Temp_SL_No), '=', ',') + ',' + FORMAT(SaleOrderId) +
        //                                                    ',to_date(''' + FORMAT(payment_Realization_Date, 0, '<Day>-<Month Text,3>-<Year4>') +
        //                                                        ''',''dd-mon-yyyy''),' +
        //                                                    //',sysdate, '+
        //                                                    DELCHR(FORMAT(ROUND(Pay_Amount, 1, '=')), '=', ',') + ',''SAL'',sysdate,''Auto'', ' + DELCHR(FORMAT(RecordSet1.Fields.Item('invoice_id').Value), '=', ',') +
        //                                                    ', ' + DELCHR(FORMAT(RecordSet1.Fields.Item('SL_NO').Value), '=', ',') + ')';
        //                                         //MESSAGE(SQLQuery);
        //                                         SQLConnection.Execute(SQLQuery);

        //                                         SQLQuery := 'insert into MRP_PLAN_CHANGES(PLAN_CHANGE_ID,SL_NO,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,RESPONSE_SECTION, ' +
        //                                                    ' CREATION_DATE,USERID,PAYMENT_ID,INVOICE_ID) values(PLAN_CHANGE_SEQ.NEXTVAL,' + DELCHR(FORMAT(Temp_SL_No), '=', ',') + ',' + FORMAT(SaleOrderId) +
        //                                                    //', sysdate,'+
        //                                                    ',to_date(''' + FORMAT(payment_Realization_Date, 0, '<Day>-<Month Text,3>-<Year4>') +
        //                                                        ''',''dd-mon-yyyy''),' +
        //                                                    '0,''SAL'',sysdate,''Auto'',' + DELCHR(FORMAT(PaymentId), '=', ',') + ',' + DELCHR(FORMAT(RecordSet1.Fields.Item('invoice_id').Value), '=', ',') + ')';
        //                                         //MESSAGE(SQLQuery);
        //                                         SQLConnection.Execute(SQLQuery);

        //                                         SQLQuery := 'update MRP_PLAN_CHANGES set PLANNED_AMOUNT = ' + DELCHR(FORMAT(ROUND(PlndAmnt - Pay_Amount, 1, '=')), '=', ',') + ' where PLAN_CHANGE_ID = ' +
        //                                                    DELCHR(FORMAT(RecordSet1.Fields.Item('PLAN_CHANGE_ID').Value), '=', ',');
        //                                         //MESSAGE(SQLQuery);
        //                                         SQLConnection.Execute(SQLQuery);
        //                                         Pay_Amount := 0;
        //                                     END;
        //                                 END;  //end of else part of if paymentamount >= planned amount
        //                             END; // end of if paymentamount > 0
        //                             RowCount1 := RowCount1 + 1;
        //                             RecordSet1.MoveNext;
        //                         END;  // end of receivables pln changes loop
        //                         temppp_amt := 0;
        //                         IF (ROUND(InvoiceAmt, 1, '=') > ROUND(PlnndAmt, 1, '=')) AND (ROUND(Pay_Amount, 1, '=') > 0) THEN BEGIN
        //                             IF ROUND(Pay_Amount, 1, '=') >= ROUND(InvoiceAmt - PlnndAmt, 1, '=') THEN BEGIN
        //                                 temppp_amt := InvoiceAmt - PlnndAmt;
        //                                 Pay_Amount := InvoiceAmt - PlnndAmt;
        //                             END ELSE BEGIN
        //                                 temppp_amt := Pay_Amount;
        //                                 Pay_Amount := 0;
        //                             END;
        //                             IF ROUND(Tmp_Aply_Amt, 1, '=') > 0 THEN BEGIN
        //                                 IF ROUND(temppp_amt, 1, '=') >= ROUND(Tmp_Aply_Amt, 1, '=') THEN BEGIN
        //                                     temppp_amt := temppp_amt - Tmp_Aply_Amt;
        //                                     Tmp_Aply_Amt := 0;
        //                                     SQLQuery := 'insert into MRP_PLAN_CHANGES(PLAN_CHANGE_ID,SL_NO,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,RESPONSE_SECTION, ' +
        //                                                ' CREATION_DATE,USERID,INVOICE_ID) values(PLAN_CHANGE_SEQ.NEXTVAL,(SELECT nvl(MAX(sl_no)+1,1) from MRP_PLAN_CHANGES where sale_order_id = ' +
        //                                                DELCHR(FORMAT(SaleOrderId), '=', ',') + ' and invoice_id = ' + DELCHR(FORMAT(RecordSet.Fields.Item('ar_invoice_id').Value), '=', ',') + '),' + DELCHR(FORMAT(SaleOrderId), '=', ',') +
        //                                                ',to_date(''' + FORMAT(payment_Realization_Date, 0, '<Day>-<Month Text,3>-<Year4>') +
        //                                                      ''',''dd-mon-yyyy''),' +
        //                                                //',sysdate, '+
        //                                                DELCHR(FORMAT(ROUND(temppp_amt, 1, '=')), '=', ',') + ',''SAL'',sysdate,''Auto'', ' + DELCHR(FORMAT(RecordSet.Fields.Item('ar_invoice_id').Value), '=', ',') + ')';
        //                                     // MESSAGE(SQLQuery);
        //                                     SQLConnection.Execute(SQLQuery);

        //                                     SQLQuery := 'insert into MRP_PLAN_CHANGES(PLAN_CHANGE_ID,SL_NO,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,RESPONSE_SECTION, ' +
        //                                                ' CREATION_DATE,USERID,PAYMENT_ID,INVOICE_ID) values(PLAN_CHANGE_SEQ.NEXTVAL,(SELECT nvl(MAX(sl_no)+1,1) ' +
        //                                                ' from MRP_PLAN_CHANGES where sale_order_id = ' + DELCHR(FORMAT(SaleOrderId), '=', ',') + ' and invoice_id = ' +
        //                                                DELCHR(FORMAT(RecordSet.Fields.Item('ar_invoice_id').Value), '=', ',') + '),' + DELCHR(FORMAT(SaleOrderId), '=', ',') +
        //                                                //', sysdate,'+
        //                                                ',to_date(''' + FORMAT(payment_Realization_Date, 0, '<Day>-<Month Text,3>-<Year4>') +
        //                                                      ''',''dd-mon-yyyy''),' +
        //                                                '0,''SAL'',sysdate,''Auto'',' + DELCHR(FORMAT(PaymentId), '=', ',') + ',' + DELCHR(FORMAT(RecordSet.Fields.Item('ar_invoice_id').Value), '=', ',') + ')';
        //                                     // MESSAGE(SQLQuery);
        //                                     SQLConnection.Execute(SQLQuery);
        //                                 END ELSE BEGIN
        //                                     Tmp_Aply_Amt := Tmp_Aply_Amt - temppp_amt;
        //                                     temppp_amt := 0;
        //                                 END;
        //                             END ELSE BEGIN
        //                                 SQLQuery := 'insert into MRP_PLAN_CHANGES(PLAN_CHANGE_ID,SL_NO,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,RESPONSE_SECTION, ' +
        //                                            ' CREATION_DATE,USERID,INVOICE_ID) values(PLAN_CHANGE_SEQ.NEXTVAL,(SELECT nvl(MAX(sl_no)+1,1) from MRP_PLAN_CHANGES where sale_order_id = ' +
        //                                            FORMAT(SaleOrderId) + ' and invoice_id = ' + DELCHR(FORMAT(RecordSet.Fields.Item('ar_invoice_id').Value), '=', ',') + '),' + FORMAT(SaleOrderId) +
        //                                            ',to_date(''' + FORMAT(payment_Realization_Date, 0, '<Day>-<Month Text,3>-<Year4>') +
        //                                                    ''',''dd-mon-yyyy''),' +
        //                                            //',sysdate, '+
        //                                            DELCHR(FORMAT(ROUND(temppp_amt, 1, '=')), '=', ',') + ',''SAL'',sysdate,''Auto'', ' + DELCHR(FORMAT(RecordSet.Fields.Item('ar_invoice_id').Value), '=', ',') + ')';
        //                                 //MESSAGE(SQLQuery);
        //                                 SQLConnection.Execute(SQLQuery);

        //                                 SQLQuery := 'insert into MRP_PLAN_CHANGES(PLAN_CHANGE_ID,SL_NO,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,RESPONSE_SECTION, ' +
        //                                            ' CREATION_DATE,USERID,PAYMENT_ID,INVOICE_ID) values(PLAN_CHANGE_SEQ.NEXTVAL,(SELECT nvl(MAX(sl_no)+1,1) ' +
        //                                            ' from MRP_PLAN_CHANGES where sale_order_id = ' + FORMAT(SaleOrderId) + ' and invoice_id = ' +
        //                                            DELCHR(FORMAT(RecordSet.Fields.Item('ar_invoice_id').Value), '=', ',') + '),' + FORMAT(SaleOrderId) +
        //                                            //', sysdate,'+
        //                                            ',to_date(''' + FORMAT(payment_Realization_Date, 0, '<Day>-<Month Text,3>-<Year4>') +
        //                                                    ''',''dd-mon-yyyy''),' +
        //                                            '0,''SAL'',sysdate,''Auto'',' + DELCHR(FORMAT(PaymentId), '=', ',') + ',' + DELCHR(FORMAT(RecordSet.Fields.Item('ar_invoice_id').Value), '=', ',') + ')';
        //                                 //MESSAGE(SQLQuery);
        //                                 SQLConnection.Execute(SQLQuery);
        //                             END;
        //                         END;
        //                         RowCount := RowCount + 1;
        //                         RecordSet.MoveNext;
        //                     END;  // end of receivable invoices loop
        //                     IF Tmp_Aply_Amt_Tot > 0 THEN BEGIN
        //                         IF Paid_Amt > Tmp_Aply_Amt_Tot THEN BEGIN
        //                             SQLQuery := 'update mrp_arr_payment set AMOUNT = nvl(AMOUNT,0) - ' + DELCHR(FORMAT(ROUND(Tmp_Aply_Amt_Tot, 1, '=')), '=', ',') + ' where AR_PAYMENT_ID = ' +
        //                                        DELCHR(FORMAT(PaymentId), '=', ',');
        //                             //MESSAGE(SQLQuery);
        //                             SQLConnection.Execute(SQLQuery);
        //                         END ELSE BEGIN
        //                             SQLQuery := 'delete mrp_arr_payment where AR_PAYMENT_ID = ' + DELCHR(FORMAT(PaymentId), '=', ',');
        //                             //MESSAGE(SQLQuery);
        //                             SQLConnection.Execute(SQLQuery);
        //                         END;
        //                     END;
        //                 END;
        //                 /*
        //                 IF Tol_Inst_Recvbl_Amt > 0 THEN BEGIN
        //                   IF (Tol_Inst_Recvbl_Amt >= Amount) THEN
        //                     Pay_Amount := Amount
        //                   ELSE
        //                     Pay_Amount := Tol_Inst_Recvbl_Amt;
        //                 END ELSE
        //                   Pay_Amount := 0;
        //                 */
        //                 Tmp_Aply_Amt_Tot := 0;
        //                 IF ROUND(Pay_Amount, 1, '=') > 0 THEN  // if still payment amount is remaining pay in installtion plan changes
        //                 BEGIN
        //                     SQLQuery := 'select nvl(ARR_INSTALL_PAYMENT_SEQ.NEXTVAL,1) payid from dual';
        //                     //MESSAGE(SQLQuery);
        //                     RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                     IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                         RecordSet.MoveFirst;
        //                     WHILE NOT RecordSet.EOF DO BEGIN
        //                         EVALUATE(PaymentId, FORMAT(RecordSet.Fields.Item('payid').Value));
        //                         RowCount := RowCount + 1;
        //                         RecordSet.MoveNext;
        //                     END;
        //                     // insert payment record
        //                     Inst_Paid_Amt := Pay_Amount;
        //                     SQLQuery := 'insert into mrp_arr_instal_payment(AR_PAYMENT_ID,SALE_ORDER_ID,PAYMENT_DATE,AMOUNT,USERID,CREATION_DATE,AMOUNTTYPE) values(' + FORMAT(PaymentId) + ', ' +
        //                                FORMAT(SaleOrderId) + ', to_date(''' + FORMAT(CLE."Posting Date", 0, '<Day>-<Month Text,3>-<Year4>') + ''',''dd-mon-yyyy''), ' +
        //                                DELCHR(FORMAT(ROUND(Pay_Amount, 1, '=')), '=', ',') + ',''Auto'',sysdate,''R'')';
        //                     //MESSAGE(SQLQuery);
        //                     SQLConnection.Execute(SQLQuery);

        //                     SQLQuery := 'select * from MRP_ARR_INSTALL_INVOICE where SALE_ORDER_ID  = ' + FORMAT(SaleOrderId) + ' and INVOICE_DATE = to_date(''' +
        //                                 FORMAT(SIH."Posting Date", 0, '<Day>-<Month Text,3>-<Year4>') + ''',''dd-mon-yyyy'') and ERP_INVOICE_NO = ''' +
        //                                 DELCHR(SIH."External Document No.", '=', ',') + ''' and AMOUNTTYPE = ''R'' and amount is not null order by LINE_NO';
        //                     //MESSAGE(SQLQuery);
        //                     RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                     IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                         RecordSet.MoveFirst;
        //                     WHILE NOT RecordSet.EOF DO BEGIN   // invoice loop
        //                         InvoiceAmt := 0;
        //                         Adv_Cons_Amt := 0;
        //                         Tmp_UnitPrice := 0;
        //                         Tmp_Adv_Perct := 0;
        //                         Tmp_Inv_Qty := 0;
        //                         Tmp_Inv_Adv_Amt := 0;
        //                         IF FORMAT(RecordSet.Fields.Item('amount').Value) <> '' THEN
        //                             EVALUATE(InvoiceAmt, FORMAT(RecordSet.Fields.Item('amount').Value))
        //                         ELSE
        //                             InvoiceAmt := 0;
        //                         //EVALUATE(InvoiceAmt,FORMAT(RecordSet.Fields.Item('amount').Value));

        //                         IF FORMAT(RecordSet.Fields.Item('ADV_AMOUNT_CONSIDERED').Value) <> '' THEN
        //                             EVALUATE(Adv_Cons_Amt, FORMAT(RecordSet.Fields.Item('ADV_AMOUNT_CONSIDERED').Value))
        //                         ELSE
        //                             Adv_Cons_Amt := 0;
        //                         SQLQuery := 'select nvl(sum(PLANNED_AMOUNT),0) PLANNED_AMOUNT   from MRP_INSTAL_PLAN_CHANGES where PLAN_CHANGE_ID in ( ' +
        //                                    'select  max(pl.PLAN_CHANGE_ID) from  MRP_INSTAL_PLAN_CHANGES pl ,(select sl_no,SALE_ORDER_ID,PLAN_CHANGE_ID ' +
        //                                    'from MRP_INSTAL_PLAN_CHANGES pl1 where planned_amount= 0  and payment_id is not null and invoice_id = ' +
        //                                    DELCHR(FORMAT(RecordSet.Fields.Item('AR_INVOICE_ID').Value), '=', ',') + ' and SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ') a ' +
        //                                    'where  a.sl_no=pl.sl_no and pl.PLAN_CHANGE_ID < a.PLAN_CHANGE_ID and a.SALE_ORDER_ID=pl.SALE_ORDER_ID) ';
        //                         //MESSAGE(SQLQuery);
        //                         RecordSet1 := SQLConnection.Execute(SQLQuery, RowCount1);
        //                         InvPayAmt := 0;
        //                         Tot_InvPayAmt := 0;
        //                         IF NOT ((RecordSet1.BOF) OR (RecordSet1.EOF)) THEN
        //                             RecordSet1.MoveFirst;
        //                         WHILE NOT RecordSet1.EOF DO BEGIN
        //                             InvPayAmt := 0;
        //                             EVALUATE(InvPayAmt, FORMAT(RecordSet1.Fields.Item('planned_amount').Value));
        //                             Tot_InvPayAmt := Tot_InvPayAmt + InvPayAmt;
        //                             RowCount1 := RowCount1 + 1;
        //                             RecordSet1.MoveNext;
        //                         END;
        //                         InvoiceAmt := InvoiceAmt - Tot_InvPayAmt;

        //                         SQLQuery := 'select nvl(unit_price,0) unit_price,nvl(advance_percntg,0) advance_percntg from mrp_sale_order_lines where sale_order_id = ' +
        //                                     FORMAT(SaleOrderId) + ' and LINE_NO = ' + DELCHR(FORMAT(RecordSet.Fields.Item('LINE_NO').Value), '=', ',');
        //                         //MESSAGE(SQLQuery);
        //                         RecordSet1 := SQLConnection.Execute(SQLQuery, RowCount1);
        //                         IF NOT ((RecordSet1.BOF) OR (RecordSet1.EOF)) THEN
        //                             RecordSet1.MoveFirst;
        //                         WHILE NOT RecordSet1.EOF DO BEGIN
        //                             EVALUATE(Tmp_UnitPrice, FORMAT(RecordSet1.Fields.Item('unit_price').Value));
        //                             EVALUATE(Tmp_Adv_Perct, FORMAT(RecordSet1.Fields.Item('advance_percntg').Value));
        //                             RowCount1 := RowCount1 + 1;
        //                             RecordSet1.MoveNext;
        //                         END;
        //                         EVALUATE(Tmp_Inv_Qty, FORMAT(RecordSet.Fields.Item('INVOICED_QTY').Value));
        //                         Tmp_Inv_Adv_Amt := (Tmp_Inv_Qty * Tmp_UnitPrice * Tmp_Adv_Perct) / 100;
        //                         IF ROUND(Tmp_Inv_Adv_Amt - Adv_Cons_Amt, 1, '=') > 0 THEN BEGIN
        //                             Tmp_Nxt_Inv_Amt := 0;
        //                             //retention invoices
        //                             SQLQuery := 'select * from mrp_arr_install_invoice where SALE_ORDER_ID  = ' + FORMAT(SaleOrderId) + ' and INVOICE_DATE = to_date(''' +
        //                                         FORMAT(SIH."Posting Date", 0, '<Day>-<Month Text,3>-<Year4>') + ''',''dd-mon-yyyy'') and ERP_INVOICE_NO = ''' +
        //                                         DELCHR(SIH."External Document No.", '=', ',') + ''' and LINE_NO = ' + DELCHR(FORMAT(RecordSet.Fields.Item('LINE_NO').Value), '=', ',') +
        //                                         ' and AR_INVOICE_ID <> ' + DELCHR(FORMAT(RecordSet.Fields.Item('AR_INVOICE_ID').Value), '=', ',') + ' and amount is not null';
        //                             //MESSAGE(SQLQuery);
        //                             RecordSet1 := SQLConnection.Execute(SQLQuery, RowCount1);
        //                             IF NOT ((RecordSet1.BOF) OR (RecordSet1.EOF)) THEN
        //                                 RecordSet1.MoveFirst;
        //                             WHILE NOT RecordSet1.EOF DO BEGIN
        //                                 tmp_invamt := 0;
        //                                 EVALUATE(tmp_invamt, FORMAT(RecordSet1.Fields.Item('AMOUNT').Value));
        //                                 SQLQuery := 'select nvl(sum(PLANNED_AMOUNT),0) PLANNED_AMOUNT from mrp_instal_plan_changes where PLAN_CHANGE_ID in ( ' +
        //                                            'select  max(pl.PLAN_CHANGE_ID) from  mrp_instal_plan_changes pl ,(select sl_no,SALE_ORDER_ID,PLAN_CHANGE_ID ' +
        //                                            'from mrp_instal_plan_changes pl1 where planned_amount= 0  and payment_id is not null and invoice_id = ' +
        //                                            DELCHR(FORMAT(RecordSet1.Fields.Item('AR_INVOICE_ID').Value), '=', ',') + ' and SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ') a ' +
        //                                            'where  a.sl_no=pl.sl_no and pl.PLAN_CHANGE_ID < a.PLAN_CHANGE_ID and a.SALE_ORDER_ID=pl.SALE_ORDER_ID) ';
        //                                 //MESSAGE(SQLQuery);
        //                                 RecordSet2 := SQLConnection.Execute(SQLQuery, RowCount2);
        //                                 Tmp_InvPayAmt := 0;
        //                                 Tmp_Tot_InvPayAmt := 0;
        //                                 IF NOT ((RecordSet2.BOF) OR (RecordSet2.EOF)) THEN
        //                                     RecordSet2.MoveFirst;
        //                                 WHILE NOT RecordSet2.EOF DO BEGIN
        //                                     Tmp_InvPayAmt := 0;
        //                                     EVALUATE(Tmp_InvPayAmt, FORMAT(RecordSet2.Fields.Item('planned_amount').Value));
        //                                     Tmp_Tot_InvPayAmt := Tmp_Tot_InvPayAmt + Tmp_InvPayAmt;
        //                                     RowCount2 := RowCount2 + 1;
        //                                     RecordSet2.MoveNext;
        //                                 END;
        //                                 Tmp_Nxt_Inv_Amt := Tmp_Nxt_Inv_Amt + tmp_invamt - Tmp_Tot_InvPayAmt;
        //                                 RowCount1 := RowCount1 + 1;
        //                                 RecordSet1.MoveNext;
        //                             END;
        //                             IF ROUND(Tmp_Inv_Adv_Amt - Adv_Cons_Amt, 1, '=') > ROUND(Tmp_Nxt_Inv_Amt, 1, '=') THEN BEGIN
        //                                 Tmp_Aply_Amt := Tmp_Inv_Adv_Amt - Adv_Cons_Amt - Tmp_Nxt_Inv_Amt;
        //                                 Tmp_Aply_Amt_Tot := Tmp_Aply_Amt_Tot + Tmp_Aply_Amt;
        //                                 SQLQuery := 'update mrp_arr_invoice set ADV_AMOUNT_CONSIDERED = nvl(ADV_AMOUNT_CONSIDERED,0) + ' + DELCHR(FORMAT(ROUND(Tmp_Aply_Amt, 1, '=')), '=', ',') + ' where SALE_ORDER_ID = ' +
        //                                            FORMAT(SaleOrderId) + ' and ERP_INVOICE_NO = ''' + DELCHR(FORMAT(RecordSet.Fields.Item('ERP_INVOICE_NO').Value), '=', ',') +
        //                                            ''' and LINE_NO = ' + DELCHR(FORMAT(RecordSet.Fields.Item('LINE_NO').Value), '=', ',');
        //                                 /*IF USERID = 'EFFTRONICS\PRANAVI' then
        //                                   message(SQLQuery);*/
        //                                 SQLConnection.Execute(SQLQuery);
        //                                 SQLQuery := 'update mrp_arr_install_invoice set ADV_AMOUNT_CONSIDERED = nvl(ADV_AMOUNT_CONSIDERED,0) + ' + DELCHR(FORMAT(ROUND(Tmp_Aply_Amt, 1, '=')), '=', ',') + ' where SALE_ORDER_ID = ' +
        //                                            FORMAT(SaleOrderId) + ' and ERP_INVOICE_NO = ' + DELCHR(FORMAT(RecordSet.Fields.Item('ERP_INVOICE_NO').Value), '=', ',') +
        //                                            ' and LINE_NO = ' + DELCHR(FORMAT(RecordSet.Fields.Item('LINE_NO').Value), '=', ',');
        //                                 /*IF USERID = 'EFFTRONICS\PRANAVI' then
        //                                   message(SQLQuery);*/
        //                                 SQLConnection.Execute(SQLQuery);
        //                                 Pay_Amount := Pay_Amount - Tmp_Aply_Amt;
        //                             END ELSE BEGIN
        //                                 Tmp_Aply_Amt := Tmp_Inv_Adv_Amt - Adv_Cons_Amt;
        //                                 Tmp_Aply_Amt_Tot := Tmp_Aply_Amt_Tot + Tmp_Aply_Amt;
        //                                 SQLQuery := 'update mrp_arr_invoice set ADV_AMOUNT_CONSIDERED = nvl(ADV_AMOUNT_CONSIDERED,0) + ' + DELCHR(FORMAT(ROUND(Tmp_Aply_Amt, 1, '=')), '=', ',') + ' where SALE_ORDER_ID = ' +
        //                                            FORMAT(SaleOrderId) + ' and ERP_INVOICE_NO = ''' + DELCHR(FORMAT(RecordSet.Fields.Item('ERP_INVOICE_NO').Value), '=', ',') +
        //                                            ''' and LINE_NO = ' + DELCHR(FORMAT(RecordSet.Fields.Item('LINE_NO').Value), '=', ',');
        //                                 /*IF USERID = 'EFFTRONICS\PRANAVI' then
        //                                   message(SQLQuery);*/
        //                                 SQLConnection.Execute(SQLQuery);
        //                                 SQLQuery := 'update mrp_arr_install_invoice set ADV_AMOUNT_CONSIDERED = nvl(ADV_AMOUNT_CONSIDERED,0) + ' + DELCHR(FORMAT(ROUND(Tmp_Aply_Amt, 1, '=')), '=', ',') + ' where SALE_ORDER_ID = ' +
        //                                            FORMAT(SaleOrderId) + ' and ERP_INVOICE_NO = ' + DELCHR(FORMAT(RecordSet.Fields.Item('ERP_INVOICE_NO').Value), '=', ',') +
        //                                            ' and LINE_NO = ' + DELCHR(FORMAT(RecordSet.Fields.Item('LINE_NO').Value), '=', ',');
        //                                 /*IF USERID = 'EFFTRONICS\PRANAVI' then
        //                                   message(SQLQuery);*/
        //                                 SQLConnection.Execute(SQLQuery);
        //                                 Pay_Amount := Pay_Amount - Tmp_Aply_Amt;
        //                             END;
        //                         END;
        //                         SQLQuery := 'select * from  MRP_INSTAL_PLAN_CHANGES b,(select SALE_ORDER_ID,sl_no,max(plan_change_id) PlanChngId from MRP_INSTAL_PLAN_CHANGES where ' +
        //                                    ' SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ' and invoice_id =' + DELCHR(FORMAT(RecordSet.Fields.Item('AR_INVOICE_ID').Value), '=', ',') +
        //                                    ' group by SALE_ORDER_ID,sl_no) a where a.planchngid=b.plan_change_id and b.planned_amount > 0';
        //                         //MESSAGE(SQLQuery);
        //                         RecordSet1 := SQLConnection.Execute(SQLQuery, RowCount1);
        //                         PlnndAmt := 0;
        //                         PlndAmnt := 0;
        //                         IF NOT ((RecordSet1.BOF) OR (RecordSet1.EOF)) THEN
        //                             RecordSet1.MoveFirst;
        //                         WHILE NOT RecordSet1.EOF DO BEGIN   // begin of instl pln changes loop
        //                             EVALUATE(PlndAmnt, FORMAT(RecordSet1.Fields.Item('planned_amount').Value));
        //                             PlnndAmt := PlnndAmt + PlndAmnt;
        //                             IF (ROUND(Pay_Amount, 1, '=') >= ROUND(PlndAmnt, 1, '=')) THEN BEGIN  // if payment amount > plan change amount
        //                                 IF ROUND(Tmp_Aply_Amt, 1, '=') > 0 THEN BEGIN
        //                                     IF ROUND(PlndAmnt, 1, '=') >= ROUND(Tmp_Aply_Amt, 1, '=') THEN BEGIN
        //                                         PlndAmnt := PlndAmnt - Tmp_Aply_Amt;
        //                                         Tmp_Aply_Amt := 0;
        //                                         SQLQuery := 'select nvl(max(sl_no)+1,1) newslno from MRP_INSTAL_PLAN_CHANGES where SALE_ORDER_ID = ' + FORMAT(SaleOrderId) +
        //                                                    ' and INVOICE_ID = ' + DELCHR(FORMAT(RecordSet1.Fields.Item('invoice_id').Value), '=', ',');
        //                                         //MESSAGE(SQLQuery);
        //                                         RecordSet2 := SQLConnection.Execute(SQLQuery, RowCount2);
        //                                         IF NOT ((RecordSet2.BOF) OR (RecordSet2.EOF)) THEN
        //                                             RecordSet2.MoveFirst;
        //                                         WHILE NOT RecordSet2.EOF DO BEGIN
        //                                             EVALUATE(Temp_SL_No, FORMAT(RecordSet2.Fields.Item('newslno').Value));
        //                                             RowCount2 := RowCount2 + 1;
        //                                             RecordSet2.MoveNext;
        //                                         END;
        //                                         SQLQuery := 'insert into MRP_INSTAL_PLAN_CHANGES(PLAN_CHANGE_ID,SL_NO,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,RESPONSE_SECTION, ' +
        //                                                    ' CREATION_DATE,USERID,INVOICE_ID,SPLITEDFROM) values(INSTALL_PLAN_CHANGE_SEQ.NEXTVAL,' + DELCHR(FORMAT(Temp_SL_No), '=', ',') + ',' + FORMAT(SaleOrderId) + ',sysdate, ' +
        //                                                    DELCHR(FORMAT(ROUND(PlndAmnt - Tmp_Aply_Amt, 1, '=')), '=', ',') + ',''SAL'',sysdate,''Auto'', ' + DELCHR(FORMAT(RecordSet1.Fields.Item('invoice_id').Value), '=', ',') +
        //                                                    ', ' + DELCHR(FORMAT(RecordSet1.Fields.Item('SL_NO').Value), '=', ',') + ')';
        //                                         //MESSAGE(SQLQuery);
        //                                         SQLConnection.Execute(SQLQuery);

        //                                         SQLQuery := 'insert into MRP_INSTAL_PLAN_CHANGES(PLAN_CHANGE_ID,SL_NO,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,RESPONSE_SECTION, ' +
        //                                                    ' CREATION_DATE,USERID,PAYMENT_ID,INVOICE_ID) values(INSTALL_PLAN_CHANGE_SEQ.NEXTVAL,' + DELCHR(FORMAT(Temp_SL_No), '=', ',') + ',' + FORMAT(SaleOrderId) +
        //                                                    ', sysdate,0,''SAL'',sysdate,''Auto'',' + FORMAT(PaymentId) + ',' + DELCHR(FORMAT(RecordSet1.Fields.Item('invoice_id').Value), '=', ',') + ')';
        //                                         //MESSAGE(SQLQuery);
        //                                         SQLConnection.Execute(SQLQuery);

        //                                         SQLQuery := 'update MRP_INSTAL_PLAN_CHANGES set PLANNED_AMOUNT = ' + DELCHR(FORMAT(ROUND(Tmp_Aply_Amt, 1, '=')), '=', ',') + ' where PLAN_CHANGE_ID = ' +
        //                                                    DELCHR(FORMAT(RecordSet1.Fields.Item('PLAN_CHANGE_ID').Value), '=', ',');
        //                                         //MESSAGE(SQLQuery);
        //                                         SQLConnection.Execute(SQLQuery);
        //                                     END ELSE BEGIN
        //                                         Tmp_Aply_Amt := Tmp_Aply_Amt - PlndAmnt;
        //                                         PlndAmnt := 0;
        //                                     END;
        //                                 END ELSE BEGIN
        //                                     SQLQuery := 'insert into MRP_INSTAL_PLAN_CHANGES(PLAN_CHANGE_ID,SL_NO,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,RESPONSE_SECTION,CREATION_DATE, ' +
        //                                                ' USERID,PAYMENT_ID,INVOICE_ID) values(INSTALL_PLAN_CHANGE_SEQ.NEXTVAL,' + DELCHR(FORMAT(RecordSet1.Fields.Item('sl_no').Value), '=', ',') + ',' + FORMAT(SaleOrderId) +
        //                                                ', sysdate,0,''SAL'',sysdate,''Auto'',' + DELCHR(FORMAT(PaymentId), '=', ',') + ',' + DELCHR(FORMAT(RecordSet1.Fields.Item('invoice_id').Value), '=', ',') + ')';
        //                                     //MESSAGE(SQLQuery);
        //                                     SQLConnection.Execute(SQLQuery);
        //                                 END;
        //                                 Pay_Amount := Pay_Amount - PlndAmnt;
        //                             END ELSE BEGIN // else part of if payment amount > plan change amount
        //                                 IF Tmp_Aply_Amt > 0 THEN BEGIN
        //                                     IF Pay_Amount >= Tmp_Aply_Amt THEN BEGIN
        //                                         Pay_Amount := Pay_Amount - Tmp_Aply_Amt;
        //                                         Tmp_Aply_Amt := 0;
        //                                         SQLQuery := 'select nvl(max(sl_no)+1,1) newslno from MRP_INSTAL_PLAN_CHANGES where SALE_ORDER_ID = ' + FORMAT(SaleOrderId) +
        //                                                    ' and INVOICE_ID = ' + DELCHR(FORMAT(RecordSet1.Fields.Item('invoice_id').Value), '=', ',');
        //                                         //MESSAGE(SQLQuery);
        //                                         RecordSet2 := SQLConnection.Execute(SQLQuery, RowCount2);
        //                                         IF NOT ((RecordSet2.BOF) OR (RecordSet2.EOF)) THEN
        //                                             RecordSet2.MoveFirst;
        //                                         WHILE NOT RecordSet2.EOF DO BEGIN
        //                                             EVALUATE(Temp_SL_No, FORMAT(RecordSet2.Fields.Item('newslno').Value));
        //                                             RowCount2 := RowCount2 + 1;
        //                                             RecordSet2.MoveNext;
        //                                         END;
        //                                         SQLQuery := 'insert into MRP_INSTAL_PLAN_CHANGES(PLAN_CHANGE_ID,SL_NO,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,RESPONSE_SECTION, ' +
        //                                                    ' CREATION_DATE,USERID,INVOICE_ID,SPLITEDFROM) values(INSTALL_PLAN_CHANGE_SEQ.NEXTVAL,' + DELCHR(FORMAT(Temp_SL_No), '=', ',') + ',' + FORMAT(SaleOrderId) + ',sysdate, ' +
        //                                                    DELCHR(FORMAT(ROUND(Pay_Amount, 1, '=')), '=', ',') + ',''SAL'',sysdate,''Auto'', ' + DELCHR(FORMAT(RecordSet1.Fields.Item('invoice_id').Value), '=', ',') +
        //                                                    ', ' + DELCHR(FORMAT(RecordSet1.Fields.Item('SL_NO').Value), '=', ',') + ')';
        //                                         //MESSAGE(SQLQuery);
        //                                         SQLConnection.Execute(SQLQuery);

        //                                         SQLQuery := 'insert into MRP_INSTAL_PLAN_CHANGES(PLAN_CHANGE_ID,SL_NO,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,RESPONSE_SECTION, ' +
        //                                                    ' CREATION_DATE,USERID,PAYMENT_ID,INVOICE_ID) values(INSTALL_PLAN_CHANGE_SEQ.NEXTVAL,' + FORMAT(Temp_SL_No) + ',' + FORMAT(SaleOrderId) +
        //                                                    ', sysdate,0,''SAL'',sysdate,''Auto'',' + DELCHR(FORMAT(PaymentId), '=', ',') + ',' + DELCHR(FORMAT(RecordSet1.Fields.Item('invoice_id').Value), '=', ',') + ')';
        //                                         //MESSAGE(SQLQuery);
        //                                         SQLConnection.Execute(SQLQuery);

        //                                         SQLQuery := 'update MRP_INSTAL_PLAN_CHANGES set PLANNED_AMOUNT = ' + DELCHR(FORMAT(ROUND(PlndAmnt - Pay_Amount, 1, '=')), '=', ',') + ' where PLAN_CHANGE_ID = ' +
        //                                                    DELCHR(FORMAT(RecordSet1.Fields.Item('PLAN_CHANGE_ID').Value), '=', ',');
        //                                         //MESSAGE(SQLQuery);
        //                                         SQLConnection.Execute(SQLQuery);
        //                                         Pay_Amount := 0;
        //                                     END ELSE BEGIN
        //                                         Tmp_Aply_Amt := Tmp_Aply_Amt - Pay_Amount;
        //                                         Pay_Amount := 0;
        //                                     END;
        //                                 END ELSE BEGIN
        //                                     SQLQuery := 'select nvl(max(sl_no)+1,1) newslno from MRP_INSTAL_PLAN_CHANGES where SALE_ORDER_ID = ' + FORMAT(SaleOrderId) +
        //                                                ' and INVOICE_ID = ' + DELCHR(FORMAT(RecordSet1.Fields.Item('invoice_id').Value), '=', ',');
        //                                     //MESSAGE(SQLQuery);
        //                                     RecordSet2 := SQLConnection.Execute(SQLQuery, RowCount2);
        //                                     IF NOT ((RecordSet2.BOF) OR (RecordSet2.EOF)) THEN
        //                                         RecordSet2.MoveFirst;
        //                                     WHILE NOT RecordSet2.EOF DO BEGIN
        //                                         EVALUATE(Temp_SL_No, FORMAT(RecordSet2.Fields.Item('newslno').Value));
        //                                         RowCount2 := RowCount2 + 1;
        //                                         RecordSet2.MoveNext;
        //                                     END;
        //                                     SQLQuery := 'insert into MRP_INSTAL_PLAN_CHANGES(PLAN_CHANGE_ID,SL_NO,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,RESPONSE_SECTION, ' +
        //                                                ' CREATION_DATE,USERID,INVOICE_ID,SPLITEDFROM) values(INSTALL_PLAN_CHANGE_SEQ.NEXTVAL,' + DELCHR(FORMAT(Temp_SL_No), '=', ',') + ',' + FORMAT(SaleOrderId) + ',sysdate, ' +
        //                                                DELCHR(FORMAT(ROUND(Pay_Amount, 1, '=')), '=', ',') + ',''SAL'',sysdate,''Auto'', ' + DELCHR(FORMAT(RecordSet1.Fields.Item('invoice_id').Value), '=', ',') +
        //                                                ', ' + DELCHR(FORMAT(RecordSet1.Fields.Item('SL_NO').Value), '=', ',') + ')';
        //                                     //MESSAGE(SQLQuery);
        //                                     SQLConnection.Execute(SQLQuery);

        //                                     SQLQuery := 'insert into MRP_INSTAL_PLAN_CHANGES(PLAN_CHANGE_ID,SL_NO,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,RESPONSE_SECTION, ' +
        //                                                ' CREATION_DATE,USERID,PAYMENT_ID,INVOICE_ID) values(INSTALL_PLAN_CHANGE_SEQ.NEXTVAL,' + FORMAT(Temp_SL_No) + ',' + FORMAT(SaleOrderId) +
        //                                                ', sysdate,0,''SAL'',sysdate,''Auto'',' + DELCHR(FORMAT(PaymentId), '=', ',') + ',' + DELCHR(FORMAT(RecordSet1.Fields.Item('invoice_id').Value), '=', ',') + ')';
        //                                     //MESSAGE(SQLQuery);
        //                                     SQLConnection.Execute(SQLQuery);

        //                                     SQLQuery := 'update MRP_INSTAL_PLAN_CHANGES set PLANNED_AMOUNT = ' + DELCHR(FORMAT(ROUND(PlndAmnt - Pay_Amount, 1, '=')), '=', ',') + ' where PLAN_CHANGE_ID = ' +
        //                                                DELCHR(FORMAT(RecordSet1.Fields.Item('PLAN_CHANGE_ID').Value), '=', ',');
        //                                     //MESSAGE(SQLQuery);
        //                                     SQLConnection.Execute(SQLQuery);
        //                                     Pay_Amount := 0;
        //                                 END;
        //                             END; // end of else part of if payment amount > plan change amount
        //                             RowCount1 := RowCount1 + 1;
        //                             RecordSet1.MoveNext;
        //                         END; // end of instl pln changes loop
        //                         temppp_amt := 0;
        //                         IF (InvoiceAmt > PlnndAmt) AND (Pay_Amount > 0) THEN BEGIN
        //                             IF Pay_Amount >= (InvoiceAmt - PlnndAmt) THEN BEGIN
        //                                 temppp_amt := InvoiceAmt - PlnndAmt;
        //                                 Pay_Amount := InvoiceAmt - PlnndAmt;
        //                             END ELSE BEGIN
        //                                 temppp_amt := Pay_Amount;
        //                                 Pay_Amount := 0;
        //                             END;
        //                             IF Tmp_Aply_Amt > 0 THEN BEGIN
        //                                 IF temppp_amt >= Tmp_Aply_Amt THEN BEGIN
        //                                     temppp_amt := temppp_amt - Tmp_Aply_Amt;
        //                                     Tmp_Aply_Amt := 0;
        //                                     SQLQuery := 'insert into MRP_INSTAL_PLAN_CHANGES(PLAN_CHANGE_ID,SL_NO,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,RESPONSE_SECTION, ' +
        //                                                ' CREATION_DATE,USERID,INVOICE_ID) values(PLAN_CHANGE_SEQ.NEXTVAL,(SELECT nvl(MAX(sl_no)+1,1) from MRP_INSTAL_PLAN_CHANGES where sale_order_id = ' +
        //                                                FORMAT(SaleOrderId) + ' and invoice_id = ' + DELCHR(FORMAT(RecordSet.Fields.Item('ar_invoice_id').Value), '=', ',') + '),' + FORMAT(SaleOrderId) + ',sysdate, ' +
        //                                                DELCHR(FORMAT(ROUND(temppp_amt, 1, '=')), '=', ',') + ',''SAL'',sysdate,''Auto'', ' + DELCHR(FORMAT(RecordSet.Fields.Item('ar_invoice_id').Value), '=', ',');
        //                                     //MESSAGE(SQLQuery);
        //                                     SQLConnection.Execute(SQLQuery);

        //                                     SQLQuery := 'insert into MRP_INSTAL_PLAN_CHANGES(PLAN_CHANGE_ID,SL_NO,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,RESPONSE_SECTION, ' +
        //                                                ' CREATION_DATE,USERID,PAYMENT_ID,INVOICE_ID) values(PLAN_CHANGE_SEQ.NEXTVAL,(SELECT nvl(MAX(sl_no)+1,1) ' +
        //                                                ' from MRP_INSTAL_PLAN_CHANGES where sale_order_id = ' + FORMAT(SaleOrderId) + ' and invoice_id = ' +
        //                                                DELCHR(FORMAT(RecordSet.Fields.Item('ar_invoice_id').Value), '=', ',') + '),' + FORMAT(SaleOrderId) +
        //                                                ', sysdate,0,''SAL'',sysdate,''Auto'',' + DELCHR(FORMAT(PaymentId), '=', ',') + ',' + DELCHR(FORMAT(RecordSet.Fields.Item('ar_invoice_id').Value), '=', ',') + ')';
        //                                     //MESSAGE(SQLQuery);
        //                                     SQLConnection.Execute(SQLQuery);
        //                                 END ELSE BEGIN
        //                                     Tmp_Aply_Amt := Tmp_Aply_Amt - temppp_amt;
        //                                     temppp_amt := 0;
        //                                 END;
        //                             END ELSE BEGIN
        //                                 SQLQuery := 'insert into MRP_INSTAL_PLAN_CHANGES(PLAN_CHANGE_ID,SL_NO,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,RESPONSE_SECTION, ' +
        //                                            ' CREATION_DATE,USERID,INVOICE_ID) values(PLAN_CHANGE_SEQ.NEXTVAL,(SELECT nvl(MAX(sl_no)+1,1) from MRP_INSTAL_PLAN_CHANGES where sale_order_id = ' +
        //                                            FORMAT(SaleOrderId) + ' and invoice_id = ' + DELCHR(FORMAT(RecordSet.Fields.Item('ar_invoice_id').Value), '=', ',') + '),' + FORMAT(SaleOrderId) + ',sysdate, ' +
        //                                            DELCHR(FORMAT(ROUND(temppp_amt, 1, '=')), '=', ',') + ',''SAL'',sysdate,''Auto'', ' + DELCHR(FORMAT(RecordSet.Fields.Item('ar_invoice_id').Value), '=', ',');
        //                                 //MESSAGE(SQLQuery);
        //                                 SQLConnection.Execute(SQLQuery);

        //                                 SQLQuery := 'insert into MRP_INSTAL_PLAN_CHANGES(PLAN_CHANGE_ID,SL_NO,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,RESPONSE_SECTION, ' +
        //                                            ' CREATION_DATE,USERID,PAYMENT_ID,INVOICE_ID) values(PLAN_CHANGE_SEQ.NEXTVAL,(SELECT nvl(MAX(sl_no),1) ' +
        //                                            ' from MRP_INSTAL_PLAN_CHANGES where sale_order_id = ' + FORMAT(SaleOrderId) + ' and invoice_id = ' +
        //                                            DELCHR(FORMAT(RecordSet.Fields.Item('ar_invoice_id').Value), '=', ',') + '),' + FORMAT(SaleOrderId) +
        //                                            ', sysdate,0,''SAL'',sysdate,''Auto'',' + DELCHR(FORMAT(PaymentId), '=', ',') + ',' + DELCHR(FORMAT(RecordSet.Fields.Item('ar_invoice_id').Value), '=', ',') + ')';
        //                                 //MESSAGE(SQLQuery);
        //                                 SQLConnection.Execute(SQLQuery);
        //                             END;
        //                         END;
        //                         RowCount := RowCount + 1;
        //                         RecordSet.MoveNext;
        //                     END;  // end of inst_invoices_loop
        //                 END;  //end of if still payment amount is remaining pay in installtion plan changes
        //                 IF Tmp_Aply_Amt_Tot > 0 THEN BEGIN
        //                     IF Inst_Paid_Amt > Tmp_Aply_Amt_Tot THEN BEGIN
        //                         SQLQuery := 'update mrp_arr_instal_payment set AMOUNT = nvl(AMOUNT,0) - ' + DELCHR(FORMAT(ROUND(Tmp_Aply_Amt_Tot, 1, '=')), '=', ',') + ' where AR_PAYMENT_ID = ' +
        //                                    DELCHR(FORMAT(PaymentId), '=', ',');
        //                         //MESSAGE(SQLQuery);
        //                         SQLConnection.Execute(SQLQuery);
        //                     END ELSE BEGIN
        //                         SQLQuery := 'delete from mrp_arr_instal_payment where AR_PAYMENT_ID = ' + DELCHR(FORMAT(PaymentId), '=', ',');
        //                         //MESSAGE(SQLQuery);
        //                         SQLConnection.Execute(SQLQuery);
        //                     END;
        //                 END;
        //             END  // end of not instalation invoices
        //             ELSE BEGIN  // if installation invoice
        //                 TotPlndAmnt := 0;
        //                 SQLQuery := 'select * from MRP_ARR_INSTALL_INVOICE where SALE_ORDER_ID  = ' + FORMAT(SaleOrderId) + ' and INVOICE_DATE = to_date(''' +
        //                             FORMAT(SIH."Posting Date", 0, '<Day>-<Month Text,3>-<Year4>') + ''',''dd-mon-yyyy'') and ERP_INVOICE_NO = ''' +
        //                             DELCHR(SIH."External Document No.", '=', ',') + ''' and AMOUNTTYPE = ''I'' and amount is not null order by LINE_NO,AR_INVOICE_ID';
        //                 //MESSAGE(SQLQuery);
        //                 RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                 IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                     RecordSet.MoveFirst;
        //                 WHILE NOT RecordSet.EOF DO  //inst invoice loop
        //                 BEGIN
        //                     InvAmt := 0;
        //                     EVALUATE(InvAmt, FORMAT(RecordSet.Fields.Item('amount').Value));
        //                     SQLQuery := 'select * from  MRP_INSTAL_PLAN_CHANGES b, (select SALE_ORDER_ID,sl_no,max(plan_change_id) PlanChngId from MRP_INSTAL_PLAN_CHANGES where ' +
        //                                ' SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ' and invoice_id = ' + DELCHR(FORMAT(RecordSet.Fields.Item('AR_INVOICE_ID').Value), '=', ',') + ' ' +
        //                                ' group by SALE_ORDER_ID,sl_no) a where a.planchngid=b.plan_change_id and b.planned_amount > 0 and b.INSTALLAMT > 0';
        //                     //MESSAGE(SQLQuery);
        //                     RecordSet1 := SQLConnection.Execute(SQLQuery, RowCount1);
        //                     PlndAmnt := 0;
        //                     IF NOT ((RecordSet1.BOF) OR (RecordSet1.EOF)) THEN
        //                         RecordSet1.MoveFirst;
        //                     WHILE NOT RecordSet1.EOF DO BEGIN     // begin of instl pln changes loop
        //                         PlndAmnt := 0;
        //                         EVALUATE(PlndAmnt, FORMAT(RecordSet1.Fields.Item('planned_amount').Value));
        //                         TotPlndAmnt := TotPlndAmnt + PlndAmnt;
        //                         RowCount1 := RowCount1 + 1;
        //                         RecordSet1.MoveNext;
        //                     END;
        //                     SQLQuery := 'select nvl(sum(PLANNED_AMOUNT),0) PLANNED_AMOUNT   from MRP_INSTAL_PLAN_CHANGES where PLAN_CHANGE_ID in ( ' +
        //                                'select  max(pl.PLAN_CHANGE_ID) from  MRP_INSTAL_PLAN_CHANGES pl ,(select sl_no,SALE_ORDER_ID,PLAN_CHANGE_ID ' +
        //                                'from MRP_INSTAL_PLAN_CHANGES pl1 where planned_amount= 0  and payment_id is not null and invoice_id = ' +
        //                                DELCHR(FORMAT(RecordSet.Fields.Item('AR_INVOICE_ID').Value), '=', ',') + ' and SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ') a ' +
        //                                'where  a.sl_no=pl.sl_no and pl.PLAN_CHANGE_ID < a.PLAN_CHANGE_ID and a.SALE_ORDER_ID=pl.SALE_ORDER_ID) ';
        //                     //MESSAGE(SQLQuery);
        //                     RecordSet1 := SQLConnection.Execute(SQLQuery, RowCount1);
        //                     InvPayAmt := 0;
        //                     Tot_InvPayAmt := 0;
        //                     IF NOT ((RecordSet1.BOF) OR (RecordSet1.EOF)) THEN
        //                         RecordSet1.MoveFirst;
        //                     WHILE NOT RecordSet1.EOF DO BEGIN
        //                         InvPayAmt := 0;
        //                         EVALUATE(InvPayAmt, FORMAT(RecordSet1.Fields.Item('planned_amount').Value));
        //                         Tot_InvPayAmt := Tot_InvPayAmt + InvPayAmt;
        //                         RowCount1 := RowCount1 + 1;
        //                         RecordSet1.MoveNext;
        //                     END;
        //                     Tot_Inv_Amt := Tot_Inv_Amt + InvAmt - Tot_InvPayAmt;
        //                     RowCount := RowCount + 1;
        //                     RecordSet.MoveNext;
        //                 END;
        //                 IF Tot_Inv_Amt > 0 THEN BEGIN
        //                     IF (Tot_Inv_Amt >= Amount) THEN
        //                         Pay_Amount := Amount
        //                     ELSE
        //                         Pay_Amount := Tot_Inv_Amt;
        //                 END ELSE
        //                     Pay_Amount := 0;
        //                 IF Pay_Amount > 0 THEN BEGIN
        //                     SQLQuery := 'select nvl(ARR_INSTALL_PAYMENT_SEQ.NEXTVAL,1) payid from dual';
        //                     //MESSAGE(SQLQuery);
        //                     RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                     IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                         RecordSet.MoveFirst;
        //                     WHILE NOT RecordSet.EOF DO BEGIN
        //                         EVALUATE(PaymentId, FORMAT(RecordSet.Fields.Item('payid').Value));
        //                         RowCount := RowCount + 1;
        //                         RecordSet.MoveNext;
        //                     END;
        //                     // insert payment record
        //                     Paid_Amt := Pay_Amount;
        //                     SQLQuery := 'insert into mrp_arr_instal_payment(AR_PAYMENT_ID,SALE_ORDER_ID,PAYMENT_DATE,AMOUNT,USERID,CREATION_DATE,AMOUNTTYPE) values(' + DELCHR(FORMAT(PaymentId), '=', ',') + ', ' +
        //                                FORMAT(SaleOrderId) + ', to_date(''' + FORMAT(CLE."Posting Date", 0, '<Day>-<Month Text,3>-<Year4>') + ''',''dd-mon-yyyy''), ' +
        //                                DELCHR(FORMAT(ROUND(Pay_Amount, 1, '=')), '=', ',') + ',''Auto'',sysdate,''I'')';
        //                     //MESSAGE(SQLQuery);
        //                     SQLConnection.Execute(SQLQuery);

        //                     SQLQuery := 'select * from MRP_ARR_INSTALL_INVOICE where SALE_ORDER_ID  = ' + FORMAT(SaleOrderId) + ' and INVOICE_DATE = to_date(''' +
        //                                 FORMAT(SIH."Posting Date", 0, '<Day>-<Month Text,3>-<Year4>') + ''',''dd-mon-yyyy'') and ERP_INVOICE_NO = ''' +
        //                                 DELCHR(SIH."External Document No.", '=', ',') + ''' and amount is not null order by LINE_NO,AR_INVOICE_ID';
        //                     //MESSAGE(SQLQuery);
        //                     RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                     IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                         RecordSet.MoveFirst;
        //                     WHILE NOT RecordSet.EOF DO BEGIN   // invoice loop
        //                         InvoiceAmt := 0;
        //                         IF FORMAT(RecordSet.Fields.Item('amount').Value) <> '' THEN
        //                             EVALUATE(InvoiceAmt, FORMAT(RecordSet.Fields.Item('amount').Value))
        //                         ELSE
        //                             InvoiceAmt := 0;
        //                         //EVALUATE(InvoiceAmt,FORMAT(RecordSet.Fields.Item('amount').Value));
        //                         SQLQuery := 'select nvl(sum(PLANNED_AMOUNT),0) PLANNED_AMOUNT   from MRP_INSTAL_PLAN_CHANGES where PLAN_CHANGE_ID in ( ' +
        //                                    'select  max(pl.PLAN_CHANGE_ID) from  MRP_INSTAL_PLAN_CHANGES pl ,(select sl_no,SALE_ORDER_ID,PLAN_CHANGE_ID ' +
        //                                    'from MRP_INSTAL_PLAN_CHANGES pl1 where planned_amount= 0  and payment_id is not null and invoice_id = ' +
        //                                    DELCHR(FORMAT(RecordSet.Fields.Item('AR_INVOICE_ID').Value), '=', ',') + ' and SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ') a ' +
        //                                    'where  a.sl_no=pl.sl_no and pl.PLAN_CHANGE_ID < a.PLAN_CHANGE_ID and a.SALE_ORDER_ID=pl.SALE_ORDER_ID) ';
        //                         //MESSAGE(SQLQuery);
        //                         RecordSet1 := SQLConnection.Execute(SQLQuery, RowCount1);
        //                         InvPayAmt := 0;
        //                         Tot_InvPayAmt := 0;
        //                         IF NOT ((RecordSet1.BOF) OR (RecordSet1.EOF)) THEN
        //                             RecordSet1.MoveFirst;
        //                         WHILE NOT RecordSet1.EOF DO BEGIN
        //                             InvPayAmt := 0;
        //                             EVALUATE(InvPayAmt, FORMAT(RecordSet1.Fields.Item('planned_amount').Value));
        //                             Tot_InvPayAmt := Tot_InvPayAmt + InvPayAmt;
        //                             RowCount1 := RowCount1 + 1;
        //                             RecordSet1.MoveNext;
        //                         END;
        //                         InvoiceAmt := InvoiceAmt - Tot_InvPayAmt;
        //                         IF Pay_Amount > 0 THEN  // if still payment amount is remaining pay in installtion plan changes
        //                         BEGIN
        //                             SQLQuery := 'select * from  MRP_INSTAL_PLAN_CHANGES b,(select SALE_ORDER_ID,sl_no,max(plan_change_id) PlanChngId from MRP_INSTAL_PLAN_CHANGES where ' +
        //                                        ' SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ' and invoice_id =' + DELCHR(FORMAT(RecordSet.Fields.Item('AR_INVOICE_ID').Value), '=', ',') +
        //                                        ' group by SALE_ORDER_ID,sl_no) a where a.planchngid=b.plan_change_id and b.planned_amount > 0';
        //                             //MESSAGE(SQLQuery);
        //                             RecordSet1 := SQLConnection.Execute(SQLQuery, RowCount1);
        //                             PlnndAmt := 0;
        //                             PlndAmnt := 0;
        //                             IF NOT ((RecordSet1.BOF) OR (RecordSet1.EOF)) THEN
        //                                 RecordSet1.MoveFirst;
        //                             WHILE NOT RecordSet1.EOF DO BEGIN   // begin of instl pln changes loop
        //                                 IF ROUND(Pay_Amount, 1, '=') > 0 THEN  // if still payment amount is remaining pay in installtion plan changes
        //                                 BEGIN
        //                                     EVALUATE(PlndAmnt, FORMAT(RecordSet1.Fields.Item('planned_amount').Value));
        //                                     PlnndAmt := PlnndAmt + PlndAmnt;
        //                                     IF (ROUND(Pay_Amount, 1, '=') >= ROUND(PlndAmnt, 1, '=')) THEN BEGIN  // if payment amount > plan change amount
        //                                         SQLQuery := 'insert into MRP_INSTAL_PLAN_CHANGES(PLAN_CHANGE_ID,SL_NO,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,RESPONSE_SECTION,CREATION_DATE,' +
        //                                                    ' USERID,PAYMENT_ID,INVOICE_ID) values(INSTALL_PLAN_CHANGE_SEQ.NEXTVAL,' + DELCHR(FORMAT(RecordSet1.Fields.Item('sl_no').Value), '=', ',') + ',' + FORMAT(SaleOrderId) +
        //                                                    ', sysdate,0,''SAL'',sysdate,''Auto'',' + DELCHR(FORMAT(PaymentId), '=', ',') + ',' + DELCHR(FORMAT(RecordSet1.Fields.Item('invoice_id').Value), '=', ',') + ')';
        //                                         //MESSAGE(SQLQuery);
        //                                         SQLConnection.Execute(SQLQuery);
        //                                         Pay_Amount := Pay_Amount - PlndAmnt;
        //                                     END ELSE BEGIN // else part of if payment amount > plan change amount
        //                                         SQLQuery := 'select nvl(max(sl_no)+1,1) newslno from MRP_INSTAL_PLAN_CHANGES where SALE_ORDER_ID = ' + FORMAT(SaleOrderId) +
        //                                                    ' and INVOICE_ID = ' + DELCHR(FORMAT(RecordSet1.Fields.Item('invoice_id').Value), '=', ',');
        //                                         //MESSAGE(SQLQuery);
        //                                         Temp_SL_No := 1;
        //                                         RecordSet2 := SQLConnection.Execute(SQLQuery, RowCount2);
        //                                         IF NOT ((RecordSet2.BOF) OR (RecordSet2.EOF)) THEN
        //                                             RecordSet2.MoveFirst;
        //                                         WHILE NOT RecordSet2.EOF DO BEGIN
        //                                             EVALUATE(Temp_SL_No, FORMAT(RecordSet2.Fields.Item('newslno').Value));
        //                                             RowCount2 := RowCount2 + 1;
        //                                             RecordSet2.MoveNext;
        //                                         END;
        //                                         SQLQuery := 'insert into MRP_INSTAL_PLAN_CHANGES(PLAN_CHANGE_ID,SL_NO,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,RESPONSE_SECTION, ' +
        //                                                    ' CREATION_DATE,USERID,INVOICE_ID,SPLITEDFROM) values(INSTALL_PLAN_CHANGE_SEQ.NEXTVAL,' + DELCHR(FORMAT(Temp_SL_No), '=', ',') + ',' + FORMAT(SaleOrderId) + ',sysdate, ' +
        //                                                    DELCHR(FORMAT(ROUND(Pay_Amount, 1, '=')), '=', ',') + ',''SAL'',sysdate,''Auto'', ' + DELCHR(FORMAT(RecordSet1.Fields.Item('invoice_id').Value), '=', ',') +
        //                                                    ', ' + DELCHR(FORMAT(RecordSet1.Fields.Item('sl_no').Value), '=', ',') + ')';
        //                                         //MESSAGE(SQLQuery);
        //                                         SQLConnection.Execute(SQLQuery);

        //                                         SQLQuery := 'insert into MRP_INSTAL_PLAN_CHANGES(PLAN_CHANGE_ID,SL_NO,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,RESPONSE_SECTION, ' +
        //                                                    ' CREATION_DATE,USERID,PAYMENT_ID,INVOICE_ID) values(INSTALL_PLAN_CHANGE_SEQ.NEXTVAL,' + DELCHR(FORMAT(Temp_SL_No), '=', ',') + ',' + FORMAT(SaleOrderId) +
        //                                                    ', sysdate,0,''SAL'',sysdate,''Auto'',' + DELCHR(FORMAT(PaymentId), '=', ',') + ',' + DELCHR(FORMAT(RecordSet1.Fields.Item('invoice_id').Value), '=', ',') + ')';
        //                                         //MESSAGE(SQLQuery);
        //                                         SQLConnection.Execute(SQLQuery);

        //                                         SQLQuery := 'update MRP_INSTAL_PLAN_CHANGES set PLANNED_AMOUNT = ' + DELCHR(FORMAT(ROUND(PlndAmnt - Pay_Amount, 1, '=')), '=', ',') + ' where PLAN_CHANGE_ID = ' +
        //                                                    DELCHR(FORMAT(RecordSet1.Fields.Item('PLAN_CHANGE_ID').Value), '=', ',');
        //                                         //MESSAGE(SQLQuery);
        //                                         SQLConnection.Execute(SQLQuery);
        //                                         Pay_Amount := 0;
        //                                     END; // end of else part of if payment amount > plan change amount
        //                                 END;
        //                                 RowCount1 := RowCount1 + 1;
        //                                 RecordSet1.MoveNext;
        //                             END; // end of instl pln changes loop
        //                             temppp_amt := 0;
        //                             IF (InvoiceAmt > PlnndAmt) AND (Pay_Amount > 0) THEN BEGIN
        //                                 IF Pay_Amount >= (InvoiceAmt - PlnndAmt) THEN
        //                                     temppp_amt := InvoiceAmt - PlnndAmt
        //                                 ELSE
        //                                     temppp_amt := Pay_Amount;
        //                                 SQLQuery := 'insert into MRP_INSTAL_PLAN_CHANGES(PLAN_CHANGE_ID,SL_NO,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,RESPONSE_SECTION, ' +
        //                                            ' CREATION_DATE,USERID,INVOICE_ID) values(PLAN_CHANGE_SEQ.NEXTVAL,(SELECT nvl(MAX(sl_no)+1,1) from MRP_INSTAL_PLAN_CHANGES where sale_order_id = ' +
        //                                            FORMAT(SaleOrderId) + ' and invoice_id = ' + DELCHR(FORMAT(RecordSet.Fields.Item('ar_invoice_id').Value), '=', ',') + '),' + FORMAT(SaleOrderId) + ',sysdate, ' +
        //                                            DELCHR(FORMAT(ROUND(temppp_amt, 1, '=')), '=', ',') + ',''SAL'',sysdate,''Auto'', ' + DELCHR(FORMAT(RecordSet.Fields.Item('ar_invoice_id').Value), '=', ',');
        //                                 //MESSAGE(SQLQuery);
        //                                 SQLConnection.Execute(SQLQuery);

        //                                 SQLQuery := 'insert into MRP_INSTAL_PLAN_CHANGES(PLAN_CHANGE_ID,SL_NO,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,RESPONSE_SECTION, ' +
        //                                            ' CREATION_DATE,USERID,PAYMENT_ID,INVOICE_ID) values(PLAN_CHANGE_SEQ.NEXTVAL,(SELECT nvl(MAX(sl_no),1) ' +
        //                                            ' from MRP_INSTAL_PLAN_CHANGES where sale_order_id = ' + FORMAT(SaleOrderId) + ' and invoice_id = ' +
        //                                            DELCHR(FORMAT(RecordSet.Fields.Item('ar_invoice_id').Value), '=', ',') + '),' + FORMAT(SaleOrderId) +
        //                                            ', sysdate,0,''SAL'',sysdate,''Auto'',' + DELCHR(FORMAT(PaymentId), '=', ',') + ',' + DELCHR(FORMAT(RecordSet.Fields.Item('ar_invoice_id').Value), '=', ',') + ')';
        //                                 //MESSAGE(SQLQuery);
        //                                 SQLConnection.Execute(SQLQuery);
        //                             END;
        //                         END;  //end of if still payment amount is remaining pay in installtion plan changes
        //                         RowCount := RowCount + 1;
        //                         RecordSet.MoveNext;
        //                     END;  // end arr_inst_invoices loop
        //                 END;
        //             END;  // end of if installation invoice
        //         END;  // end--only if order is aft integration
        //     END;    //end of if sale order exist in cf
        //     SQLConnection.CommitTrans;
        //     //RecordSet.Close;
        //     SQLConnection.Close;
        //     ConnectionOpen := 0;
        // END; // end of if invoice exist in erp
        //  END;  // end of if cust posting grp is private

    end;

    procedure PvtOrderInvoicePaymentInCF_2(CLE: Record "Cust. Ledger Entry"; Amount: Decimal);
    var
        SIH: Record "Sales Invoice Header";
        SH: Record "Sales Header";
        SaleOrderId: Integer;
        SIL: Record "Sales Invoice Line";
        SL: Record "Sales Line";
        PT: Record "Payment Terms";
        PlndAmnt: Decimal;
        TotPlndAmnt: Decimal;
        Pay_Amount: Decimal;
        PaymentId: Integer;
        Temp_SL_No: Integer;
        Is_Ordr_Aftr_Int: Code[10];
        Tot_Inv_Amt: Decimal;
        InvAmt: Decimal;
        InvPayAmt: Decimal;
        Tot_InvPayAmt: Decimal;
        Tot_Recvbl_Amt: Decimal;
        Tol_Inst_Recvbl_Amt: Decimal;
        Tot_Recvbl_PlndAmnt: Decimal;
        TotInst_Recvbl_PlndAmnt: Decimal;
        InvoiceAmt: Decimal;
        PlnndAmt: Decimal;
        temppp_amt: Decimal;
        Adv_Cons_Amt: Decimal;
        Tmp_UnitPrice: Decimal;
        Tmp_Adv_Perct: Decimal;
        Tmp_Inv_Qty: Decimal;
        Tmp_Inv_Adv_Amt: Decimal;
        tmp_invamt: Decimal;
        Tmp_Nxt_Inv_Amt: Decimal;
        TmpInvAmt: Decimal;
        Tmp_InvPayAmt: Decimal;
        Tmp_Tot_InvPayAmt: Decimal;
        Tmp_Aply_Amt: Decimal;
        Tmp_Aply_Amt_Tot: Decimal;
        Paid_Amt: Decimal;
        Inst_Paid_Amt: Decimal;
        Tot_Inv_Adv_Amts: Decimal;
    begin
        // MESSAGE('Invoice Payment In CashFlow!');
        // Amount := ABS(Amount);
        // IF (ROUND(Amount, 1, '=') > 0) AND NOT (CLE."Customer No." IN ['CUST00536', 'CUST01164']) AND (CLE."Customer Posting Group" IN ['PRIVATE', 'OTHERS', 'EXPORT']) THEN BEGIN // if posting grp is private
        //     SIH.RESET;
        //     SIH.SETRANGE(SIH."No.", CLE."Document No.");
        //     IF SIH.FINDFIRST THEN    // if invoice found in erp
        //     BEGIN
        //         reurn_due_days := 0;
        //         reurn_due_days := payment_terms_based_amount_to_cfl(SIH."Order No.", SIH."External Document No.", SIH."Posting Date"); // added by sujani for amount displaying avoidance in TODAY in Cashflow
        //         payment_Realization_Date := SIH."Posting Date" + reurn_due_days; // added by sujani for amount displaying avoidance in TODAY in Cashflow

        //         IF COPYSTR(SIH."Order No.", 5, 3) = 'SAL' THEN BEGIN
        //             IF ISCLEAR(SQLConnection) THEN
        //                 CREATE(SQLConnection, FALSE, TRUE);

        //             IF ISCLEAR(RecordSet) THEN
        //                 CREATE(RecordSet, FALSE, TRUE);

        //             IF ISCLEAR(RecordSet1) THEN
        //                 CREATE(RecordSet1, FALSE, TRUE);

        //             IF ConnectionOpen <> 1 THEN BEGIN
        //                 SQLConnection.ConnectionString := 'DSN=CASHFLOW;UID=cashflowuser;PASSWORD=firewall123;SERVER=oracle_80;';
        //                 SQLConnection.Open;
        //                 SQLConnection.BeginTrans;
        //                 ConnectionOpen := 1;
        //             END;

        //             SQLQuery := 'SELECT * FROM MRP_SALE_ORDER WHERE INT_SAL_ORD_NO = ''' + SIH."Order No." + ''' AND STATUS = ''N''';
        //             //MESSAGE(SQLQuery);
        //             RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //             IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                 RecordSet.MoveFirst;
        //             WHILE NOT RecordSet.EOF DO BEGIN
        //                 SaleOrderId := RecordSet.Fields.Item('SALE_ORDER_ID').Value;
        //                 IF FORMAT(RecordSet.Fields.Item('IS_ORDR_AFT_INTEGRTION').Value) = '1' THEN
        //                     Is_Ordr_Aftr_Int := 'YES'
        //                 ELSE
        //                     Is_Ordr_Aftr_Int := 'NO';
        //                 RowCount := RowCount + 1;
        //                 RecordSet.MoveNext;
        //             END;
        //             IF SaleOrderId <> 0 THEN BEGIN  // check if sale order present in sale order table in cf
        //                 IF Is_Ordr_Aftr_Int = 'YES' THEN  // only if order is aft integration
        //                 BEGIN
        //                     IF COPYSTR(SIH."External Document No.", 1, 2) <> 'IN' THEN BEGIN    // if supply bill
        //                         TotPlndAmnt := 0;
        //                         Tot_Inv_Amt := 0;
        //                         Tot_Recvbl_Amt := 0;
        //                         Tol_Inst_Recvbl_Amt := 0;
        //                         Tot_Recvbl_PlndAmnt := 0;
        //                         TotInst_Recvbl_PlndAmnt := 0;
        //                         SQLQuery := 'select * from MRP_ARR_INVOICE where SALE_ORDER_ID  = ' + FORMAT(SaleOrderId) + ' and INVOICE_DATE = to_date(''' +
        //                                     FORMAT(SIH."Posting Date", 0, '<Day>-<Month Text,3>-<Year4>') +
        //                                     ''',''dd-mon-yyyy'') and ERP_INVOICE_NO = ''' + DELCHR(SIH."External Document No.", '=', ',') + ''' order by LINE_NO,AR_INVOICE_ID';
        //                         //MESSAGE(SQLQuery);
        //                         RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                         IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                             RecordSet.MoveFirst;
        //                         WHILE NOT RecordSet.EOF DO    // start--invoice loop
        //                         BEGIN
        //                             InvAmt := 0;
        //                             EVALUATE(InvAmt, FORMAT(RecordSet.Fields.Item('amount').Value));
        //                             SQLQuery := 'select * from  MRP_PLAN_CHANGES b, (select SALE_ORDER_ID,sl_no,max(plan_change_id) PlanChngId from MRP_PLAN_CHANGES where ' +
        //                                        ' SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ' and invoice_id = ' + DELCHR(FORMAT(RecordSet.Fields.Item('AR_INVOICE_ID').Value), '=', ',') + ' ' +
        //                                        ' group by SALE_ORDER_ID,sl_no) a where a.planchngid=b.plan_change_id and b.planned_amount > 0';
        //                             //MESSAGE(SQLQuery);
        //                             RecordSet1 := SQLConnection.Execute(SQLQuery, RowCount1);
        //                             PlndAmnt := 0;
        //                             IF NOT ((RecordSet1.BOF) OR (RecordSet1.EOF)) THEN
        //                                 RecordSet1.MoveFirst;
        //                             WHILE NOT RecordSet1.EOF DO BEGIN
        //                                 PlndAmnt := 0;
        //                                 EVALUATE(PlndAmnt, FORMAT(RecordSet1.Fields.Item('planned_amount').Value));
        //                                 TotPlndAmnt := TotPlndAmnt + PlndAmnt;
        //                                 Tot_Recvbl_PlndAmnt := Tot_Recvbl_PlndAmnt + PlndAmnt;
        //                                 RowCount1 := RowCount1 + 1;
        //                                 RecordSet1.MoveNext;
        //                             END;
        //                             SQLQuery := 'select nvl(sum(PLANNED_AMOUNT),0) PLANNED_AMOUNT from MRP_PLAN_CHANGES where PLAN_CHANGE_ID in ( ' +
        //                                        'select  max(pl.PLAN_CHANGE_ID) from  MRP_PLAN_CHANGES pl ,(select sl_no,SALE_ORDER_ID,PLAN_CHANGE_ID ' +
        //                                        'from MRP_PLAN_CHANGES pl1 where planned_amount= 0  and payment_id is not null and invoice_id = ' +
        //                                        DELCHR(FORMAT(RecordSet.Fields.Item('AR_INVOICE_ID').Value), '=', ',') + ' and SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ') a ' +
        //                                        'where  a.sl_no=pl.sl_no and pl.PLAN_CHANGE_ID < a.PLAN_CHANGE_ID and a.SALE_ORDER_ID=pl.SALE_ORDER_ID) ';
        //                             //MESSAGE(SQLQuery);
        //                             RecordSet1 := SQLConnection.Execute(SQLQuery, RowCount1);
        //                             InvPayAmt := 0;
        //                             Tot_InvPayAmt := 0;
        //                             IF NOT ((RecordSet1.BOF) OR (RecordSet1.EOF)) THEN
        //                                 RecordSet1.MoveFirst;
        //                             WHILE NOT RecordSet1.EOF DO BEGIN
        //                                 InvPayAmt := 0;
        //                                 EVALUATE(InvPayAmt, FORMAT(RecordSet1.Fields.Item('planned_amount').Value));
        //                                 Tot_InvPayAmt := Tot_InvPayAmt + InvPayAmt;
        //                                 RowCount1 := RowCount1 + 1;
        //                                 RecordSet1.MoveNext;
        //                             END;
        //                             Tot_Inv_Amt := Tot_Inv_Amt + InvAmt - Tot_InvPayAmt;
        //                             Tot_Recvbl_Amt := Tot_Recvbl_Amt + InvAmt - Tot_InvPayAmt;
        //                             RowCount := RowCount + 1;
        //                             RecordSet.MoveNext;
        //                         END;
        //                         SQLQuery := 'select * from MRP_ARR_INSTALL_INVOICE where SALE_ORDER_ID  = ' + FORMAT(SaleOrderId) + ' and INVOICE_DATE = to_date(''' +
        //                                     FORMAT(SIH."Posting Date", 0, '<Day>-<Month Text,3>-<Year4>') + ''',''dd-mon-yyyy'') and ERP_INVOICE_NO = ''' +
        //                                     DELCHR(SIH."External Document No.", '=', ',') + ''' and AMOUNTTYPE = ''R'' and amount is not null order by LINE_NO,AR_INVOICE_ID';
        //                         //MESSAGE(SQLQuery);
        //                         RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                         IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                             RecordSet.MoveFirst;
        //                         WHILE NOT RecordSet.EOF DO BEGIN   // invoice loop
        //                             InvAmt := 0;
        //                             EVALUATE(InvAmt, FORMAT(RecordSet.Fields.Item('amount').Value));
        //                             SQLQuery := 'select * from  MRP_INSTAL_PLAN_CHANGES b,(select SALE_ORDER_ID,sl_no,max(plan_change_id) PlanChngId from MRP_INSTAL_PLAN_CHANGES where ' +
        //                                        ' SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ' and invoice_id =' + DELCHR(FORMAT(RecordSet.Fields.Item('AR_INVOICE_ID').Value), '=', ',') +
        //                                        ' group by SALE_ORDER_ID,sl_no) a where a.planchngid=b.plan_change_id and b.planned_amount > 0';
        //                             //MESSAGE(SQLQuery);
        //                             RecordSet1 := SQLConnection.Execute(SQLQuery, RowCount1);
        //                             PlndAmnt := 0;
        //                             IF NOT ((RecordSet1.BOF) OR (RecordSet1.EOF)) THEN
        //                                 RecordSet1.MoveFirst;
        //                             WHILE NOT RecordSet1.EOF DO BEGIN   // begin of instl pln changes loop
        //                                 PlndAmnt := 0;
        //                                 EVALUATE(PlndAmnt, FORMAT(RecordSet1.Fields.Item('planned_amount').Value));
        //                                 TotPlndAmnt := TotPlndAmnt + PlndAmnt;
        //                                 TotInst_Recvbl_PlndAmnt := TotInst_Recvbl_PlndAmnt + PlndAmnt;
        //                                 RowCount1 := RowCount1 + 1;
        //                                 RecordSet1.MoveNext;
        //                             END;
        //                             SQLQuery := 'select nvl(sum(PLANNED_AMOUNT),0) PLANNED_AMOUNT   from MRP_INSTAL_PLAN_CHANGES where PLAN_CHANGE_ID in ( ' +
        //                                        'select  max(pl.PLAN_CHANGE_ID) from  MRP_INSTAL_PLAN_CHANGES pl ,(select sl_no,SALE_ORDER_ID,PLAN_CHANGE_ID ' +
        //                                        'from MRP_INSTAL_PLAN_CHANGES pl1 where planned_amount= 0  and payment_id is not null and invoice_id = ' +
        //                                        DELCHR(FORMAT(RecordSet.Fields.Item('AR_INVOICE_ID').Value), '=', ',') + ' and SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ') a ' +
        //                                        'where  a.sl_no=pl.sl_no and pl.PLAN_CHANGE_ID < a.PLAN_CHANGE_ID and a.SALE_ORDER_ID=pl.SALE_ORDER_ID) ';
        //                             //MESSAGE(SQLQuery);
        //                             RecordSet1 := SQLConnection.Execute(SQLQuery, RowCount1);
        //                             InvPayAmt := 0;
        //                             Tot_InvPayAmt := 0;
        //                             IF NOT ((RecordSet1.BOF) OR (RecordSet1.EOF)) THEN
        //                                 RecordSet1.MoveFirst;
        //                             WHILE NOT RecordSet1.EOF DO BEGIN
        //                                 InvPayAmt := 0;
        //                                 EVALUATE(InvPayAmt, FORMAT(RecordSet1.Fields.Item('planned_amount').Value));
        //                                 Tot_InvPayAmt := Tot_InvPayAmt + InvPayAmt;
        //                                 RowCount1 := RowCount1 + 1;
        //                                 RecordSet1.MoveNext;
        //                             END;
        //                             Tot_Inv_Amt := Tot_Inv_Amt + InvAmt - Tot_InvPayAmt;
        //                             Tol_Inst_Recvbl_Amt := Tol_Inst_Recvbl_Amt + InvAmt - Tot_InvPayAmt;
        //                             RowCount := RowCount + 1;
        //                             RecordSet.MoveNext;
        //                         END;
        //                         Tot_Inv_Adv_Amts := 0;
        //                         Tmp_UnitPrice := 0;
        //                         Tmp_Adv_Perct := 0;
        //                         Tmp_Inv_Adv_Amt := 0;
        //                         Tmp_Inv_Qty := 0;
        //                         Tot_Inv_Adv_Amts := 0;
        //                         SQLQuery := 'select SALE_ORDER_ID,INVOICE_DATE,ERP_INVOICE_NO,LINE_NO,INVOICED_QTY,nvl(ADV_AMOUNT_CONSIDERED,0) ADV_AMOUNT_CONSIDERED from MRP_ARR_INVOICE where SALE_ORDER_ID  = ' +
        //                                     FORMAT(SaleOrderId) + ' and INVOICE_DATE = to_date(''' + FORMAT(SIH."Posting Date", 0, '<Day>-<Month Text,3>-<Year4>') + ''',''dd-mon-yyyy'') and ERP_INVOICE_NO = ''' +
        //                                     DELCHR(SIH."External Document No.", '=', ',') + ''' group by SALE_ORDER_ID,INVOICE_DATE,ERP_INVOICE_NO,LINE_NO,INVOICED_QTY,ADV_AMOUNT_CONSIDERED order by LINE_NO';
        //                         //MESSAGE(SQLQuery);
        //                         RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                         IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                             RecordSet.MoveFirst;
        //                         WHILE NOT RecordSet.EOF DO BEGIN   // invoice loop
        //                             Tmp_UnitPrice := 0;
        //                             Tmp_Adv_Perct := 0;
        //                             Tmp_Inv_Adv_Amt := 0;
        //                             Tmp_Inv_Qty := 0;
        //                             IF FORMAT(RecordSet.Fields.Item('ADV_AMOUNT_CONSIDERED').Value) <> '' THEN
        //                                 EVALUATE(Adv_Cons_Amt, FORMAT(RecordSet.Fields.Item('ADV_AMOUNT_CONSIDERED').Value))
        //                             ELSE
        //                                 Adv_Cons_Amt := 0;
        //                             SQLQuery := 'select nvl(unit_price,0) unit_price,nvl(advance_percntg,0) advance_percntg from mrp_sale_order_lines where sale_order_id = ' +
        //                                         FORMAT(SaleOrderId) + ' and LINE_NO = ' + DELCHR(FORMAT(RecordSet.Fields.Item('LINE_NO').Value), '=', ',');
        //                             //MESSAGE(SQLQuery);
        //                             RecordSet1 := SQLConnection.Execute(SQLQuery, RowCount1);
        //                             IF NOT ((RecordSet1.BOF) OR (RecordSet1.EOF)) THEN
        //                                 RecordSet1.MoveFirst;
        //                             WHILE NOT RecordSet1.EOF DO BEGIN
        //                                 EVALUATE(Tmp_UnitPrice, FORMAT(RecordSet1.Fields.Item('unit_price').Value));
        //                                 EVALUATE(Tmp_Adv_Perct, FORMAT(RecordSet1.Fields.Item('advance_percntg').Value));
        //                                 RowCount1 := RowCount1 + 1;
        //                                 RecordSet1.MoveNext;
        //                             END;
        //                             EVALUATE(Tmp_Inv_Qty, FORMAT(RecordSet.Fields.Item('INVOICED_QTY').Value));
        //                             Tmp_Inv_Adv_Amt := ROUND((Tmp_Inv_Qty * Tmp_UnitPrice * Tmp_Adv_Perct) / 100, 1, '=');
        //                             Tot_Inv_Adv_Amts := Tot_Inv_Adv_Amts + (Tmp_Inv_Adv_Amt - Adv_Cons_Amt);
        //                             RowCount := RowCount + 1;
        //                             RecordSet.MoveNext;
        //                         END;

        //                         IF Tot_Inv_Adv_Amts + Tot_Recvbl_Amt + Tol_Inst_Recvbl_Amt > 0 THEN BEGIN  // if Receivable amt exist
        //                             IF (Tot_Inv_Adv_Amts + Tot_Recvbl_Amt + Tol_Inst_Recvbl_Amt >= Amount) THEN BEGIN    // if Receivable amt > ERP_Paying Amt then only pay upto ERP_Paying Amt
        //                                 Pay_Amount := Amount;
        //                                 Amount := 0;
        //                             END
        //                             ELSE BEGIN                     // if Receivable amt < ERP_Paying Amt then only pay upto Receivable Amt
        //                                 Pay_Amount := Tot_Inv_Adv_Amts + Tot_Recvbl_Amt + Tol_Inst_Recvbl_Amt;
        //                                 Amount := Amount - Pay_Amount;
        //                             END;
        //                         END ELSE     // if there is no Receivable amt then no need to pay amt
        //                             Pay_Amount := 0;

        //                         IF ROUND(Pay_Amount, 1, '=') > 0 THEN BEGIN
        //                             SQLQuery := 'select nvl(ARR_PAYMENT_SEQ.NEXTVAL,1) payid from dual';
        //                             //MESSAGE(SQLQuery);
        //                             RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                             IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                                 RecordSet.MoveFirst;
        //                             WHILE NOT RecordSet.EOF DO BEGIN
        //                                 EVALUATE(PaymentId, FORMAT(RecordSet.Fields.Item('payid').Value));
        //                                 RowCount := RowCount + 1;
        //                                 RecordSet.MoveNext;
        //                             END;
        //                             // insert payment record
        //                             Paid_Amt := Pay_Amount;
        //                             SQLQuery := 'insert into MRP_ARR_PAYMENT(AR_PAYMENT_ID,SALE_ORDER_ID,PAYMENT_DATE,AMOUNT,USERID,CREATION_DATE) values(' + FORMAT(PaymentId) + ', ' +
        //                                        FORMAT(SaleOrderId) + ', to_date(''' + FORMAT(CLE."Posting Date", 0, '<Day>-<Month Text,3>-<Year4>') + ''',''dd-mon-yyyy''),' +
        //                                        DELCHR(FORMAT(ROUND(Pay_Amount, 1, '=')), '=', ',') + ', ''Auto'', sysdate)';
        //                             //MESSAGE(SQLQuery);
        //                             SQLConnection.Execute(SQLQuery);

        //                             // **************************  START--Paying Advance_Considerable first ******************************
        //                             SQLQuery := 'select * from MRP_ARR_INVOICE where SALE_ORDER_ID  = ' + FORMAT(SaleOrderId) + ' and INVOICE_DATE = to_date(''' +
        //                                         FORMAT(SIH."Posting Date", 0, '<Day>-<Month Text,3>-<Year4>') +
        //                                         ''',''dd-mon-yyyy'') and ERP_INVOICE_NO = ''' + DELCHR(SIH."External Document No.", '=', ',') + ''' order by LINE_NO,AR_INVOICE_ID';
        //                             //MESSAGE(SQLQuery);
        //                             RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                             IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                                 RecordSet.MoveFirst;
        //                             WHILE NOT RecordSet.EOF DO BEGIN   // invoice loop
        //                                 InvoiceAmt := 0;
        //                                 Adv_Cons_Amt := 0;
        //                                 Tmp_UnitPrice := 0;
        //                                 Tmp_Adv_Perct := 0;
        //                                 Tmp_Inv_Qty := 0;
        //                                 Tmp_Inv_Adv_Amt := 0;
        //                                 IF FORMAT(RecordSet.Fields.Item('amount').Value) <> '' THEN
        //                                     EVALUATE(InvoiceAmt, FORMAT(RecordSet.Fields.Item('amount').Value))
        //                                 ELSE
        //                                     InvoiceAmt := 0;
        //                                 //EVALUATE(InvoiceAmt,FORMAT(RecordSet.Fields.Item('amount').Value));
        //                                 IF FORMAT(RecordSet.Fields.Item('ADV_AMOUNT_CONSIDERED').Value) <> '' THEN
        //                                     EVALUATE(Adv_Cons_Amt, FORMAT(RecordSet.Fields.Item('ADV_AMOUNT_CONSIDERED').Value))
        //                                 ELSE
        //                                     Adv_Cons_Amt := 0;
        //                                 SQLQuery := 'select nvl(sum(PLANNED_AMOUNT),0) PLANNED_AMOUNT from MRP_PLAN_CHANGES where PLAN_CHANGE_ID in ( ' +
        //                                            'select  max(pl.PLAN_CHANGE_ID) from  MRP_PLAN_CHANGES pl ,(select sl_no,SALE_ORDER_ID,PLAN_CHANGE_ID ' +
        //                                            'from MRP_PLAN_CHANGES pl1 where planned_amount= 0  and payment_id is not null and invoice_id = ' +
        //                                            DELCHR(FORMAT(RecordSet.Fields.Item('AR_INVOICE_ID').Value), '=', ',') + ' and SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ') a ' +
        //                                            'where  a.sl_no=pl.sl_no and pl.PLAN_CHANGE_ID < a.PLAN_CHANGE_ID and a.SALE_ORDER_ID=pl.SALE_ORDER_ID) ';
        //                                 //MESSAGE(SQLQuery);
        //                                 RecordSet1 := SQLConnection.Execute(SQLQuery, RowCount1);
        //                                 InvPayAmt := 0;
        //                                 Tot_InvPayAmt := 0;
        //                                 IF NOT ((RecordSet1.BOF) OR (RecordSet1.EOF)) THEN
        //                                     RecordSet1.MoveFirst;
        //                                 WHILE NOT RecordSet1.EOF DO BEGIN
        //                                     InvPayAmt := 0;
        //                                     EVALUATE(InvPayAmt, FORMAT(RecordSet1.Fields.Item('planned_amount').Value));
        //                                     Tot_InvPayAmt := Tot_InvPayAmt + InvPayAmt;
        //                                     RowCount1 := RowCount1 + 1;
        //                                     RecordSet1.MoveNext;
        //                                 END;
        //                                 InvoiceAmt := InvoiceAmt - Tot_InvPayAmt;
        //                                 SQLQuery := 'select nvl(unit_price,0) unit_price,nvl(advance_percntg,0) advance_percntg from mrp_sale_order_lines where sale_order_id = ' +
        //                                             FORMAT(SaleOrderId) + ' and LINE_NO = ' + DELCHR(FORMAT(RecordSet.Fields.Item('LINE_NO').Value), '=', ',');
        //                                 //MESSAGE(SQLQuery);
        //                                 RecordSet1 := SQLConnection.Execute(SQLQuery, RowCount1);
        //                                 IF NOT ((RecordSet1.BOF) OR (RecordSet1.EOF)) THEN
        //                                     RecordSet1.MoveFirst;
        //                                 WHILE NOT RecordSet1.EOF DO BEGIN
        //                                     EVALUATE(Tmp_UnitPrice, FORMAT(RecordSet1.Fields.Item('unit_price').Value));
        //                                     EVALUATE(Tmp_Adv_Perct, FORMAT(RecordSet1.Fields.Item('advance_percntg').Value));
        //                                     RowCount1 := RowCount1 + 1;
        //                                     RecordSet1.MoveNext;
        //                                 END;
        //                                 EVALUATE(Tmp_Inv_Qty, FORMAT(RecordSet.Fields.Item('INVOICED_QTY').Value));
        //                                 Tmp_Inv_Adv_Amt := ROUND((Tmp_Inv_Qty * Tmp_UnitPrice * Tmp_Adv_Perct) / 100, 1, '=');

        //                                 Tmp_Aply_Amt := 0;

        //                                 IF ROUND(Tmp_Inv_Adv_Amt - Adv_Cons_Amt, 1, '=') > 0 THEN BEGIN
        //                                     Tmp_Aply_Amt := 0;
        //                                     IF ROUND(Tmp_Inv_Adv_Amt - Adv_Cons_Amt, 1, '=') > ROUND(Pay_Amount, 1, '=') THEN
        //                                         Tmp_Aply_Amt := ROUND(Pay_Amount, 1, '=')
        //                                     ELSE
        //                                         Tmp_Aply_Amt := ROUND(Tmp_Inv_Adv_Amt - Adv_Cons_Amt, 1, '=');
        //                                     Tmp_Aply_Amt_Tot := Tmp_Aply_Amt_Tot + Tmp_Aply_Amt;
        //                                     IF Tmp_Aply_Amt > 0 THEN BEGIN
        //                                         SQLQuery := 'update mrp_arr_invoice set ADV_AMOUNT_CONSIDERED = nvl(ADV_AMOUNT_CONSIDERED,0) + ' + DELCHR(FORMAT(ROUND(Tmp_Aply_Amt, 1, '=')), '=', ',') + ' where SALE_ORDER_ID = ' +
        //                                                    FORMAT(SaleOrderId) + ' and ERP_INVOICE_NO = ''' + DELCHR(FORMAT(RecordSet.Fields.Item('ERP_INVOICE_NO').Value), '=', ',') +
        //                                                    ''' and LINE_NO = ' + DELCHR(FORMAT(RecordSet.Fields.Item('LINE_NO').Value), '=', ',');
        //                                         SQLConnection.Execute(SQLQuery);
        //                                         SQLQuery := 'update mrp_arr_install_invoice set ADV_AMOUNT_CONSIDERED = nvl(ADV_AMOUNT_CONSIDERED,0) + ' + DELCHR(FORMAT(ROUND(Tmp_Aply_Amt, 1, '=')), '=', ',') + ' where SALE_ORDER_ID = ' +
        //                                                    FORMAT(SaleOrderId) + ' and ERP_INVOICE_NO = ''' + DELCHR(FORMAT(RecordSet.Fields.Item('ERP_INVOICE_NO').Value), '=', ',') +
        //                                                    ''' and LINE_NO = ' + DELCHR(FORMAT(RecordSet.Fields.Item('LINE_NO').Value), '=', ',');
        //                                         SQLConnection.Execute(SQLQuery);
        //                                         Pay_Amount := Pay_Amount - Tmp_Aply_Amt;
        //                                     END;
        //                                 END;
        //                                 RowCount := RowCount + 1;
        //                                 RecordSet.MoveNext;
        //                             END;  // end of receivable invoices loop
        //                                   // ******* Start--Checking Adv_Considerable amt in Inst_Rentention Invoice ********
        //                             SQLQuery := 'select AR_INVOICE_ID,SALE_ORDER_ID,INVOICE_DATE,ERP_INVOICE_NO,LINE_NO,INVOICED_QTY,nvl(ADV_AMOUNT_CONSIDERED,0) ADV_AMOUNT_CONSIDERED from MRP_ARR_INSTALL_INVOICE where ' +
        //                                         ' SALE_ORDER_ID  = ' + FORMAT(SaleOrderId) + ' and INVOICE_DATE = to_date(''' + FORMAT(SIH."Posting Date", 0, '<Day>-<Month Text,3>-<Year4>') +
        //                                         ''',''dd-mon-yyyy'') and ERP_INVOICE_NO = ''' + DELCHR(SIH."External Document No.", '=', ',') + ''' and AMOUNTTYPE = ''R'' and amount is not null ' +
        //                                         ' group by AR_INVOICE_ID,SALE_ORDER_ID,INVOICE_DATE,ERP_INVOICE_NO,LINE_NO,INVOICED_QTY,ADV_AMOUNT_CONSIDERED order by LINE_NO ';
        //                             //MESSAGE(SQLQuery);
        //                             RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                             IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                                 RecordSet.MoveFirst;
        //                             WHILE NOT RecordSet.EOF DO BEGIN   // inst invoice loop
        //                                 InvoiceAmt := 0;
        //                                 Adv_Cons_Amt := 0;
        //                                 Tmp_UnitPrice := 0;
        //                                 Tmp_Adv_Perct := 0;
        //                                 Tmp_Inv_Qty := 0;
        //                                 Tmp_Inv_Adv_Amt := 0;
        //                                 //EVALUATE(InvoiceAmt,FORMAT(RecordSet.Fields.Item('amount').Value));

        //                                 IF FORMAT(RecordSet.Fields.Item('ADV_AMOUNT_CONSIDERED').Value) <> '' THEN
        //                                     EVALUATE(Adv_Cons_Amt, FORMAT(RecordSet.Fields.Item('ADV_AMOUNT_CONSIDERED').Value))
        //                                 ELSE
        //                                     Adv_Cons_Amt := 0;
        //                                 SQLQuery := 'select nvl(sum(PLANNED_AMOUNT),0) PLANNED_AMOUNT   from MRP_INSTAL_PLAN_CHANGES where PLAN_CHANGE_ID in ( ' +
        //                                            'select  max(pl.PLAN_CHANGE_ID) from  MRP_INSTAL_PLAN_CHANGES pl ,(select sl_no,SALE_ORDER_ID,PLAN_CHANGE_ID ' +
        //                                            'from MRP_INSTAL_PLAN_CHANGES pl1 where planned_amount= 0  and payment_id is not null and invoice_id = ' +
        //                                            DELCHR(FORMAT(RecordSet.Fields.Item('AR_INVOICE_ID').Value), '=', ',') + ' and SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ') a ' +
        //                                            'where  a.sl_no=pl.sl_no and pl.PLAN_CHANGE_ID < a.PLAN_CHANGE_ID and a.SALE_ORDER_ID=pl.SALE_ORDER_ID) ';
        //                                 //MESSAGE(SQLQuery);
        //                                 RecordSet1 := SQLConnection.Execute(SQLQuery, RowCount1);
        //                                 InvPayAmt := 0;
        //                                 Tot_InvPayAmt := 0;
        //                                 IF NOT ((RecordSet1.BOF) OR (RecordSet1.EOF)) THEN
        //                                     RecordSet1.MoveFirst;
        //                                 WHILE NOT RecordSet1.EOF DO BEGIN
        //                                     InvPayAmt := 0;
        //                                     EVALUATE(InvPayAmt, FORMAT(RecordSet1.Fields.Item('planned_amount').Value));
        //                                     Tot_InvPayAmt := Tot_InvPayAmt + InvPayAmt;
        //                                     RowCount1 := RowCount1 + 1;
        //                                     RecordSet1.MoveNext;
        //                                 END;
        //                                 InvoiceAmt := InvoiceAmt - Tot_InvPayAmt;

        //                                 SQLQuery := 'select nvl(unit_price,0) unit_price,nvl(advance_percntg,0) advance_percntg from mrp_sale_order_lines where sale_order_id = ' +
        //                                             FORMAT(SaleOrderId) + ' and LINE_NO = ' + DELCHR(FORMAT(RecordSet.Fields.Item('LINE_NO').Value), '=', ',');
        //                                 //MESSAGE(SQLQuery);
        //                                 RecordSet1 := SQLConnection.Execute(SQLQuery, RowCount1);
        //                                 IF NOT ((RecordSet1.BOF) OR (RecordSet1.EOF)) THEN
        //                                     RecordSet1.MoveFirst;
        //                                 WHILE NOT RecordSet1.EOF DO BEGIN
        //                                     EVALUATE(Tmp_UnitPrice, FORMAT(RecordSet1.Fields.Item('unit_price').Value));
        //                                     EVALUATE(Tmp_Adv_Perct, FORMAT(RecordSet1.Fields.Item('advance_percntg').Value));
        //                                     RowCount1 := RowCount1 + 1;
        //                                     RecordSet1.MoveNext;
        //                                 END;
        //                                 Tmp_Aply_Amt := 0;
        //                                 EVALUATE(Tmp_Inv_Qty, FORMAT(RecordSet.Fields.Item('INVOICED_QTY').Value));
        //                                 Tmp_Inv_Adv_Amt := (Tmp_Inv_Qty * Tmp_UnitPrice * Tmp_Adv_Perct) / 100;
        //                                 IF ROUND(Tmp_Inv_Adv_Amt - Adv_Cons_Amt, 1, '=') > 0 THEN BEGIN
        //                                     Tmp_Aply_Amt := 0;
        //                                     IF ROUND(Tmp_Inv_Adv_Amt - Adv_Cons_Amt, 1, '=') > ROUND(Pay_Amount, 1, '=') THEN
        //                                         Tmp_Aply_Amt := ROUND(Pay_Amount, 1, '=')
        //                                     ELSE
        //                                         Tmp_Aply_Amt := ROUND(Tmp_Inv_Adv_Amt - Adv_Cons_Amt, 1, '=');
        //                                     Tmp_Aply_Amt_Tot := Tmp_Aply_Amt_Tot + Tmp_Aply_Amt;
        //                                     IF Tmp_Aply_Amt > 0 THEN BEGIN
        //                                         SQLQuery := 'update mrp_arr_invoice set ADV_AMOUNT_CONSIDERED = nvl(ADV_AMOUNT_CONSIDERED,0) + ' + DELCHR(FORMAT(ROUND(Tmp_Aply_Amt, 1, '=')), '=', ',') + ' where SALE_ORDER_ID = ' +
        //                                                    FORMAT(SaleOrderId) + ' and ERP_INVOICE_NO = ''' + DELCHR(FORMAT(RecordSet.Fields.Item('ERP_INVOICE_NO').Value), '=', ',') +
        //                                                    ''' and LINE_NO = ' + DELCHR(FORMAT(RecordSet.Fields.Item('LINE_NO').Value), '=', ',');
        //                                         SQLConnection.Execute(SQLQuery);
        //                                         SQLQuery := 'update mrp_arr_install_invoice set ADV_AMOUNT_CONSIDERED = nvl(ADV_AMOUNT_CONSIDERED,0) + ' + DELCHR(FORMAT(ROUND(Tmp_Aply_Amt, 1, '=')), '=', ',') + ' where SALE_ORDER_ID = ' +
        //                                                    FORMAT(SaleOrderId) + ' and ERP_INVOICE_NO = ''' + DELCHR(FORMAT(RecordSet.Fields.Item('ERP_INVOICE_NO').Value), '=', ',') +
        //                                                    ''' and LINE_NO = ' + DELCHR(FORMAT(RecordSet.Fields.Item('LINE_NO').Value), '=', ',');
        //                                         SQLConnection.Execute(SQLQuery);
        //                                         Pay_Amount := Pay_Amount - Tmp_Aply_Amt;
        //                                     END;
        //                                 END;
        //                                 RowCount := RowCount + 1;
        //                                 RecordSet.MoveNext;
        //                             END;  // end of inst receivable invoices loop
        //                                   // ******* END--Checking Adv_Considerable amt in Inst_Rentention Invoice **********
        //                                   // **************************  END--Paying Advance_Considerable first ******************************

        //                             SQLQuery := 'select * from MRP_ARR_INVOICE where SALE_ORDER_ID  = ' + FORMAT(SaleOrderId) + ' and INVOICE_DATE = to_date(''' +
        //                                         FORMAT(SIH."Posting Date", 0, '<Day>-<Month Text,3>-<Year4>') +
        //                                         ''',''dd-mon-yyyy'') and ERP_INVOICE_NO = ''' + DELCHR(SIH."External Document No.", '=', ',') + ''' order by LINE_NO,AR_INVOICE_ID';
        //                             //MESSAGE(SQLQuery);
        //                             RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                             IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                                 RecordSet.MoveFirst;
        //                             WHILE NOT RecordSet.EOF DO BEGIN   // invoice loop
        //                                 InvoiceAmt := 0;
        //                                 Adv_Cons_Amt := 0;
        //                                 Tmp_UnitPrice := 0;
        //                                 Tmp_Adv_Perct := 0;
        //                                 Tmp_Inv_Qty := 0;
        //                                 Tmp_Inv_Adv_Amt := 0;
        //                                 IF FORMAT(RecordSet.Fields.Item('amount').Value) <> '' THEN
        //                                     EVALUATE(InvoiceAmt, FORMAT(RecordSet.Fields.Item('amount').Value))
        //                                 ELSE
        //                                     InvoiceAmt := 0;
        //                                 //EVALUATE(InvoiceAmt,FORMAT(RecordSet.Fields.Item('amount').Value));
        //                                 IF FORMAT(RecordSet.Fields.Item('ADV_AMOUNT_CONSIDERED').Value) <> '' THEN
        //                                     EVALUATE(Adv_Cons_Amt, FORMAT(RecordSet.Fields.Item('ADV_AMOUNT_CONSIDERED').Value))
        //                                 ELSE
        //                                     Adv_Cons_Amt := 0;
        //                                 SQLQuery := 'select nvl(sum(PLANNED_AMOUNT),0) PLANNED_AMOUNT from MRP_PLAN_CHANGES where PLAN_CHANGE_ID in ( ' +
        //                                            'select  max(pl.PLAN_CHANGE_ID) from  MRP_PLAN_CHANGES pl ,(select sl_no,SALE_ORDER_ID,PLAN_CHANGE_ID ' +
        //                                            'from MRP_PLAN_CHANGES pl1 where planned_amount= 0  and payment_id is not null and invoice_id = ' +
        //                                            DELCHR(FORMAT(RecordSet.Fields.Item('AR_INVOICE_ID').Value), '=', ',') + ' and SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ') a ' +
        //                                            'where  a.sl_no=pl.sl_no and pl.PLAN_CHANGE_ID < a.PLAN_CHANGE_ID and a.SALE_ORDER_ID=pl.SALE_ORDER_ID) ';
        //                                 //MESSAGE(SQLQuery);
        //                                 RecordSet1 := SQLConnection.Execute(SQLQuery, RowCount1);
        //                                 InvPayAmt := 0;
        //                                 Tot_InvPayAmt := 0;
        //                                 IF NOT ((RecordSet1.BOF) OR (RecordSet1.EOF)) THEN
        //                                     RecordSet1.MoveFirst;
        //                                 WHILE NOT RecordSet1.EOF DO BEGIN
        //                                     InvPayAmt := 0;
        //                                     EVALUATE(InvPayAmt, FORMAT(RecordSet1.Fields.Item('planned_amount').Value));
        //                                     Tot_InvPayAmt := Tot_InvPayAmt + InvPayAmt;
        //                                     RowCount1 := RowCount1 + 1;
        //                                     RecordSet1.MoveNext;
        //                                 END;
        //                                 InvoiceAmt := InvoiceAmt - Tot_InvPayAmt;
        //                                 SQLQuery := 'select * from  MRP_PLAN_CHANGES b, (select SALE_ORDER_ID,sl_no,max(plan_change_id) PlanChngId from MRP_PLAN_CHANGES where ' +
        //                                            ' SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ' and invoice_id = ' + DELCHR(FORMAT(RecordSet.Fields.Item('AR_INVOICE_ID').Value), '=', ',') +
        //                                            ' group by SALE_ORDER_ID,sl_no) a where a.planchngid=b.plan_change_id and b.planned_amount > 0';
        //                                 //MESSAGE(SQLQuery);
        //                                 RecordSet1 := SQLConnection.Execute(SQLQuery, RowCount1);
        //                                 PlndAmnt := 0;
        //                                 PlnndAmt := 0;
        //                                 IF NOT ((RecordSet1.BOF) OR (RecordSet1.EOF)) THEN
        //                                     RecordSet1.MoveFirst;
        //                                 WHILE NOT RecordSet1.EOF DO BEGIN   // receivables pln changes loop begin
        //                                     EVALUATE(PlndAmnt, FORMAT(RecordSet1.Fields.Item('planned_amount').Value));
        //                                     PlnndAmt := PlnndAmt + PlndAmnt;
        //                                     IF (ROUND(Pay_Amount, 1, '=') > 0) AND (ROUND(PlndAmnt, 1, '=') > 0) THEN BEGIN
        //                                         IF (ROUND(Pay_Amount, 1, '=') >= ROUND(PlndAmnt, 1, '=')) THEN  // if paymentamount >= planned amount
        //                                         BEGIN
        //                                             SQLQuery := 'insert into MRP_PLAN_CHANGES(PLAN_CHANGE_ID,SL_NO,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,RESPONSE_SECTION,CREATION_DATE, ' +
        //                                                        ' USERID,PAYMENT_ID,INVOICE_ID) values(PLAN_CHANGE_SEQ.NEXTVAL,' + DELCHR(FORMAT(RecordSet1.Fields.Item('sl_no').Value), '=', ',') + ',' + FORMAT(SaleOrderId) +
        //                                                         // ', sysdate,'+
        //                                                         ',to_date(''' + FORMAT(payment_Realization_Date, 0, '<Day>-<Month Text,3>-<Year4>') +
        //                                                            ''',''dd-mon-yyyy''),' +
        //                                                        '0,''SAL'',sysdate,''Auto'',' + FORMAT(PaymentId) + ',' + DELCHR(FORMAT(RecordSet1.Fields.Item('invoice_id').Value), '=', ',') + ')';
        //                                             //MESSAGE(SQLQuery);
        //                                             SQLConnection.Execute(SQLQuery);
        //                                             Pay_Amount := Pay_Amount - PlndAmnt;
        //                                         END ELSE BEGIN  // else part of if paymentamount >= planned amount
        //                                             SQLQuery := 'select nvl(max(sl_no)+1,1) newslno from MRP_PLAN_CHANGES where SALE_ORDER_ID = ' + FORMAT(SaleOrderId);
        //                                             /*' and INVOICE_ID = '+DELCHR(FORMAT(RecordSet1.Fields.Item('invoice_id').Value),'=',',');*///commented by pranavi on 31-dec-2016
        //                                                                                                                                         //MESSAGE(SQLQuery);
        //                                             RecordSet2 := SQLConnection.Execute(SQLQuery, RowCount2);
        //                                             IF NOT ((RecordSet2.BOF) OR (RecordSet2.EOF)) THEN
        //                                                 RecordSet2.MoveFirst;
        //                                             WHILE NOT RecordSet2.EOF DO BEGIN
        //                                                 EVALUATE(Temp_SL_No, FORMAT(RecordSet2.Fields.Item('newslno').Value));
        //                                                 RowCount2 := RowCount2 + 1;
        //                                                 RecordSet2.MoveNext;
        //                                             END;
        //                                             SQLQuery := 'insert into MRP_PLAN_CHANGES(PLAN_CHANGE_ID,SL_NO,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,RESPONSE_SECTION, ' +
        //                                                        ' CREATION_DATE,USERID,INVOICE_ID,SPLITEDFROM) values(PLAN_CHANGE_SEQ.NEXTVAL,' + DELCHR(FORMAT(Temp_SL_No), '=', ',') + ',' + FORMAT(SaleOrderId) +
        //                                                         //',sysdate, '+
        //                                                         ',to_date(''' + FORMAT(payment_Realization_Date, 0, '<Day>-<Month Text,3>-<Year4>') +
        //                                                            ''',''dd-mon-yyyy''),' +
        //                                                        DELCHR(FORMAT(ROUND(Pay_Amount, 1, '=')), '=', ',') + ',''SAL'',sysdate,''Auto'', ' + DELCHR(FORMAT(RecordSet1.Fields.Item('invoice_id').Value), '=', ',') +
        //                                                        ', ' + DELCHR(FORMAT(RecordSet1.Fields.Item('SL_NO').Value), '=', ',') + ')';
        //                                             //MESSAGE(SQLQuery);
        //                                             SQLConnection.Execute(SQLQuery);

        //                                             SQLQuery := 'insert into MRP_PLAN_CHANGES(PLAN_CHANGE_ID,SL_NO,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,RESPONSE_SECTION, ' +
        //                                                        ' CREATION_DATE,USERID,PAYMENT_ID,INVOICE_ID) values(PLAN_CHANGE_SEQ.NEXTVAL,' + DELCHR(FORMAT(Temp_SL_No), '=', ',') + ',' + FORMAT(SaleOrderId) +
        //                                                         //', sysdate,'+
        //                                                         ',to_date(''' + FORMAT(payment_Realization_Date, 0, '<Day>-<Month Text,3>-<Year4>') +
        //                                                            ''',''dd-mon-yyyy''),' +
        //                                                        '0,''SAL'',sysdate,''Auto'',' + DELCHR(FORMAT(PaymentId), '=', ',') + ',' + DELCHR(FORMAT(RecordSet1.Fields.Item('invoice_id').Value), '=', ',') + ')';
        //                                             //MESSAGE(SQLQuery);
        //                                             SQLConnection.Execute(SQLQuery);

        //                                             SQLQuery := 'update MRP_PLAN_CHANGES set PLANNED_AMOUNT = ' + DELCHR(FORMAT(ROUND(PlndAmnt - Pay_Amount, 1, '=')), '=', ',') + ' where PLAN_CHANGE_ID = ' +
        //                                                        DELCHR(FORMAT(RecordSet1.Fields.Item('PLAN_CHANGE_ID').Value), '=', ',');
        //                                             //MESSAGE(SQLQuery);
        //                                             SQLConnection.Execute(SQLQuery);
        //                                             Pay_Amount := 0;
        //                                         END;  //end of else part of if paymentamount >= planned amount
        //                                     END; // end of if paymentamount > 0
        //                                     RowCount1 := RowCount1 + 1;
        //                                     RecordSet1.MoveNext;
        //                                 END;  // end of receivables pln changes loop
        //                                 temppp_amt := 0;
        //                                 IF (ROUND(InvoiceAmt, 1, '=') > ROUND(PlnndAmt, 1, '=')) AND (ROUND(Pay_Amount, 1, '=') > 0) THEN BEGIN
        //                                     IF ROUND(Pay_Amount, 1, '=') >= ROUND(InvoiceAmt - PlnndAmt, 1, '=') THEN BEGIN
        //                                         temppp_amt := InvoiceAmt - PlnndAmt;
        //                                         Pay_Amount := InvoiceAmt - PlnndAmt;
        //                                     END ELSE BEGIN
        //                                         temppp_amt := Pay_Amount;
        //                                         Pay_Amount := 0;
        //                                     END;
        //                                     IF temppp_amt > 0 THEN BEGIN
        //                                         SQLQuery := 'insert into MRP_PLAN_CHANGES(PLAN_CHANGE_ID,SL_NO,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,RESPONSE_SECTION, ' +
        //                                                    ' CREATION_DATE,USERID,INVOICE_ID) values(PLAN_CHANGE_SEQ.NEXTVAL,(SELECT nvl(MAX(sl_no)+1,1) from MRP_PLAN_CHANGES where sale_order_id = ' +
        //                                                    FORMAT(SaleOrderId) + ' and invoice_id = ' + DELCHR(FORMAT(RecordSet.Fields.Item('ar_invoice_id').Value), '=', ',') + '),' + FORMAT(SaleOrderId) +
        //                                                     //',sysdate, '+
        //                                                     ',to_date(''' + FORMAT(payment_Realization_Date, 0, '<Day>-<Month Text,3>-<Year4>') +
        //                                                          ''',''dd-mon-yyyy''),' +
        //                                                    DELCHR(FORMAT(ROUND(temppp_amt, 1, '=')), '=', ',') + ',''SAL'',sysdate,''Auto'', ' + DELCHR(FORMAT(RecordSet.Fields.Item('ar_invoice_id').Value), '=', ',') + ')';
        //                                         //MESSAGE(SQLQuery);
        //                                         SQLConnection.Execute(SQLQuery);

        //                                         SQLQuery := 'insert into MRP_PLAN_CHANGES(PLAN_CHANGE_ID,SL_NO,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,RESPONSE_SECTION, ' +
        //                                                    ' CREATION_DATE,USERID,PAYMENT_ID,INVOICE_ID) values(PLAN_CHANGE_SEQ.NEXTVAL,(SELECT nvl(MAX(sl_no)+1,1) ' +
        //                                                    ' from MRP_PLAN_CHANGES where sale_order_id = ' + FORMAT(SaleOrderId) + ' and invoice_id = ' +
        //                                                    DELCHR(FORMAT(RecordSet.Fields.Item('ar_invoice_id').Value), '=', ',') + '),' + FORMAT(SaleOrderId) +
        //                                                     //', sysdate,'+
        //                                                     ',to_date(''' + FORMAT(payment_Realization_Date, 0, '<Day>-<Month Text,3>-<Year4>') +
        //                                                          ''',''dd-mon-yyyy''),' +
        //                                                    '0,''SAL'',sysdate,''Auto'',' + DELCHR(FORMAT(PaymentId), '=', ',') + ',' + DELCHR(FORMAT(RecordSet.Fields.Item('ar_invoice_id').Value), '=', ',') + ')';
        //                                         //MESSAGE(SQLQuery);
        //                                         SQLConnection.Execute(SQLQuery);
        //                                     END;
        //                                 END;
        //                                 RowCount := RowCount + 1;
        //                                 RecordSet.MoveNext;
        //                             END;  // end of receivable invoices loop
        //                             IF Tmp_Aply_Amt_Tot > 0 THEN BEGIN
        //                                 IF Paid_Amt > Tmp_Aply_Amt_Tot THEN BEGIN
        //                                     SQLQuery := 'update mrp_arr_payment set AMOUNT = nvl(AMOUNT,0) - ' + DELCHR(FORMAT(ROUND(Tmp_Aply_Amt_Tot, 1, '=')), '=', ',') + ' where AR_PAYMENT_ID = ' +
        //                                                DELCHR(FORMAT(PaymentId), '=', ',');
        //                                     //MESSAGE(SQLQuery);
        //                                     SQLConnection.Execute(SQLQuery);
        //                                 END ELSE BEGIN
        //                                     SQLQuery := 'delete mrp_arr_payment where AR_PAYMENT_ID = ' + DELCHR(FORMAT(PaymentId), '=', ',');
        //                                     //MESSAGE(SQLQuery);
        //                                     SQLConnection.Execute(SQLQuery);
        //                                 END;
        //                             END;
        //                         END;
        //                         Tmp_Aply_Amt_Tot := 0;
        //                         IF ROUND(Pay_Amount, 1, '=') > 0 THEN  // if still payment amount is remaining pay in installtion plan changes
        //                         BEGIN
        //                             SQLQuery := 'select nvl(ARR_INSTALL_PAYMENT_SEQ.NEXTVAL,1) payid from dual';
        //                             //MESSAGE(SQLQuery);
        //                             RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                             IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                                 RecordSet.MoveFirst;
        //                             WHILE NOT RecordSet.EOF DO BEGIN
        //                                 EVALUATE(PaymentId, FORMAT(RecordSet.Fields.Item('payid').Value));
        //                                 RowCount := RowCount + 1;
        //                                 RecordSet.MoveNext;
        //                             END;
        //                             // insert payment record
        //                             Inst_Paid_Amt := Pay_Amount;
        //                             SQLQuery := 'insert into mrp_arr_instal_payment(AR_PAYMENT_ID,SALE_ORDER_ID,PAYMENT_DATE,AMOUNT,USERID,CREATION_DATE,AMOUNTTYPE) values(' + FORMAT(PaymentId) + ', ' +
        //                                        FORMAT(SaleOrderId) + ', to_date(''' + FORMAT(CLE."Posting Date", 0, '<Day>-<Month Text,3>-<Year4>') + ''',''dd-mon-yyyy''), ' +
        //                                        DELCHR(FORMAT(ROUND(Pay_Amount, 1, '=')), '=', ',') + ',''Auto'',sysdate,''R'')';
        //                             //MESSAGE(SQLQuery);
        //                             SQLConnection.Execute(SQLQuery);

        //                             SQLQuery := 'select * from MRP_ARR_INSTALL_INVOICE where SALE_ORDER_ID  = ' + FORMAT(SaleOrderId) + ' and INVOICE_DATE = to_date(''' +
        //                                         FORMAT(SIH."Posting Date", 0, '<Day>-<Month Text,3>-<Year4>') + ''',''dd-mon-yyyy'') and ERP_INVOICE_NO = ''' +
        //                                         DELCHR(SIH."External Document No.", '=', ',') + ''' and AMOUNTTYPE = ''R'' and amount is not null order by LINE_NO';
        //                             //MESSAGE(SQLQuery);
        //                             RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                             IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                                 RecordSet.MoveFirst;
        //                             WHILE NOT RecordSet.EOF DO BEGIN   // inst invoice loop
        //                                 InvoiceAmt := 0;
        //                                 Adv_Cons_Amt := 0;
        //                                 Tmp_UnitPrice := 0;
        //                                 Tmp_Adv_Perct := 0;
        //                                 Tmp_Inv_Qty := 0;
        //                                 Tmp_Inv_Adv_Amt := 0;
        //                                 IF FORMAT(RecordSet.Fields.Item('amount').Value) <> '' THEN
        //                                     EVALUATE(InvoiceAmt, FORMAT(RecordSet.Fields.Item('amount').Value))
        //                                 ELSE
        //                                     InvoiceAmt := 0;
        //                                 //EVALUATE(InvoiceAmt,FORMAT(RecordSet.Fields.Item('amount').Value));

        //                                 IF FORMAT(RecordSet.Fields.Item('ADV_AMOUNT_CONSIDERED').Value) <> '' THEN
        //                                     EVALUATE(Adv_Cons_Amt, FORMAT(RecordSet.Fields.Item('ADV_AMOUNT_CONSIDERED').Value))
        //                                 ELSE
        //                                     Adv_Cons_Amt := 0;
        //                                 SQLQuery := 'select nvl(sum(PLANNED_AMOUNT),0) PLANNED_AMOUNT   from MRP_INSTAL_PLAN_CHANGES where PLAN_CHANGE_ID in ( ' +
        //                                            'select  max(pl.PLAN_CHANGE_ID) from  MRP_INSTAL_PLAN_CHANGES pl ,(select sl_no,SALE_ORDER_ID,PLAN_CHANGE_ID ' +
        //                                            'from MRP_INSTAL_PLAN_CHANGES pl1 where planned_amount= 0  and payment_id is not null and invoice_id = ' +
        //                                            DELCHR(FORMAT(RecordSet.Fields.Item('AR_INVOICE_ID').Value), '=', ',') + ' and SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ') a ' +
        //                                            'where  a.sl_no=pl.sl_no and pl.PLAN_CHANGE_ID < a.PLAN_CHANGE_ID and a.SALE_ORDER_ID=pl.SALE_ORDER_ID) ';
        //                                 //MESSAGE(SQLQuery);
        //                                 RecordSet1 := SQLConnection.Execute(SQLQuery, RowCount1);
        //                                 InvPayAmt := 0;
        //                                 Tot_InvPayAmt := 0;
        //                                 IF NOT ((RecordSet1.BOF) OR (RecordSet1.EOF)) THEN
        //                                     RecordSet1.MoveFirst;
        //                                 WHILE NOT RecordSet1.EOF DO BEGIN
        //                                     InvPayAmt := 0;
        //                                     EVALUATE(InvPayAmt, FORMAT(RecordSet1.Fields.Item('planned_amount').Value));
        //                                     Tot_InvPayAmt := Tot_InvPayAmt + InvPayAmt;
        //                                     RowCount1 := RowCount1 + 1;
        //                                     RecordSet1.MoveNext;
        //                                 END;
        //                                 InvoiceAmt := InvoiceAmt - Tot_InvPayAmt;
        //                                 SQLQuery := 'select * from  MRP_INSTAL_PLAN_CHANGES b,(select SALE_ORDER_ID,sl_no,max(plan_change_id) PlanChngId from MRP_INSTAL_PLAN_CHANGES where ' +
        //                                            ' SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ' and invoice_id =' + DELCHR(FORMAT(RecordSet.Fields.Item('AR_INVOICE_ID').Value), '=', ',') +
        //                                            ' group by SALE_ORDER_ID,sl_no) a where a.planchngid=b.plan_change_id and b.planned_amount > 0';
        //                                 //MESSAGE(SQLQuery);
        //                                 RecordSet1 := SQLConnection.Execute(SQLQuery, RowCount1);
        //                                 PlnndAmt := 0;
        //                                 PlndAmnt := 0;
        //                                 IF NOT ((RecordSet1.BOF) OR (RecordSet1.EOF)) THEN
        //                                     RecordSet1.MoveFirst;
        //                                 WHILE NOT RecordSet1.EOF DO BEGIN   // begin of instl pln changes loop
        //                                     EVALUATE(PlndAmnt, FORMAT(RecordSet1.Fields.Item('planned_amount').Value));
        //                                     PlnndAmt := PlnndAmt + PlndAmnt;
        //                                     IF (ROUND(Pay_Amount, 1, '=') >= ROUND(PlndAmnt, 1, '=')) THEN BEGIN  // if payment amount > plan change amount
        //                                         SQLQuery := 'insert into MRP_INSTAL_PLAN_CHANGES(PLAN_CHANGE_ID,SL_NO,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,RESPONSE_SECTION,CREATION_DATE, ' +
        //                                                    ' USERID,PAYMENT_ID,INVOICE_ID) values(INSTALL_PLAN_CHANGE_SEQ.NEXTVAL,' + DELCHR(FORMAT(RecordSet1.Fields.Item('sl_no').Value), '=', ',') + ',' + FORMAT(SaleOrderId) +
        //                                                    ', sysdate,0,''SAL'',sysdate,''Auto'',' + DELCHR(FORMAT(PaymentId), '=', ',') + ',' + DELCHR(FORMAT(RecordSet1.Fields.Item('invoice_id').Value), '=', ',') + ')';
        //                                         //MESSAGE(SQLQuery);
        //                                         SQLConnection.Execute(SQLQuery);
        //                                         Pay_Amount := Pay_Amount - PlndAmnt;
        //                                     END ELSE BEGIN // else part of if payment amount > plan change amount
        //                                         SQLQuery := 'select nvl(max(sl_no)+1,1) newslno from MRP_INSTAL_PLAN_CHANGES where SALE_ORDER_ID = ' + FORMAT(SaleOrderId) +
        //                                                    ' and INVOICE_ID = ' + DELCHR(FORMAT(RecordSet1.Fields.Item('invoice_id').Value), '=', ',');
        //                                         //MESSAGE(SQLQuery);
        //                                         RecordSet2 := SQLConnection.Execute(SQLQuery, RowCount2);
        //                                         IF NOT ((RecordSet2.BOF) OR (RecordSet2.EOF)) THEN
        //                                             RecordSet2.MoveFirst;
        //                                         WHILE NOT RecordSet2.EOF DO BEGIN
        //                                             EVALUATE(Temp_SL_No, FORMAT(RecordSet2.Fields.Item('newslno').Value));
        //                                             RowCount2 := RowCount2 + 1;
        //                                             RecordSet2.MoveNext;
        //                                         END;
        //                                         SQLQuery := 'insert into MRP_INSTAL_PLAN_CHANGES(PLAN_CHANGE_ID,SL_NO,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,RESPONSE_SECTION, ' +
        //                                                    ' CREATION_DATE,USERID,INVOICE_ID,SPLITEDFROM) values(INSTALL_PLAN_CHANGE_SEQ.NEXTVAL,' + DELCHR(FORMAT(Temp_SL_No), '=', ',') + ',' + FORMAT(SaleOrderId) + ',sysdate, ' +
        //                                                    DELCHR(FORMAT(ROUND(Pay_Amount, 1, '=')), '=', ',') + ',''SAL'',sysdate,''Auto'', ' + DELCHR(FORMAT(RecordSet1.Fields.Item('invoice_id').Value), '=', ',') +
        //                                                    ', ' + DELCHR(FORMAT(RecordSet1.Fields.Item('SL_NO').Value), '=', ',') + ')';
        //                                         //MESSAGE(SQLQuery);
        //                                         SQLConnection.Execute(SQLQuery);

        //                                         SQLQuery := 'insert into MRP_INSTAL_PLAN_CHANGES(PLAN_CHANGE_ID,SL_NO,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,RESPONSE_SECTION, ' +
        //                                                    ' CREATION_DATE,USERID,PAYMENT_ID,INVOICE_ID) values(INSTALL_PLAN_CHANGE_SEQ.NEXTVAL,' + FORMAT(Temp_SL_No) + ',' + FORMAT(SaleOrderId) +
        //                                                    ', sysdate,0,''SAL'',sysdate,''Auto'',' + DELCHR(FORMAT(PaymentId), '=', ',') + ',' + DELCHR(FORMAT(RecordSet1.Fields.Item('invoice_id').Value), '=', ',') + ')';
        //                                         //MESSAGE(SQLQuery);
        //                                         SQLConnection.Execute(SQLQuery);

        //                                         SQLQuery := 'update MRP_INSTAL_PLAN_CHANGES set PLANNED_AMOUNT = ' + DELCHR(FORMAT(ROUND(PlndAmnt - Pay_Amount, 1, '=')), '=', ',') + ' where PLAN_CHANGE_ID = ' +
        //                                                    DELCHR(FORMAT(RecordSet1.Fields.Item('PLAN_CHANGE_ID').Value), '=', ',');
        //                                         //MESSAGE(SQLQuery);
        //                                         SQLConnection.Execute(SQLQuery);
        //                                         Pay_Amount := 0;
        //                                     END; // end of else part of if payment amount > plan change amount
        //                                     RowCount1 := RowCount1 + 1;
        //                                     RecordSet1.MoveNext;
        //                                 END; // end of instl pln changes loop
        //                                 temppp_amt := 0;
        //                                 IF (InvoiceAmt > PlnndAmt) AND (Pay_Amount > 0) THEN BEGIN
        //                                     IF Pay_Amount >= (InvoiceAmt - PlnndAmt) THEN BEGIN
        //                                         temppp_amt := InvoiceAmt - PlnndAmt;
        //                                         Pay_Amount := InvoiceAmt - PlnndAmt;
        //                                     END ELSE BEGIN
        //                                         temppp_amt := Pay_Amount;
        //                                         Pay_Amount := 0;
        //                                     END;
        //                                     SQLQuery := 'insert into MRP_INSTAL_PLAN_CHANGES(PLAN_CHANGE_ID,SL_NO,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,RESPONSE_SECTION, ' +
        //                                                ' CREATION_DATE,USERID,INVOICE_ID) values(PLAN_CHANGE_SEQ.NEXTVAL,(SELECT nvl(MAX(sl_no)+1,1) from MRP_INSTAL_PLAN_CHANGES where sale_order_id = ' +
        //                                                FORMAT(SaleOrderId) + ' and invoice_id = ' + DELCHR(FORMAT(RecordSet.Fields.Item('ar_invoice_id').Value), '=', ',') + '),' + FORMAT(SaleOrderId) + ',sysdate, ' +
        //                                                DELCHR(FORMAT(ROUND(temppp_amt, 1, '=')), '=', ',') + ',''SAL'',sysdate,''Auto'', ' + DELCHR(FORMAT(RecordSet.Fields.Item('ar_invoice_id').Value), '=', ',');
        //                                     //MESSAGE(SQLQuery);
        //                                     SQLConnection.Execute(SQLQuery);

        //                                     SQLQuery := 'insert into MRP_INSTAL_PLAN_CHANGES(PLAN_CHANGE_ID,SL_NO,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,RESPONSE_SECTION, ' +
        //                                                ' CREATION_DATE,USERID,PAYMENT_ID,INVOICE_ID) values(PLAN_CHANGE_SEQ.NEXTVAL,(SELECT nvl(MAX(sl_no),1) ' +
        //                                                ' from MRP_INSTAL_PLAN_CHANGES where sale_order_id = ' + FORMAT(SaleOrderId) + ' and invoice_id = ' +
        //                                                DELCHR(FORMAT(RecordSet.Fields.Item('ar_invoice_id').Value), '=', ',') + '),' + FORMAT(SaleOrderId) +
        //                                                ', sysdate,0,''SAL'',sysdate,''Auto'',' + DELCHR(FORMAT(PaymentId), '=', ',') + ',' + DELCHR(FORMAT(RecordSet.Fields.Item('ar_invoice_id').Value), '=', ',') + ')';
        //                                     //MESSAGE(SQLQuery);
        //                                     SQLConnection.Execute(SQLQuery);
        //                                 END;
        //                                 RowCount := RowCount + 1;
        //                                 RecordSet.MoveNext;
        //                             END;  // end of inst_invoices_loop
        //                         END;  //end of if still payment amount is remaining pay in installtion plan changes
        //                         IF Tmp_Aply_Amt_Tot > 0 THEN BEGIN
        //                             IF Inst_Paid_Amt > Tmp_Aply_Amt_Tot THEN BEGIN
        //                                 SQLQuery := 'update mrp_arr_instal_payment set AMOUNT = nvl(AMOUNT,0) - ' + DELCHR(FORMAT(ROUND(Tmp_Aply_Amt_Tot, 1, '=')), '=', ',') + ' where AR_PAYMENT_ID = ' +
        //                                            DELCHR(FORMAT(PaymentId), '=', ',');
        //                                 //MESSAGE(SQLQuery);
        //                                 SQLConnection.Execute(SQLQuery);
        //                             END ELSE BEGIN
        //                                 SQLQuery := 'delete from mrp_arr_instal_payment where AR_PAYMENT_ID = ' + DELCHR(FORMAT(PaymentId), '=', ',');
        //                                 //MESSAGE(SQLQuery);
        //                                 SQLConnection.Execute(SQLQuery);
        //                             END;
        //                         END;
        //                         Tmp_Aply_Amt_Tot := 0;
        //                     END  // end of not instalation invoices
        //                     ELSE BEGIN  // if installation invoice
        //                         TotPlndAmnt := 0;
        //                         SQLQuery := 'select * from MRP_ARR_INSTALL_INVOICE where SALE_ORDER_ID  = ' + FORMAT(SaleOrderId) + ' and INVOICE_DATE = to_date(''' +
        //                                     FORMAT(SIH."Posting Date", 0, '<Day>-<Month Text,3>-<Year4>') + ''',''dd-mon-yyyy'') and ERP_INVOICE_NO = ''' +
        //                                     DELCHR(SIH."External Document No.", '=', ',') + ''' and AMOUNTTYPE = ''I'' and amount is not null order by LINE_NO,AR_INVOICE_ID';
        //                         //MESSAGE(SQLQuery);
        //                         RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                         IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                             RecordSet.MoveFirst;
        //                         WHILE NOT RecordSet.EOF DO  //inst invoice loop
        //                         BEGIN
        //                             InvAmt := 0;
        //                             EVALUATE(InvAmt, FORMAT(RecordSet.Fields.Item('amount').Value));
        //                             SQLQuery := 'select * from  MRP_INSTAL_PLAN_CHANGES b, (select SALE_ORDER_ID,sl_no,max(plan_change_id) PlanChngId from MRP_INSTAL_PLAN_CHANGES where ' +
        //                                        ' SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ' and invoice_id = ' + DELCHR(FORMAT(RecordSet.Fields.Item('AR_INVOICE_ID').Value), '=', ',') + ' ' +
        //                                        ' group by SALE_ORDER_ID,sl_no) a where a.planchngid=b.plan_change_id and b.planned_amount > 0 and b.INSTALLAMT > 0';
        //                             //MESSAGE(SQLQuery);
        //                             RecordSet1 := SQLConnection.Execute(SQLQuery, RowCount1);
        //                             PlndAmnt := 0;
        //                             IF NOT ((RecordSet1.BOF) OR (RecordSet1.EOF)) THEN
        //                                 RecordSet1.MoveFirst;
        //                             WHILE NOT RecordSet1.EOF DO BEGIN     // begin of instl pln changes loop
        //                                 PlndAmnt := 0;
        //                                 EVALUATE(PlndAmnt, FORMAT(RecordSet1.Fields.Item('planned_amount').Value));
        //                                 TotPlndAmnt := TotPlndAmnt + PlndAmnt;
        //                                 RowCount1 := RowCount1 + 1;
        //                                 RecordSet1.MoveNext;
        //                             END;
        //                             SQLQuery := 'select nvl(sum(PLANNED_AMOUNT),0) PLANNED_AMOUNT   from MRP_INSTAL_PLAN_CHANGES where PLAN_CHANGE_ID in ( ' +
        //                                        'select  max(pl.PLAN_CHANGE_ID) from  MRP_INSTAL_PLAN_CHANGES pl ,(select sl_no,SALE_ORDER_ID,PLAN_CHANGE_ID ' +
        //                                        'from MRP_INSTAL_PLAN_CHANGES pl1 where planned_amount= 0  and payment_id is not null and invoice_id = ' +
        //                                        DELCHR(FORMAT(RecordSet.Fields.Item('AR_INVOICE_ID').Value), '=', ',') + ' and SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ') a ' +
        //                                        'where  a.sl_no=pl.sl_no and pl.PLAN_CHANGE_ID < a.PLAN_CHANGE_ID and a.SALE_ORDER_ID=pl.SALE_ORDER_ID) ';
        //                             //MESSAGE(SQLQuery);
        //                             RecordSet1 := SQLConnection.Execute(SQLQuery, RowCount1);
        //                             InvPayAmt := 0;
        //                             Tot_InvPayAmt := 0;
        //                             IF NOT ((RecordSet1.BOF) OR (RecordSet1.EOF)) THEN
        //                                 RecordSet1.MoveFirst;
        //                             WHILE NOT RecordSet1.EOF DO BEGIN
        //                                 InvPayAmt := 0;
        //                                 EVALUATE(InvPayAmt, FORMAT(RecordSet1.Fields.Item('planned_amount').Value));
        //                                 Tot_InvPayAmt := Tot_InvPayAmt + InvPayAmt;
        //                                 RowCount1 := RowCount1 + 1;
        //                                 RecordSet1.MoveNext;
        //                             END;
        //                             Tot_Inv_Amt := Tot_Inv_Amt + InvAmt - Tot_InvPayAmt;
        //                             RowCount := RowCount + 1;
        //                             RecordSet.MoveNext;
        //                         END;
        //                         IF Tot_Inv_Amt > 0 THEN BEGIN
        //                             IF (Tot_Inv_Amt >= Amount) THEN
        //                                 Pay_Amount := Amount
        //                             ELSE
        //                                 Pay_Amount := Tot_Inv_Amt;
        //                         END ELSE
        //                             Pay_Amount := 0;
        //                         IF Pay_Amount > 0 THEN BEGIN
        //                             SQLQuery := 'select nvl(ARR_INSTALL_PAYMENT_SEQ.NEXTVAL,1) payid from dual';
        //                             //MESSAGE(SQLQuery);
        //                             RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                             IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                                 RecordSet.MoveFirst;
        //                             WHILE NOT RecordSet.EOF DO BEGIN
        //                                 EVALUATE(PaymentId, FORMAT(RecordSet.Fields.Item('payid').Value));
        //                                 RowCount := RowCount + 1;
        //                                 RecordSet.MoveNext;
        //                             END;
        //                             // insert payment record
        //                             Paid_Amt := Pay_Amount;
        //                             SQLQuery := 'insert into mrp_arr_instal_payment(AR_PAYMENT_ID,SALE_ORDER_ID,PAYMENT_DATE,AMOUNT,USERID,CREATION_DATE,AMOUNTTYPE) values(' + DELCHR(FORMAT(PaymentId), '=', ',') + ', ' +
        //                                        FORMAT(SaleOrderId) + ', to_date(''' + FORMAT(CLE."Posting Date", 0, '<Day>-<Month Text,3>-<Year4>') + ''',''dd-mon-yyyy''), ' +
        //                                        DELCHR(FORMAT(ROUND(Pay_Amount, 1, '=')), '=', ',') + ',''Auto'',sysdate,''I'')';
        //                             //MESSAGE(SQLQuery);
        //                             SQLConnection.Execute(SQLQuery);

        //                             SQLQuery := 'select * from MRP_ARR_INSTALL_INVOICE where SALE_ORDER_ID  = ' + FORMAT(SaleOrderId) + ' and INVOICE_DATE = to_date(''' +
        //                                         FORMAT(SIH."Posting Date", 0, '<Day>-<Month Text,3>-<Year4>') + ''',''dd-mon-yyyy'') and ERP_INVOICE_NO = ''' +
        //                                         DELCHR(SIH."External Document No.", '=', ',') + ''' and amount is not null order by LINE_NO,AR_INVOICE_ID';
        //                             //MESSAGE(SQLQuery);
        //                             RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                             IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                                 RecordSet.MoveFirst;
        //                             WHILE NOT RecordSet.EOF DO BEGIN   // invoice loop
        //                                 InvoiceAmt := 0;
        //                                 IF FORMAT(RecordSet.Fields.Item('amount').Value) <> '' THEN
        //                                     EVALUATE(InvoiceAmt, FORMAT(RecordSet.Fields.Item('amount').Value))
        //                                 ELSE
        //                                     InvoiceAmt := 0;
        //                                 //EVALUATE(InvoiceAmt,FORMAT(RecordSet.Fields.Item('amount').Value));
        //                                 SQLQuery := 'select nvl(sum(PLANNED_AMOUNT),0) PLANNED_AMOUNT   from MRP_INSTAL_PLAN_CHANGES where PLAN_CHANGE_ID in ( ' +
        //                                            'select  max(pl.PLAN_CHANGE_ID) from  MRP_INSTAL_PLAN_CHANGES pl ,(select sl_no,SALE_ORDER_ID,PLAN_CHANGE_ID ' +
        //                                            'from MRP_INSTAL_PLAN_CHANGES pl1 where planned_amount= 0  and payment_id is not null and invoice_id = ' +
        //                                            DELCHR(FORMAT(RecordSet.Fields.Item('AR_INVOICE_ID').Value), '=', ',') + ' and SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ') a ' +
        //                                            'where  a.sl_no=pl.sl_no and pl.PLAN_CHANGE_ID < a.PLAN_CHANGE_ID and a.SALE_ORDER_ID=pl.SALE_ORDER_ID) ';
        //                                 //MESSAGE(SQLQuery);
        //                                 RecordSet1 := SQLConnection.Execute(SQLQuery, RowCount1);
        //                                 InvPayAmt := 0;
        //                                 Tot_InvPayAmt := 0;
        //                                 IF NOT ((RecordSet1.BOF) OR (RecordSet1.EOF)) THEN
        //                                     RecordSet1.MoveFirst;
        //                                 WHILE NOT RecordSet1.EOF DO BEGIN
        //                                     InvPayAmt := 0;
        //                                     EVALUATE(InvPayAmt, FORMAT(RecordSet1.Fields.Item('planned_amount').Value));
        //                                     Tot_InvPayAmt := Tot_InvPayAmt + InvPayAmt;
        //                                     RowCount1 := RowCount1 + 1;
        //                                     RecordSet1.MoveNext;
        //                                 END;
        //                                 InvoiceAmt := InvoiceAmt - Tot_InvPayAmt;
        //                                 IF Pay_Amount > 0 THEN  // if still payment amount is remaining pay in installtion plan changes
        //                                 BEGIN
        //                                     SQLQuery := 'select * from  MRP_INSTAL_PLAN_CHANGES b,(select SALE_ORDER_ID,sl_no,max(plan_change_id) PlanChngId from MRP_INSTAL_PLAN_CHANGES where ' +
        //                                                ' SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ' and invoice_id =' + DELCHR(FORMAT(RecordSet.Fields.Item('AR_INVOICE_ID').Value), '=', ',') +
        //                                                ' group by SALE_ORDER_ID,sl_no) a where a.planchngid=b.plan_change_id and b.planned_amount > 0';
        //                                     //MESSAGE(SQLQuery);
        //                                     RecordSet1 := SQLConnection.Execute(SQLQuery, RowCount1);
        //                                     PlnndAmt := 0;
        //                                     PlndAmnt := 0;
        //                                     IF NOT ((RecordSet1.BOF) OR (RecordSet1.EOF)) THEN
        //                                         RecordSet1.MoveFirst;
        //                                     WHILE NOT RecordSet1.EOF DO BEGIN   // begin of instl pln changes loop
        //                                         IF ROUND(Pay_Amount, 1, '=') > 0 THEN  // if still payment amount is remaining pay in installtion plan changes
        //                                         BEGIN
        //                                             EVALUATE(PlndAmnt, FORMAT(RecordSet1.Fields.Item('planned_amount').Value));
        //                                             PlnndAmt := PlnndAmt + PlndAmnt;
        //                                             IF (ROUND(Pay_Amount, 1, '=') >= ROUND(PlndAmnt, 1, '=')) THEN BEGIN  // if payment amount > plan change amount
        //                                                 SQLQuery := 'insert into MRP_INSTAL_PLAN_CHANGES(PLAN_CHANGE_ID,SL_NO,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,RESPONSE_SECTION,CREATION_DATE,' +
        //                                                            ' USERID,PAYMENT_ID,INVOICE_ID) values(INSTALL_PLAN_CHANGE_SEQ.NEXTVAL,' + DELCHR(FORMAT(RecordSet1.Fields.Item('sl_no').Value), '=', ',') + ',' + FORMAT(SaleOrderId) +
        //                                                            ', sysdate,0,''SAL'',sysdate,''Auto'',' + DELCHR(FORMAT(PaymentId), '=', ',') + ',' + DELCHR(FORMAT(RecordSet1.Fields.Item('invoice_id').Value), '=', ',') + ')';
        //                                                 //MESSAGE(SQLQuery);
        //                                                 SQLConnection.Execute(SQLQuery);
        //                                                 Pay_Amount := Pay_Amount - PlndAmnt;
        //                                             END ELSE BEGIN // else part of if payment amount > plan change amount
        //                                                 SQLQuery := 'select nvl(max(sl_no)+1,1) newslno from MRP_INSTAL_PLAN_CHANGES where SALE_ORDER_ID = ' + FORMAT(SaleOrderId) +
        //                                                            ' and INVOICE_ID = ' + DELCHR(FORMAT(RecordSet1.Fields.Item('invoice_id').Value), '=', ',');
        //                                                 //MESSAGE(SQLQuery);
        //                                                 Temp_SL_No := 1;
        //                                                 RecordSet2 := SQLConnection.Execute(SQLQuery, RowCount2);
        //                                                 IF NOT ((RecordSet2.BOF) OR (RecordSet2.EOF)) THEN
        //                                                     RecordSet2.MoveFirst;
        //                                                 WHILE NOT RecordSet2.EOF DO BEGIN
        //                                                     EVALUATE(Temp_SL_No, FORMAT(RecordSet2.Fields.Item('newslno').Value));
        //                                                     RowCount2 := RowCount2 + 1;
        //                                                     RecordSet2.MoveNext;
        //                                                 END;
        //                                                 SQLQuery := 'insert into MRP_INSTAL_PLAN_CHANGES(PLAN_CHANGE_ID,SL_NO,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,RESPONSE_SECTION, ' +
        //                                                            ' CREATION_DATE,USERID,INVOICE_ID,SPLITEDFROM) values(INSTALL_PLAN_CHANGE_SEQ.NEXTVAL,' + DELCHR(FORMAT(Temp_SL_No), '=', ',') + ',' + FORMAT(SaleOrderId) + ',sysdate, ' +
        //                                                            DELCHR(FORMAT(ROUND(Pay_Amount, 1, '=')), '=', ',') + ',''SAL'',sysdate,''Auto'', ' + DELCHR(FORMAT(RecordSet1.Fields.Item('invoice_id').Value), '=', ',') +
        //                                                            ', ' + DELCHR(FORMAT(RecordSet1.Fields.Item('sl_no').Value), '=', ',') + ')';
        //                                                 //MESSAGE(SQLQuery);
        //                                                 SQLConnection.Execute(SQLQuery);

        //                                                 SQLQuery := 'insert into MRP_INSTAL_PLAN_CHANGES(PLAN_CHANGE_ID,SL_NO,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,RESPONSE_SECTION, ' +
        //                                                            ' CREATION_DATE,USERID,PAYMENT_ID,INVOICE_ID) values(INSTALL_PLAN_CHANGE_SEQ.NEXTVAL,' + DELCHR(FORMAT(Temp_SL_No), '=', ',') + ',' + FORMAT(SaleOrderId) +
        //                                                            ', sysdate,0,''SAL'',sysdate,''Auto'',' + DELCHR(FORMAT(PaymentId), '=', ',') + ',' + DELCHR(FORMAT(RecordSet1.Fields.Item('invoice_id').Value), '=', ',') + ')';
        //                                                 //MESSAGE(SQLQuery);
        //                                                 SQLConnection.Execute(SQLQuery);

        //                                                 SQLQuery := 'update MRP_INSTAL_PLAN_CHANGES set PLANNED_AMOUNT = ' + DELCHR(FORMAT(ROUND(PlndAmnt - Pay_Amount, 1, '=')), '=', ',') + ' where PLAN_CHANGE_ID = ' +
        //                                                            DELCHR(FORMAT(RecordSet1.Fields.Item('PLAN_CHANGE_ID').Value), '=', ',');
        //                                                 //MESSAGE(SQLQuery);
        //                                                 SQLConnection.Execute(SQLQuery);
        //                                                 Pay_Amount := 0;
        //                                             END; // end of else part of if payment amount > plan change amount
        //                                         END;
        //                                         RowCount1 := RowCount1 + 1;
        //                                         RecordSet1.MoveNext;
        //                                     END; // end of instl pln changes loop
        //                                     temppp_amt := 0;
        //                                     IF (InvoiceAmt > PlnndAmt) AND (Pay_Amount > 0) THEN BEGIN
        //                                         IF Pay_Amount >= (InvoiceAmt - PlnndAmt) THEN
        //                                             temppp_amt := InvoiceAmt - PlnndAmt
        //                                         ELSE
        //                                             temppp_amt := Pay_Amount;
        //                                         SQLQuery := 'insert into MRP_INSTAL_PLAN_CHANGES(PLAN_CHANGE_ID,SL_NO,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,RESPONSE_SECTION, ' +
        //                                                    ' CREATION_DATE,USERID,INVOICE_ID) values(PLAN_CHANGE_SEQ.NEXTVAL,(SELECT nvl(MAX(sl_no)+1,1) from MRP_INSTAL_PLAN_CHANGES where sale_order_id = ' +
        //                                                    FORMAT(SaleOrderId) + ' and invoice_id = ' + DELCHR(FORMAT(RecordSet.Fields.Item('ar_invoice_id').Value), '=', ',') + '),' + FORMAT(SaleOrderId) + ',sysdate, ' +
        //                                                    DELCHR(FORMAT(ROUND(temppp_amt, 1, '=')), '=', ',') + ',''SAL'',sysdate,''Auto'', ' + DELCHR(FORMAT(RecordSet.Fields.Item('ar_invoice_id').Value), '=', ',');
        //                                         //MESSAGE(SQLQuery);
        //                                         SQLConnection.Execute(SQLQuery);

        //                                         SQLQuery := 'insert into MRP_INSTAL_PLAN_CHANGES(PLAN_CHANGE_ID,SL_NO,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,RESPONSE_SECTION, ' +
        //                                                    ' CREATION_DATE,USERID,PAYMENT_ID,INVOICE_ID) values(PLAN_CHANGE_SEQ.NEXTVAL,(SELECT nvl(MAX(sl_no),1) ' +
        //                                                    ' from MRP_INSTAL_PLAN_CHANGES where sale_order_id = ' + FORMAT(SaleOrderId) + ' and invoice_id = ' +
        //                                                    DELCHR(FORMAT(RecordSet.Fields.Item('ar_invoice_id').Value), '=', ',') + '),' + FORMAT(SaleOrderId) +
        //                                                    ', sysdate,0,''SAL'',sysdate,''Auto'',' + DELCHR(FORMAT(PaymentId), '=', ',') + ',' + DELCHR(FORMAT(RecordSet.Fields.Item('ar_invoice_id').Value), '=', ',') + ')';
        //                                         //MESSAGE(SQLQuery);
        //                                         SQLConnection.Execute(SQLQuery);
        //                                     END;
        //                                 END;  //end of if still payment amount is remaining pay in installtion plan changes
        //                                 RowCount := RowCount + 1;
        //                                 RecordSet.MoveNext;
        //                             END;  // end arr_inst_invoices loop
        //                         END;
        //                     END;  // end of if installation invoice
        //                 END;  // end--only if order is aft integration
        //             END;    //end of if sale order exist in cf
        //             SQLConnection.CommitTrans;
        //             //RecordSet.Close;
        //             SQLConnection.Close;
        //             ConnectionOpen := 0;
        //         END;
        //     END; // end of if invoice exist in erp
        // END;  // end of if cust posting grp is private

    end;

    procedure PvtOrderInvoicePaymentInCF_3(CLE: Record "Cust. Ledger Entry"; Amount: Decimal);
    var
        SIH: Record "Sales Invoice Header";
        SH: Record "Sales Header";
        SaleOrderId: Integer;
        SIL: Record "Sales Invoice Line";
        SL: Record "Sales Line";
        PT: Record "Payment Terms";
        PlndAmnt: Decimal;
        TotPlndAmnt: Decimal;
        Pay_Amount: Decimal;
        PaymentId: Integer;
        Temp_SL_No: Integer;
        Is_Ordr_Aftr_Int: Code[10];
        Tot_Inv_Amt: Decimal;
        InvAmt: Decimal;
        InvPayAmt: Decimal;
        Tot_InvPayAmt: Decimal;
        Tot_Recvbl_Amt: Decimal;
        Tol_Inst_Recvbl_Amt: Decimal;
        Tot_Recvbl_PlndAmnt: Decimal;
        TotInst_Recvbl_PlndAmnt: Decimal;
        InvoiceAmt: Decimal;
        PlnndAmt: Decimal;
        temppp_amt: Decimal;
        Adv_Cons_Amt: Decimal;
        Tmp_UnitPrice: Decimal;
        Tmp_Adv_Perct: Decimal;
        Tmp_Inv_Qty: Decimal;
        Tmp_Inv_Adv_Amt: Decimal;
        tmp_invamt: Decimal;
        Tmp_Nxt_Inv_Amt: Decimal;
        TmpInvAmt: Decimal;
        Tmp_InvPayAmt: Decimal;
        Tmp_Tot_InvPayAmt: Decimal;
        Tmp_Aply_Amt: Decimal;
        Tmp_Aply_Amt_Tot: Decimal;
        Paid_Amt: Decimal;
        Inst_Paid_Amt: Decimal;
        Tot_Inv_Adv_Amts: Decimal;
    begin
        // Amount := ABS(Amount);
        // IF (ROUND(Amount, 1, '=') > 0) AND NOT (CLE."Customer No." IN ['CUST00536', 'CUST01164']) AND (CLE."Customer Posting Group" IN ['PRIVATE', 'OTHERS', 'EXPORT']) THEN BEGIN // if posting grp is private
        //     SIH.RESET;
        //     SIH.SETRANGE(SIH."No.", CLE."Document No.");
        //     IF SIH.FINDFIRST THEN    // if invoice found in erp
        //     BEGIN
        //         IF COPYSTR(SIH."Order No.", 5, 3) = 'SAL' THEN BEGIN
        //             IF ISCLEAR(SQLConnection) THEN
        //                 CREATE(SQLConnection, FALSE, TRUE);

        //             IF ISCLEAR(RecordSet) THEN
        //                 CREATE(RecordSet, FALSE, TRUE);

        //             IF ISCLEAR(RecordSet1) THEN
        //                 CREATE(RecordSet1, FALSE, TRUE);

        //             IF ConnectionOpen <> 1 THEN BEGIN
        //                 SQLConnection.ConnectionString := 'DSN=CASHFLOW;UID=cashflowuser;PASSWORD=firewall123;SERVER=oracle_80;';
        //                 SQLConnection.Open;
        //                 SQLConnection.BeginTrans;
        //                 ConnectionOpen := 1;
        //             END;

        //             SQLQuery := 'SELECT * FROM MRP_SALE_ORDER WHERE INT_SAL_ORD_NO = ''' + SIH."Order No." + ''' AND STATUS = ''N''';
        //             //MESSAGE(SQLQuery);
        //             RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //             IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                 RecordSet.MoveFirst;
        //             WHILE NOT RecordSet.EOF DO BEGIN
        //                 SaleOrderId := RecordSet.Fields.Item('SALE_ORDER_ID').Value;
        //                 IF FORMAT(RecordSet.Fields.Item('IS_ORDR_AFT_INTEGRTION').Value) = '1' THEN
        //                     Is_Ordr_Aftr_Int := 'YES'
        //                 ELSE
        //                     Is_Ordr_Aftr_Int := 'NO';
        //                 RowCount := RowCount + 1;
        //                 RecordSet.MoveNext;
        //             END;
        //             IF SaleOrderId <> 0 THEN BEGIN  // check if sale order present in sale order table in cf
        //                 IF Is_Ordr_Aftr_Int = 'YES' THEN  // only if order is aft integration
        //                 BEGIN
        //                     MESSAGE('Invoice Payment In CashFlow!');
        //                     IF COPYSTR(SIH."External Document No.", 1, 2) <> 'IN' THEN BEGIN    // if supply bill
        //                         TotPlndAmnt := 0;
        //                         Tot_Inv_Amt := 0;
        //                         Tot_Recvbl_Amt := 0;
        //                         Tol_Inst_Recvbl_Amt := 0;
        //                         Tot_Recvbl_PlndAmnt := 0;
        //                         TotInst_Recvbl_PlndAmnt := 0;
        //                         SQLQuery := 'select * from MRP_ARR_INVOICE where SALE_ORDER_ID  = ' + FORMAT(SaleOrderId) + ' and INVOICE_DATE = to_date(''' +
        //                                     FORMAT(SIH."Posting Date", 0, '<Day>-<Month Text,3>-<Year4>') +
        //                                     ''',''dd-mon-yyyy'') and ERP_INVOICE_NO = ''' + DELCHR(SIH."External Document No.", '=', ',') + ''' order by LINE_NO,AR_INVOICE_ID';
        //                         //MESSAGE(SQLQuery);
        //                         RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                         IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                             RecordSet.MoveFirst;
        //                         WHILE NOT RecordSet.EOF DO    // start--invoice loop
        //                         BEGIN
        //                             InvAmt := 0;
        //                             EVALUATE(InvAmt, FORMAT(RecordSet.Fields.Item('amount').Value));
        //                             /*
        //                             SQLQuery:= 'select * from  MRP_PLAN_CHANGES b, (select SALE_ORDER_ID,sl_no,max(plan_change_id) PlanChngId from MRP_PLAN_CHANGES where '+
        //                                        ' SALE_ORDER_ID = '+FORMAT(SaleOrderId)+' and invoice_id = '+DELCHR(FORMAT(RecordSet.Fields.Item('AR_INVOICE_ID').Value),'=',',')+' '+
        //                                        ' group by SALE_ORDER_ID,sl_no) a where a.planchngid=b.plan_change_id and b.planned_amount > 0';
        //                             */   // Commented By Pranavi on 03-Feb-2017 for not pay amount but place in today
        //                             SQLQuery := 'select plan_change_id, sl_no,sale_order_id,payment_realize_date,planned_amount,response_section,remarks,creation_date,userid,payment_id,baseplan,splitedfrom,invoice_id,planchngid, ' +
        //                                        ' case when payment_realize_date < sysdate and userid = ''Auto'' and (baseplan <> 1 or baseplan is null) then ''Auto_Paid'' else ''Base_Plan'' end as Plan_Type ' +
        //                                        ' from (select * from  MRP_PLAN_CHANGES b, (select max(plan_change_id) PlanChngId from MRP_PLAN_CHANGES where ' +
        //                                        ' SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ' and invoice_id = ' + DELCHR(FORMAT(RecordSet.Fields.Item('AR_INVOICE_ID').Value), '=', ',') + ' ' +
        //                                        ' group by SALE_ORDER_ID,sl_no) a where a.planchngid=b.plan_change_id and b.planned_amount > 0) ' +
        //                                        ' where case when payment_realize_date < sysdate and userid = ''Auto'' and (baseplan <> 1 or baseplan is null) then ''Auto_Paid'' else ''Base_Plan'' end = ''Base_Plan''';
        //                             //MESSAGE(SQLQuery);
        //                             RecordSet1 := SQLConnection.Execute(SQLQuery, RowCount1);
        //                             PlndAmnt := 0;
        //                             IF NOT ((RecordSet1.BOF) OR (RecordSet1.EOF)) THEN
        //                                 RecordSet1.MoveFirst;
        //                             WHILE NOT RecordSet1.EOF DO BEGIN
        //                                 PlndAmnt := 0;
        //                                 EVALUATE(PlndAmnt, FORMAT(RecordSet1.Fields.Item('planned_amount').Value));
        //                                 TotPlndAmnt := TotPlndAmnt + PlndAmnt;
        //                                 Tot_Recvbl_PlndAmnt := Tot_Recvbl_PlndAmnt + PlndAmnt;
        //                                 RowCount1 := RowCount1 + 1;
        //                                 RecordSet1.MoveNext;
        //                             END;
        //                             SQLQuery := 'select nvl(sum(PLANNED_AMOUNT),0) PLANNED_AMOUNT from MRP_PLAN_CHANGES where PLAN_CHANGE_ID in ( ' +
        //                                        'select  max(pl.PLAN_CHANGE_ID) from  MRP_PLAN_CHANGES pl ,(select sl_no,SALE_ORDER_ID,PLAN_CHANGE_ID ' +
        //                                        'from MRP_PLAN_CHANGES pl1 where planned_amount= 0  and payment_id is not null and invoice_id = ' +
        //                                        DELCHR(FORMAT(RecordSet.Fields.Item('AR_INVOICE_ID').Value), '=', ',') + ' and SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ') a ' +
        //                                        'where  a.sl_no=pl.sl_no and pl.PLAN_CHANGE_ID < a.PLAN_CHANGE_ID and a.SALE_ORDER_ID=pl.SALE_ORDER_ID) ';
        //                             //MESSAGE(SQLQuery);
        //                             RecordSet1 := SQLConnection.Execute(SQLQuery, RowCount1);
        //                             InvPayAmt := 0;
        //                             Tot_InvPayAmt := 0;
        //                             IF NOT ((RecordSet1.BOF) OR (RecordSet1.EOF)) THEN
        //                                 RecordSet1.MoveFirst;
        //                             WHILE NOT RecordSet1.EOF DO BEGIN
        //                                 InvPayAmt := 0;
        //                                 EVALUATE(InvPayAmt, FORMAT(RecordSet1.Fields.Item('planned_amount').Value));
        //                                 Tot_InvPayAmt := Tot_InvPayAmt + InvPayAmt;
        //                                 RowCount1 := RowCount1 + 1;
        //                                 RecordSet1.MoveNext;
        //                             END;
        //                             // Start--Added By Pranavi on 03-Feb-2017 for not pay amount but place in today
        //                             SQLQuery := 'select nvl(sum(planned_amount),0) planned_amount from ( ' +
        //                                        ' select plan_change_id, sl_no,sale_order_id,payment_realize_date,planned_amount,response_section,remarks,creation_date,userid,payment_id,baseplan,splitedfrom,invoice_id,planchngid, ' +
        //                                        ' case when payment_realize_date < sysdate and userid = ''Auto'' and (baseplan <> 1 or baseplan is null) then ''Auto_Paid'' else ''Base_Plan'' end as Plan_Type ' +
        //                                        ' from (select * from  MRP_PLAN_CHANGES b, (select max(plan_change_id) PlanChngId from MRP_PLAN_CHANGES where ' +
        //                                        ' SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ' and invoice_id = ' + DELCHR(FORMAT(RecordSet.Fields.Item('AR_INVOICE_ID').Value), '=', ',') + ' ' +
        //                                        ' group by SALE_ORDER_ID,sl_no) a where a.planchngid=b.plan_change_id and b.planned_amount > 0) ' +
        //                                        ' where case when payment_realize_date < sysdate and userid = ''Auto'' and (baseplan <> 1 or baseplan is null) then ''Auto_Paid'' else ''Base_Plan'' end = ''Auto_Paid'' ' +
        //                                        ' ) group by sale_order_id,invoice_id ';
        //                             RecordSet1 := SQLConnection.Execute(SQLQuery, RowCount1);
        //                             InvPayAmt := 0;
        //                             Tot_InvPayAmt := 0;
        //                             IF NOT ((RecordSet1.BOF) OR (RecordSet1.EOF)) THEN
        //                                 RecordSet1.MoveFirst;
        //                             WHILE NOT RecordSet1.EOF DO BEGIN
        //                                 InvPayAmt := 0;
        //                                 EVALUATE(InvPayAmt, FORMAT(RecordSet1.Fields.Item('planned_amount').Value));
        //                                 Tot_InvPayAmt := Tot_InvPayAmt + InvPayAmt;
        //                                 RowCount1 := RowCount1 + 1;
        //                                 RecordSet1.MoveNext;
        //                             END;
        //                             // End--Added By Pranavi on 03-Feb-2017 for not pay amount but place in today
        //                             Tot_Inv_Amt := Tot_Inv_Amt + InvAmt - Tot_InvPayAmt;
        //                             Tot_Recvbl_Amt := Tot_Recvbl_Amt + InvAmt - Tot_InvPayAmt;
        //                             RowCount := RowCount + 1;
        //                             RecordSet.MoveNext;
        //                         END;
        //                         SQLQuery := 'select * from MRP_ARR_INSTALL_INVOICE where SALE_ORDER_ID  = ' + FORMAT(SaleOrderId) + ' and INVOICE_DATE = to_date(''' +
        //                                     FORMAT(SIH."Posting Date", 0, '<Day>-<Month Text,3>-<Year4>') + ''',''dd-mon-yyyy'') and ERP_INVOICE_NO = ''' +
        //                                     DELCHR(SIH."External Document No.", '=', ',') + ''' and AMOUNTTYPE = ''R'' and amount is not null order by LINE_NO,AR_INVOICE_ID';
        //                         //MESSAGE(SQLQuery);
        //                         RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                         IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                             RecordSet.MoveFirst;
        //                         WHILE NOT RecordSet.EOF DO BEGIN   // invoice loop
        //                             InvAmt := 0;
        //                             EVALUATE(InvAmt, FORMAT(RecordSet.Fields.Item('amount').Value));
        //                             /*
        //                             SQLQuery:= 'select * from  MRP_INSTAL_PLAN_CHANGES b,(select SALE_ORDER_ID,sl_no,max(plan_change_id) PlanChngId from MRP_INSTAL_PLAN_CHANGES where '+
        //                                        ' SALE_ORDER_ID = '+FORMAT(SaleOrderId)+' and invoice_id ='+DELCHR(FORMAT(RecordSet.Fields.Item('AR_INVOICE_ID').Value),'=',',')+
        //                                        ' group by SALE_ORDER_ID,sl_no) a where a.planchngid=b.plan_change_id and b.planned_amount > 0';
        //                             */    // Commented By Pranavi on 03-Feb-2017 for not pay amount but place in today
        //                             SQLQuery := 'select plan_change_id, sl_no,sale_order_id,payment_realize_date,planned_amount,response_section,remarks,creation_date,userid,payment_id,baseplan,splitedfrom,invoice_id,planchngid, ' +
        //                                        ' case when payment_realize_date < sysdate and userid = ''Auto'' and (baseplan <> 1 or baseplan is null) then ''Auto_Paid'' else ''Base_Plan'' end as Plan_Type ' +
        //                                        ' from (select * from  MRP_INSTAL_PLAN_CHANGES b, (select max(plan_change_id) PlanChngId from MRP_INSTAL_PLAN_CHANGES where ' +
        //                                        ' SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ' and invoice_id = ' + DELCHR(FORMAT(RecordSet.Fields.Item('AR_INVOICE_ID').Value), '=', ',') + ' ' +
        //                                        ' group by SALE_ORDER_ID,sl_no) a where a.planchngid=b.plan_change_id and b.planned_amount > 0) ' +
        //                                        ' where case when payment_realize_date < sysdate and userid = ''Auto'' and (baseplan <> 1 or baseplan is null) then ''Auto_Paid'' else ''Base_Plan'' end = ''Base_Plan''';
        //                             //MESSAGE(SQLQuery);
        //                             RecordSet1 := SQLConnection.Execute(SQLQuery, RowCount1);
        //                             PlndAmnt := 0;
        //                             IF NOT ((RecordSet1.BOF) OR (RecordSet1.EOF)) THEN
        //                                 RecordSet1.MoveFirst;
        //                             WHILE NOT RecordSet1.EOF DO BEGIN   // begin of instl pln changes loop
        //                                 PlndAmnt := 0;
        //                                 EVALUATE(PlndAmnt, FORMAT(RecordSet1.Fields.Item('planned_amount').Value));
        //                                 TotPlndAmnt := TotPlndAmnt + PlndAmnt;
        //                                 TotInst_Recvbl_PlndAmnt := TotInst_Recvbl_PlndAmnt + PlndAmnt;
        //                                 RowCount1 := RowCount1 + 1;
        //                                 RecordSet1.MoveNext;
        //                             END;
        //                             SQLQuery := 'select nvl(sum(PLANNED_AMOUNT),0) PLANNED_AMOUNT   from MRP_INSTAL_PLAN_CHANGES where PLAN_CHANGE_ID in ( ' +
        //                                        'select  max(pl.PLAN_CHANGE_ID) from  MRP_INSTAL_PLAN_CHANGES pl ,(select sl_no,SALE_ORDER_ID,PLAN_CHANGE_ID ' +
        //                                        'from MRP_INSTAL_PLAN_CHANGES pl1 where planned_amount= 0  and payment_id is not null and invoice_id = ' +
        //                                        DELCHR(FORMAT(RecordSet.Fields.Item('AR_INVOICE_ID').Value), '=', ',') + ' and SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ') a ' +
        //                                        'where  a.sl_no=pl.sl_no and pl.PLAN_CHANGE_ID < a.PLAN_CHANGE_ID and a.SALE_ORDER_ID=pl.SALE_ORDER_ID) ';
        //                             //MESSAGE(SQLQuery);
        //                             RecordSet1 := SQLConnection.Execute(SQLQuery, RowCount1);
        //                             InvPayAmt := 0;
        //                             Tot_InvPayAmt := 0;
        //                             IF NOT ((RecordSet1.BOF) OR (RecordSet1.EOF)) THEN
        //                                 RecordSet1.MoveFirst;
        //                             WHILE NOT RecordSet1.EOF DO BEGIN
        //                                 InvPayAmt := 0;
        //                                 EVALUATE(InvPayAmt, FORMAT(RecordSet1.Fields.Item('planned_amount').Value));
        //                                 Tot_InvPayAmt := Tot_InvPayAmt + InvPayAmt;
        //                                 RowCount1 := RowCount1 + 1;
        //                                 RecordSet1.MoveNext;
        //                             END;
        //                             // Start--Added By Pranavi on 03-Feb-2017 for not pay amount but place in today
        //                             SQLQuery := 'select nvl(sum(planned_amount),0) planned_amount from ( ' +
        //                                        ' select plan_change_id, sl_no,sale_order_id,payment_realize_date,planned_amount,response_section,remarks,creation_date,userid,payment_id,baseplan,splitedfrom,invoice_id,planchngid, ' +
        //                                        ' case when payment_realize_date < sysdate and userid = ''Auto'' and (baseplan <> 1 or baseplan is null) then ''Auto_Paid'' else ''Base_Plan'' end as Plan_Type ' +
        //                                        ' from (select * from  MRP_INSTAL_PLAN_CHANGES b, (select max(plan_change_id) PlanChngId from MRP_INSTAL_PLAN_CHANGES where ' +
        //                                        ' SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ' and invoice_id = ' + DELCHR(FORMAT(RecordSet.Fields.Item('AR_INVOICE_ID').Value), '=', ',') + ' ' +
        //                                        ' group by SALE_ORDER_ID,sl_no) a where a.planchngid=b.plan_change_id and b.planned_amount > 0) ' +
        //                                        ' where case when payment_realize_date < sysdate and userid = ''Auto'' and (baseplan <> 1 or baseplan is null) then ''Auto_Paid'' else ''Base_Plan'' end = ''Auto_Paid'' ' +
        //                                        ' ) group by sale_order_id,invoice_id ';
        //                             RecordSet1 := SQLConnection.Execute(SQLQuery, RowCount1);
        //                             InvPayAmt := 0;
        //                             Tot_InvPayAmt := 0;
        //                             IF NOT ((RecordSet1.BOF) OR (RecordSet1.EOF)) THEN
        //                                 RecordSet1.MoveFirst;
        //                             WHILE NOT RecordSet1.EOF DO BEGIN
        //                                 InvPayAmt := 0;
        //                                 EVALUATE(InvPayAmt, FORMAT(RecordSet1.Fields.Item('planned_amount').Value));
        //                                 Tot_InvPayAmt := Tot_InvPayAmt + InvPayAmt;
        //                                 RowCount1 := RowCount1 + 1;
        //                                 RecordSet1.MoveNext;
        //                             END;
        //                             // End--Added By Pranavi on 03-Feb-2017 for not pay amount but place in today
        //                             Tot_Inv_Amt := Tot_Inv_Amt + InvAmt - Tot_InvPayAmt;
        //                             Tol_Inst_Recvbl_Amt := Tol_Inst_Recvbl_Amt + InvAmt - Tot_InvPayAmt;
        //                             RowCount := RowCount + 1;
        //                             RecordSet.MoveNext;
        //                         END;
        //                         Tot_Inv_Adv_Amts := 0;
        //                         Tmp_UnitPrice := 0;
        //                         Tmp_Adv_Perct := 0;
        //                         Tmp_Inv_Adv_Amt := 0;
        //                         Tmp_Inv_Qty := 0;
        //                         Tot_Inv_Adv_Amts := 0;
        //                         SQLQuery := 'select SALE_ORDER_ID,INVOICE_DATE,ERP_INVOICE_NO,LINE_NO,INVOICED_QTY,nvl(ADV_AMOUNT_CONSIDERED,0) ADV_AMOUNT_CONSIDERED from MRP_ARR_INVOICE where SALE_ORDER_ID  = ' +
        //                                     FORMAT(SaleOrderId) + ' and INVOICE_DATE = to_date(''' + FORMAT(SIH."Posting Date", 0, '<Day>-<Month Text,3>-<Year4>') + ''',''dd-mon-yyyy'') and ERP_INVOICE_NO = ''' +
        //                                     DELCHR(SIH."External Document No.", '=', ',') + ''' group by SALE_ORDER_ID,INVOICE_DATE,ERP_INVOICE_NO,LINE_NO,INVOICED_QTY,ADV_AMOUNT_CONSIDERED order by LINE_NO';
        //                         //MESSAGE(SQLQuery);
        //                         RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                         IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                             RecordSet.MoveFirst;
        //                         WHILE NOT RecordSet.EOF DO BEGIN   // invoice loop
        //                             Tmp_UnitPrice := 0;
        //                             Tmp_Adv_Perct := 0;
        //                             Tmp_Inv_Adv_Amt := 0;
        //                             Tmp_Inv_Qty := 0;
        //                             IF FORMAT(RecordSet.Fields.Item('ADV_AMOUNT_CONSIDERED').Value) <> '' THEN
        //                                 EVALUATE(Adv_Cons_Amt, FORMAT(RecordSet.Fields.Item('ADV_AMOUNT_CONSIDERED').Value))
        //                             ELSE
        //                                 Adv_Cons_Amt := 0;
        //                             SQLQuery := 'select nvl(unit_price,0) unit_price,nvl(advance_percntg,0) advance_percntg from mrp_sale_order_lines where sale_order_id = ' +
        //                                         FORMAT(SaleOrderId) + ' and LINE_NO = ' + DELCHR(FORMAT(RecordSet.Fields.Item('LINE_NO').Value), '=', ',');
        //                             //MESSAGE(SQLQuery);
        //                             RecordSet1 := SQLConnection.Execute(SQLQuery, RowCount1);
        //                             IF NOT ((RecordSet1.BOF) OR (RecordSet1.EOF)) THEN
        //                                 RecordSet1.MoveFirst;
        //                             WHILE NOT RecordSet1.EOF DO BEGIN
        //                                 EVALUATE(Tmp_UnitPrice, FORMAT(RecordSet1.Fields.Item('unit_price').Value));
        //                                 EVALUATE(Tmp_Adv_Perct, FORMAT(RecordSet1.Fields.Item('advance_percntg').Value));
        //                                 RowCount1 := RowCount1 + 1;
        //                                 RecordSet1.MoveNext;
        //                             END;
        //                             EVALUATE(Tmp_Inv_Qty, FORMAT(RecordSet.Fields.Item('INVOICED_QTY').Value));
        //                             Tmp_Inv_Adv_Amt := ROUND((Tmp_Inv_Qty * Tmp_UnitPrice * Tmp_Adv_Perct) / 100, 1, '=');
        //                             Tot_Inv_Adv_Amts := Tot_Inv_Adv_Amts + (Tmp_Inv_Adv_Amt - Adv_Cons_Amt);
        //                             RowCount := RowCount + 1;
        //                             RecordSet.MoveNext;
        //                         END;

        //                         IF Tot_Inv_Adv_Amts + Tot_Recvbl_Amt + Tol_Inst_Recvbl_Amt > 0 THEN BEGIN  // if Receivable amt exist
        //                             IF (Tot_Inv_Adv_Amts + Tot_Recvbl_Amt + Tol_Inst_Recvbl_Amt >= Amount) THEN BEGIN    // if Receivable amt > ERP_Paying Amt then only pay upto ERP_Paying Amt
        //                                 Pay_Amount := Amount;
        //                                 Amount := 0;
        //                             END
        //                             ELSE BEGIN                     // if Receivable amt < ERP_Paying Amt then only pay upto Receivable Amt
        //                                 Pay_Amount := Tot_Inv_Adv_Amts + Tot_Recvbl_Amt + Tol_Inst_Recvbl_Amt;
        //                                 Amount := Amount - Pay_Amount;
        //                             END;
        //                         END ELSE     // if there is no Receivable amt then no need to pay amt
        //                             Pay_Amount := 0;

        //                         IF ROUND(Pay_Amount, 1, '=') > 0 THEN BEGIN
        //                             /*
        //                             SQLQuery:= 'select nvl(ARR_PAYMENT_SEQ.NEXTVAL,1) payid from dual';
        //                             //MESSAGE(SQLQuery);
        //                             RecordSet := SQLConnection.Execute(SQLQuery,RowCount);
        //                             IF NOT( (RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                               RecordSet.MoveFirst;
        //                             WHILE NOT RecordSet.EOF DO
        //                             BEGIN
        //                               EVALUATE(PaymentId,FORMAT(RecordSet.Fields.Item('payid').Value));
        //                               RowCount:=RowCount+1;
        //                               RecordSet.MoveNext;
        //                             END;
        //                             // insert payment record
        //                             SQLQuery:= 'insert into MRP_ARR_PAYMENT(AR_PAYMENT_ID,SALE_ORDER_ID,PAYMENT_DATE,AMOUNT,USERID,CREATION_DATE) values('+FORMAT(PaymentId)+', '+
        //                                        FORMAT(SaleOrderId)+', to_date('''+FORMAT(CLE."Posting Date",0,'<Day>-<Month Text,3>-<Year4>')+''',''dd-mon-yyyy''),'+
        //                                        DELCHR(FORMAT(ROUND(Pay_Amount,1,'=')),'=',',')+', ''Auto'', sysdate)';
        //                             //MESSAGE(SQLQuery);
        //                             SQLConnection.Execute(SQLQuery);
        //                             */   // Commented By Pranavi on 03-Feb-2017 for not pay amount but place in today
        //                             Paid_Amt := Pay_Amount;
        //                             // **************************  START--Paying Advance_Considerable first ******************************
        //                             SQLQuery := 'select * from MRP_ARR_INVOICE where SALE_ORDER_ID  = ' + FORMAT(SaleOrderId) + ' and INVOICE_DATE = to_date(''' +
        //                                         FORMAT(SIH."Posting Date", 0, '<Day>-<Month Text,3>-<Year4>') +
        //                                         ''',''dd-mon-yyyy'') and ERP_INVOICE_NO = ''' + DELCHR(SIH."External Document No.", '=', ',') + ''' order by LINE_NO,AR_INVOICE_ID';
        //                             //MESSAGE(SQLQuery);
        //                             RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                             IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                                 RecordSet.MoveFirst;
        //                             WHILE NOT RecordSet.EOF DO BEGIN   // invoice loop
        //                                 InvoiceAmt := 0;
        //                                 Adv_Cons_Amt := 0;
        //                                 Tmp_UnitPrice := 0;
        //                                 Tmp_Adv_Perct := 0;
        //                                 Tmp_Inv_Qty := 0;
        //                                 Tmp_Inv_Adv_Amt := 0;
        //                                 IF FORMAT(RecordSet.Fields.Item('amount').Value) <> '' THEN
        //                                     EVALUATE(InvoiceAmt, FORMAT(RecordSet.Fields.Item('amount').Value))
        //                                 ELSE
        //                                     InvoiceAmt := 0;
        //                                 //EVALUATE(InvoiceAmt,FORMAT(RecordSet.Fields.Item('amount').Value));
        //                                 IF FORMAT(RecordSet.Fields.Item('ADV_AMOUNT_CONSIDERED').Value) <> '' THEN
        //                                     EVALUATE(Adv_Cons_Amt, FORMAT(RecordSet.Fields.Item('ADV_AMOUNT_CONSIDERED').Value))
        //                                 ELSE
        //                                     Adv_Cons_Amt := 0;
        //                                 SQLQuery := 'select nvl(sum(PLANNED_AMOUNT),0) PLANNED_AMOUNT from MRP_PLAN_CHANGES where PLAN_CHANGE_ID in ( ' +
        //                                            'select  max(pl.PLAN_CHANGE_ID) from  MRP_PLAN_CHANGES pl ,(select sl_no,SALE_ORDER_ID,PLAN_CHANGE_ID ' +
        //                                            'from MRP_PLAN_CHANGES pl1 where planned_amount= 0  and payment_id is not null and invoice_id = ' +
        //                                            DELCHR(FORMAT(RecordSet.Fields.Item('AR_INVOICE_ID').Value), '=', ',') + ' and SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ') a ' +
        //                                            'where  a.sl_no=pl.sl_no and pl.PLAN_CHANGE_ID < a.PLAN_CHANGE_ID and a.SALE_ORDER_ID=pl.SALE_ORDER_ID) ';
        //                                 //MESSAGE(SQLQuery);
        //                                 RecordSet1 := SQLConnection.Execute(SQLQuery, RowCount1);
        //                                 InvPayAmt := 0;
        //                                 Tot_InvPayAmt := 0;
        //                                 IF NOT ((RecordSet1.BOF) OR (RecordSet1.EOF)) THEN
        //                                     RecordSet1.MoveFirst;
        //                                 WHILE NOT RecordSet1.EOF DO BEGIN
        //                                     InvPayAmt := 0;
        //                                     EVALUATE(InvPayAmt, FORMAT(RecordSet1.Fields.Item('planned_amount').Value));
        //                                     Tot_InvPayAmt := Tot_InvPayAmt + InvPayAmt;
        //                                     RowCount1 := RowCount1 + 1;
        //                                     RecordSet1.MoveNext;
        //                                 END;
        //                                 // Start--Added By Pranavi on 03-Feb-2017 for not pay amount but place in today
        //                                 SQLQuery := 'select nvl(sum(planned_amount),0) planned_amount from ( ' +
        //                                            ' select plan_change_id, sl_no,sale_order_id,payment_realize_date,planned_amount,response_section,remarks,creation_date,userid,payment_id,baseplan,splitedfrom,invoice_id,planchngid, ' +
        //                                            ' case when payment_realize_date < sysdate and userid = ''Auto'' and (baseplan <> 1 or baseplan is null) then ''Auto_Paid'' else ''Base_Plan'' end as Plan_Type ' +
        //                                            ' from (select * from  MRP_PLAN_CHANGES b, (select max(plan_change_id) PlanChngId from MRP_PLAN_CHANGES where ' +
        //                                            ' SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ' and invoice_id = ' + DELCHR(FORMAT(RecordSet.Fields.Item('AR_INVOICE_ID').Value), '=', ',') + ' ' +
        //                                            ' group by SALE_ORDER_ID,sl_no) a where a.planchngid=b.plan_change_id and b.planned_amount > 0) ' +
        //                                            ' where case when payment_realize_date < sysdate and userid = ''Auto'' and (baseplan <> 1 or baseplan is null) then ''Auto_Paid'' else ''Base_Plan'' end = ''Auto_Paid'' ' +
        //                                            ' ) group by sale_order_id,invoice_id ';
        //                                 RecordSet1 := SQLConnection.Execute(SQLQuery, RowCount1);
        //                                 InvPayAmt := 0;
        //                                 Tot_InvPayAmt := 0;
        //                                 IF NOT ((RecordSet1.BOF) OR (RecordSet1.EOF)) THEN
        //                                     RecordSet1.MoveFirst;
        //                                 WHILE NOT RecordSet1.EOF DO BEGIN
        //                                     InvPayAmt := 0;
        //                                     EVALUATE(InvPayAmt, FORMAT(RecordSet1.Fields.Item('planned_amount').Value));
        //                                     Tot_InvPayAmt := Tot_InvPayAmt + InvPayAmt;
        //                                     RowCount1 := RowCount1 + 1;
        //                                     RecordSet1.MoveNext;
        //                                 END;
        //                                 // End--Added By Pranavi on 03-Feb-2017 for not pay amount but place in today
        //                                 InvoiceAmt := InvoiceAmt - Tot_InvPayAmt;
        //                                 SQLQuery := 'select nvl(unit_price,0) unit_price,nvl(advance_percntg,0) advance_percntg from mrp_sale_order_lines where sale_order_id = ' +
        //                                             FORMAT(SaleOrderId) + ' and LINE_NO = ' + DELCHR(FORMAT(RecordSet.Fields.Item('LINE_NO').Value), '=', ',');
        //                                 //MESSAGE(SQLQuery);
        //                                 RecordSet1 := SQLConnection.Execute(SQLQuery, RowCount1);
        //                                 IF NOT ((RecordSet1.BOF) OR (RecordSet1.EOF)) THEN
        //                                     RecordSet1.MoveFirst;
        //                                 WHILE NOT RecordSet1.EOF DO BEGIN
        //                                     EVALUATE(Tmp_UnitPrice, FORMAT(RecordSet1.Fields.Item('unit_price').Value));
        //                                     EVALUATE(Tmp_Adv_Perct, FORMAT(RecordSet1.Fields.Item('advance_percntg').Value));
        //                                     RowCount1 := RowCount1 + 1;
        //                                     RecordSet1.MoveNext;
        //                                 END;
        //                                 EVALUATE(Tmp_Inv_Qty, FORMAT(RecordSet.Fields.Item('INVOICED_QTY').Value));
        //                                 Tmp_Inv_Adv_Amt := ROUND((Tmp_Inv_Qty * Tmp_UnitPrice * Tmp_Adv_Perct) / 100, 1, '=');

        //                                 Tmp_Aply_Amt := 0;

        //                                 IF ROUND(Tmp_Inv_Adv_Amt - Adv_Cons_Amt, 1, '=') > 0 THEN BEGIN
        //                                     Tmp_Aply_Amt := 0;
        //                                     IF ROUND(Tmp_Inv_Adv_Amt - Adv_Cons_Amt, 1, '=') > ROUND(Pay_Amount, 1, '=') THEN
        //                                         Tmp_Aply_Amt := ROUND(Pay_Amount, 1, '=')
        //                                     ELSE
        //                                         Tmp_Aply_Amt := ROUND(Tmp_Inv_Adv_Amt - Adv_Cons_Amt, 1, '=');
        //                                     Tmp_Aply_Amt_Tot := Tmp_Aply_Amt_Tot + Tmp_Aply_Amt;
        //                                     IF Tmp_Aply_Amt > 0 THEN BEGIN
        //                                         SQLQuery := 'update mrp_arr_invoice set ADV_AMOUNT_CONSIDERED = nvl(ADV_AMOUNT_CONSIDERED,0) + ' + DELCHR(FORMAT(ROUND(Tmp_Aply_Amt, 1, '=')), '=', ',') + ' where SALE_ORDER_ID = ' +
        //                                                    FORMAT(SaleOrderId) + ' and ERP_INVOICE_NO = ''' + DELCHR(FORMAT(RecordSet.Fields.Item('ERP_INVOICE_NO').Value), '=', ',') +
        //                                                    ''' and LINE_NO = ' + DELCHR(FORMAT(RecordSet.Fields.Item('LINE_NO').Value), '=', ',');
        //                                         SQLConnection.Execute(SQLQuery);
        //                                         SQLQuery := 'update mrp_arr_install_invoice set ADV_AMOUNT_CONSIDERED = nvl(ADV_AMOUNT_CONSIDERED,0) + ' + DELCHR(FORMAT(ROUND(Tmp_Aply_Amt, 1, '=')), '=', ',') + ' where SALE_ORDER_ID = ' +
        //                                                    FORMAT(SaleOrderId) + ' and ERP_INVOICE_NO = ''' + DELCHR(FORMAT(RecordSet.Fields.Item('ERP_INVOICE_NO').Value), '=', ',') +
        //                                                    ''' and LINE_NO = ' + DELCHR(FORMAT(RecordSet.Fields.Item('LINE_NO').Value), '=', ',');
        //                                         SQLConnection.Execute(SQLQuery);
        //                                         Pay_Amount := Pay_Amount - Tmp_Aply_Amt;
        //                                     END;
        //                                 END;
        //                                 RowCount := RowCount + 1;
        //                                 RecordSet.MoveNext;
        //                             END;  // end of receivable invoices loop
        //                                   // ******* Start--Checking Adv_Considerable amt in Inst_Rentention Invoice ********
        //                             SQLQuery := 'select AR_INVOICE_ID, SALE_ORDER_ID,INVOICE_DATE,ERP_INVOICE_NO,LINE_NO,INVOICED_QTY,nvl(ADV_AMOUNT_CONSIDERED,0) ADV_AMOUNT_CONSIDERED from MRP_ARR_INSTALL_INVOICE where ' +
        //                                         ' SALE_ORDER_ID  = ' + FORMAT(SaleOrderId) + ' and INVOICE_DATE = to_date(''' + FORMAT(SIH."Posting Date", 0, '<Day>-<Month Text,3>-<Year4>') +
        //                                         ''',''dd-mon-yyyy'') and ERP_INVOICE_NO = ''' + DELCHR(SIH."External Document No.", '=', ',') + ''' and AMOUNTTYPE = ''R'' and amount is not null ' +
        //                                         ' group by AR_INVOICE_ID, SALE_ORDER_ID,INVOICE_DATE,ERP_INVOICE_NO,LINE_NO,INVOICED_QTY,ADV_AMOUNT_CONSIDERED order by LINE_NO ';
        //                             //MESSAGE(SQLQuery);
        //                             RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                             IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                                 RecordSet.MoveFirst;
        //                             WHILE NOT RecordSet.EOF DO BEGIN   // inst invoice loop
        //                                 InvoiceAmt := 0;
        //                                 Adv_Cons_Amt := 0;
        //                                 Tmp_UnitPrice := 0;
        //                                 Tmp_Adv_Perct := 0;
        //                                 Tmp_Inv_Qty := 0;
        //                                 Tmp_Inv_Adv_Amt := 0;
        //                                 //EVALUATE(InvoiceAmt,FORMAT(RecordSet.Fields.Item('amount').Value));

        //                                 IF FORMAT(RecordSet.Fields.Item('ADV_AMOUNT_CONSIDERED').Value) <> '' THEN
        //                                     EVALUATE(Adv_Cons_Amt, FORMAT(RecordSet.Fields.Item('ADV_AMOUNT_CONSIDERED').Value))
        //                                 ELSE
        //                                     Adv_Cons_Amt := 0;
        //                                 SQLQuery := 'select nvl(sum(PLANNED_AMOUNT),0) PLANNED_AMOUNT   from MRP_INSTAL_PLAN_CHANGES where PLAN_CHANGE_ID in ( ' +
        //                                            'select  max(pl.PLAN_CHANGE_ID) from  MRP_INSTAL_PLAN_CHANGES pl ,(select sl_no,SALE_ORDER_ID,PLAN_CHANGE_ID ' +
        //                                            'from MRP_INSTAL_PLAN_CHANGES pl1 where planned_amount= 0  and payment_id is not null and invoice_id = ' +
        //                                            DELCHR(FORMAT(RecordSet.Fields.Item('AR_INVOICE_ID').Value), '=', ',') + ' and SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ') a ' +
        //                                            'where  a.sl_no=pl.sl_no and pl.PLAN_CHANGE_ID < a.PLAN_CHANGE_ID and a.SALE_ORDER_ID=pl.SALE_ORDER_ID) ';
        //                                 //MESSAGE(SQLQuery);
        //                                 RecordSet1 := SQLConnection.Execute(SQLQuery, RowCount1);
        //                                 InvPayAmt := 0;
        //                                 Tot_InvPayAmt := 0;
        //                                 IF NOT ((RecordSet1.BOF) OR (RecordSet1.EOF)) THEN
        //                                     RecordSet1.MoveFirst;
        //                                 WHILE NOT RecordSet1.EOF DO BEGIN
        //                                     InvPayAmt := 0;
        //                                     EVALUATE(InvPayAmt, FORMAT(RecordSet1.Fields.Item('planned_amount').Value));
        //                                     Tot_InvPayAmt := Tot_InvPayAmt + InvPayAmt;
        //                                     RowCount1 := RowCount1 + 1;
        //                                     RecordSet1.MoveNext;
        //                                 END;
        //                                 // Start--Added By Pranavi on 03-Feb-2017 for not pay amount but place in today
        //                                 SQLQuery := 'select nvl(sum(planned_amount),0) planned_amount from ( ' +
        //                                            ' select plan_change_id, sl_no,sale_order_id,payment_realize_date,planned_amount,response_section,remarks,creation_date,userid,payment_id,baseplan,splitedfrom,invoice_id,planchngid, ' +
        //                                            ' case when payment_realize_date < sysdate and userid = ''Auto'' and (baseplan <> 1 or baseplan is null) then ''Auto_Paid'' else ''Base_Plan'' end as Plan_Type ' +
        //                                            ' from (select * from  MRP_INSTAL_PLAN_CHANGES b, (select max(plan_change_id) PlanChngId from MRP_INSTAL_PLAN_CHANGES where ' +
        //                                            ' SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ' and invoice_id = ' + DELCHR(FORMAT(RecordSet.Fields.Item('AR_INVOICE_ID').Value), '=', ',') + ' ' +
        //                                            ' group by SALE_ORDER_ID,sl_no) a where a.planchngid=b.plan_change_id and b.planned_amount > 0) ' +
        //                                            ' where case when payment_realize_date < sysdate and userid = ''Auto'' and (baseplan <> 1 or baseplan is null) then ''Auto_Paid'' else ''Base_Plan'' end = ''Auto_Paid'' ' +
        //                                            ' ) group by sale_order_id,invoice_id ';
        //                                 RecordSet1 := SQLConnection.Execute(SQLQuery, RowCount1);
        //                                 InvPayAmt := 0;
        //                                 Tot_InvPayAmt := 0;
        //                                 IF NOT ((RecordSet1.BOF) OR (RecordSet1.EOF)) THEN
        //                                     RecordSet1.MoveFirst;
        //                                 WHILE NOT RecordSet1.EOF DO BEGIN
        //                                     InvPayAmt := 0;
        //                                     EVALUATE(InvPayAmt, FORMAT(RecordSet1.Fields.Item('planned_amount').Value));
        //                                     Tot_InvPayAmt := Tot_InvPayAmt + InvPayAmt;
        //                                     RowCount1 := RowCount1 + 1;
        //                                     RecordSet1.MoveNext;
        //                                 END;
        //                                 // End--Added By Pranavi on 03-Feb-2017 for not pay amount but place in today
        //                                 InvoiceAmt := InvoiceAmt - Tot_InvPayAmt;

        //                                 SQLQuery := 'select nvl(unit_price,0) unit_price,nvl(advance_percntg,0) advance_percntg from mrp_sale_order_lines where sale_order_id = ' +
        //                                             FORMAT(SaleOrderId) + ' and LINE_NO = ' + DELCHR(FORMAT(RecordSet.Fields.Item('LINE_NO').Value), '=', ',');
        //                                 //MESSAGE(SQLQuery);
        //                                 RecordSet1 := SQLConnection.Execute(SQLQuery, RowCount1);
        //                                 IF NOT ((RecordSet1.BOF) OR (RecordSet1.EOF)) THEN
        //                                     RecordSet1.MoveFirst;
        //                                 WHILE NOT RecordSet1.EOF DO BEGIN
        //                                     EVALUATE(Tmp_UnitPrice, FORMAT(RecordSet1.Fields.Item('unit_price').Value));
        //                                     EVALUATE(Tmp_Adv_Perct, FORMAT(RecordSet1.Fields.Item('advance_percntg').Value));
        //                                     RowCount1 := RowCount1 + 1;
        //                                     RecordSet1.MoveNext;
        //                                 END;
        //                                 Tmp_Aply_Amt := 0;
        //                                 EVALUATE(Tmp_Inv_Qty, FORMAT(RecordSet.Fields.Item('INVOICED_QTY').Value));
        //                                 Tmp_Inv_Adv_Amt := (Tmp_Inv_Qty * Tmp_UnitPrice * Tmp_Adv_Perct) / 100;
        //                                 IF ROUND(Tmp_Inv_Adv_Amt - Adv_Cons_Amt, 1, '=') > 0 THEN BEGIN
        //                                     Tmp_Aply_Amt := 0;
        //                                     IF ROUND(Tmp_Inv_Adv_Amt - Adv_Cons_Amt, 1, '=') > ROUND(Pay_Amount, 1, '=') THEN
        //                                         Tmp_Aply_Amt := ROUND(Pay_Amount, 1, '=')
        //                                     ELSE
        //                                         Tmp_Aply_Amt := ROUND(Tmp_Inv_Adv_Amt - Adv_Cons_Amt, 1, '=');
        //                                     Tmp_Aply_Amt_Tot := Tmp_Aply_Amt_Tot + Tmp_Aply_Amt;
        //                                     IF Tmp_Aply_Amt > 0 THEN BEGIN
        //                                         SQLQuery := 'update mrp_arr_invoice set ADV_AMOUNT_CONSIDERED = nvl(ADV_AMOUNT_CONSIDERED,0) + ' + DELCHR(FORMAT(ROUND(Tmp_Aply_Amt, 1, '=')), '=', ',') + ' where SALE_ORDER_ID = ' +
        //                                                    FORMAT(SaleOrderId) + ' and ERP_INVOICE_NO = ''' + DELCHR(FORMAT(RecordSet.Fields.Item('ERP_INVOICE_NO').Value), '=', ',') +
        //                                                    ''' and LINE_NO = ' + DELCHR(FORMAT(RecordSet.Fields.Item('LINE_NO').Value), '=', ',');
        //                                         SQLConnection.Execute(SQLQuery);
        //                                         SQLQuery := 'update mrp_arr_install_invoice set ADV_AMOUNT_CONSIDERED = nvl(ADV_AMOUNT_CONSIDERED,0) + ' + DELCHR(FORMAT(ROUND(Tmp_Aply_Amt, 1, '=')), '=', ',') + ' where SALE_ORDER_ID = ' +
        //                                                    FORMAT(SaleOrderId) + ' and ERP_INVOICE_NO = ''' + DELCHR(FORMAT(RecordSet.Fields.Item('ERP_INVOICE_NO').Value), '=', ',') +
        //                                                    ''' and LINE_NO = ' + DELCHR(FORMAT(RecordSet.Fields.Item('LINE_NO').Value), '=', ',');
        //                                         SQLConnection.Execute(SQLQuery);
        //                                         Pay_Amount := Pay_Amount - Tmp_Aply_Amt;
        //                                     END;
        //                                 END;
        //                                 RowCount := RowCount + 1;
        //                                 RecordSet.MoveNext;
        //                             END;  // end of inst receivable invoices loop
        //                                   // ******* END--Checking Adv_Considerable amt in Inst_Rentention Invoice **********
        //                                   // **************************  END--Paying Advance_Considerable first ******************************

        //                             SQLQuery := 'select * from MRP_ARR_INVOICE where SALE_ORDER_ID  = ' + FORMAT(SaleOrderId) + ' and INVOICE_DATE = to_date(''' +
        //                                         FORMAT(SIH."Posting Date", 0, '<Day>-<Month Text,3>-<Year4>') +
        //                                         ''',''dd-mon-yyyy'') and ERP_INVOICE_NO = ''' + DELCHR(SIH."External Document No.", '=', ',') + ''' order by LINE_NO,AR_INVOICE_ID';
        //                             //MESSAGE(SQLQuery);
        //                             RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                             IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                                 RecordSet.MoveFirst;
        //                             WHILE NOT RecordSet.EOF DO BEGIN   // invoice loop
        //                                 InvoiceAmt := 0;
        //                                 Adv_Cons_Amt := 0;
        //                                 Tmp_UnitPrice := 0;
        //                                 Tmp_Adv_Perct := 0;
        //                                 Tmp_Inv_Qty := 0;
        //                                 Tmp_Inv_Adv_Amt := 0;
        //                                 IF FORMAT(RecordSet.Fields.Item('amount').Value) <> '' THEN
        //                                     EVALUATE(InvoiceAmt, FORMAT(RecordSet.Fields.Item('amount').Value))
        //                                 ELSE
        //                                     InvoiceAmt := 0;
        //                                 //EVALUATE(InvoiceAmt,FORMAT(RecordSet.Fields.Item('amount').Value));
        //                                 IF FORMAT(RecordSet.Fields.Item('ADV_AMOUNT_CONSIDERED').Value) <> '' THEN
        //                                     EVALUATE(Adv_Cons_Amt, FORMAT(RecordSet.Fields.Item('ADV_AMOUNT_CONSIDERED').Value))
        //                                 ELSE
        //                                     Adv_Cons_Amt := 0;
        //                                 SQLQuery := 'select nvl(sum(PLANNED_AMOUNT),0) PLANNED_AMOUNT from MRP_PLAN_CHANGES where PLAN_CHANGE_ID in ( ' +
        //                                            'select  max(pl.PLAN_CHANGE_ID) from  MRP_PLAN_CHANGES pl ,(select sl_no,SALE_ORDER_ID,PLAN_CHANGE_ID ' +
        //                                            'from MRP_PLAN_CHANGES pl1 where planned_amount= 0  and payment_id is not null and invoice_id = ' +
        //                                            DELCHR(FORMAT(RecordSet.Fields.Item('AR_INVOICE_ID').Value), '=', ',') + ' and SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ') a ' +
        //                                            'where  a.sl_no=pl.sl_no and pl.PLAN_CHANGE_ID < a.PLAN_CHANGE_ID and a.SALE_ORDER_ID=pl.SALE_ORDER_ID) ';
        //                                 //MESSAGE(SQLQuery);
        //                                 RecordSet1 := SQLConnection.Execute(SQLQuery, RowCount1);
        //                                 InvPayAmt := 0;
        //                                 Tot_InvPayAmt := 0;
        //                                 IF NOT ((RecordSet1.BOF) OR (RecordSet1.EOF)) THEN
        //                                     RecordSet1.MoveFirst;
        //                                 WHILE NOT RecordSet1.EOF DO BEGIN
        //                                     InvPayAmt := 0;
        //                                     EVALUATE(InvPayAmt, FORMAT(RecordSet1.Fields.Item('planned_amount').Value));
        //                                     Tot_InvPayAmt := Tot_InvPayAmt + InvPayAmt;
        //                                     RowCount1 := RowCount1 + 1;
        //                                     RecordSet1.MoveNext;
        //                                 END;
        //                                 // Start--Added By Pranavi on 03-Feb-2017 for not pay amount but place in today
        //                                 SQLQuery := 'select nvl(sum(planned_amount),0) planned_amount from ( ' +
        //                                            ' select plan_change_id, sl_no,sale_order_id,payment_realize_date,planned_amount,response_section,remarks,creation_date,userid,payment_id,baseplan,splitedfrom,invoice_id,planchngid, ' +
        //                                            ' case when payment_realize_date < sysdate and userid = ''Auto'' and (baseplan <> 1 or baseplan is null) then ''Auto_Paid'' else ''Base_Plan'' end as Plan_Type ' +
        //                                            ' from (select * from  MRP_PLAN_CHANGES b, (select max(plan_change_id) PlanChngId from MRP_PLAN_CHANGES where ' +
        //                                            ' SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ' and invoice_id = ' + DELCHR(FORMAT(RecordSet.Fields.Item('AR_INVOICE_ID').Value), '=', ',') + ' ' +
        //                                            ' group by SALE_ORDER_ID,sl_no) a where a.planchngid=b.plan_change_id and b.planned_amount > 0) ' +
        //                                            ' where case when payment_realize_date < sysdate and userid = ''Auto'' and (baseplan <> 1 or baseplan is null) then ''Auto_Paid'' else ''Base_Plan'' end = ''Auto_Paid'' ' +
        //                                            ' ) group by sale_order_id,invoice_id ';
        //                                 RecordSet1 := SQLConnection.Execute(SQLQuery, RowCount1);
        //                                 InvPayAmt := 0;
        //                                 Tot_InvPayAmt := 0;
        //                                 IF NOT ((RecordSet1.BOF) OR (RecordSet1.EOF)) THEN
        //                                     RecordSet1.MoveFirst;
        //                                 WHILE NOT RecordSet1.EOF DO BEGIN
        //                                     InvPayAmt := 0;
        //                                     EVALUATE(InvPayAmt, FORMAT(RecordSet1.Fields.Item('planned_amount').Value));
        //                                     Tot_InvPayAmt := Tot_InvPayAmt + InvPayAmt;
        //                                     RowCount1 := RowCount1 + 1;
        //                                     RecordSet1.MoveNext;
        //                                 END;
        //                                 // End--Added By Pranavi on 03-Feb-2017 for not pay amount but place in today
        //                                 InvoiceAmt := InvoiceAmt - Tot_InvPayAmt;
        //                                 /*
        //                                 SQLQuery:= 'select * from  MRP_PLAN_CHANGES b, (select SALE_ORDER_ID,sl_no,max(plan_change_id) PlanChngId from MRP_PLAN_CHANGES where '+
        //                                            ' SALE_ORDER_ID = '+FORMAT(SaleOrderId)+' and invoice_id = '+DELCHR(FORMAT(RecordSet.Fields.Item('AR_INVOICE_ID').Value),'=',',')+
        //                                            ' group by SALE_ORDER_ID,sl_no) a where a.planchngid=b.plan_change_id and b.planned_amount > 0';
        //                                 */    // Commented By Pranavi on 03-Feb-2017 for not pay amount but place in today
        //                                 SQLQuery := 'select plan_change_id, sl_no,sale_order_id,payment_realize_date,planned_amount,response_section,remarks,creation_date,userid,payment_id,baseplan,splitedfrom,invoice_id,planchngid, ' +
        //                                            ' case when payment_realize_date < sysdate and userid = ''Auto'' and (baseplan <> 1 or baseplan is null) then ''Auto_Paid'' else ''Base_Plan'' end as Plan_Type ' +
        //                                            ' from (select * from  MRP_PLAN_CHANGES b, (select max(plan_change_id) PlanChngId from MRP_PLAN_CHANGES where ' +
        //                                            ' SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ' and invoice_id = ' + DELCHR(FORMAT(RecordSet.Fields.Item('AR_INVOICE_ID').Value), '=', ',') + ' ' +
        //                                            ' group by SALE_ORDER_ID,sl_no) a where a.planchngid=b.plan_change_id and b.planned_amount > 0) ' +
        //                                            ' where case when payment_realize_date < sysdate and userid = ''Auto'' and (baseplan <> 1 or baseplan is null) then ''Auto_Paid'' else ''Base_Plan'' end = ''Base_Plan''';
        //                                 //MESSAGE(SQLQuery);
        //                                 RecordSet1 := SQLConnection.Execute(SQLQuery, RowCount1);
        //                                 PlndAmnt := 0;
        //                                 PlnndAmt := 0;
        //                                 IF NOT ((RecordSet1.BOF) OR (RecordSet1.EOF)) THEN
        //                                     RecordSet1.MoveFirst;
        //                                 WHILE NOT RecordSet1.EOF DO BEGIN   // receivables pln changes loop begin
        //                                     EVALUATE(PlndAmnt, FORMAT(RecordSet1.Fields.Item('planned_amount').Value));
        //                                     PlnndAmt := PlnndAmt + PlndAmnt;
        //                                     IF (ROUND(Pay_Amount, 1, '=') > 0) AND (ROUND(PlndAmnt, 1, '=') > 0) THEN BEGIN
        //                                         IF (ROUND(Pay_Amount, 1, '=') >= ROUND(PlndAmnt, 1, '=')) THEN  // if paymentamount >= planned amount
        //                                         BEGIN
        //                                             /*
        //                                             SQLQuery:= 'insert into MRP_PLAN_CHANGES(PLAN_CHANGE_ID,SL_NO,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,RESPONSE_SECTION,CREATION_DATE, '+
        //                                                        ' USERID,PAYMENT_ID,INVOICE_ID) values(PLAN_CHANGE_SEQ.NEXTVAL,'+DELCHR(FORMAT(RecordSet1.Fields.Item('sl_no').Value),'=',',')+','+FORMAT(SaleOrderId)+
        //                                                        ', sysdate,0,''SAL'',sysdate,''Auto'','+FORMAT(PaymentId)+','+DELCHR(FORMAT(RecordSet1.Fields.Item('invoice_id').Value),'=',',')+')';
        //                                             */   // Commented By Pranavi on 03-Feb-2017 for not pay amount but place in today
        //                                             SQLQuery := 'insert into MRP_PLAN_CHANGES(PLAN_CHANGE_ID,SL_NO,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,RESPONSE_SECTION,CREATION_DATE, ' +
        //                                                        ' USERID,PAYMENT_ID,INVOICE_ID,REMARKS) values(PLAN_CHANGE_SEQ.NEXTVAL,' + DELCHR(FORMAT(RecordSet1.Fields.Item('sl_no').Value), '=', ',') + ',' + FORMAT(SaleOrderId) +
        //                                                        ', sysdate-8,' + DELCHR(FORMAT(ROUND(PlndAmnt, 1, '=')), '=', ',') + ',''SAL'',sysdate,''Auto'',' + FORMAT(PaymentId) + ', ' +
        //                                                        DELCHR(FORMAT(RecordSet1.Fields.Item('invoice_id').Value), '=', ',') + ', ''Amount Coming TODAY'')';
        //                                             //MESSAGE(SQLQuery);
        //                                             SQLConnection.Execute(SQLQuery);
        //                                             Pay_Amount := Pay_Amount - PlndAmnt;
        //                                         END ELSE BEGIN  // else part of if paymentamount >= planned amount
        //                                             SQLQuery := 'select nvl(max(sl_no)+1,1) newslno from MRP_PLAN_CHANGES where SALE_ORDER_ID = ' + FORMAT(SaleOrderId);
        //                                             /*' and INVOICE_ID = '+DELCHR(FORMAT(RecordSet1.Fields.Item('invoice_id').Value),'=',',');*///commented by pranavi on 31-dec-2016
        //                                                                                                                                         //MESSAGE(SQLQuery);
        //                                             RecordSet2 := SQLConnection.Execute(SQLQuery, RowCount2);
        //                                             IF NOT ((RecordSet2.BOF) OR (RecordSet2.EOF)) THEN
        //                                                 RecordSet2.MoveFirst;
        //                                             WHILE NOT RecordSet2.EOF DO BEGIN
        //                                                 EVALUATE(Temp_SL_No, FORMAT(RecordSet2.Fields.Item('newslno').Value));
        //                                                 RowCount2 := RowCount2 + 1;
        //                                                 RecordSet2.MoveNext;
        //                                             END;
        //                                             SQLQuery := 'insert into MRP_PLAN_CHANGES(PLAN_CHANGE_ID,SL_NO,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,RESPONSE_SECTION, ' +
        //                                                        ' CREATION_DATE,USERID,INVOICE_ID,SPLITEDFROM,REMARKS) values(PLAN_CHANGE_SEQ.NEXTVAL,' + DELCHR(FORMAT(Temp_SL_No), '=', ',') + ',' + FORMAT(SaleOrderId) + ',sysdate-8, ' +
        //                                                        DELCHR(FORMAT(ROUND(Pay_Amount, 1, '=')), '=', ',') + ',''SAL'',sysdate,''Auto'', ' + DELCHR(FORMAT(RecordSet1.Fields.Item('invoice_id').Value), '=', ',') +
        //                                                        ', ' + DELCHR(FORMAT(RecordSet1.Fields.Item('SL_NO').Value), '=', ',') + ', ''Amount Coming TODAY'')';
        //                                             //MESSAGE(SQLQuery);
        //                                             SQLConnection.Execute(SQLQuery);
        //                                             /*
        //                                             SQLQuery:= 'insert into MRP_PLAN_CHANGES(PLAN_CHANGE_ID,SL_NO,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,RESPONSE_SECTION, '+
        //                                                        ' CREATION_DATE,USERID,PAYMENT_ID,INVOICE_ID) values(PLAN_CHANGE_SEQ.NEXTVAL,'+DELCHR(FORMAT(Temp_SL_No),'=',',')+','+FORMAT(SaleOrderId)+
        //                                                        ', sysdate,0,''SAL'',sysdate,''Auto'','+DELCHR(FORMAT(PaymentId),'=',',')+','+DELCHR(FORMAT(RecordSet1.Fields.Item('invoice_id').Value),'=',',')+')';
        //                                             //MESSAGE(SQLQuery);
        //                                             SQLConnection.Execute(SQLQuery);
        //                                             */   // Commented By Pranavi on 03-Feb-2017 for not pay amount but place in today
        //                                             SQLQuery := 'update MRP_PLAN_CHANGES set PLANNED_AMOUNT = ' + DELCHR(FORMAT(ROUND(PlndAmnt - Pay_Amount, 1, '=')), '=', ',') + ' where PLAN_CHANGE_ID = ' +
        //                                                        DELCHR(FORMAT(RecordSet1.Fields.Item('PLAN_CHANGE_ID').Value), '=', ',');
        //                                             //MESSAGE(SQLQuery);
        //                                             SQLConnection.Execute(SQLQuery);
        //                                             Pay_Amount := 0;
        //                                         END;  //end of else part of if paymentamount >= planned amount
        //                                     END; // end of if paymentamount > 0
        //                                     RowCount1 := RowCount1 + 1;
        //                                     RecordSet1.MoveNext;
        //                                 END;  // end of receivables pln changes loop
        //                                 temppp_amt := 0;
        //                                 IF (ROUND(InvoiceAmt, 1, '=') > ROUND(PlnndAmt, 1, '=')) AND (ROUND(Pay_Amount, 1, '=') > 0) THEN BEGIN
        //                                     IF ROUND(Pay_Amount, 1, '=') >= ROUND(InvoiceAmt - PlnndAmt, 1, '=') THEN BEGIN
        //                                         temppp_amt := InvoiceAmt - PlnndAmt;
        //                                         Pay_Amount := InvoiceAmt - PlnndAmt;
        //                                     END ELSE BEGIN
        //                                         temppp_amt := Pay_Amount;
        //                                         Pay_Amount := 0;
        //                                     END;
        //                                     IF temppp_amt > 0 THEN BEGIN
        //                                         SQLQuery := 'insert into MRP_PLAN_CHANGES(PLAN_CHANGE_ID,SL_NO,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,RESPONSE_SECTION, ' +
        //                                                    ' CREATION_DATE,USERID,INVOICE_ID,REMARKS) values(PLAN_CHANGE_SEQ.NEXTVAL,(SELECT nvl(MAX(sl_no)+1,1) from MRP_PLAN_CHANGES where sale_order_id = ' +
        //                                                    FORMAT(SaleOrderId) + ' and invoice_id = ' + DELCHR(FORMAT(RecordSet.Fields.Item('ar_invoice_id').Value), '=', ',') + '),' + FORMAT(SaleOrderId) + ',sysdate-8, ' +
        //                                                    DELCHR(FORMAT(ROUND(temppp_amt, 1, '=')), '=', ',') + ',''SAL'',sysdate,''Auto'', ' + DELCHR(FORMAT(RecordSet.Fields.Item('ar_invoice_id').Value), '=', ',') + ', ''Amount Coming TODAY'')';
        //                                         //MESSAGE(SQLQuery);
        //                                         SQLConnection.Execute(SQLQuery);
        //                                         /*
        //                                         SQLQuery:= 'insert into MRP_PLAN_CHANGES(PLAN_CHANGE_ID,SL_NO,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,RESPONSE_SECTION, '+
        //                                                    ' CREATION_DATE,USERID,PAYMENT_ID,INVOICE_ID) values(PLAN_CHANGE_SEQ.NEXTVAL,(SELECT nvl(MAX(sl_no)+1,1) '+
        //                                                    ' from MRP_PLAN_CHANGES where sale_order_id = '+FORMAT(SaleOrderId)+' and invoice_id = '+
        //                                                    DELCHR(FORMAT(RecordSet.Fields.Item('ar_invoice_id').Value),'=',',')+'),'+FORMAT(SaleOrderId)+
        //                                                    ', sysdate,0,''SAL'',sysdate,''Auto'','+DELCHR(FORMAT(PaymentId),'=',',')+','+DELCHR(FORMAT(RecordSet.Fields.Item('ar_invoice_id').Value),'=',',')+')';
        //                                         //MESSAGE(SQLQuery);
        //                                         SQLConnection.Execute(SQLQuery);
        //                                         */   // Commented By Pranavi on 03-Feb-2017 for not pay amount but place in today
        //                                     END;
        //                                 END;
        //                                 RowCount := RowCount + 1;
        //                                 RecordSet.MoveNext;
        //                             END;  // end of receivable invoices loop
        //                                   /*
        //                                   IF Tmp_Aply_Amt_Tot >0  THEN
        //                                   BEGIN
        //                                     IF Paid_Amt > Tmp_Aply_Amt_Tot THEN BEGIN
        //                                       SQLQuery:= 'update mrp_arr_payment set AMOUNT = nvl(AMOUNT,0) - '+DELCHR(FORMAT(ROUND(Tmp_Aply_Amt_Tot,1,'=')),'=',',')+' where AR_PAYMENT_ID = '+
        //                                                  DELCHR(FORMAT(PaymentId),'=',',');
        //                                       //MESSAGE(SQLQuery);
        //                                       SQLConnection.Execute(SQLQuery);
        //                                     END ELSE BEGIN
        //                                       SQLQuery:= 'delete mrp_arr_payment where AR_PAYMENT_ID = '+DELCHR(FORMAT(PaymentId),'=',',');
        //                                       //MESSAGE(SQLQuery);
        //                                       SQLConnection.Execute(SQLQuery);
        //                                     END;
        //                                   END;
        //                                   */   // Commented By Pranavi on 03-Feb-2017 for not pay amount but place in today
        //                         END;
        //                         Tmp_Aply_Amt_Tot := 0;
        //                         IF ROUND(Pay_Amount, 1, '=') > 0 THEN  // if still payment amount is remaining pay in installtion plan changes
        //                         BEGIN
        //                             /*
        //                             SQLQuery:= 'select nvl(ARR_INSTALL_PAYMENT_SEQ.NEXTVAL,1) payid from dual';
        //                             //MESSAGE(SQLQuery);
        //                             RecordSet := SQLConnection.Execute(SQLQuery,RowCount);
        //                             IF NOT( (RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                               RecordSet.MoveFirst;
        //                             WHILE NOT RecordSet.EOF DO
        //                             BEGIN
        //                               EVALUATE(PaymentId,FORMAT(RecordSet.Fields.Item('payid').Value));
        //                               RowCount:=RowCount+1;
        //                               RecordSet.MoveNext;
        //                             END;
        //                             // insert payment record
        //                             SQLQuery:= 'insert into mrp_arr_instal_payment(AR_PAYMENT_ID,SALE_ORDER_ID,PAYMENT_DATE,AMOUNT,USERID,CREATION_DATE,AMOUNTTYPE) values('+FORMAT(PaymentId)+', '+
        //                                        FORMAT(SaleOrderId)+', to_date('''+FORMAT(CLE."Posting Date",0,'<Day>-<Month Text,3>-<Year4>')+''',''dd-mon-yyyy''), '+
        //                                        DELCHR(FORMAT(ROUND(Pay_Amount,1,'=')),'=',',')+',''Auto'',sysdate,''R'')';
        //                             //MESSAGE(SQLQuery);
        //                             SQLConnection.Execute(SQLQuery);
        //                             */ // Commented By Pranavi on 03-Feb-2017 for not pay amount but place in today
        //                             Inst_Paid_Amt := Pay_Amount;
        //                             SQLQuery := 'select * from MRP_ARR_INSTALL_INVOICE where SALE_ORDER_ID  = ' + FORMAT(SaleOrderId) + ' and INVOICE_DATE = to_date(''' +
        //                                         FORMAT(SIH."Posting Date", 0, '<Day>-<Month Text,3>-<Year4>') + ''',''dd-mon-yyyy'') and ERP_INVOICE_NO = ''' +
        //                                         DELCHR(SIH."External Document No.", '=', ',') + ''' and AMOUNTTYPE = ''R'' and amount is not null order by LINE_NO';
        //                             //MESSAGE(SQLQuery);
        //                             RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                             IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                                 RecordSet.MoveFirst;
        //                             WHILE NOT RecordSet.EOF DO BEGIN   // inst invoice loop
        //                                 InvoiceAmt := 0;
        //                                 Adv_Cons_Amt := 0;
        //                                 Tmp_UnitPrice := 0;
        //                                 Tmp_Adv_Perct := 0;
        //                                 Tmp_Inv_Qty := 0;
        //                                 Tmp_Inv_Adv_Amt := 0;
        //                                 IF FORMAT(RecordSet.Fields.Item('amount').Value) <> '' THEN
        //                                     EVALUATE(InvoiceAmt, FORMAT(RecordSet.Fields.Item('amount').Value))
        //                                 ELSE
        //                                     InvoiceAmt := 0;
        //                                 //EVALUATE(InvoiceAmt,FORMAT(RecordSet.Fields.Item('amount').Value));

        //                                 IF FORMAT(RecordSet.Fields.Item('ADV_AMOUNT_CONSIDERED').Value) <> '' THEN
        //                                     EVALUATE(Adv_Cons_Amt, FORMAT(RecordSet.Fields.Item('ADV_AMOUNT_CONSIDERED').Value))
        //                                 ELSE
        //                                     Adv_Cons_Amt := 0;
        //                                 SQLQuery := 'select nvl(sum(PLANNED_AMOUNT),0) PLANNED_AMOUNT   from MRP_INSTAL_PLAN_CHANGES where PLAN_CHANGE_ID in ( ' +
        //                                            'select  max(pl.PLAN_CHANGE_ID) from  MRP_INSTAL_PLAN_CHANGES pl ,(select sl_no,SALE_ORDER_ID,PLAN_CHANGE_ID ' +
        //                                            'from MRP_INSTAL_PLAN_CHANGES pl1 where planned_amount= 0  and payment_id is not null and invoice_id = ' +
        //                                            DELCHR(FORMAT(RecordSet.Fields.Item('AR_INVOICE_ID').Value), '=', ',') + ' and SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ') a ' +
        //                                            'where  a.sl_no=pl.sl_no and pl.PLAN_CHANGE_ID < a.PLAN_CHANGE_ID and a.SALE_ORDER_ID=pl.SALE_ORDER_ID) ';
        //                                 //MESSAGE(SQLQuery);
        //                                 RecordSet1 := SQLConnection.Execute(SQLQuery, RowCount1);
        //                                 InvPayAmt := 0;
        //                                 Tot_InvPayAmt := 0;
        //                                 IF NOT ((RecordSet1.BOF) OR (RecordSet1.EOF)) THEN
        //                                     RecordSet1.MoveFirst;
        //                                 WHILE NOT RecordSet1.EOF DO BEGIN
        //                                     InvPayAmt := 0;
        //                                     EVALUATE(InvPayAmt, FORMAT(RecordSet1.Fields.Item('planned_amount').Value));
        //                                     Tot_InvPayAmt := Tot_InvPayAmt + InvPayAmt;
        //                                     RowCount1 := RowCount1 + 1;
        //                                     RecordSet1.MoveNext;
        //                                 END;
        //                                 // Start--Added By Pranavi on 03-Feb-2017 for not pay amount but place in today
        //                                 SQLQuery := 'select nvl(sum(planned_amount),0) planned_amount from ( ' +
        //                                            ' select plan_change_id, sl_no,sale_order_id,payment_realize_date,planned_amount,response_section,remarks,creation_date,userid,payment_id,baseplan,splitedfrom,invoice_id,planchngid, ' +
        //                                            ' case when payment_realize_date < sysdate and userid = ''Auto'' and (baseplan <> 1 or baseplan is null) then ''Auto_Paid'' else ''Base_Plan'' end as Plan_Type ' +
        //                                            ' from (select * from  MRP_INSTAL_PLAN_CHANGES b, (select max(plan_change_id) PlanChngId from MRP_INSTAL_PLAN_CHANGES where ' +
        //                                            ' SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ' and invoice_id = ' + DELCHR(FORMAT(RecordSet.Fields.Item('AR_INVOICE_ID').Value), '=', ',') + ' ' +
        //                                            ' group by SALE_ORDER_ID,sl_no) a where a.planchngid=b.plan_change_id and b.planned_amount > 0) ' +
        //                                            ' where case when payment_realize_date < sysdate and userid = ''Auto'' and (baseplan <> 1 or baseplan is null) then ''Auto_Paid'' else ''Base_Plan'' end = ''Auto_Paid'' ' +
        //                                            ' ) group by sale_order_id,invoice_id ';
        //                                 RecordSet1 := SQLConnection.Execute(SQLQuery, RowCount1);
        //                                 InvPayAmt := 0;
        //                                 Tot_InvPayAmt := 0;
        //                                 IF NOT ((RecordSet1.BOF) OR (RecordSet1.EOF)) THEN
        //                                     RecordSet1.MoveFirst;
        //                                 WHILE NOT RecordSet1.EOF DO BEGIN
        //                                     InvPayAmt := 0;
        //                                     EVALUATE(InvPayAmt, FORMAT(RecordSet1.Fields.Item('planned_amount').Value));
        //                                     Tot_InvPayAmt := Tot_InvPayAmt + InvPayAmt;
        //                                     RowCount1 := RowCount1 + 1;
        //                                     RecordSet1.MoveNext;
        //                                 END;
        //                                 // End--Added By Pranavi on 03-Feb-2017 for not pay amount but place in today

        //                                 InvoiceAmt := InvoiceAmt - Tot_InvPayAmt;
        //                                 /*
        //                                 SQLQuery:= 'select * from  MRP_INSTAL_PLAN_CHANGES b,(select SALE_ORDER_ID,sl_no,max(plan_change_id) PlanChngId from MRP_INSTAL_PLAN_CHANGES where '+
        //                                            ' SALE_ORDER_ID = '+FORMAT(SaleOrderId)+' and invoice_id ='+DELCHR(FORMAT(RecordSet.Fields.Item('AR_INVOICE_ID').Value),'=',',')+
        //                                            ' group by SALE_ORDER_ID,sl_no) a where a.planchngid=b.plan_change_id and b.planned_amount > 0';
        //                                 */    // Commented By Pranavi on 03-Feb-2017 for not pay amount but place in today
        //                                 SQLQuery := 'select plan_change_id, sl_no,sale_order_id,payment_realize_date,planned_amount,response_section,remarks,creation_date,userid,payment_id,baseplan,splitedfrom,invoice_id,planchngid, ' +
        //                                            ' case when payment_realize_date < sysdate and userid = ''Auto'' and (baseplan <> 1 or baseplan is null) then ''Auto_Paid'' else ''Base_Plan'' end as Plan_Type ' +
        //                                            ' from (select * from  MRP_INSTAL_PLAN_CHANGES b, (select max(plan_change_id) PlanChngId from MRP_INSTAL_PLAN_CHANGES where ' +
        //                                            ' SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ' and invoice_id = ' + DELCHR(FORMAT(RecordSet.Fields.Item('AR_INVOICE_ID').Value), '=', ',') + ' ' +
        //                                            ' group by SALE_ORDER_ID,sl_no) a where a.planchngid=b.plan_change_id and b.planned_amount > 0) ' +
        //                                            ' where case when payment_realize_date < sysdate and userid = ''Auto'' and (baseplan <> 1 or baseplan is null) then ''Auto_Paid'' else ''Base_Plan'' end = ''Base_Plan''';
        //                                 //MESSAGE(SQLQuery);
        //                                 RecordSet1 := SQLConnection.Execute(SQLQuery, RowCount1);
        //                                 PlnndAmt := 0;
        //                                 PlndAmnt := 0;
        //                                 IF NOT ((RecordSet1.BOF) OR (RecordSet1.EOF)) THEN
        //                                     RecordSet1.MoveFirst;
        //                                 WHILE NOT RecordSet1.EOF DO BEGIN   // begin of instl pln changes loop
        //                                     EVALUATE(PlndAmnt, FORMAT(RecordSet1.Fields.Item('planned_amount').Value));
        //                                     PlnndAmt := PlnndAmt + PlndAmnt;
        //                                     IF (ROUND(Pay_Amount, 1, '=') >= ROUND(PlndAmnt, 1, '=')) THEN BEGIN  // if payment amount > plan change amount
        //                                                                                                           /*
        //                                                                                                           SQLQuery:= 'insert into MRP_INSTAL_PLAN_CHANGES(PLAN_CHANGE_ID,SL_NO,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,RESPONSE_SECTION,CREATION_DATE, '+
        //                                                                                                                      ' USERID,PAYMENT_ID,INVOICE_ID) values(INSTALL_PLAN_CHANGE_SEQ.NEXTVAL,'+DELCHR(FORMAT(RecordSet1.Fields.Item('sl_no').Value),'=',',')+','+FORMAT(SaleOrderId)+
        //                                                                                                                      ', sysdate,0,''SAL'',sysdate,''Auto'','+DELCHR(FORMAT(PaymentId),'=',',')+','+DELCHR(FORMAT(RecordSet1.Fields.Item('invoice_id').Value),'=',',')+')';
        //                                                                                                           */ // Commented By Pranavi on 03-Feb-2017 for not pay amount but place in today
        //                                         SQLQuery := 'insert into MRP_INSTAL_PLAN_CHANGES(PLAN_CHANGE_ID,SL_NO,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,RESPONSE_SECTION,CREATION_DATE, ' +
        //                                                    ' USERID,PAYMENT_ID,INVOICE_ID,REMARKS) values(INSTALL_PLAN_CHANGE_SEQ.NEXTVAL,' + DELCHR(FORMAT(RecordSet1.Fields.Item('sl_no').Value), '=', ',') + ',' + FORMAT(SaleOrderId) +
        //                                                    ', sysdate-8,' + DELCHR(FORMAT(ROUND(PlndAmnt, 1, '=')), '=', ',') + ',''SAL'',sysdate,''Auto'',' + DELCHR(FORMAT(PaymentId), '=', ',') + ', ' +
        //                                                    DELCHR(FORMAT(RecordSet1.Fields.Item('invoice_id').Value), '=', ',') + ', ''Amount Coming TODAY'')';
        //                                         //MESSAGE(SQLQuery);
        //                                         SQLConnection.Execute(SQLQuery);
        //                                         Pay_Amount := Pay_Amount - PlndAmnt;
        //                                     END ELSE BEGIN // else part of if payment amount > plan change amount
        //                                         SQLQuery := 'select nvl(max(sl_no)+1,1) newslno from MRP_INSTAL_PLAN_CHANGES where SALE_ORDER_ID = ' + FORMAT(SaleOrderId) +
        //                                                    ' and INVOICE_ID = ' + DELCHR(FORMAT(RecordSet1.Fields.Item('invoice_id').Value), '=', ',');
        //                                         //MESSAGE(SQLQuery);
        //                                         RecordSet2 := SQLConnection.Execute(SQLQuery, RowCount2);
        //                                         IF NOT ((RecordSet2.BOF) OR (RecordSet2.EOF)) THEN
        //                                             RecordSet2.MoveFirst;
        //                                         WHILE NOT RecordSet2.EOF DO BEGIN
        //                                             EVALUATE(Temp_SL_No, FORMAT(RecordSet2.Fields.Item('newslno').Value));
        //                                             RowCount2 := RowCount2 + 1;
        //                                             RecordSet2.MoveNext;
        //                                         END;
        //                                         SQLQuery := 'insert into MRP_INSTAL_PLAN_CHANGES(PLAN_CHANGE_ID,SL_NO,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,RESPONSE_SECTION, ' +
        //                                                    ' CREATION_DATE,USERID,INVOICE_ID,SPLITEDFROM,REMARKS) values(INSTALL_PLAN_CHANGE_SEQ.NEXTVAL,' + DELCHR(FORMAT(Temp_SL_No), '=', ',') + ',' + FORMAT(SaleOrderId) + ',sysdate-8, ' +
        //                                                    DELCHR(FORMAT(ROUND(Pay_Amount, 1, '=')), '=', ',') + ',''SAL'',sysdate,''Auto'', ' + DELCHR(FORMAT(RecordSet1.Fields.Item('invoice_id').Value), '=', ',') +
        //                                                    ', ' + DELCHR(FORMAT(RecordSet1.Fields.Item('SL_NO').Value), '=', ',') + ', ''Amount Coming TODAY'')';
        //                                         //MESSAGE(SQLQuery);
        //                                         SQLConnection.Execute(SQLQuery);
        //                                         /*
        //                                         SQLQuery:= 'insert into MRP_INSTAL_PLAN_CHANGES(PLAN_CHANGE_ID,SL_NO,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,RESPONSE_SECTION, '+
        //                                                    ' CREATION_DATE,USERID,PAYMENT_ID,INVOICE_ID) values(INSTALL_PLAN_CHANGE_SEQ.NEXTVAL,'+FORMAT(Temp_SL_No)+','+FORMAT(SaleOrderId)+
        //                                                    ', sysdate,0,''SAL'',sysdate,''Auto'','+DELCHR(FORMAT(PaymentId),'=',',')+','+DELCHR(FORMAT(RecordSet1.Fields.Item('invoice_id').Value),'=',',')+')';
        //                                         //MESSAGE(SQLQuery);
        //                                         SQLConnection.Execute(SQLQuery);
        //                                         */   // Commented By Pranavi on 03-Feb-2017 for not pay amount but place in today
        //                                         SQLQuery := 'update MRP_INSTAL_PLAN_CHANGES set PLANNED_AMOUNT = ' + DELCHR(FORMAT(ROUND(PlndAmnt - Pay_Amount, 1, '=')), '=', ',') + ' where PLAN_CHANGE_ID = ' +
        //                                                    DELCHR(FORMAT(RecordSet1.Fields.Item('PLAN_CHANGE_ID').Value), '=', ',');
        //                                         //MESSAGE(SQLQuery);
        //                                         SQLConnection.Execute(SQLQuery);
        //                                         Pay_Amount := 0;
        //                                     END; // end of else part of if payment amount > plan change amount
        //                                     RowCount1 := RowCount1 + 1;
        //                                     RecordSet1.MoveNext;
        //                                 END; // end of instl pln changes loop
        //                                 temppp_amt := 0;
        //                                 IF (InvoiceAmt > PlnndAmt) AND (Pay_Amount > 0) THEN BEGIN
        //                                     IF Pay_Amount >= (InvoiceAmt - PlnndAmt) THEN BEGIN
        //                                         temppp_amt := InvoiceAmt - PlnndAmt;
        //                                         Pay_Amount := InvoiceAmt - PlnndAmt;
        //                                     END ELSE BEGIN
        //                                         temppp_amt := Pay_Amount;
        //                                         Pay_Amount := 0;
        //                                     END;
        //                                     SQLQuery := 'insert into MRP_INSTAL_PLAN_CHANGES(PLAN_CHANGE_ID,SL_NO,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,RESPONSE_SECTION, ' +
        //                                                ' CREATION_DATE,USERID,INVOICE_ID,REMARKS) values(PLAN_CHANGE_SEQ.NEXTVAL,(SELECT nvl(MAX(sl_no)+1,1) from MRP_INSTAL_PLAN_CHANGES where sale_order_id = ' +
        //                                                FORMAT(SaleOrderId) + ' and invoice_id = ' + DELCHR(FORMAT(RecordSet.Fields.Item('ar_invoice_id').Value), '=', ',') + '),' + FORMAT(SaleOrderId) + ',sysdate-8, ' +
        //                                                DELCHR(FORMAT(ROUND(temppp_amt, 1, '=')), '=', ',') + ',''SAL'',sysdate,''Auto'', ' + DELCHR(FORMAT(RecordSet.Fields.Item('ar_invoice_id').Value), '=', ',') + ', ''Amount Coming TODAY'')';
        //                                     //MESSAGE(SQLQuery);
        //                                     SQLConnection.Execute(SQLQuery);
        //                                     /*
        //                                     SQLQuery:= 'insert into MRP_INSTAL_PLAN_CHANGES(PLAN_CHANGE_ID,SL_NO,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,RESPONSE_SECTION, '+
        //                                                ' CREATION_DATE,USERID,PAYMENT_ID,INVOICE_ID) values(PLAN_CHANGE_SEQ.NEXTVAL,(SELECT nvl(MAX(sl_no),1) '+
        //                                                ' from MRP_INSTAL_PLAN_CHANGES where sale_order_id = '+FORMAT(SaleOrderId)+' and invoice_id = '+
        //                                                DELCHR(FORMAT(RecordSet.Fields.Item('ar_invoice_id').Value),'=',',')+'),'+FORMAT(SaleOrderId)+
        //                                                ', sysdate,0,''SAL'',sysdate,''Auto'','+DELCHR(FORMAT(PaymentId),'=',',')+','+DELCHR(FORMAT(RecordSet.Fields.Item('ar_invoice_id').Value),'=',',')+')';
        //                                     //MESSAGE(SQLQuery);
        //                                     SQLConnection.Execute(SQLQuery);
        //                                     */   // Commented By Pranavi on 03-Feb-2017 for not pay amount but place in today
        //                                 END;
        //                                 RowCount := RowCount + 1;
        //                                 RecordSet.MoveNext;
        //                             END;  // end of inst_invoices_loop
        //                         END;  //end of if still payment amount is remaining pay in installtion plan changes
        //                               /*
        //                               IF Tmp_Aply_Amt_Tot >0  THEN
        //                               BEGIN
        //                                 IF Inst_Paid_Amt > Tmp_Aply_Amt_Tot THEN
        //                                 BEGIN
        //                                   SQLQuery:= 'update mrp_arr_instal_payment set AMOUNT = nvl(AMOUNT,0) - '+DELCHR(FORMAT(ROUND(Tmp_Aply_Amt_Tot,1,'=')),'=',',')+' where AR_PAYMENT_ID = '+
        //                                              DELCHR(FORMAT(PaymentId),'=',',');
        //                                   //MESSAGE(SQLQuery);
        //                                   SQLConnection.Execute(SQLQuery);
        //                                 END ELSE BEGIN
        //                                   SQLQuery:= 'delete from mrp_arr_instal_payment where AR_PAYMENT_ID = '+DELCHR(FORMAT(PaymentId),'=',',');
        //                                   //MESSAGE(SQLQuery);
        //                                   SQLConnection.Execute(SQLQuery);
        //                                 END;
        //                               END;
        //                               */   // Commented By Pranavi on 03-Feb-2017 for not pay amount but place in today
        //                         Tmp_Aply_Amt_Tot := 0;
        //                     END  // end of not instalation invoices
        //                     ELSE BEGIN  // if installation invoice
        //                         TotPlndAmnt := 0;
        //                         SQLQuery := 'select * from MRP_ARR_INSTALL_INVOICE where SALE_ORDER_ID  = ' + FORMAT(SaleOrderId) + ' and INVOICE_DATE = to_date(''' +
        //                                     FORMAT(SIH."Posting Date", 0, '<Day>-<Month Text,3>-<Year4>') + ''',''dd-mon-yyyy'') and ERP_INVOICE_NO = ''' +
        //                                     DELCHR(SIH."External Document No.", '=', ',') + ''' and AMOUNTTYPE = ''I'' and amount is not null order by LINE_NO,AR_INVOICE_ID';
        //                         //MESSAGE(SQLQuery);
        //                         RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                         IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                             RecordSet.MoveFirst;
        //                         WHILE NOT RecordSet.EOF DO  //inst invoice loop
        //                         BEGIN
        //                             InvAmt := 0;
        //                             EVALUATE(InvAmt, FORMAT(RecordSet.Fields.Item('amount').Value));
        //                             /*
        //                             SQLQuery:= 'select * from  MRP_INSTAL_PLAN_CHANGES b, (select SALE_ORDER_ID,sl_no,max(plan_change_id) PlanChngId from MRP_INSTAL_PLAN_CHANGES where '+
        //                                        ' SALE_ORDER_ID = '+FORMAT(SaleOrderId)+' and invoice_id = '+DELCHR(FORMAT(RecordSet.Fields.Item('AR_INVOICE_ID').Value),'=',',')+' '+
        //                                        ' group by SALE_ORDER_ID,sl_no) a where a.planchngid=b.plan_change_id and b.planned_amount > 0 and b.INSTALLAMT > 0';
        //                             */    // Commented By Pranavi on 03-Feb-2017 for not pay amount but place in today
        //                             SQLQuery := 'select plan_change_id, sl_no,sale_order_id,payment_realize_date,planned_amount,response_section,remarks,creation_date,userid,payment_id,baseplan,splitedfrom,invoice_id,planchngid, ' +
        //                                        ' case when payment_realize_date < sysdate and userid = ''Auto'' and (baseplan <> 1 or baseplan is null) then ''Auto_Paid'' else ''Base_Plan'' end as Plan_Type ' +
        //                                        ' from (select * from  MRP_INSTAL_PLAN_CHANGES b, (select max(plan_change_id) PlanChngId from MRP_INSTAL_PLAN_CHANGES where ' +
        //                                        ' SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ' and invoice_id = ' + DELCHR(FORMAT(RecordSet.Fields.Item('AR_INVOICE_ID').Value), '=', ',') + ' ' +
        //                                        ' group by SALE_ORDER_ID,sl_no) a where a.planchngid=b.plan_change_id and b.planned_amount > 0) ' +
        //                                        ' where case when payment_realize_date < sysdate and userid = ''Auto'' and (baseplan <> 1 or baseplan is null) then ''Auto_Paid'' else ''Base_Plan'' end = ''Base_Plan''';
        //                             //MESSAGE(SQLQuery);
        //                             RecordSet1 := SQLConnection.Execute(SQLQuery, RowCount1);
        //                             PlndAmnt := 0;
        //                             IF NOT ((RecordSet1.BOF) OR (RecordSet1.EOF)) THEN
        //                                 RecordSet1.MoveFirst;
        //                             WHILE NOT RecordSet1.EOF DO BEGIN     // begin of instl pln changes loop
        //                                 PlndAmnt := 0;
        //                                 EVALUATE(PlndAmnt, FORMAT(RecordSet1.Fields.Item('planned_amount').Value));
        //                                 TotPlndAmnt := TotPlndAmnt + PlndAmnt;
        //                                 RowCount1 := RowCount1 + 1;
        //                                 RecordSet1.MoveNext;
        //                             END;
        //                             SQLQuery := 'select nvl(sum(PLANNED_AMOUNT),0) PLANNED_AMOUNT   from MRP_INSTAL_PLAN_CHANGES where PLAN_CHANGE_ID in ( ' +
        //                                        'select  max(pl.PLAN_CHANGE_ID) from  MRP_INSTAL_PLAN_CHANGES pl ,(select sl_no,SALE_ORDER_ID,PLAN_CHANGE_ID ' +
        //                                        'from MRP_INSTAL_PLAN_CHANGES pl1 where planned_amount= 0  and payment_id is not null and invoice_id = ' +
        //                                        DELCHR(FORMAT(RecordSet.Fields.Item('AR_INVOICE_ID').Value), '=', ',') + ' and SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ') a ' +
        //                                        'where  a.sl_no=pl.sl_no and pl.PLAN_CHANGE_ID < a.PLAN_CHANGE_ID and a.SALE_ORDER_ID=pl.SALE_ORDER_ID) ';
        //                             //MESSAGE(SQLQuery);
        //                             RecordSet1 := SQLConnection.Execute(SQLQuery, RowCount1);
        //                             InvPayAmt := 0;
        //                             Tot_InvPayAmt := 0;
        //                             IF NOT ((RecordSet1.BOF) OR (RecordSet1.EOF)) THEN
        //                                 RecordSet1.MoveFirst;
        //                             WHILE NOT RecordSet1.EOF DO BEGIN
        //                                 InvPayAmt := 0;
        //                                 EVALUATE(InvPayAmt, FORMAT(RecordSet1.Fields.Item('planned_amount').Value));
        //                                 Tot_InvPayAmt := Tot_InvPayAmt + InvPayAmt;
        //                                 RowCount1 := RowCount1 + 1;
        //                                 RecordSet1.MoveNext;
        //                             END;
        //                             // Start--Added By Pranavi on 03-Feb-2017 for not pay amount but place in today
        //                             SQLQuery := 'select nvl(sum(planned_amount),0) planned_amount from ( ' +
        //                                        ' select plan_change_id, sl_no,sale_order_id,payment_realize_date,planned_amount,response_section,remarks,creation_date,userid,payment_id,baseplan,splitedfrom,invoice_id,planchngid, ' +
        //                                        ' case when payment_realize_date < sysdate and userid = ''Auto'' and (baseplan <> 1 or baseplan is null) then ''Auto_Paid'' else ''Base_Plan'' end as Plan_Type ' +
        //                                        ' from (select * from  MRP_INSTAL_PLAN_CHANGES b, (select max(plan_change_id) PlanChngId from MRP_INSTAL_PLAN_CHANGES where ' +
        //                                        ' SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ' and invoice_id = ' + DELCHR(FORMAT(RecordSet.Fields.Item('AR_INVOICE_ID').Value), '=', ',') + ' ' +
        //                                        ' group by SALE_ORDER_ID,sl_no) a where a.planchngid=b.plan_change_id and b.planned_amount > 0) ' +
        //                                        ' where case when payment_realize_date < sysdate and userid = ''Auto'' and (baseplan <> 1 or baseplan is null) then ''Auto_Paid'' else ''Base_Plan'' end = ''Auto_Paid'' ' +
        //                                        ' ) group by sale_order_id,invoice_id ';
        //                             RecordSet1 := SQLConnection.Execute(SQLQuery, RowCount1);
        //                             InvPayAmt := 0;
        //                             Tot_InvPayAmt := 0;
        //                             IF NOT ((RecordSet1.BOF) OR (RecordSet1.EOF)) THEN
        //                                 RecordSet1.MoveFirst;
        //                             WHILE NOT RecordSet1.EOF DO BEGIN
        //                                 InvPayAmt := 0;
        //                                 EVALUATE(InvPayAmt, FORMAT(RecordSet1.Fields.Item('planned_amount').Value));
        //                                 Tot_InvPayAmt := Tot_InvPayAmt + InvPayAmt;
        //                                 RowCount1 := RowCount1 + 1;
        //                                 RecordSet1.MoveNext;
        //                             END;
        //                             // End--Added By Pranavi on 03-Feb-2017 for not pay amount but place in today
        //                             Tot_Inv_Amt := Tot_Inv_Amt + InvAmt - Tot_InvPayAmt;
        //                             RowCount := RowCount + 1;
        //                             RecordSet.MoveNext;
        //                         END;
        //                         IF Tot_Inv_Amt > 0 THEN BEGIN
        //                             IF (Tot_Inv_Amt >= Amount) THEN
        //                                 Pay_Amount := Amount
        //                             ELSE
        //                                 Pay_Amount := Tot_Inv_Amt;
        //                         END ELSE
        //                             Pay_Amount := 0;
        //                         IF Pay_Amount > 0 THEN BEGIN
        //                             /*
        //                             SQLQuery:= 'select nvl(ARR_INSTALL_PAYMENT_SEQ.NEXTVAL,1) payid from dual';
        //                             //MESSAGE(SQLQuery);
        //                             RecordSet := SQLConnection.Execute(SQLQuery,RowCount);
        //                             IF NOT( (RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                               RecordSet.MoveFirst;
        //                             WHILE NOT RecordSet.EOF DO
        //                             BEGIN
        //                               EVALUATE(PaymentId,FORMAT(RecordSet.Fields.Item('payid').Value));
        //                               RowCount:=RowCount+1;
        //                               RecordSet.MoveNext;
        //                             END;
        //                             // insert payment record
        //                             SQLQuery:= 'insert into mrp_arr_instal_payment(AR_PAYMENT_ID,SALE_ORDER_ID,PAYMENT_DATE,AMOUNT,USERID,CREATION_DATE,AMOUNTTYPE) values('+DELCHR(FORMAT(PaymentId),'=',',')+', '+
        //                                        FORMAT(SaleOrderId)+', to_date('''+FORMAT(CLE."Posting Date",0,'<Day>-<Month Text,3>-<Year4>')+''',''dd-mon-yyyy''), '+
        //                                        DELCHR(FORMAT(ROUND(Pay_Amount,1,'=')),'=',',')+',''Auto'',sysdate,''I'')';
        //                             //MESSAGE(SQLQuery);
        //                             SQLConnection.Execute(SQLQuery);
        //                             */ // Commented By Pranavi on 03-Feb-2017 for not pay amount but place in today
        //                             Paid_Amt := Pay_Amount;
        //                             SQLQuery := 'select * from MRP_ARR_INSTALL_INVOICE where SALE_ORDER_ID  = ' + FORMAT(SaleOrderId) + ' and INVOICE_DATE = to_date(''' +
        //                                         FORMAT(SIH."Posting Date", 0, '<Day>-<Month Text,3>-<Year4>') + ''',''dd-mon-yyyy'') and ERP_INVOICE_NO = ''' +
        //                                         DELCHR(SIH."External Document No.", '=', ',') + ''' and amount is not null order by LINE_NO,AR_INVOICE_ID';
        //                             //MESSAGE(SQLQuery);
        //                             RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                             IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                                 RecordSet.MoveFirst;
        //                             WHILE NOT RecordSet.EOF DO BEGIN   // invoice loop
        //                                 InvoiceAmt := 0;
        //                                 IF FORMAT(RecordSet.Fields.Item('amount').Value) <> '' THEN
        //                                     EVALUATE(InvoiceAmt, FORMAT(RecordSet.Fields.Item('amount').Value))
        //                                 ELSE
        //                                     InvoiceAmt := 0;
        //                                 //EVALUATE(InvoiceAmt,FORMAT(RecordSet.Fields.Item('amount').Value));
        //                                 SQLQuery := 'select nvl(sum(PLANNED_AMOUNT),0) PLANNED_AMOUNT   from MRP_INSTAL_PLAN_CHANGES where PLAN_CHANGE_ID in ( ' +
        //                                            'select  max(pl.PLAN_CHANGE_ID) from  MRP_INSTAL_PLAN_CHANGES pl ,(select sl_no,SALE_ORDER_ID,PLAN_CHANGE_ID ' +
        //                                            'from MRP_INSTAL_PLAN_CHANGES pl1 where planned_amount= 0  and payment_id is not null and invoice_id = ' +
        //                                            DELCHR(FORMAT(RecordSet.Fields.Item('AR_INVOICE_ID').Value), '=', ',') + ' and SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ') a ' +
        //                                            'where  a.sl_no=pl.sl_no and pl.PLAN_CHANGE_ID < a.PLAN_CHANGE_ID and a.SALE_ORDER_ID=pl.SALE_ORDER_ID) ';
        //                                 //MESSAGE(SQLQuery);
        //                                 RecordSet1 := SQLConnection.Execute(SQLQuery, RowCount1);
        //                                 InvPayAmt := 0;
        //                                 Tot_InvPayAmt := 0;
        //                                 IF NOT ((RecordSet1.BOF) OR (RecordSet1.EOF)) THEN
        //                                     RecordSet1.MoveFirst;
        //                                 WHILE NOT RecordSet1.EOF DO BEGIN
        //                                     InvPayAmt := 0;
        //                                     EVALUATE(InvPayAmt, FORMAT(RecordSet1.Fields.Item('planned_amount').Value));
        //                                     Tot_InvPayAmt := Tot_InvPayAmt + InvPayAmt;
        //                                     RowCount1 := RowCount1 + 1;
        //                                     RecordSet1.MoveNext;
        //                                 END;
        //                                 // Start--Added By Pranavi on 03-Feb-2017 for not pay amount but place in today
        //                                 SQLQuery := 'select nvl(sum(planned_amount),0) planned_amount from ( ' +
        //                                            ' select plan_change_id, sl_no,sale_order_id,payment_realize_date,planned_amount,response_section,remarks,creation_date,userid,payment_id,baseplan,splitedfrom,invoice_id,planchngid, ' +
        //                                            ' case when payment_realize_date < sysdate and userid = ''Auto'' and (baseplan <> 1 or baseplan is null) then ''Auto_Paid'' else ''Base_Plan'' end as Plan_Type ' +
        //                                            ' from (select * from  MRP_INSTAL_PLAN_CHANGES b, (select max(plan_change_id) PlanChngId from MRP_INSTAL_PLAN_CHANGES where ' +
        //                                            ' SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ' and invoice_id = ' + DELCHR(FORMAT(RecordSet.Fields.Item('AR_INVOICE_ID').Value), '=', ',') + ' ' +
        //                                            ' group by SALE_ORDER_ID,sl_no) a where a.planchngid=b.plan_change_id and b.planned_amount > 0) ' +
        //                                            ' where case when payment_realize_date < sysdate and userid = ''Auto'' and (baseplan <> 1 or baseplan is null) then ''Auto_Paid'' else ''Base_Plan'' end = ''Auto_Paid'' ' +
        //                                            ' ) group by sale_order_id,invoice_id ';
        //                                 RecordSet1 := SQLConnection.Execute(SQLQuery, RowCount1);
        //                                 InvPayAmt := 0;
        //                                 Tot_InvPayAmt := 0;
        //                                 IF NOT ((RecordSet1.BOF) OR (RecordSet1.EOF)) THEN
        //                                     RecordSet1.MoveFirst;
        //                                 WHILE NOT RecordSet1.EOF DO BEGIN
        //                                     InvPayAmt := 0;
        //                                     EVALUATE(InvPayAmt, FORMAT(RecordSet1.Fields.Item('planned_amount').Value));
        //                                     Tot_InvPayAmt := Tot_InvPayAmt + InvPayAmt;
        //                                     RowCount1 := RowCount1 + 1;
        //                                     RecordSet1.MoveNext;
        //                                 END;
        //                                 // End--Added By Pranavi on 03-Feb-2017 for not pay amount but place in today
        //                                 InvoiceAmt := InvoiceAmt - Tot_InvPayAmt;
        //                                 IF Pay_Amount > 0 THEN  // if still payment amount is remaining pay in installtion plan changes
        //                                 BEGIN
        //                                     /*
        //                                     SQLQuery:= 'select * from  MRP_INSTAL_PLAN_CHANGES b,(select SALE_ORDER_ID,sl_no,max(plan_change_id) PlanChngId from MRP_INSTAL_PLAN_CHANGES where '+
        //                                                ' SALE_ORDER_ID = '+FORMAT(SaleOrderId)+' and invoice_id ='+DELCHR(FORMAT(RecordSet.Fields.Item('AR_INVOICE_ID').Value),'=',',')+
        //                                                ' group by SALE_ORDER_ID,sl_no) a where a.planchngid=b.plan_change_id and b.planned_amount > 0';
        //                                     */     // Commented By Pranavi on 03-Feb-2017 for not pay amount but place in today
        //                                     SQLQuery := 'select plan_change_id, sl_no,sale_order_id,payment_realize_date,planned_amount,response_section,remarks,creation_date,userid,payment_id,baseplan,splitedfrom,invoice_id,planchngid, ' +
        //                                                ' case when payment_realize_date < sysdate and userid = ''Auto'' and (baseplan <> 1 or baseplan is null) then ''Auto_Paid'' else ''Base_Plan'' end as Plan_Type ' +
        //                                                ' from (select * from  MRP_INSTAL_PLAN_CHANGES b, (select max(plan_change_id) PlanChngId from MRP_INSTAL_PLAN_CHANGES where ' +
        //                                                ' SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ' and invoice_id = ' + DELCHR(FORMAT(RecordSet.Fields.Item('AR_INVOICE_ID').Value), '=', ',') + ' ' +
        //                                                ' group by SALE_ORDER_ID,sl_no) a where a.planchngid=b.plan_change_id and b.planned_amount > 0) ' +
        //                                                ' where case when payment_realize_date < sysdate and userid = ''Auto'' and (baseplan <> 1 or baseplan is null) then ''Auto_Paid'' else ''Base_Plan'' end = ''Base_Plan''';
        //                                     //MESSAGE(SQLQuery);
        //                                     RecordSet1 := SQLConnection.Execute(SQLQuery, RowCount1);
        //                                     PlnndAmt := 0;
        //                                     PlndAmnt := 0;
        //                                     IF NOT ((RecordSet1.BOF) OR (RecordSet1.EOF)) THEN
        //                                         RecordSet1.MoveFirst;
        //                                     WHILE NOT RecordSet1.EOF DO BEGIN   // begin of instl pln changes loop
        //                                         IF ROUND(Pay_Amount, 1, '=') > 0 THEN  // if still payment amount is remaining pay in installtion plan changes
        //                                         BEGIN
        //                                             EVALUATE(PlndAmnt, FORMAT(RecordSet1.Fields.Item('planned_amount').Value));
        //                                             PlnndAmt := PlnndAmt + PlndAmnt;
        //                                             IF (ROUND(Pay_Amount, 1, '=') >= ROUND(PlndAmnt, 1, '=')) THEN BEGIN  // if payment amount > plan change amount
        //                                                                                                                   /*
        //                                                                                                                   SQLQuery:= 'insert into MRP_INSTAL_PLAN_CHANGES(PLAN_CHANGE_ID,SL_NO,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,RESPONSE_SECTION,CREATION_DATE,'+
        //                                                                                                                              ' USERID,PAYMENT_ID,INVOICE_ID) values(INSTALL_PLAN_CHANGE_SEQ.NEXTVAL,'+DELCHR(FORMAT(RecordSet1.Fields.Item('sl_no').Value),'=',',')+','+FORMAT(SaleOrderId)+
        //                                                                                                                              ', sysdate,0,''SAL'',sysdate,''Auto'','+DELCHR(FORMAT(PaymentId),'=',',')+','+DELCHR(FORMAT(RecordSet1.Fields.Item('invoice_id').Value),'=',',')+')';
        //                                                                                                                   */ // Commented By Pranavi on 03-Feb-2017 for not pay amount but place in today
        //                                                 SQLQuery := 'insert into MRP_INSTAL_PLAN_CHANGES(PLAN_CHANGE_ID,SL_NO,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,RESPONSE_SECTION,CREATION_DATE,' +
        //                                                            ' USERID,PAYMENT_ID,INVOICE_ID,REMARKS) values(INSTALL_PLAN_CHANGE_SEQ.NEXTVAL,' + DELCHR(FORMAT(RecordSet1.Fields.Item('sl_no').Value), '=', ',') + ',' + FORMAT(SaleOrderId) +
        //                                                            ', sysdate-8,' + DELCHR(FORMAT(ROUND(PlndAmnt, 1, '=')), '=', ',') + ',''SAL'',sysdate,''Auto'',' + DELCHR(FORMAT(PaymentId), '=', ',') + ',' +
        //                                                            DELCHR(FORMAT(RecordSet1.Fields.Item('invoice_id').Value), '=', ',') + ', ''Amount Coming TODAY'')';
        //                                                 //MESSAGE(SQLQuery);
        //                                                 SQLConnection.Execute(SQLQuery);
        //                                                 Pay_Amount := Pay_Amount - PlndAmnt;
        //                                             END ELSE BEGIN // else part of if payment amount > plan change amount
        //                                                 SQLQuery := 'select nvl(max(sl_no)+1,1) newslno from MRP_INSTAL_PLAN_CHANGES where SALE_ORDER_ID = ' + FORMAT(SaleOrderId) +
        //                                                            ' and INVOICE_ID = ' + DELCHR(FORMAT(RecordSet1.Fields.Item('invoice_id').Value), '=', ',');
        //                                                 //MESSAGE(SQLQuery);
        //                                                 Temp_SL_No := 1;
        //                                                 RecordSet2 := SQLConnection.Execute(SQLQuery, RowCount2);
        //                                                 IF NOT ((RecordSet2.BOF) OR (RecordSet2.EOF)) THEN
        //                                                     RecordSet2.MoveFirst;
        //                                                 WHILE NOT RecordSet2.EOF DO BEGIN
        //                                                     EVALUATE(Temp_SL_No, FORMAT(RecordSet2.Fields.Item('newslno').Value));
        //                                                     RowCount2 := RowCount2 + 1;
        //                                                     RecordSet2.MoveNext;
        //                                                 END;
        //                                                 SQLQuery := 'insert into MRP_INSTAL_PLAN_CHANGES(PLAN_CHANGE_ID,SL_NO,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,RESPONSE_SECTION, ' +
        //                                                            ' CREATION_DATE,USERID,INVOICE_ID,SPLITEDFROM,REMARKS) values(INSTALL_PLAN_CHANGE_SEQ.NEXTVAL,' + DELCHR(FORMAT(Temp_SL_No), '=', ',') + ',' + FORMAT(SaleOrderId) + ',sysdate-8, ' +
        //                                                            DELCHR(FORMAT(ROUND(Pay_Amount, 1, '=')), '=', ',') + ',''SAL'',sysdate,''Auto'', ' + DELCHR(FORMAT(RecordSet1.Fields.Item('invoice_id').Value), '=', ',') +
        //                                                            ', ' + DELCHR(FORMAT(RecordSet1.Fields.Item('sl_no').Value), '=', ',') + ', ''Amount Coming TODAY'')';
        //                                                 //MESSAGE(SQLQuery);
        //                                                 SQLConnection.Execute(SQLQuery);
        //                                                 /*
        //                                                 SQLQuery:= 'insert into MRP_INSTAL_PLAN_CHANGES(PLAN_CHANGE_ID,SL_NO,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,RESPONSE_SECTION, '+
        //                                                            ' CREATION_DATE,USERID,PAYMENT_ID,INVOICE_ID) values(INSTALL_PLAN_CHANGE_SEQ.NEXTVAL,'+DELCHR(FORMAT(Temp_SL_No),'=',',')+','+FORMAT(SaleOrderId)+
        //                                                            ', sysdate,0,''SAL'',sysdate,''Auto'','+DELCHR(FORMAT(PaymentId),'=',',')+','+DELCHR(FORMAT(RecordSet1.Fields.Item('invoice_id').Value),'=',',')+')';
        //                                                 //MESSAGE(SQLQuery);
        //                                                 SQLConnection.Execute(SQLQuery);
        //                                                 */     // Commented By Pranavi on 03-Feb-2017 for not pay amount but place in today
        //                                                 SQLQuery := 'update MRP_INSTAL_PLAN_CHANGES set PLANNED_AMOUNT = ' + DELCHR(FORMAT(ROUND(PlndAmnt - Pay_Amount, 1, '=')), '=', ',') + ' where PLAN_CHANGE_ID = ' +
        //                                                            DELCHR(FORMAT(RecordSet1.Fields.Item('PLAN_CHANGE_ID').Value), '=', ',');
        //                                                 //MESSAGE(SQLQuery);
        //                                                 SQLConnection.Execute(SQLQuery);
        //                                                 Pay_Amount := 0;
        //                                             END; // end of else part of if payment amount > plan change amount
        //                                         END;
        //                                         RowCount1 := RowCount1 + 1;
        //                                         RecordSet1.MoveNext;
        //                                     END; // end of instl pln changes loop
        //                                     temppp_amt := 0;
        //                                     IF (InvoiceAmt > PlnndAmt) AND (Pay_Amount > 0) THEN BEGIN
        //                                         IF Pay_Amount >= (InvoiceAmt - PlnndAmt) THEN
        //                                             temppp_amt := InvoiceAmt - PlnndAmt
        //                                         ELSE
        //                                             temppp_amt := Pay_Amount;
        //                                         SQLQuery := 'insert into MRP_INSTAL_PLAN_CHANGES(PLAN_CHANGE_ID,SL_NO,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,RESPONSE_SECTION, ' +
        //                                                    ' CREATION_DATE,USERID,INVOICE_ID,REMARKS) values(PLAN_CHANGE_SEQ.NEXTVAL,(SELECT nvl(MAX(sl_no)+1,1) from MRP_INSTAL_PLAN_CHANGES where sale_order_id = ' +
        //                                                    FORMAT(SaleOrderId) + ' and invoice_id = ' + DELCHR(FORMAT(RecordSet.Fields.Item('ar_invoice_id').Value), '=', ',') + '),' + FORMAT(SaleOrderId) + ',sysdate-8, ' +
        //                                                    DELCHR(FORMAT(ROUND(temppp_amt, 1, '=')), '=', ',') + ',''SAL'',sysdate,''Auto'', ' + DELCHR(FORMAT(RecordSet.Fields.Item('ar_invoice_id').Value), '=', ',') + ', ''Amount Coming TODAY'')';
        //                                         // MESSAGE(SQLQuery);
        //                                         SQLConnection.Execute(SQLQuery);
        //                                         /*
        //                                         SQLQuery:= 'insert into MRP_INSTAL_PLAN_CHANGES(PLAN_CHANGE_ID,SL_NO,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,RESPONSE_SECTION, '+
        //                                                    ' CREATION_DATE,USERID,PAYMENT_ID,INVOICE_ID) values(PLAN_CHANGE_SEQ.NEXTVAL,(SELECT nvl(MAX(sl_no),1) '+
        //                                                    ' from MRP_INSTAL_PLAN_CHANGES where sale_order_id = '+FORMAT(SaleOrderId)+' and invoice_id = '+
        //                                                    DELCHR(FORMAT(RecordSet.Fields.Item('ar_invoice_id').Value),'=',',')+'),'+FORMAT(SaleOrderId)+
        //                                                    ', sysdate,0,''SAL'',sysdate,''Auto'','+DELCHR(FORMAT(PaymentId),'=',',')+','+DELCHR(FORMAT(RecordSet.Fields.Item('ar_invoice_id').Value),'=',',')+')';
        //                                         //MESSAGE(SQLQuery);
        //                                         SQLConnection.Execute(SQLQuery);
        //                                         */   // Commented By Pranavi on 03-Feb-2017 for not pay amount but place in today
        //                                     END;
        //                                 END;  //end of if still payment amount is remaining pay in installtion plan changes
        //                                 RowCount := RowCount + 1;
        //                                 RecordSet.MoveNext;
        //                             END;  // end arr_inst_invoices loop
        //                         END;
        //                     END;  // end of if installation invoice
        //                 END;  // end--only if order is aft integration
        //             END;    //end of if sale order exist in cf
        //             SQLConnection.CommitTrans;
        //             //RecordSet.Close;
        //             SQLConnection.Close;
        //             ConnectionOpen := 0;
        //         END;
        //     END; // end of if invoice exist in erp
        // END;  // end of if cust posting grp is private

    end;

    procedure Pvt_Remaining_Adv_OrderPaymentinCF_1(GenJernlLine: Record "Gen. Journal Line");
    var
        AR_Paymnt_Id: Integer;
        SaleOrderId: Integer;
        SH: Record "Sales Header";
        Ordr_Tot_Amt: Decimal;
        Ordr_Sup_Amt: Decimal;
        Ordr_Ret_Amt: Decimal;
        Ordr_Inst_Amt: Decimal;
        Ord_Adv_Amt: Decimal;
        Tot_Inv_Amt: Decimal;
        Tot_Inst_Inv_Amt: Decimal;
        Ordr_PlnChanges_amt: Decimal;
        Inst_PlnChanges_Amt: Decimal;
        Tot_Adv_Paid_Amt: Decimal;
        Sup_UnPlnnd_Amt: Decimal;
        Ret_UnPlnnd_Amt: Decimal;
        Inst_UnPlnnd_Amt: Decimal;
        TempAmt: Decimal;
        Enf: Boolean;
        TestAmt: Decimal;
        LastOrdAdvId: Integer;
        temp_PlnAmt: Decimal;
        Is_Ordr_Aftr_Int: Code[10];
        CF_Ord_Adv_Amt: Decimal;
        Ord_Aftr_Int: Boolean;
        CustomerID: Code[30];
        OrderOk: Boolean;
        SIH: Record "Sales Invoice Header";
        Rem_Adv_Amt: Decimal;
    begin
        // IF GenJernlLine."Payment Type" <> GenJernlLine."Payment Type"::Advance THEN BEGIN
        //     OrderOk := FALSE;
        //     SH.RESET;
        //     SH.SETRANGE(SH."No.", GenJernlLine."Sale Order No");
        //     IF SH.FINDFIRST THEN BEGIN
        //         IF (SH."Customer Posting Group" IN ['PRIVATE', 'OTHERS', 'EXPORT']) AND NOT (SH."Sell-to Customer No." IN ['CUST00536', 'CUST01164']) AND (SH.Order_After_CF_Integration = TRUE) THEN
        //             OrderOk := TRUE;
        //     END ELSE BEGIN
        //         SIH.RESET;
        //         SIH.SETRANGE(SIH."Order No.", GenJernlLine."Sale Order No");
        //         IF SIH.FINDFIRST THEN
        //             IF (SIH."Customer Posting Group" IN ['PRIVATE', 'OTHERS', 'EXPORT']) AND NOT (SIH."Sell-to Customer No." IN ['CUST00536', 'CUST01164']) AND (SIH.Order_After_CF_Integration = TRUE) THEN
        //                 OrderOk := TRUE;
        //     END;
        //     IF OrderOk = TRUE THEN BEGIN
        //         IF ISCLEAR(SQLConnection) THEN
        //             CREATE(SQLConnection, FALSE, TRUE);

        //         IF ISCLEAR(RecordSet) THEN
        //             CREATE(RecordSet, FALSE, TRUE);

        //         IF ConnectionOpen <> 1 THEN BEGIN
        //             SQLConnection.ConnectionString := 'DSN=CASHFLOW;UID=cashflowuser;PASSWORD=firewall123;SERVER=oracle_80;';
        //             SQLConnection.Open;
        //             SQLConnection.BeginTrans;
        //             ConnectionOpen := 1;
        //         END;
        //         SQLQuery := 'SELECT * FROM MRP_SALE_ORDER WHERE INT_SAL_ORD_NO = ''' + GenJernlLine."Sale Order No" + ''' AND STATUS = ''N''';
        //         //MESSAGE(SQLQuery);
        //         RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //         IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //             RecordSet.MoveFirst;
        //         WHILE NOT RecordSet.EOF DO BEGIN
        //             SaleOrderId := RecordSet.Fields.Item('SALE_ORDER_ID').Value;
        //             IF FORMAT(RecordSet.Fields.Item('IS_ORDR_AFT_INTEGRTION').Value) = '1' THEN
        //                 Is_Ordr_Aftr_Int := 'YES'
        //             ELSE
        //                 Is_Ordr_Aftr_Int := 'NO';
        //             IF FORMAT(RecordSet.Fields.Item('ADV_AMOUNT').Value) <> '' THEN
        //                 EVALUATE(CF_Ord_Adv_Amt, FORMAT(RecordSet.Fields.Item('ADV_AMOUNT').Value))
        //             ELSE
        //                 CF_Ord_Adv_Amt := 0;
        //             RowCount := RowCount + 1;
        //             RecordSet.MoveNext;
        //         END;
        //         IF SaleOrderId <> 0 THEN BEGIN  // check if sale order present in sale order table in c/f then insert order
        //             IF (Is_Ordr_Aftr_Int = 'YES') AND (CF_Ord_Adv_Amt > 0) THEN BEGIN // only if order is aft integration
        //                                                                               /*
        //                                                                               AR_Paymnt_Id := 0;
        //                                                                               SQLQuery:= 'SELECT * FROM MRP_ARR_PAYMENT WHERE SALE_ORDER_ID = '+FORMAT(SaleOrderId)+' AND ADVANCE_FLAG = 2';
        //                                                                               RecordSet := SQLConnection.Execute(SQLQuery,RowCount);
        //                                                                               IF NOT( (RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                                                                                 RecordSet.MoveFirst;
        //                                                                               WHILE NOT RecordSet.EOF DO
        //                                                                               BEGIN
        //                                                                                 AR_Paymnt_Id := RecordSet.Fields.Item('AR_PAYMENT_ID').Value;
        //                                                                                 RowCount:=RowCount+1;
        //                                                                                 RecordSet.MoveNext;
        //                                                                               END;
        //                                                                               */// Commented by Pranavi on 09-Mar-2017 for Not paying but moving to today
        //                                                                                 // Start--update pln_changes amounts
        //                 Ordr_Tot_Amt := 0;
        //                 Ordr_Sup_Amt := 0;
        //                 Ordr_Ret_Amt := 0;
        //                 Ordr_Inst_Amt := 0;
        //                 Tot_Adv_Paid_Amt := 0;
        //                 SQLQuery := 'select nvl(sum(sale_order_amount),0) as tot_amt,nvl(sum(supplyamount),0) sup_amt, nvl(sum(retentionamount),0) ret_amt, ' +
        //                            'nvl(sum(installamount),0) inst_amt, nvl(sum(adv_amount),0) adv_amt from MRP_SALE_ORDER where sale_order_id = ' + FORMAT(SaleOrderId);
        //                 //MESSAGE(SQLQuery);
        //                 RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                 IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                     RecordSet.MoveFirst;
        //                 WHILE NOT RecordSet.EOF DO BEGIN
        //                     EVALUATE(Ordr_Tot_Amt, FORMAT(RecordSet.Fields.Item('tot_amt').Value));
        //                     EVALUATE(Ordr_Sup_Amt, FORMAT(RecordSet.Fields.Item('sup_amt').Value));
        //                     EVALUATE(Ord_Adv_Amt, FORMAT(RecordSet.Fields.Item('adv_amt').Value));
        //                     RowCount := RowCount + 1;
        //                     RecordSet.MoveNext;
        //                 END;
        //                 SQLQuery := 'select nvl(sum(amount),0) inv_amt from MRP_ARR_INVOICE where sale_order_id = ' + FORMAT(SaleOrderId);
        //                 //MESSAGE(SQLQuery);
        //                 RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                 IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                     RecordSet.MoveFirst;
        //                 WHILE NOT RecordSet.EOF DO BEGIN
        //                     EVALUATE(Tot_Inv_Amt, FORMAT(RecordSet.Fields.Item('inv_amt').Value));
        //                     RowCount := RowCount + 1;
        //                     RecordSet.MoveNext;
        //                 END;
        //                 SQLQuery := 'SELECT nvl(sum(amount),0) adv_paid_amt FROM MRP_ARR_PAYMENT WHERE SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ' AND ADVANCE_FLAG = 2';
        //                 //MESSAGE(SQLQuery);
        //                 RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                 IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                     RecordSet.MoveFirst;
        //                 WHILE NOT RecordSet.EOF DO BEGIN
        //                     EVALUATE(Tot_Adv_Paid_Amt, FORMAT(RecordSet.Fields.Item('adv_paid_amt').Value));
        //                     RowCount := RowCount + 1;
        //                     RecordSet.MoveNext;
        //                 END;

        //                 //>>Added By Pranavi on 06-Mar-2017 for not pay amount but place in today
        //                 SQLQuery := 'select plan_change_id,sale_order_id,payment_realize_date,planned_amount,response_section,remarks,creation_date,userid,ord_advance_id,' +
        //                             'invoice_id,plan_type,planchngid,plan_type from (' +
        //                             'select * from  MRP_ORDER_PLAN_CHANGES b,(select max(plan_change_id) PlanChngId ' +
        //                             ' from MRP_ORDER_PLAN_CHANGES where SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ' group by SALE_ORDER_ID,ord_advance_id) a ' +
        //                             ' where a.planchngid=b.plan_change_id and b.planned_amount > 0) where plan_type = ''Auto Paid''';
        //                 //MESSAGE(SQLQuery);
        //                 temp_PlnAmt := 0;
        //                 RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                 IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                     RecordSet.MoveFirst;
        //                 WHILE NOT RecordSet.EOF DO BEGIN
        //                     temp_PlnAmt := 0;
        //                     EVALUATE(temp_PlnAmt, FORMAT(RecordSet.Fields.Item('planned_amount').Value));
        //                     Tot_Adv_Paid_Amt := Tot_Adv_Paid_Amt + temp_PlnAmt;
        //                     RowCount := RowCount + 1;
        //                     RecordSet.MoveNext;
        //                 END;
        //                 //<<Added By Pranavi on 06-Mar-2017 for not pay amount but place in today

        //                 IF CF_Ord_Adv_Amt > Tot_Adv_Paid_Amt THEN
        //                     Rem_Adv_Amt := CF_Ord_Adv_Amt - Tot_Adv_Paid_Amt
        //                 ELSE
        //                     Rem_Adv_Amt := 0;

        //                 IF ABS(GenJernlLine.Amount) <= Rem_Adv_Amt THEN
        //                     Rem_Adv_Amt := ABS(GenJernlLine.Amount);

        //                 // order on hand plan changes amount
        //                 SQLQuery := 'select * from  MRP_ORDER_PLAN_CHANGES b,(select max(plan_change_id) PlanChngId ' +
        //                             ' from MRP_ORDER_PLAN_CHANGES where SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ' group by SALE_ORDER_ID,ord_advance_id) a ' +
        //                             ' where a.planchngid=b.plan_change_id and b.planned_amount > 0 and (b.plan_type is null or b.plan_type <> ''Auto Paid'')';
        //                 //MESSAGE(SQLQuery);
        //                 Ordr_PlnChanges_amt := 0;
        //                 temp_PlnAmt := 0;
        //                 RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                 IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                     RecordSet.MoveFirst;
        //                 WHILE NOT RecordSet.EOF DO BEGIN
        //                     temp_PlnAmt := 0;
        //                     EVALUATE(temp_PlnAmt, FORMAT(RecordSet.Fields.Item('planned_amount').Value));
        //                     Ordr_PlnChanges_amt := Ordr_PlnChanges_amt + temp_PlnAmt;
        //                     RowCount := RowCount + 1;
        //                     RecordSet.MoveNext;
        //                 END;
        //                 Sup_UnPlnnd_Amt := ROUND(Ordr_Sup_Amt + Ord_Adv_Amt - Tot_Adv_Paid_Amt - Ordr_PlnChanges_amt - Tot_Inv_Amt, 1, '=');
        //                 IF Rem_Adv_Amt > 0 THEN BEGIN
        //                     TestAmt := 0;
        //                     IF ROUND(Sup_UnPlnnd_Amt, 1, '=') < ABS(ROUND(Rem_Adv_Amt, 1, '=')) THEN BEGIN
        //                         IF (ROUND(Sup_UnPlnnd_Amt, 1, '=') > 0) THEN BEGIN
        //                             TestAmt := ROUND(Sup_UnPlnnd_Amt, 1, '=');
        //                             SQLQuery := 'select nvl(ORD_ADVANCE_ID_SEQ.NEXTVAL,1) LastOrdAdvId from dual';
        //                             RecordSet1 := SQLConnection.Execute(SQLQuery, RowCount1);
        //                             IF NOT ((RecordSet1.BOF) OR (RecordSet1.EOF)) THEN
        //                                 RecordSet1.MoveFirst;
        //                             WHILE NOT RecordSet1.EOF DO BEGIN
        //                                 EVALUATE(LastOrdAdvId, FORMAT(RecordSet1.Fields.Item('LastOrdAdvId').Value));
        //                                 RowCount1 := RowCount1 + 1;
        //                                 RecordSet1.MoveNext;
        //                             END;
        //                             ActPeriodActYearCalc(TODAY - 8);
        //                             PeriodNum := 0; // Added By Pranavi on 06-Mar-2017 for not pay amount but place in today
        //                             SQLQuery := 'insert into mrp_arr_ord_advance(ORD_ADVANCE_ID,SALE_ORDER_ID,EXP_ADVANCE_AMOUNT,ACCTPERIOD, ' +
        //                                        ' ACCT_YEAR,EXP_RECEIVED_DATE,ACTINACT,ORDER_FLAG) values (' + DELCHR(FORMAT(LastOrdAdvId), '=', ',') + ', ' +
        //                                        DELCHR(FORMAT(RecordSet.Fields.Item('SALE_ORDER_ID').Value), '=', ',') + ',' + DELCHR(FORMAT(ROUND(ABS(TestAmt), 1, '=')), '=', ',') +
        //                                        ', ' + DELCHR(FORMAT(PeriodNum), '=', ',') + ', ' + DELCHR(FORMAT(AccountYear), '=', ',') +
        //                                        ', (select EXP_RECEIVED_DATE from mrp_arr_ord_advance where ORD_ADVANCE_ID = ' + DELCHR(FORMAT(RecordSet.Fields.Item('ORD_ADVANCE_ID').Value), '=', ',') + '), 1, 0)';
        //                             // MESSAGE(SQLQuery);
        //                             SQLConnection.Execute(SQLQuery, RowCount);
        //                             SQLQuery := 'insert into MRP_ORDER_PLAN_CHANGES(PLAN_CHANGE_ID,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,CREATION_DATE, ' +
        //                                        ' USERID,ORD_ADVANCE_ID,PLAN_TYPE,REMARKS) values(ORDER_PLANCHANGES_SEQ.NEXTVAL, ' + DELCHR(FORMAT(RecordSet.Fields.Item('SALE_ORDER_ID').Value), '=', ',') +
        //                                        ', sysdate-8, ' + DELCHR(FORMAT(ROUND(TestAmt, 1, '=')), '=', ',') + ', sysdate, ''Auto'',' + DELCHR(FORMAT(LastOrdAdvId), '=', ',') + ', ''Auto Paid'', ''Amount Coming TODAY'')';
        //                             // MESSAGE(SQLQuery);
        //                             SQLConnection.Execute(SQLQuery, RowCount);
        //                         END;
        //                         // order on hand plan changes amount
        //                         SQLQuery := 'select * from  MRP_ORDER_PLAN_CHANGES b,(select max(plan_change_id) PlanChngId ' +
        //                                     ' from MRP_ORDER_PLAN_CHANGES where SALE_ORDER_ID = ' + FORMAT(SaleOrderId) + ' group by SALE_ORDER_ID,ord_advance_id) a ' +
        //                                     ' where a.planchngid=b.plan_change_id and b.planned_amount > 0 and (b.plan_type is null or b.plan_type <> ''Auto Paid'') ' +
        //                                     ' order by b.payment_realize_date desc,b.planned_amount desc';
        //                         //MESSAGE(SQLQuery);
        //                         RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                         IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                             RecordSet.MoveFirst;
        //                         TestAmt := 0;
        //                         Enf := FALSE;
        //                         TestAmt := ROUND(ABS(Rem_Adv_Amt) - Sup_UnPlnnd_Amt, 1, '=');
        //                         WHILE NOT RecordSet.EOF AND (NOT Enf) AND (ROUND(TestAmt, 1, '=') > 0) DO BEGIN
        //                             EVALUATE(TempAmt, FORMAT(RecordSet.Fields.Item('planned_amount').Value));
        //                             IF (ROUND(TestAmt, 1, '=') >= ROUND(TempAmt, 1, '=')) THEN BEGIN
        //                                 /*
        //                                 SQLQuery:= 'insert into MRP_ORDER_PLAN_CHANGES(PLAN_CHANGE_ID,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,CREATION_DATE, '+
        //                                            ' USERID,ORD_ADVANCE_ID) values(ORDER_PLANCHANGES_SEQ.NEXTVAL, '+DELCHR(FORMAT(RecordSet.Fields.Item('SALE_ORDER_ID').Value),'=',',')+
        //                                            ', sysdate, 0, sysdate, ''Auto'','+DELCHR(FORMAT(RecordSet.Fields.Item('ORD_ADVANCE_ID').Value),'=',',')+')';
        //                                 */ // Commented By Pranavi on 06-Mar-2017 for not pay amount but place in today
        //                                 SQLQuery := 'insert into MRP_ORDER_PLAN_CHANGES(PLAN_CHANGE_ID,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,CREATION_DATE, ' +
        //                                            ' USERID,ORD_ADVANCE_ID,PLAN_TYPE,REMARKS) values(ORDER_PLANCHANGES_SEQ.NEXTVAL, ' + DELCHR(FORMAT(RecordSet.Fields.Item('SALE_ORDER_ID').Value), '=', ',') +
        //                                            ', sysdate-8, ' + DELCHR(FORMAT(TempAmt), '=', ',') + ', sysdate, ''Auto'',' + DELCHR(FORMAT(RecordSet.Fields.Item('ORD_ADVANCE_ID').Value), '=', ',') +
        //                                            ',''Auto Paid'', ''Amount Coming TODAY'')';
        //                                 //MESSAGE(SQLQuery);
        //                                 SQLConnection.Execute(SQLQuery, RowCount);

        //                                 ActPeriodActYearCalc(TODAY - 8);
        //                                 PeriodNum := 0; // Added By Pranavi on 06-Mar-2017 for not pay amount but place in today
        //                                 SQLQuery := 'update mrp_arr_ord_advance set ACCTPERIOD = ' + DELCHR(FORMAT(PeriodNum), '=', ',') + ', ACCT_YEAR = ' + DELCHR(FORMAT(AccountYear), '=', ',') +
        //                                            ' where ORD_ADVANCE_ID = ' + DELCHR(FORMAT(RecordSet.Fields.Item('ORD_ADVANCE_ID').Value), '=', ',');
        //                                 SQLConnection.Execute(SQLQuery, RowCount);

        //                                 /*
        //                                 SQLQuery:= 'update mrp_arr_ord_advance set order_flag = 1 where ORD_ADVANCE_ID = '+DELCHR(FORMAT(RecordSet.Fields.Item('ORD_ADVANCE_ID').Value),'=',',');
        //                                 //MESSAGE(SQLQuery);
        //                                 SQLConnection.Execute(SQLQuery,RowCount);
        //                                 */ // Commented By Pranavi on 06-Mar-2017 for not pay amount but place in today
        //                                 TestAmt := TestAmt - TempAmt;
        //                             END ELSE BEGIN
        //                                 SQLQuery := 'select nvl(ORD_ADVANCE_ID_SEQ.NEXTVAL,1) LastOrdAdvId from dual';
        //                                 RecordSet1 := SQLConnection.Execute(SQLQuery, RowCount1);
        //                                 IF NOT ((RecordSet1.BOF) OR (RecordSet1.EOF)) THEN
        //                                     RecordSet1.MoveFirst;
        //                                 WHILE NOT RecordSet1.EOF DO BEGIN
        //                                     EVALUATE(LastOrdAdvId, FORMAT(RecordSet1.Fields.Item('LastOrdAdvId').Value));
        //                                     RowCount1 := RowCount1 + 1;
        //                                     RecordSet1.MoveNext;
        //                                 END;
        //                                 /*
        //                                 SQLQuery:= 'insert into mrp_arr_ord_advance(ORD_ADVANCE_ID,SALE_ORDER_ID,EXP_ADVANCE_AMOUNT,ACCTPERIOD, '+
        //                                            ' ACCT_YEAR,EXP_RECEIVED_DATE,ACTINACT,ORDER_FLAG) values ('+DELCHR(FORMAT(LastOrdAdvId),'=',',')+', '+
        //                                            DELCHR(FORMAT(RecordSet.Fields.Item('SALE_ORDER_ID').Value),'=',',')+','+DELCHR(FORMAT(ROUND(ABS(TestAmt),1,'=')),'=',',')+
        //                                            ', (select ACCTPERIOD from mrp_arr_ord_advance where ORD_ADVANCE_ID = '+DELCHR(FORMAT(RecordSet.Fields.Item('ORD_ADVANCE_ID').Value),'=',',')+
        //                                            '), (select ACCT_YEAR from mrp_arr_ord_advance where ORD_ADVANCE_ID = '+DELCHR(FORMAT(RecordSet.Fields.Item('ORD_ADVANCE_ID').Value),'=',',')+
        //                                            '), (select EXP_RECEIVED_DATE from mrp_arr_ord_advance where ORD_ADVANCE_ID = '+DELCHR(FORMAT(RecordSet.Fields.Item('ORD_ADVANCE_ID').Value),'=',',')+'), 1, 1)';
        //                                 */
        //                                 ActPeriodActYearCalc(TODAY - 8);
        //                                 PeriodNum := 0; // Added By Pranavi on 06-Mar-2017 for not pay amount but place in today
        //                                 SQLQuery := 'insert into mrp_arr_ord_advance(ORD_ADVANCE_ID,SALE_ORDER_ID,EXP_ADVANCE_AMOUNT,ACCTPERIOD, ' +
        //                                            ' ACCT_YEAR,EXP_RECEIVED_DATE,ACTINACT,ORDER_FLAG) values (' + DELCHR(FORMAT(LastOrdAdvId), '=', ',') + ', ' +
        //                                            DELCHR(FORMAT(RecordSet.Fields.Item('SALE_ORDER_ID').Value), '=', ',') + ',' + DELCHR(FORMAT(ROUND(ABS(TestAmt), 1, '=')), '=', ',') +
        //                                            ', ' + DELCHR(FORMAT(PeriodNum), '=', ',') + ', ' + DELCHR(FORMAT(AccountYear), '=', ',') +
        //                                            ', (select EXP_RECEIVED_DATE from mrp_arr_ord_advance where ORD_ADVANCE_ID = ' + DELCHR(FORMAT(RecordSet.Fields.Item('ORD_ADVANCE_ID').Value), '=', ',') + '), 1, 0)';
        //                                 //MESSAGE(SQLQuery);
        //                                 SQLConnection.Execute(SQLQuery, RowCount);
        //                                 SQLQuery := 'insert into MRP_ORDER_PLAN_CHANGES(PLAN_CHANGE_ID,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,CREATION_DATE, ' +
        //                                            ' USERID,ORD_ADVANCE_ID,REMARKS) values(ORDER_PLANCHANGES_SEQ.NEXTVAL, ' + DELCHR(FORMAT(RecordSet.Fields.Item('SALE_ORDER_ID').Value), '=', ',') +
        //                                            ', sysdate-8, ' + DELCHR(FORMAT(ROUND(TestAmt, 1, '=')), '=', ',') + ', sysdate, ''Auto'',' + DELCHR(FORMAT(LastOrdAdvId), '=', ',') + ', ''Amount Coming TODAY'')';
        //                                 //MESSAGE(SQLQuery);
        //                                 SQLConnection.Execute(SQLQuery, RowCount);
        //                                 /*
        //                                 SQLQuery:= 'insert into MRP_ORDER_PLAN_CHANGES(PLAN_CHANGE_ID,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,CREATION_DATE, '+
        //                                            ' USERID,ORD_ADVANCE_ID) values(ORDER_PLANCHANGES_SEQ.NEXTVAL, '+DELCHR(FORMAT(RecordSet.Fields.Item('SALE_ORDER_ID').Value),'=',',')+
        //                                            ', sysdate, 0, sysdate, ''Auto'','+DELCHR(FORMAT(LastOrdAdvId),'=',',')+')';
        //                                 //MESSAGE(SQLQuery);
        //                                 SQLConnection.Execute(SQLQuery,RowCount);
        //                                 */ // Commented By Pranavi on 06-Mar-2017 for not pay amount but place in today
        //                                 SQLQuery := 'update MRP_ORDER_PLAN_CHANGES set PLANNED_AMOUNT = ' + DELCHR(FORMAT(ROUND(TempAmt - TestAmt, 1, '=')), '=', ',') +
        //                                            ' where PLAN_CHANGE_ID = ' + DELCHR(FORMAT(RecordSet.Fields.Item('PLAN_CHANGE_ID').Value), '=', ',');
        //                                 //MESSAGE(SQLQuery);
        //                                 SQLConnection.Execute(SQLQuery, RowCount);

        //                                 SQLQuery := 'update mrp_arr_ord_advance set EXP_ADVANCE_AMOUNT = ' + DELCHR(FORMAT(ROUND(TempAmt - TestAmt, 1, '=')), '=', ',') +
        //                                            ' where ORD_ADVANCE_ID = ' + DELCHR(FORMAT(RecordSet.Fields.Item('ORD_ADVANCE_ID').Value), '=', ',');
        //                                 //MESSAGE(SQLQuery);
        //                                 SQLConnection.Execute(SQLQuery, RowCount);
        //                                 Enf := TRUE;
        //                             END;
        //                             RowCount := RowCount + 1;
        //                             RecordSet.MoveNext;
        //                         END;  //End--order on hand pln chnges loop
        //                     END ELSE BEGIN
        //                         SQLQuery := 'select nvl(ORD_ADVANCE_ID_SEQ.NEXTVAL,1) LastOrdAdvId from dual';
        //                         RecordSet1 := SQLConnection.Execute(SQLQuery, RowCount1);
        //                         IF NOT ((RecordSet1.BOF) OR (RecordSet1.EOF)) THEN
        //                             RecordSet1.MoveFirst;
        //                         WHILE NOT RecordSet1.EOF DO BEGIN
        //                             EVALUATE(LastOrdAdvId, FORMAT(RecordSet1.Fields.Item('LastOrdAdvId').Value));
        //                             RowCount1 := RowCount1 + 1;
        //                             RecordSet1.MoveNext;
        //                         END;
        //                         ActPeriodActYearCalc(TODAY - 8);
        //                         PeriodNum := 0; // Added By Pranavi on 06-Mar-2017 for not pay amount but place in today
        //                         SQLQuery := 'insert into mrp_arr_ord_advance(ORD_ADVANCE_ID,SALE_ORDER_ID,EXP_ADVANCE_AMOUNT,ACCTPERIOD, ' +
        //                                    ' ACCT_YEAR,EXP_RECEIVED_DATE,ACTINACT,ORDER_FLAG) values (' + DELCHR(FORMAT(LastOrdAdvId), '=', ',') + ', ' +
        //                                    DELCHR(FORMAT(RecordSet.Fields.Item('SALE_ORDER_ID').Value), '=', ',') + ',' + DELCHR(FORMAT(ROUND(ABS(Rem_Adv_Amt), 1, '=')), '=', ',') +
        //                                    ', ' + DELCHR(FORMAT(PeriodNum), '=', ',') + ', ' + DELCHR(FORMAT(AccountYear), '=', ',') +
        //                                    ', (select EXP_RECEIVED_DATE from mrp_arr_ord_advance where ORD_ADVANCE_ID = ' + DELCHR(FORMAT(RecordSet.Fields.Item('ORD_ADVANCE_ID').Value), '=', ',') + '), 1, 0)';
        //                         // MESSAGE(SQLQuery);
        //                         SQLConnection.Execute(SQLQuery, RowCount);
        //                         SQLQuery := 'insert into MRP_ORDER_PLAN_CHANGES(PLAN_CHANGE_ID,SALE_ORDER_ID,PAYMENT_REALIZE_DATE,PLANNED_AMOUNT,CREATION_DATE, ' +
        //                                    ' USERID,ORD_ADVANCE_ID,PLAN_TYPE,REMARKS) values(ORDER_PLANCHANGES_SEQ.NEXTVAL, ' + DELCHR(FORMAT(RecordSet.Fields.Item('SALE_ORDER_ID').Value), '=', ',') +
        //                                    ', sysdate-8, ' + DELCHR(FORMAT(ROUND(Rem_Adv_Amt, 1, '=')), '=', ',') + ', sysdate, ''Auto'',' + DELCHR(FORMAT(LastOrdAdvId), '=', ',') +
        //                                    ', ''Auto Paid'', ''Amount Coming TODAY'')';
        //                         // MESSAGE(SQLQuery);
        //                         SQLConnection.Execute(SQLQuery, RowCount);
        //                     END;
        //                     /*
        //                     IF AR_Paymnt_Id <> 0 THEN BEGIN
        //                      SQLQuery:= 'UPDATE MRP_ARR_PAYMENT SET AMOUNT = nvl(AMOUNT,0) + '+DELCHR(FORMAT(ROUND(ABS(Rem_Adv_Amt),1,'=')),'=',',')+
        //                                 ' WHERE SALE_ORDER_ID = '+FORMAT(SaleOrderId)+' AND ADVANCE_FLAG = 2';
        //                      //MESSAGE(SQLQuery);
        //                      SQLConnection.Execute(SQLQuery);
        //                     END ELSE BEGIN
        //                      SQLQuery:= 'insert into MRP_ARR_PAYMENT(AR_PAYMENT_ID,SALE_ORDER_ID,PAYMENT_DATE,AMOUNT,USERID,CREATION_DATE,ADVANCE_FLAG'+
        //                                 ') values(ARR_PAYMENT_SEQ.NEXTVAL,'+FORMAT(SaleOrderId)+',to_date('''+FORMAT(GenJernlLine."Posting Date",0,'<Day>-<Month Text,3>-<Year4>')+
        //                                 ''',''dd-mon-yyyy''), '+DELCHR(FORMAT(ABS(ROUND(Rem_Adv_Amt,1,'='))),'=',',')+', ''Auto'', sysdate,2)';
        //                      //MESSAGE(SQLQuery);
        //                       SQLConnection.Execute(SQLQuery);
        //                     END;
        //                     */ // Commented By Pranavi on 06-Mar-2017 for not pay amount but place in today
        //                 END;
        //             END;  // end--only if order is aft integration
        //         END; // check if sale order present in sale order table in c/f then insert order
        //         SQLConnection.CommitTrans;
        //         //RecordSet.Close;
        //         SQLConnection.Close;
        //         ConnectionOpen := 0;
        //         // MESSAGE('Sale Order Invoiced in Cashflow!');
        //     END;  // end of OrderOk
        // END;  // end of if <>Advance

    end;

    procedure Purch_Invoice_in_CF(PurchInvHeader: Record "Purch. Inv. Header");
    var
        "G|l": Record "General Ledger Setup";
        Structure_Amount: Decimal;
        Packing_Value: Decimal;
        Frieght_Value: Decimal;
        Insurance_Value: Decimal;
        Additional_Duty: Decimal;
        VAT_AMOUNT: Decimal;
        CST_AMOUNT: Decimal;
        Service_Amount: Decimal;
        PurchRcptLine: Record "Purch. Rcpt. Line";
        Order_No: Code[30];
        OrderLineNo: Decimal;
        Purch_Line: Record "Purchase Line";
        PurchInvLine: Record "Purch. Inv. Line";
        //PostedStrOrderDetails: Record "Posted Structure Order Details";
        // PostedStrOrderLineDetails: Record "Posted Str Order Line Details";
        Dept: Code[10];
        inv_id: Decimal;
        GST_Amount: Decimal;
        ItemNo: Text[50];
    begin
        // "G|l".GET;
        // IF "G|l"."Active ERP-CF Connection" THEN BEGIN
        //     IF ISCLEAR(SQLConnection) THEN
        //         CREATE(SQLConnection, FALSE, TRUE);

        //     IF ISCLEAR(RecordSet) THEN
        //         CREATE(RecordSet, FALSE, TRUE);

        //     IF ConnectionOpen <> 1 THEN BEGIN
        //         SQLConnection.ConnectionString := 'DSN=CASHFLOW;UID=cashflowuser;PASSWORD=firewall123;SERVER=oracle_80;';
        //         SQLConnection.Open;
        //         SQLConnection.BeginTrans;
        //         ConnectionOpen := 1;
        //     END;


        //     PurchInvLine.RESET;
        //     PurchInvLine.SETRANGE(PurchInvLine."Document No.", PurchInvHeader."No.");
        //     PurchInvLine.SETFILTER(PurchInvLine.Quantity, '>%1', 0);
        //     IF PurchInvLine.FINDSET THEN
        //         REPEAT
        //                 Structure_Amount := 0;
        //             Packing_Value := 0;
        //             Frieght_Value := 0;
        //             Insurance_Value := 0;
        //             Additional_Duty := 0;
        //             VAT_AMOUNT := 0;
        //             CST_AMOUNT := 0;
        //             Service_Amount := 0;
        //             GST_Amount := 0;
        //             ItemNo := '';
        //             IF (PurchInvLine."Receipt No." = '') AND (PurchInvLine."Receipt Line No." = 0) THEN
        //                 ItemNo := 'JOURNAL'
        //             ELSE
        //                 ItemNo := PurchInvLine."No.";
        //             PurchRcptLine.RESET;
        //             PurchRcptLine.SETRANGE(PurchRcptLine."Document No.", PurchInvLine."Receipt Document No.");
        //             PurchRcptLine.SETRANGE(PurchRcptLine."Line No.", PurchInvLine."Receipt Document Line No.");
        //             IF PurchRcptLine.FINDFIRST THEN BEGIN
        //                 Order_No := PurchRcptLine."Order No.";
        //                 OrderLineNo := PurchRcptLine."Order Line No.";
        //             END;
        //             Purch_Line.RESET;
        //             Purch_Line.SETRANGE(Purch_Line."Document Type", Purch_Line."Document Type"::Order);
        //             Purch_Line.SETRANGE(Purch_Line."Document No.", Order_No);
        //             Purch_Line.SETRANGE(Purch_Line."Line No.", OrderLineNo);
        //             IF Purch_Line.FINDFIRST THEN BEGIN
        //                 inv_id := 0;
        //                 IF (Purch_Line.Sample = FALSE) AND (NOT (UPPERCASE(USERID) IN ['EFFTRONICS\RAJANI', 'EFFTRONICS\SITARAJYAM', 'EFFTRONICS\SUJANI'])) THEN  // Condition added by Pranavi on 09-feb-2016 for not flowing to cf receipt linesif sample items
        //                 BEGIN
        //                     inv_id := 0;
        //                     SQLQuery := 'select * from INVOICE_LINE where invoice_number = ''' + PurchInvHeader."No." + ''' and invoice_line_no = ' + DELCHR(FORMAT(PurchInvLine."Line No."), '=', ',');
        //                     RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        //                     IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //                         RecordSet.MoveFirst;
        //                     WHILE NOT RecordSet.EOF DO BEGIN
        //                         EVALUATE(inv_id, DELCHR(FORMAT(RecordSet.Fields.Item('invoice_id').Value), '=', ','));
        //                         RecordSet.MoveNext;
        //                     END;
        //                     IF inv_id = 0 THEN BEGIN
        //                         PostedStrOrderLineDetails.RESET;
        //                         PostedStrOrderLineDetails.SETRANGE(PostedStrOrderLineDetails.Type, PostedStrOrderLineDetails.Type::Purchase);
        //                         PostedStrOrderLineDetails.SETRANGE(PostedStrOrderLineDetails."Document Type", PostedStrOrderLineDetails."Document Type"::Invoice);
        //                         PostedStrOrderLineDetails.SETRANGE(PostedStrOrderLineDetails."Invoice No.", PurchInvLine."Document No.");
        //                         PostedStrOrderLineDetails.SETRANGE(PostedStrOrderLineDetails."Line No.", PurchInvLine."Line No.");
        //                         IF PostedStrOrderLineDetails.FINDSET THEN
        //                             REPEAT
        //                                     IF PostedStrOrderLineDetails."Tax/Charge Type" = PostedStrOrderLineDetails."Tax/Charge Type"::GST THEN
        //                                         Structure_Amount += PostedStrOrderLineDetails."Calculation Value"
        //                                     ELSE BEGIN
        //                                         IF (PostedStrOrderLineDetails."Tax/Charge Group" = 'PACKING') OR
        //                                            (PostedStrOrderLineDetails."Tax/Charge Group" = 'FORWARDING') THEN BEGIN
        //                                             IF NOT PostedStrOrderLineDetails."Payable to Third Party" THEN
        //                                                 Packing_Value += PostedStrOrderLineDetails."Amount (LCY)"
        //                                             ELSE BEGIN
        //                                                 SQLQuery := 'Insert into INVOICE_LINE (INVOICE_ID,ORDERNO,ITEMNO,VENDORID,INVOICE_LINE_NO,' +
        //                                                            ' RECEIPT_NUMBER,PACKING_VALUE, ' +
        //                                                            ' INVOICE_NUMBER,RECEIPT_LINE_NO,INVOICED_DATE,ORDER_LINE_NO,BILLNO,LOCATION_CODE,CREATION_DATE) ' +
        //                                                            ' VALUES (seq_Invoice_ID.NEXTVAL,''' + Order_No + ''',''' + ItemNo + ''','''
        //                                                            + PostedStrOrderLineDetails."Third Party Code" + ''','''
        //                                                            + FORMAT(PurchInvLine."Line No.") + ''','''
        //                                                            + PurchInvLine."Receipt No." + ''',''' +
        //                                                            CommaRemoval(FORMAT(ROUND(PostedStrOrderLineDetails."Amount (LCY)", 0.01))) + ''',''' +
        //                                                            PurchInvLine."Document No." + ''',''' + FORMAT(PurchInvLine."Receipt Document Line No.") + ''',''' +
        //                                                            FORMAT(PurchInvHeader."Vendor Invoice Date", 0, '<Day>-<Month Text,3>-<Year4>') + ''',''' +
        //                                                            FORMAT(OrderLineNo) + ''',''' +
        //                                                            FORMAT(PurchInvHeader."Vendor Invoice No.") + ''',''' +
        //                                                            PurchInvLine."Location Code" + ''',''' +
        //                                                            FORMAT(TODAY, 0, '<Day>-<Month Text,3>-<Year4>') + ''')';

        //                                                 SQLConnection.Execute(SQLQuery);//Rev01
        //                                             END;
        //                                         END
        //                                         ELSE
        //                                             IF PostedStrOrderLineDetails."Tax/Charge Group" = 'FREIGHT' THEN BEGIN
        //                                                 IF NOT PostedStrOrderLineDetails."Payable to Third Party" THEN
        //                                                     Frieght_Value += PostedStrOrderLineDetails."Amount (LCY)"
        //                                                 ELSE BEGIN
        //                                                     SQLQuery := 'Insert into INVOICE_LINE (INVOICE_ID,ORDERNO,ITEMNO,VENDORID,INVOICE_LINE_NO,' +
        //                                                                ' RECEIPT_NUMBER,FREIGHT_CHARGES, ' +
        //                                                                ' INVOICE_NUMBER,RECEIPT_LINE_NO,INVOICED_DATE,ORDER_LINE_NO,BILLNO,LOCATION_CODE,CREATION_DATE) ' +
        //                                                                ' VALUES (seq_Invoice_ID.NEXTVAL,''' + Order_No + ''',''' + ItemNo + ''','''
        //                                                                + PostedStrOrderLineDetails."Third Party Code" + ''','''
        //                                                                + FORMAT(PurchInvLine."Line No.") + ''','''
        //                                                                + PurchInvLine."Receipt No." + ''',''' +
        //                                                                CommaRemoval(FORMAT(ROUND(PostedStrOrderLineDetails."Amount (LCY)", 0.01))) + ''',''' +
        //                                                                PurchInvLine."Document No." + ''',''' + FORMAT(PurchInvLine."Receipt Document Line No.") + ''',''' +
        //                                                                FORMAT(PurchInvHeader."Vendor Invoice Date", 0, '<Day>-<Month Text,3>-<Year4>') + ''',''' +
        //                                                                FORMAT(PurchRcptLine."Order Line No.") + ''',''' +
        //                                                                FORMAT(PurchInvHeader."Vendor Invoice No.") + ''',''' +
        //                                                                PurchInvLine."Location Code" + ''',''' +
        //                                                                FORMAT(TODAY, 0, '<Day>-<Month Text,3>-<Year4>') + ''')';

        //                                                     SQLConnection.Execute(SQLQuery);//Rev01
        //                                                 END;
        //                                             END
        //                                             ELSE
        //                                                 IF PostedStrOrderLineDetails."Tax/Charge Group" = 'INSURANCE' THEN BEGIN
        //                                                     IF NOT PostedStrOrderLineDetails."Payable to Third Party" THEN
        //                                                         Insurance_Value += PostedStrOrderLineDetails."Amount (LCY)";
        //                                                 END ELSE
        //                                                     IF PostedStrOrderLineDetails."Tax/Charge Group" = 'ADD.DUTY' THEN
        //                                                         Additional_Duty += PostedStrOrderLineDetails."Amount (LCY)"
        //                                                     ELSE
        //                                                         IF (PostedStrOrderLineDetails."Tax/Charge Group" = 'SERVICE') OR
        //                                                            (PostedStrOrderLineDetails."Tax/Charge Code" = 'SERVICETAX') OR
        //                                                            (FORMAT(PostedStrOrderDetails."Tax/Charge Type") = 'Service Tax') THEN BEGIN
        //                                                             IF NOT PostedStrOrderLineDetails."Payable to Third Party" THEN
        //                                                                 Service_Amount += PostedStrOrderLineDetails."Amount (LCY)"
        //                                                             ELSE BEGIN
        //                                                                 SQLQuery := 'Insert into INVOICE_LINE (INVOICE_ID,ORDERNO,ITEMNO,VENDORID,INVOICE_LINE_NO,' +
        //                                                                            ' RECEIPT_NUMBER,SERVICE_AMOUNT, ' +
        //                                                                            ' INVOICE_NUMBER,RECEIPT_LINE_NO,INVOICED_DATE,ORDER_LINE_NO,BILLNO,LOCATION_CODE,CREATION_DATE) ' +
        //                                                                            ' VALUES (seq_Invoice_ID.NEXTVAL,''' + Order_No + ''',''' + ItemNo + ''','''
        //                                                                            + PostedStrOrderLineDetails."Third Party Code" + ''','''
        //                                                                            + FORMAT(PurchInvLine."Line No.") + ''','''
        //                                                                            + PurchInvLine."Receipt No." + ''',''' +
        //                                                                            CommaRemoval(FORMAT(ROUND(PostedStrOrderLineDetails."Amount (LCY)", 0.01))) + ''',''' +
        //                                                                            PurchInvLine."Document No." + ''',''' + FORMAT(PurchInvLine."Receipt Document Line No.") + ''',''' +
        //                                                                            FORMAT(PurchInvHeader."Vendor Invoice Date", 0, '<Day>-<Month Text,3>-<Year4>') + ''',''' +
        //                                                                            FORMAT(PurchRcptLine."Order Line No.") + ''',''' +
        //                                                                            FORMAT(PurchInvHeader."Vendor Invoice No.") + ''',''' +
        //                                                                            PurchInvLine."Location Code" + ''',''' +
        //                                                                            FORMAT(TODAY, 0, '<Day>-<Month Text,3>-<Year4>') + ''')';

        //                                                                 SQLConnection.Execute(SQLQuery);//Rev01
        //                                                             END;
        //                                                         END ELSE
        //                                                             IF FORMAT(PostedStrOrderDetails."Tax/Charge Type") = 'E.CESS' THEN BEGIN
        //                                                                 IF PostedStrOrderLineDetails."Payable to Third Party" THEN BEGIN
        //                                                                     SQLQuery := 'Insert into INVOICE_LINE (INVOICE_ID,ORDERNO,ITEMNO,VENDORID,INVOICE_LINE_NO,' +
        //                                                                                ' RECEIPT_NUMBER,EXCISE, ' +
        //                                                                                ' INVOICE_NUMBER,RECEIPT_LINE_NO,INVOICED_DATE,ORDER_LINE_NO,BILLNO,LOCATION_CODE,CREATION_DATE) ' +
        //                                                                                ' VALUES (seq_Invoice_ID.NEXTVAL,''' + Order_No + ''',''' + ItemNo + ''','''
        //                                                                                + PostedStrOrderLineDetails."Third Party Code" + ''','''
        //                                                                                + FORMAT(PurchInvLine."Line No.") + ''','''
        //                                                                                + PurchInvLine."Receipt No." + ''',''' +
        //                                                                                CommaRemoval(FORMAT(ROUND(PostedStrOrderLineDetails."Amount (LCY)", 0.01))) + ''',''' +
        //                                                                                PurchInvLine."Document No." + ''',''' + FORMAT(PurchInvLine."Receipt Document Line No.") + ''',''' +
        //                                                                                FORMAT(PurchInvHeader."Vendor Invoice Date", 0, '<Day>-<Month Text,3>-<Year4>') + ''',''' +
        //                                                                                FORMAT(PurchRcptLine."Order Line No.") + ''',''' +
        //                                                                                FORMAT(PurchInvHeader."Vendor Invoice No.") + ''',''' +
        //                                                                                PurchInvLine."Location Code" + ''',''' +
        //                                                                                FORMAT(TODAY, 0, '<Day>-<Month Text,3>-<Year4>') + ''')';

        //                                                                     SQLConnection.Execute(SQLQuery);//Rev01
        //                                                                 END;
        //                                                             END ELSE
        //                                                                 IF (FORMAT(PostedStrOrderDetails."Tax/Charge Code") = 'EXCISE') AND
        //                                                                      (PostedStrOrderLineDetails."Payable to Third Party") THEN BEGIN
        //                                                                     SQLQuery := 'Insert into INVOICE_LINE (INVOICE_ID,ORDERNO,ITEMNO,VENDORID,INVOICE_LINE_NO,' +
        //                                                                                ' RECEIPT_NUMBER,EXCISE, ' +
        //                                                                                ' INVOICE_NUMBER,RECEIPT_LINE_NO,INVOICED_DATE,ORDER_LINE_NO,BILLNO,LOCATION_CODE,CREATION_DATE) ' +
        //                                                                                ' VALUES (seq_Invoice_ID.NEXTVAL,''' + Order_No + ''',''' + ItemNo + ''','''
        //                                                                                 + PostedStrOrderLineDetails."Third Party Code" + ''','''
        //                                                                                  + FORMAT(PurchInvLine."Line No.") + ''','''
        //                                                                                  + PurchInvLine."Receipt No." + ''',''' +
        //                                                                                  CommaRemoval(FORMAT(ROUND(PostedStrOrderLineDetails."Amount (LCY)", 0.01))) + ''',''' +
        //                                                                                  PurchInvLine."Document No." + ''',''' + FORMAT(PurchInvLine."Receipt Document Line No.") + ''',''' +
        //                                                                                  FORMAT(PurchInvHeader."Vendor Invoice Date", 0, '<Day>-<Month Text,3>-<Year4>') + ''',''' +
        //                                                                                  FORMAT(PurchRcptLine."Order Line No.") + ''',''' +
        //                                                                                  FORMAT(PurchInvHeader."Vendor Invoice No.") + ''',''' +
        //                                                                                  PurchInvLine."Location Code" + ''',''' +
        //                                                                                  FORMAT(TODAY, 0, '<Day>-<Month Text,3>-<Year4>') + ''')';
        //                                                                     SQLConnection.Execute(SQLQuery);//Rev01
        //                                                                 END;
        //                                         Structure_Amount += PostedStrOrderLineDetails."Amount (LCY)";
        //                                     END;
        //                             UNTIL PostedStrOrderLineDetails.NEXT = 0;
        //                     END;
        //                 END; // End of if not sample
        //             END;

        //             IF (PurchInvLine."No." <> '') AND (inv_id = 0) THEN BEGIN
        //                 IF ((PurchInvHeader.Structure = 'GST') OR (PurchInvHeader.Structure = 'PURCH_GST')) AND (PurchInvLine."GST Group Code" <> 'RCM') THEN BEGIN
        //                     GST_Amount := PurchInvLine."Total GST Amount";
        //                 END
        //                 ELSE
        //                     IF ((PurchInvHeader.Structure = 'GST') OR (PurchInvHeader.Structure = 'PURCH_GST')) AND (PurchInvLine."GST Group Code" = 'RCM') THEN BEGIN
        //                         //OtherDeductions := OtherDeductions + PurchInvLine."Total GST Amount";
        //                         RCMDeductions := PurchInvLine."Total GST Amount";
        //                     END
        //                     ELSE
        //                         IF PurchInvLine."Tax Area Code" = 'PURCH VAT' THEN
        //                             VAT_AMOUNT := PurchInvLine."Tax Amount"
        //                         ELSE
        //                             CST_AMOUNT := PurchInvLine."Tax Amount";

        //                 IF PurchInvLine."Location Code" = 'CS STR' THEN
        //                     Dept := 'CS'
        //                 ELSE
        //                     Dept := 'NORMAL';
        //                 OtherDeductions := PurchInvLine."TDS Amount";
        //                 //Added by Sundar on 26-03-12 to pre check the values that are flowing to Cash flow.
        //                 IF NOT (PurchInvHeader.Structure IN ['FORIEGN', 'PUR_FR_GST']) THEN BEGIN
        //                     IF (ABS(ROUND(PurchInvLine."Amount To Vendor", 0.01) - ((PurchInvLine.Quantity * PurchInvLine."Unit Cost (LCY)")
        //                                                                              + ROUND(VAT_AMOUNT, 0.01)
        //                                                                              + ROUND(PurchInvLine."Excise Amount", 0.01)
        //                                                                              + ROUND(CST_AMOUNT, 0.01)
        //                                                                              + ROUND(Packing_Value, 0.01)
        //                                                                              + ROUND(Frieght_Value, 0.01)
        //                                                                              + ROUND(Insurance_Value, 0.01)
        //                                                                              + ROUND(Additional_Duty, 0.01)
        //                                                                              + ROUND(Service_Amount, 0.01)
        //                                                                              + ROUND(GST_Amount, 0.01)
        //                                                                              - ROUND(OtherDeductions, 0.01))) > 5) AND (Purch_Line.Sample = FALSE) AND (NOT (UPPERCASE(USERID) IN ['EFFTRONICS\RAJANI', 'EFFTRONICS\SITARAJYAM', 'EFFTRONICS\SUJANI'])) THEN
        //                         ERROR('PLEASE CONTACT ERP TEAM');
        //                 END;
        //                 IF (Purch_Line.Sample = FALSE) THEN  // Condition added by Pranavi on 09-feb-2016 for not flowing to cf receipt linesif sample items
        //                 BEGIN
        //                     SQLQuery := 'Insert into INVOICE_LINE (INVOICE_ID,ORDERNO,ITEMNO,VENDORID,INVOICE_LINE_NO,MATERIAL_VALUE,' +
        //                                 ' RECEIPT_NUMBER,INVOICED_AMOUNT,VAT,EXCISE,CST,PACKING_VALUE,INSURANCE,FREIGHT_CHARGES,ADD_DUTY,BILLED_UNITS, ' +
        //                                 ' SERVICE_AMOUNT,INVOICE_NUMBER,RECEIPT_LINE_NO,INVOICED_DATE,ORDER_LINE_NO,BILLNO,DEPT_WISE,LOCATION_CODE,CREATION_DATE) ' +
        //                                 ' VALUES (seq_Invoice_ID.NEXTVAL,''' + Order_No + ''',''' + ItemNo + ''','''
        //                                 + PurchInvLine."Buy-from Vendor No." + ''','''
        //                                 + FORMAT(PurchInvLine."Line No.") + ''','''
        //                                 + CommaRemoval(FORMAT(PurchInvLine.Quantity * PurchInvLine."Unit Cost (LCY)")) + ''','''
        //                                 + PurchInvLine."Receipt No." + ''',''' +
        //                                 CommaRemoval(FORMAT(ROUND(PurchInvLine."Amount To Vendor", 0.01))) + ''',''' +
        //                                 CommaRemoval(FORMAT(ROUND(VAT_AMOUNT + GST_Amount, 0.01))) + ''',''' +//b2bcommented for merging purpose
        //                                 CommaRemoval(FORMAT(ROUND(PurchInvLine."Excise Amount", 0.01))) + ''',''' +
        //                                 CommaRemoval(FORMAT(ROUND(CST_AMOUNT, 0.01))) + ''',''' +
        //                                 CommaRemoval(FORMAT(ROUND(Packing_Value, 0.01))) + ''',''' +
        //                                 CommaRemoval(FORMAT(ROUND(Frieght_Value, 0.01))) + ''',''' +
        //                                 CommaRemoval(FORMAT(ROUND(Insurance_Value, 0.01))) + ''',''' +
        //                                 CommaRemoval(FORMAT(ROUND(Additional_Duty, 0.01))) + ''',''' +
        //                                 CommaRemoval(FORMAT(ROUND(PurchInvLine.Quantity, 0.0001))) + ''',''' +
        //                                 CommaRemoval(FORMAT(ROUND(Service_Amount, 0.01))) + ''',''' +
        //                                 PurchInvLine."Document No." + ''',''' + DELCHR(FORMAT(PurchInvLine."Receipt Document Line No."), '=', ',') + ''',''' +
        //                                 FORMAT(PurchInvHeader."Vendor Invoice Date", 0, '<Day>-<Month Text,3>-<Year4>') + ''',''' +
        //                                 DELCHR(FORMAT(OrderLineNo), '=', ',') + ''',''' +
        //                                 FORMAT(PurchInvHeader."Vendor Invoice No.") + ''',''' +
        //                                 Dept + ''',''' +
        //                                 PurchInvLine."Location Code" + ''',''' +
        //                                 FORMAT(TODAY, 0, '<Day>-<Month Text,3>-<Year4>') + ''')';
        //                     RecordSet := SQLConnection.Execute(SQLQuery);//Rec01
        //                 END; // End of if not sample
        //             END;
        //         UNTIL PurchInvLine.NEXT = 0;

        //     SQLConnection.CommitTrans;
        //     //RecordSet.Close;
        //     SQLConnection.Close;
        //     ConnectionOpen := 0;
        // END;
    end;

    procedure CommaRemoval(Base: Text[30]) Converted: Text[30];
    var
        i: Integer;
    begin
        FOR i := 1 TO STRLEN(Base) DO BEGIN
            IF COPYSTR(Base, i, 1) <> ',' THEN
                Converted += COPYSTR(Base, i, 1);
        END;
        EXIT(Converted);
    end;

    procedure Purch_Receipt_in_CF(PurchRcptHeader: Record "Purch. Rcpt. Header");
    var
        "G|l": Record "General Ledger Setup";
        Dept: Code[10];
        Vend: Record Vendor;
        PurchRcptLine: Record "Purch. Rcpt. Line";
    begin
        // "G|l".GET;
        // IF "G|l"."Active ERP-CF Connection" THEN BEGIN
        //     IF ISCLEAR(SQLConnection) THEN
        //         CREATE(SQLConnection, FALSE, TRUE);

        //     SQLConnection.ConnectionString := 'DSN=CASHFLOW;UID=cashflowuser;PASSWORD=firewall123;SERVER=oracle_80;';
        //     SQLConnection.Open;
        //     SQLConnection.BeginTrans;

        //     PurchRcptLine.RESET;
        //     PurchRcptLine.SETRANGE("Document No.", PurchRcptHeader."No.");
        //     PurchRcptLine.SETFILTER(Quantity, '>%1', 0);
        //     IF PurchRcptLine.FINDSET THEN
        //             REPEAT
        //                 IF (PurchRcptLine.Sample = FALSE) THEN  // Condition added by Pranavi on 09-feb-2016 for not flowing to cf receipt linesif sample items
        //                 BEGIN
        //                     Vend.RESET;
        //                     IF Vend.GET(PurchRcptLine."Buy-from Vendor No.") THEN BEGIN
        //                         IF Vend."Consider Vendor Invoice Date" THEN BEGIN
        //                             SQLQuery := 'Insert into RECEIPT_LINE (RECEIPT_ID,ORDERNO,ITEMNO,VENDORID,INWARD_DATE,INWARDED_UNITS,' +
        //                                       'BILLNO,RECEIPT_NO, ' +
        //                                       ' RECEIPT_LINE_NO,INVOICED_DATE,ORDER_LINE_NO,DEPT_WISE)' +
        //                                       ' VALUES (seq_Receipt_ID.NEXTVAL,''' + PurchRcptLine."Order No." + ''',''' + PurchRcptLine."No." + ''','''
        //                                       + PurchRcptLine."Buy-from Vendor No." + ''',''' +
        //                                       FORMAT(PurchRcptHeader."Posting Date", 0, '<Day>-<Month Text,3>-<Year4>')
        //                                       + ''',''' + CommaRemoval(FORMAT(ROUND(PurchRcptLine.Quantity, 0.01))) + ''','''
        //                                       + FORMAT(PurchRcptHeader."Vendor Order No.") + ''',''' + PurchRcptLine."Document No." + ''',''' +
        //                                       FORMAT(PurchRcptLine."Line No.") + ''',''' +
        //                                       FORMAT(PurchRcptHeader."Vendor Invoice Date", 0, '<Day>-<Month Text,3>-<Year4>') + ''',''' +
        //                                       FORMAT(PurchRcptLine."Order Line No.") + ''',''' + Dept + ''')';
        //                         END ELSE BEGIN
        //                             SQLQuery := 'Insert into RECEIPT_LINE (RECEIPT_ID,ORDERNO,ITEMNO,VENDORID,INWARD_DATE,INWARDED_UNITS,'
        //                                         + ' BILLNO,RECEIPT_NO, ' +
        //                                         ' RECEIPT_LINE_NO,ORDER_LINE_NO,DEPT_WISE)' +
        //                                         ' VALUES (seq_Receipt_ID.NEXTVAL,''' + PurchRcptLine."Order No." + ''',''' + PurchRcptLine."No." + ''','''
        //                                         + PurchRcptLine."Buy-from Vendor No." + ''',''' +
        //                                         FORMAT(PurchRcptHeader."Posting Date", 0, '<Day>-<Month Text,3>-<Year4>')
        //                                         + ''',''' + CommaRemoval(FORMAT(ROUND(PurchRcptLine.Quantity, 0.01))) + ''','''
        //                                         + FORMAT(PurchRcptHeader."Vendor Order No.") + ''',''' + PurchRcptLine."Document No." + ''',''' +
        //                                         FORMAT(PurchRcptLine."Line No.") + ''',''' + FORMAT(PurchRcptLine."Order Line No.") + ''',''' + Dept + ''')';
        //                         END;
        //                         SQLConnection.Execute(SQLQuery);//Rev01
        //                     END;
        //                 END;
        //             UNTIL PurchRcptLine.NEXT = 0;

        //     SQLConnection.CommitTrans;
        //     //RecordSet.Close;
        //     SQLConnection.Close;
        //     ConnectionOpen := 0;
        // END ELSE
        //     ERROR('Cashflow Connection is not Active!');
    end;

    procedure Stenicil_Alerts(pcb_number: Text; Issue_Type: Integer);
    begin
        //Item_no:= 'ECPCBDS00485';
        /* Item_no := pcb_number;
         PCB.RESET();
         PCB.SETRANGE("PCB No.", Item_no);
         PCB.SETFILTER(Stencil, '<>%1', '');
         IF PCB.FINDSET THEN BEGIN
             Subject := 'Stencil Configuration Details in Machine';
             Body := '';
             Mail.CreateMessage('Efftronics Systems Pvt. Ltd-ERP', 'erp@efftronics.com', 'layouts1@efftronics.com', Subject, Body, TRUE);
             Mail.AppendBody('<html><head><style> divone{background-color: white; width: 700px; padding: 20px; border-style:solid ; border-color:#33E6FF;  margin: 20px;} </style></head>');
             Mail.AppendBody('<body><div style="border-color:#33E6FF;  margin: 20px; border-width:15px;   border-style:solid; padding: 20px; width: 600px;"><label><font size="6">Stencil Configuration Details in Machine</font></label>');
             Mail.AppendBody('<hr style=solid; color= #3333CC>');
             Mail.AppendBody('<h>Dear Sir/Mam ,</h><br><br>');
             //Mail.AppendBody('<P> The below is the Information Regarding Stencil Configuration status in Machine, </P>');
             Mail.AppendBody('<table border="1" style="border-collapse:collapse; width:100%; font-size:10pt;"><tr><th >PCB No.</th><th>PCB Description</th><th>Configuration Status</th></tr>');
             Bom_cnt := 0;
             PBH.RESET;
             PBL.RESET;
             PBL.SETRANGE("No.", Item_no);
             IF PBL.FINDSET THEN
                     REPEAT
                         IF COPYSTR(PBL."Production BOM No.", 1, 7) = 'ECPBPCB' THEN BEGIN
                             PBH.SETRANGE("No.", PBL."Production BOM No.");
                             IF PBH.FINDSET THEN BEGIN
                                 Bom_cnt := Bom_cnt + 1;
                                 Machine_Stencil_Check(PBH."No.");
                                 Configured_pcb := Machine_Stencil_Check(PBH."No.");
                                 IF Configured_pcb = PBH."No." THEN
                                     // MESSAGE(PBH."No." +'Configured' + Configured_pcb)
                                     // Configured_status:='Configured'
                                     Mail.AppendBody('<tr style="color:green"><td>' + PBH."No." + '</td><td>' + PBH.Description + '</td><td>Configured</td></tr>')
                                 ELSE
                                     //MESSAGE(PBH."No." +'Not Configured' + Configured_pcb);
                                     // Configured_status:='Not Configured';
                                     /* BEGIN
                                         RPO.RESET;
                                         RPOLine.RESET;
                                         RPOLine.SETRANGE("Production BOM No.",PBH."No.");
                                         RPOLine.SETFILTER("Remaining Quantity",'>%1',0);
                                         IF RPOLine.FINDSET THEN
                                           BEGIN
                                              RPO.SETRANGE(RPO."No.",RPOLine."Prod. Order No.");
                                              RPO.SETRANGE(RPO.Status,3);
                                              IF RPO.FINDFIRST THEN
                                                BEGIN
                                                    Temp_Production_Acknowledgement_Table.INIT;
                                                   // Temp_Production_Acknowledgement_Table."Entry No":=Production_Ack_Table."Entry No"+2;
                                                    Temp_Production_Acknowledgement_Table.SourceNo := RPO."No.";
                                                    Temp_Production_Acknowledgement_Table.BomNo:=PBH."No.";
                                                    Temp_Production_Acknowledgement_Table.Bom_status:=PBH.Status;
                                                    Temp_Production_Acknowledgement_Table.Production_Start_Date:=RPO."Prod Start date";
                                                    Temp_Production_Acknowledgement_Table.Created_Date:=CURRENTDATETIME;
                                                    Temp_Production_Acknowledgement_Table.Issue_Raised_Cnt := Temp_Production_Acknowledgement_Table.Issue_Raised_Cnt+1;
                                                    Temp_Production_Acknowledgement_Table.Issue_Type:= Issue_Type;
                                                    Temp_Production_Acknowledgement_Table.INSERT;

                                                END;
                                           END;
                                         Mail.AppendBody('<tr style="color:red"><td>'+PBH."No."+'</td><td>'+PBH.Description+'</td><td>Not Configured</td></tr>');
                                      END;  */
        //  Mail.AppendBody('<tr style="color:red"><td>' + PBH."No." + '</td><td>' + PBH.Description + '</td><td>Not Configured</td></tr>');

        //  END;
        //  END;//
        // UNTIL PBL.NEXT = 0;


        /*  Mail.AppendBody('</table><br>');
          Mail.AppendBody('<p align ="Center" style="color:green">Green color Indicates Configured in Machine</p>');
          Mail.AppendBody('<p align ="Center" style="color:red">Red color Indicates Not Configured in Machine</p>');
          Mail.AppendBody('<p align ="left"> Regards,<br>ERP Team </p>');
          Mail.AppendBody('<p align = "center">:: Note: Auto Generated mail from ERP</b> :: </b></P></div></body></html>');
          Mail.AddCC('erp@efftronics.com');
          Mail.AddCC('controlroom@efftronics.com');
          IF Configured_pcb_count <> Bom_cnt THEN
              Mail.Send;*/
        /*BEGIN
        Mail.Send;
          IF Temp_Production_Acknowledgement_Table.SourceNo <> '' THEN
            BEGIN
            REPEAT
                 Production_Ack_Table.RESET;
                 Production_Ack_Table.SETRANGE(SourceNo,Temp_Production_Acknowledgement_Table.SourceNo);
                 Production_Ack_Table.SETRANGE(BomNo,Temp_Production_Acknowledgement_Table.BomNo);
                 Production_Ack_Table.SETRANGE(Issue_Type,Temp_Production_Acknowledgement_Table.Issue_Type);
                 IF Production_Ack_Table.FINDSET THEN
                    BEGIN
                          //Production_Ack_Tablle := TODAY;
                          Production_Ack_Table.Modified_Date := CURRENTDATETIME;
                          Production_Ack_Table.Issue_Raised_Cnt := Production_Ack_Table.Issue_Raised_Cnt +1;
                          Production_Ack_Table.MODIFY;
                    END
                 ELSE
                    BEGIN
                          Production_Ack_Table.INIT;
                          Production_Ack_Table.SourceNo :=Temp_Production_Acknowledgement_Table.SourceNo;
                          Production_Ack_Table.BomNo:=Temp_Production_Acknowledgement_Table.BomNo;
                          Production_Ack_Table.Bom_status:=Temp_Production_Acknowledgement_Table.Bom_status;
                          Production_Ack_Table.Production_Start_Date:= Temp_Production_Acknowledgement_Table.Production_Start_Date;
                          Production_Ack_Table.Created_Date:= Temp_Production_Acknowledgement_Table.Created_Date;
                          Production_Ack_Table.Mail_sent:=TRUE;
                          Production_Ack_Table.Issue_Raised_Cnt :=Temp_Production_Acknowledgement_Table.Issue_Raised_Cnt;
                          Production_Ack_Table.Issue_Type := Temp_Production_Acknowledgement_Table.Issue_Type;
                          Production_Ack_Table.INSERT;
                    END;
             UNTIL Temp_Production_Acknowledgement_Table.NEXT=0;
              MESSAGE('Data logged');
            END;
        END;*/
    END;



    local procedure Machine_Stencil_Check(pcb_no: Text) Mch_cnfgrd: Text[50];
    begin
        // IF ISCLEAR(SQLConnection) THEN
        //     CREATE(SQLConnection, FALSE, TRUE);

        // IF ISCLEAR(RecordSet) THEN
        //     CREATE(RecordSet, FALSE, TRUE);

        // IF ConnectionOpen <> 1 THEN BEGIN
        //     SQLConnection.ConnectionString := 'DSN=prmuser;UID=prmuser;PASSWORD=mrpffe06;SERVER=oracle_80;';
        //     SQLConnection.Open;
        //     ConnectionOpen := 1;
        // END;

        // //pcb_no := 'ECPBPCB01384';

        // SQLQuery := 'SELECT PCB_NO FROM' +
        // '(select DISTINCT regexp_substr(PCB_NO,''[^,]+'', 1, level) as PCB_NO from (Select Distinct PCB_NO FROM MY9_COMPO_DETAILS WHERE PCB_NO LIKE  ' + '''%' + pcb_no + '%''' + ')' +
        //     'connect by  regexp_substr(PCB_NO, ''[^,]+'', 1, level) is not null  ) WHERE PCB_NO LIKE  ' + '''%' + pcb_no + '%''' + ' ';
        // //SQLQuery:='SELECT DISTINCT PCB_NO from MY9_COMPO_DETAILS_DUMMY where PCB_NO like '+'''%'+pcb_no+'%'''+'';
        // Configured_pcb_count := 0;
        // //MESSAGE(SQLQuery);
        // RecordSet := SQLConnection.Execute(SQLQuery, RowCount);
        // //MESSAGE(FORMAT(RowCount));
        // IF NOT ((RecordSet.BOF) OR (RecordSet.EOF)) THEN
        //     RecordSet.MoveFirst;
        // WHILE NOT RecordSet.EOF DO BEGIN
        //     // MESSAGE(FORMAT(RecordSet.Fields.Item('PCB_NO').Value));
        //     EVALUATE(STENCIL_CONFIGURED_NO, FORMAT(RecordSet.Fields.Item('PCB_NO').Value));
        //     Configured_pcb_count := Configured_pcb_count + 1;
        //     RecordSet.MoveNext;
        //     EXIT(STENCIL_CONFIGURED_NO);
        // END;

        // //RecordSet.Close;
        // //SQLConnection.Close;
    end;

    local procedure Stencil_Mail_Alerts(configured_no: Text);
    begin
        /* Subject := 'Stencil Configuration Details';
         Body := '';
         Mail.CreateMessage('Efftronics Systems Pvt. Ltd-ERP', 'erp@efftronics.com', 'sujani@efftronics.com', Subject, Body, TRUE);
         Mail.AppendBody('<html><head><style> divone{background-color: white; width: 700px; padding: 20px; border-style:solid ; border-color:#33E6FF;  margin: 20px;} </style></head>');
         Mail.AppendBody('<body><div style="border-color:#33E6FF;  margin: 20px; border-width:15px;   border-style:solid; padding: 20px; width: 600px;"><label><font size="6">Stencil Configuration Details</font></label>');
         Mail.AppendBody('<hr style=solid; color= #3333CC>');
         Mail.AppendBody('<h>Dear Sir/Mam ,</h><br><br>');
         Mail.AppendBody('<P> The below is the Information Regarding Stencil Configuration status in Machine, </P>');
         Mail.AppendBody('<table border="1" style="border-collapse:collapse; width:100%; font-size:10pt;"><tr><th >PCB No.</th><th>PCB Description</th><th>Configuration Status</th></tr>');

         /*IF PurchaseHeader.FINDSET THEN
         REPEAT
           IF TODAY - PurchaseHeader."Order Date" > 2 THEN
           BEGIN
             Mail.AppendBody('<tr><td>'+PurchaseHeader."No."+'</td><td>'+PurchaseHeader."Buy-from Vendor Name"+'</td><td>'+FORMATPurchaseHeader."Order Date"+'</td><td>'+FORMATTODAY - PurchaseHeader."Order Date"+'</td></tr>';
             Mail_count+=1;
           END;
         UNTIL PurchaseHeader.NEXT = 0;*/

        //   Mail.AppendBody('</table><br>');
        //  Mail.AppendBody('<p align ="left"> Regards,<br>ERP Team </p>');
        //   Mail.AppendBody('<br><p align = "center">:: Note: Auto Generated mail from ERP</b> :: </b></P></div></body></html>');

        // Mail.AppendBody(Body;
        //Mail.Send;

    end;

    procedure payment_terms_based_amount_to_cfl(orderno: Code[40]; externaldocno: Code[10]; postingdate: Date) duedays: Integer;
    var
        SIH: Record "Sales Invoice Header";
    begin
        SIH.RESET;
        SIH.SETFILTER("Order No.", orderno);
        SIH.SETFILTER("External Document No.", externaldocno);
        SIH.SETRANGE("Posting Date", postingdate);
        IF SIH.FINDFIRST THEN BEGIN
            payment.RESET;
            payment.SETRANGE(Code, SIH."Payment Terms Code");
            IF payment.FINDFIRST THEN BEGIN
                // MESSAGE(FORMAT(payment.DueDays));
                EXIT(payment.DueDays);
            END;
        END;
    end;

    //event SQLConnection(pError : Automation "'{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8:'{00000500-0000-0010-8000-00AA006D2EA4}':''{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8'.Error";adStatus : Integer;pConnection : Automation "'{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8:'{00000550-0000-0010-8000-00AA006D2EA4}':''{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8'._Connection");
    //begin
    /*
    */
    //end;

    //event SQLConnection(TransactionLevel : Integer;pError : Automation "'{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8:'{00000500-0000-0010-8000-00AA006D2EA4}':''{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8'.Error";adStatus : Integer;pConnection : Automation "'{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8:'{00000550-0000-0010-8000-00AA006D2EA4}':''{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8'._Connection");
    //begin
    /*
    */
    //end;

    //event SQLConnection(pError : Automation "'{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8:'{00000500-0000-0010-8000-00AA006D2EA4}':''{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8'.Error";adStatus : Integer;pConnection : Automation "'{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8:'{00000550-0000-0010-8000-00AA006D2EA4}':''{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8'._Connection");
    //begin
    /*
    */
    //end;

    //event SQLConnection(pError : Automation "'{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8:'{00000500-0000-0010-8000-00AA006D2EA4}':''{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8'.Error";adStatus : Integer;pConnection : Automation "'{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8:'{00000550-0000-0010-8000-00AA006D2EA4}':''{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8'._Connection");
    //begin
    /*
    */
    //end;

    //event SQLConnection(var Source : Text;CursorType : Integer;LockType : Integer;var Options : Integer;adStatus : Integer;pCommand : Automation "'{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8:'{B08400BD-F9D1-4D02-B856-71D5DBA123E9}':''{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8'._Command";pRecordset : Automation "'{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8:'{00000556-0000-0010-8000-00AA006D2EA4}':''{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8'._Recordset";pConnection : Automation "'{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8:'{00000550-0000-0010-8000-00AA006D2EA4}':''{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8'._Connection");
    //begin
    /*
    */
    //end;

    //event SQLConnection(RecordsAffected : Integer;pError : Automation "'{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8:'{00000500-0000-0010-8000-00AA006D2EA4}':''{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8'.Error";adStatus : Integer;pCommand : Automation "'{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8:'{B08400BD-F9D1-4D02-B856-71D5DBA123E9}':''{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8'._Command";pRecordset : Automation "'{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8:'{00000556-0000-0010-8000-00AA006D2EA4}':''{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8'._Recordset";pConnection : Automation "'{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8:'{00000550-0000-0010-8000-00AA006D2EA4}':''{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8'._Connection");
    //begin
    /*
    */
    //end;

    //event SQLConnection(var ConnectionString : Text;var UserID : Text;var Password : Text;var Options : Integer;adStatus : Integer;pConnection : Automation "'{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8:'{00000550-0000-0010-8000-00AA006D2EA4}':''{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8'._Connection");
    //begin
    /*
    */
    //end;

    //event SQLConnection(pError : Automation "'{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8:'{00000500-0000-0010-8000-00AA006D2EA4}':''{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8'.Error";adStatus : Integer;pConnection : Automation "'{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8:'{00000550-0000-0010-8000-00AA006D2EA4}':''{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8'._Connection");
    //begin
    /*
    */
    //end;

    //event SQLConnection(adStatus : Integer;pConnection : Automation "'{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8:'{00000550-0000-0010-8000-00AA006D2EA4}':''{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8'._Connection");
    //begin
    /*
    */
    //end;

    //event RecordSet(cFields : Integer;"Fields" : Variant;adStatus : Integer;pRecordset : Automation "'{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8:'{00000556-0000-0010-8000-00AA006D2EA4}':''{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8'._Recordset");
    //begin
    /*
    */
    //end;

    //event RecordSet(cFields : Integer;"Fields" : Variant;pError : Automation "'{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8:'{00000500-0000-0010-8000-00AA006D2EA4}':''{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8'.Error";adStatus : Integer;pRecordset : Automation "'{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8:'{00000556-0000-0010-8000-00AA006D2EA4}':''{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8'._Recordset");
    //begin
    /*
    */
    //end;

    //event RecordSet(adReason : Integer;cRecords : Integer;adStatus : Integer;pRecordset : Automation "'{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8:'{00000556-0000-0010-8000-00AA006D2EA4}':''{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8'._Recordset");
    //begin
    /*
    */
    //end;

    //event RecordSet(adReason : Integer;cRecords : Integer;pError : Automation "'{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8:'{00000500-0000-0010-8000-00AA006D2EA4}':''{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8'.Error";adStatus : Integer;pRecordset : Automation "'{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8:'{00000556-0000-0010-8000-00AA006D2EA4}':''{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8'._Recordset");
    //begin
    /*
    */
    //end;

    //event RecordSet(adReason : Integer;adStatus : Integer;pRecordset : Automation "'{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8:'{00000556-0000-0010-8000-00AA006D2EA4}':''{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8'._Recordset");
    //begin
    /*
    */
    //end;

    //event RecordSet(adReason : Integer;pError : Automation "'{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8:'{00000500-0000-0010-8000-00AA006D2EA4}':''{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8'.Error";adStatus : Integer;pRecordset : Automation "'{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8:'{00000556-0000-0010-8000-00AA006D2EA4}':''{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8'._Recordset");
    //begin
    /*
    */
    //end;

    //event RecordSet(adReason : Integer;adStatus : Integer;pRecordset : Automation "'{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8:'{00000556-0000-0010-8000-00AA006D2EA4}':''{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8'._Recordset");
    //begin
    /*
    */
    //end;

    //event RecordSet(adReason : Integer;pError : Automation "'{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8:'{00000500-0000-0010-8000-00AA006D2EA4}':''{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8'.Error";adStatus : Integer;pRecordset : Automation "'{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8:'{00000556-0000-0010-8000-00AA006D2EA4}':''{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8'._Recordset");
    //begin
    /*
    */
    //end;

    //event RecordSet(var fMoreData : Boolean;adStatus : Integer;pRecordset : Automation "'{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8:'{00000556-0000-0010-8000-00AA006D2EA4}':''{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8'._Recordset");
    //begin
    /*
    */
    //end;

    //event RecordSet(Progress : Integer;MaxProgress : Integer;adStatus : Integer;pRecordset : Automation "'{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8:'{00000556-0000-0010-8000-00AA006D2EA4}':''{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8'._Recordset");
    //begin
    /*
    */
    //end;

    //event RecordSet(pError : Automation "'{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8:'{00000500-0000-0010-8000-00AA006D2EA4}':''{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8'.Error";adStatus : Integer;pRecordset : Automation "'{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8:'{00000556-0000-0010-8000-00AA006D2EA4}':''{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8'._Recordset");
    //begin
    /*
    */
    //end;

    //event RecordSet1(cFields : Integer;"Fields" : Variant;adStatus : Integer;pRecordset : Automation "'{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8:'{00000556-0000-0010-8000-00AA006D2EA4}':''{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8'._Recordset");
    //begin
    /*
    */
    //end;

    //event RecordSet1(cFields : Integer;"Fields" : Variant;pError : Automation "'{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8:'{00000500-0000-0010-8000-00AA006D2EA4}':''{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8'.Error";adStatus : Integer;pRecordset : Automation "'{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8:'{00000556-0000-0010-8000-00AA006D2EA4}':''{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8'._Recordset");
    //begin
    /*
    */
    //end;

    //event RecordSet1(adReason : Integer;cRecords : Integer;adStatus : Integer;pRecordset : Automation "'{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8:'{00000556-0000-0010-8000-00AA006D2EA4}':''{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8'._Recordset");
    //begin
    /*
    */
    //end;

    //event RecordSet1(adReason : Integer;cRecords : Integer;pError : Automation "'{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8:'{00000500-0000-0010-8000-00AA006D2EA4}':''{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8'.Error";adStatus : Integer;pRecordset : Automation "'{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8:'{00000556-0000-0010-8000-00AA006D2EA4}':''{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8'._Recordset");
    //begin
    /*
    */
    //end;

    //event RecordSet1(adReason : Integer;adStatus : Integer;pRecordset : Automation "'{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8:'{00000556-0000-0010-8000-00AA006D2EA4}':''{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8'._Recordset");
    //begin
    /*
    */
    //end;

    //event RecordSet1(adReason : Integer;pError : Automation "'{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8:'{00000500-0000-0010-8000-00AA006D2EA4}':''{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8'.Error";adStatus : Integer;pRecordset : Automation "'{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8:'{00000556-0000-0010-8000-00AA006D2EA4}':''{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8'._Recordset");
    //begin
    /*
    */
    //end;

    //event RecordSet1(adReason : Integer;adStatus : Integer;pRecordset : Automation "'{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8:'{00000556-0000-0010-8000-00AA006D2EA4}':''{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8'._Recordset");
    //begin
    /*
    */
    //end;

    //event RecordSet1(adReason : Integer;pError : Automation "'{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8:'{00000500-0000-0010-8000-00AA006D2EA4}':''{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8'.Error";adStatus : Integer;pRecordset : Automation "'{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8:'{00000556-0000-0010-8000-00AA006D2EA4}':''{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8'._Recordset");
    //begin
    /*
    */
    //end;

    //event RecordSet1(var fMoreData : Boolean;adStatus : Integer;pRecordset : Automation "'{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8:'{00000556-0000-0010-8000-00AA006D2EA4}':''{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8'._Recordset");
    //begin
    /*
    */
    //end;

    //event RecordSet1(Progress : Integer;MaxProgress : Integer;adStatus : Integer;pRecordset : Automation "'{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8:'{00000556-0000-0010-8000-00AA006D2EA4}':''{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8'._Recordset");
    //begin
    /*
    */
    //end;

    //event RecordSet1(pError : Automation "'{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8:'{00000500-0000-0010-8000-00AA006D2EA4}':''{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8'.Error";adStatus : Integer;pRecordset : Automation "'{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8:'{00000556-0000-0010-8000-00AA006D2EA4}':''{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8'._Recordset");
    //begin
    /*
    */
    //end;

    //event RecordSet2(cFields : Integer;"Fields" : Variant;adStatus : Integer;pRecordset : Automation "'{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8:'{00000556-0000-0010-8000-00AA006D2EA4}':''{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8'._Recordset");
    //begin
    /*
    */
    //end;

    //event RecordSet2(cFields : Integer;"Fields" : Variant;pError : Automation "'{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8:'{00000500-0000-0010-8000-00AA006D2EA4}':''{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8'.Error";adStatus : Integer;pRecordset : Automation "'{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8:'{00000556-0000-0010-8000-00AA006D2EA4}':''{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8'._Recordset");
    //begin
    /*
    */
    //end;

    //event RecordSet2(adReason : Integer;cRecords : Integer;adStatus : Integer;pRecordset : Automation "'{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8:'{00000556-0000-0010-8000-00AA006D2EA4}':''{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8'._Recordset");
    //begin
    /*
    */
    //end;

    //event RecordSet2(adReason : Integer;cRecords : Integer;pError : Automation "'{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8:'{00000500-0000-0010-8000-00AA006D2EA4}':''{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8'.Error";adStatus : Integer;pRecordset : Automation "'{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8:'{00000556-0000-0010-8000-00AA006D2EA4}':''{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8'._Recordset");
    //begin
    /*
    */
    //end;

    //event RecordSet2(adReason : Integer;adStatus : Integer;pRecordset : Automation "'{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8:'{00000556-0000-0010-8000-00AA006D2EA4}':''{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8'._Recordset");
    //begin
    /*
    */
    //end;

    //event RecordSet2(adReason : Integer;pError : Automation "'{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8:'{00000500-0000-0010-8000-00AA006D2EA4}':''{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8'.Error";adStatus : Integer;pRecordset : Automation "'{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8:'{00000556-0000-0010-8000-00AA006D2EA4}':''{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8'._Recordset");
    //begin
    /*
    */
    //end;

    //event RecordSet2(adReason : Integer;adStatus : Integer;pRecordset : Automation "'{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8:'{00000556-0000-0010-8000-00AA006D2EA4}':''{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8'._Recordset");
    //begin
    /*
    */
    //end;

    //event RecordSet2(adReason : Integer;pError : Automation "'{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8:'{00000500-0000-0010-8000-00AA006D2EA4}':''{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8'.Error";adStatus : Integer;pRecordset : Automation "'{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8:'{00000556-0000-0010-8000-00AA006D2EA4}':''{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8'._Recordset");
    //begin
    /*
    */
    //end;

    //event RecordSet2(var fMoreData : Boolean;adStatus : Integer;pRecordset : Automation "'{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8:'{00000556-0000-0010-8000-00AA006D2EA4}':''{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8'._Recordset");
    //begin
    /*
    */
    //end;

    //event RecordSet2(Progress : Integer;MaxProgress : Integer;adStatus : Integer;pRecordset : Automation "'{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8:'{00000556-0000-0010-8000-00AA006D2EA4}':''{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8'._Recordset");
    //begin
    /*
    */
    //end;

    //event RecordSet2(pError : Automation "'{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8:'{00000500-0000-0010-8000-00AA006D2EA4}':''{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8'.Error";adStatus : Integer;pRecordset : Automation "'{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8:'{00000556-0000-0010-8000-00AA006D2EA4}':''{2A75196C-D9EB-4129-B803-931327F72D5C}' 2.8'._Recordset");
    //begin
    /*
    */
    //end;
}

